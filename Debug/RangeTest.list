
RangeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e698  0800e698  0000f698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf8  0800eaf8  00010494  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaf8  0800eaf8  0000faf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb00  0800eb00  00010494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb00  0800eb00  0000fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb04  0800eb04  0000fb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  0800eb08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  20000494  0800ef9c  00010494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc8  0800ef9c  00010fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abb4  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e4  00000000  00000000  0002b078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0002e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ee  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c0  00000000  00000000  000308ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b3a0  00000000  00000000  0004a2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ec8  00000000  00000000  0006564e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000727c  00000000  00000000  000ff55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001067d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e67c 	.word	0x0800e67c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	0800e67c 	.word	0x0800e67c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_GPIO_EXTI_Callback>:
uint8_t ready=0;
uint16_t mill;
system_t sys;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == LidarTrigger_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <HAL_GPIO_EXTI_Callback+0x16>
    {
     ready=1; // lidar new lecture ready
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <HAL_GPIO_EXTI_Callback+0x24>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
     //mill=lidar_lee_mm(DIR_S);


    }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200004b0 	.word	0x200004b0

0800101c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

	if(htim->Instance== TIM10){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d118      	bne.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x44>
		 printf("Inter \n");
 800102e:	480f      	ldr	r0, [pc, #60]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001030:	f009 ff86 	bl	800af40 <puts>
		 fflush(stdout);
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f009 fe42 	bl	800acc4 <fflush>

		//mill= lidar_lee_mm(DIR_S);

		 if (ready==1){
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10b      	bne.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x44>

			 printf("Inter1 \n");
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800104a:	f009 ff79 	bl	800af40 <puts>
			fflush(stdout);
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4618      	mov	r0, r3
 8001056:	f009 fe35 	bl	800acc4 <fflush>

			measure_ball_position(&sys);
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800105c:	f000 f851 	bl	8001102 <measure_ball_position>
			//ready=0;

		}
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40014400 	.word	0x40014400
 800106c:	0800e698 	.word	0x0800e698
 8001070:	200002d8 	.word	0x200002d8
 8001074:	200004b0 	.word	0x200004b0
 8001078:	0800e6a0 	.word	0x0800e6a0
 800107c:	200004b4 	.word	0x200004b4

08001080 <setupReadingTimer>:


void setupReadingTimer(TIM_HandleTypeDef *htim){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	uint16_t ARR=62499;
 8001088:	f24f 4323 	movw	r3, #62499	@ 0xf423
 800108c:	81fb      	strh	r3, [r7, #14]

  //	ARR=(Read_TS*clock_freq)/Prescaler_lidar;
	__HAL_TIM_SET_PRESCALER(htim, Prescaler_lidar);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	89fa      	ldrh	r2, [r7, #14]
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f007 ffa0 	bl	8008fec <HAL_TIM_Base_Start_IT>

	htim->Instance->EGR = TIM_EGR_UG;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	615a      	str	r2, [r3, #20]
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <system_init>:



void system_init(system_t *sys, uint8_t dir,uint32_t ts){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]

	uint8_t i;

	for (i=0; i<4; i++){
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e00c      	b.n	80010ea <system_init+0x2e>

		rbclear( (((ringbuffer_t *) sys)+i ) );
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fb66 	bl	80017b0 <rbclear>
	for (i=0; i<4; i++){
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d9ef      	bls.n	80010d0 <system_init+0x14>

	//initializing lidar sensor

	//lidar_init( dir);

  	cont_lidar_init( dir, ts);
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fc77 	bl	80069e8 <cont_lidar_init>


}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <measure_ball_position>:

void measure_ball_position(system_t *sys){
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]

	uint16_t pos=0;
 800110a:	2300      	movs	r3, #0
 800110c:	81fb      	strh	r3, [r7, #14]
	//pos=lidar_lee_mm(DIR_S);
	//mill=pos;

}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	@ (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db12      	blt.n	8001190 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	490a      	ldr	r1, [pc, #40]	@ (800119c <__NVIC_DisableIRQ+0x44>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	3320      	adds	r3, #32
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001184:	f3bf 8f4f 	dsb	sy
}
 8001188:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800118a:	f3bf 8f6f 	isb	sy
}
 800118e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80011c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	e000      	b.n	80011cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80011ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f9      	beq.n	80011ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011e0:	687b      	ldr	r3, [r7, #4]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80011f4:	f005 feba 	bl	8006f6c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f8:	f000 f860 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fc:	f000 f9f0 	bl	80015e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001200:	f000 f9c4 	bl	800158c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001204:	f000 f8c4 	bl	8001390 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001208:	f000 f8f0 	bl	80013ec <MX_TIM1_Init>
  MX_TIM10_Init();
 800120c:	f000 f994 	bl	8001538 <MX_TIM10_Init>
  MX_TIM3_Init();
 8001210:	f000 f944 	bl	800149c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
 // lidar_init(dir_s1);



  system_init( &sys , DIR_S,Read_TS);
 8001214:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001218:	2152      	movs	r1, #82	@ 0x52
 800121a:	4820      	ldr	r0, [pc, #128]	@ (800129c <main+0xac>)
 800121c:	f7ff ff4e 	bl	80010bc <system_init>
  HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	@ 0x64
 8001222:	f005 ff15 	bl	8007050 <HAL_Delay>
  setupReadingTimer(&htim10);
 8001226:	481e      	ldr	r0, [pc, #120]	@ (80012a0 <main+0xb0>)
 8001228:	f7ff ff2a 	bl	8001080 <setupReadingTimer>
  startMeasurement();
 800122c:	f005 fc6c 	bl	8006b08 <startMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      ready=0;
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <main+0xb4>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
      NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 8001236:	2019      	movs	r0, #25
 8001238:	f7ff ff8e 	bl	8001158 <__NVIC_DisableIRQ>
	  millimeter =getRangeData();
 800123c:	f005 fc70 	bl	8006b20 <getRangeData>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <main+0xb8>)
 8001246:	801a      	strh	r2, [r3, #0]
      distance=(float) millimeter;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <main+0xb8>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <main+0xbc>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
	 printf(" read %f\n",distance);
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <main+0xbc>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f97a 	bl	8000558 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4811      	ldr	r0, [pc, #68]	@ (80012b0 <main+0xc0>)
 800126a:	f009 fe01 	bl	800ae70 <iprintf>
	 fflush(stdout);
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <main+0xc4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f009 fd25 	bl	800acc4 <fflush>
	 NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800127a:	2019      	movs	r0, #25
 800127c:	f7ff ff4e 	bl	800111c <__NVIC_EnableIRQ>
     rbpush(&sys.Ball_pos, distance);
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <main+0xbc>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <main+0xc8>)
 800128c:	f000 fa48 	bl	8001720 <rbpush>

	 HAL_Delay(20);
 8001290:	2014      	movs	r0, #20
 8001292:	f005 fedd 	bl	8007050 <HAL_Delay>
      ready=0;
 8001296:	bf00      	nop
 8001298:	e7ca      	b.n	8001230 <main+0x40>
 800129a:	bf00      	nop
 800129c:	200004b4 	.word	0x200004b4
 80012a0:	20000be8 	.word	0x20000be8
 80012a4:	200004b0 	.word	0x200004b0
 80012a8:	20000c78 	.word	0x20000c78
 80012ac:	20000c7c 	.word	0x20000c7c
 80012b0:	0800e6a8 	.word	0x0800e6a8
 80012b4:	200002d8 	.word	0x200002d8
 80012b8:	20000648 	.word	0x20000648

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	@ 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	@ 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f009 ff38 	bl	800b140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	@ (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800132c:	2310      	movs	r3, #16
 800132e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001330:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001336:	2304      	movs	r3, #4
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133a:	2304      	movs	r3, #4
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f007 f96a 	bl	800861c <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800134e:	f000 f9e0 	bl	8001712 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f007 fbcc 	bl	8008b0c <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137a:	f000 f9ca 	bl	8001712 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	@ 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <MX_I2C1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <MX_I2C1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_I2C1_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_I2C1_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	@ (80013e0 <MX_I2C1_Init+0x50>)
 80013ce:	f006 f92b 	bl	8007628 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 f99b 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000b04 	.word	0x20000b04
 80013e4:	40005400 	.word	0x40005400
 80013e8:	000186a0 	.word	0x000186a0

080013ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2224      	movs	r2, #36	@ 0x24
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fea0 	bl	800b140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <MX_TIM1_Init+0xa8>)
 800140a:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <MX_TIM1_Init+0xac>)
 800140c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <MX_TIM1_Init+0xa8>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_TIM1_Init+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800141a:	4b1e      	ldr	r3, [pc, #120]	@ (8001494 <MX_TIM1_Init+0xa8>)
 800141c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_TIM1_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM1_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_TIM1_Init+0xa8>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001434:	2301      	movs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	@ (8001494 <MX_TIM1_Init+0xa8>)
 8001460:	f007 fe26 	bl	80090b0 <HAL_TIM_Encoder_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800146a:	f000 f952 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	@ (8001494 <MX_TIM1_Init+0xa8>)
 800147c:	f008 f9c4 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001486:	f000 f944 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3730      	adds	r7, #48	@ 0x30
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000b58 	.word	0x20000b58
 8001498:	40010000 	.word	0x40010000

0800149c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <MX_TIM3_Init+0x98>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1343;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014c0:	f240 523f 	movw	r2, #1343	@ 0x53f
 80014c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014ce:	f24f 4223 	movw	r2, #62499	@ 0xf423
 80014d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014e2:	f007 fd33 	bl	8008f4c <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014ec:	f000 f911 	bl	8001712 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014fe:	f007 ff6d 	bl	80093dc <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 f903 	bl	8001712 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM3_Init+0x94>)
 800151a:	f008 f975 	bl	8009808 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 f8f5 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000ba0 	.word	0x20000ba0
 8001534:	40000400 	.word	0x40000400

08001538 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_TIM10_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_TIM10_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1343;
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_TIM10_Init+0x4c>)
 8001544:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001548:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_TIM10_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 62499;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_TIM10_Init+0x4c>)
 8001552:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001556:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_TIM10_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_TIM10_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn,7,0);
 8001564:	2200      	movs	r2, #0
 8001566:	2107      	movs	r1, #7
 8001568:	2019      	movs	r0, #25
 800156a:	f005 fe70 	bl	800724e <HAL_NVIC_SetPriority>
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_TIM10_Init+0x4c>)
 8001570:	f007 fcec 	bl	8008f4c <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM10_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f8ca 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000be8 	.word	0x20000be8
 8001588:	40014400 	.word	0x40014400

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f008 f9a2 	bl	800990c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 f8a0 	bl	8001712 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000c30 	.word	0x20000c30
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b3c      	ldr	r3, [pc, #240]	@ (80016ec <MX_GPIO_Init+0x10c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a3b      	ldr	r2, [pc, #236]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b35      	ldr	r3, [pc, #212]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a34      	ldr	r2, [pc, #208]	@ (80016ec <MX_GPIO_Init+0x10c>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a2d      	ldr	r2, [pc, #180]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a26      	ldr	r2, [pc, #152]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <MX_GPIO_Init+0x10c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	4821      	ldr	r0, [pc, #132]	@ (80016f0 <MX_GPIO_Init+0x110>)
 800166c:	f005 ffaa 	bl	80075c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	481b      	ldr	r0, [pc, #108]	@ (80016f4 <MX_GPIO_Init+0x114>)
 8001688:	f005 fe18 	bl	80072bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LidarTrigger_Pin */
  GPIO_InitStruct.Pin = LidarTrigger_Pin;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001690:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001696:	2302      	movs	r3, #2
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LidarTrigger_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4814      	ldr	r0, [pc, #80]	@ (80016f4 <MX_GPIO_Init+0x114>)
 80016a2:	f005 fe0b 	bl	80072bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016a6:	2320      	movs	r3, #32
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_GPIO_Init+0x110>)
 80016be:	f005 fdfd 	bl	80072bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2006      	movs	r0, #6
 80016c8:	f005 fdc1 	bl	800724e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016cc:	2006      	movs	r0, #6
 80016ce:	f005 fdda 	bl	8007286 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2028      	movs	r0, #40	@ 0x28
 80016d8:	f005 fdb9 	bl	800724e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016dc:	2028      	movs	r0, #40	@ 0x28
 80016de:	f005 fdd2 	bl	8007286 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020800 	.word	0x40020800

080016f8 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fd4c 	bl	80011a0 <ITM_SendChar>
    return ch;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001716:	b672      	cpsid	i
}
 8001718:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <Error_Handler+0x8>
	...

08001720 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <rbpush+0x8c>)
 800174e:	fba2 1203 	umull	r1, r2, r2, r3
 8001752:	0952      	lsrs	r2, r2, #5
 8001754:	2164      	movs	r1, #100	@ 0x64
 8001756:	fb01 f202 	mul.w	r2, r1, r2
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	b2da      	uxtb	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d113      	bne.n	8001792 <rbpush+0x72>
        /* overwriting data: also move head forward */
        buffer->head++;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	785b      	ldrb	r3, [r3, #1]
 800176e:	3301      	adds	r3, #1
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	785b      	ldrb	r3, [r3, #1]
 800177a:	4a0c      	ldr	r2, [pc, #48]	@ (80017ac <rbpush+0x8c>)
 800177c:	fba2 1203 	umull	r1, r2, r2, r3
 8001780:	0952      	lsrs	r2, r2, #5
 8001782:	2164      	movs	r1, #100	@ 0x64
 8001784:	fb01 f202 	mul.w	r2, r1, r2
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	b2da      	uxtb	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	705a      	strb	r2, [r3, #1]
 8001790:	e005      	b.n	800179e <rbpush+0x7e>
    }else{
        buffer->length++;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	789b      	ldrb	r3, [r3, #2]
 8001796:	3301      	adds	r3, #1
 8001798:	b2da      	uxtb	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 800179e:	2301      	movs	r3, #1
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	51eb851f 	.word	0x51eb851f

080017b0 <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e00a      	b.n	80017d8 <rbclear+0x28>
        buffer->buffer[i] = 0;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b63      	cmp	r3, #99	@ 0x63
 80017dc:	d9f1      	bls.n	80017c2 <rbclear+0x12>
    }
    buffer->length = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <HAL_MspInit+0x4c>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <HAL_MspInit+0x4c>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001810:	6453      	str	r3, [r2, #68]	@ 0x44
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_MspInit+0x4c>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <HAL_MspInit+0x4c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_MspInit+0x4c>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	@ 0x40
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800183a:	2007      	movs	r0, #7
 800183c:	f005 fcfc 	bl	8007238 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_I2C_MspInit+0x84>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d12b      	bne.n	80018c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	4b18      	ldr	r3, [pc, #96]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a17      	ldr	r2, [pc, #92]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800188a:	23c0      	movs	r3, #192	@ 0xc0
 800188c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800188e:	2312      	movs	r3, #18
 8001890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800189a:	2304      	movs	r3, #4
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480c      	ldr	r0, [pc, #48]	@ (80018d8 <HAL_I2C_MspInit+0x8c>)
 80018a6:	f005 fd09 	bl	80072bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_I2C_MspInit+0x88>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	@ 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40005400 	.word	0x40005400
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020400 	.word	0x40020400

080018dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	@ 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_TIM_Encoder_MspInit+0x94>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d134      	bne.n	8001968 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6453      	str	r3, [r2, #68]	@ 0x44
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_TIM_Encoder_MspInit+0x98>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001936:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4809      	ldr	r0, [pc, #36]	@ (8001978 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001954:	f005 fcb2 	bl	80072bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8001958:	2201      	movs	r2, #1
 800195a:	2100      	movs	r1, #0
 800195c:	2019      	movs	r0, #25
 800195e:	f005 fc76 	bl	800724e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001962:	2019      	movs	r0, #25
 8001964:	f005 fc8f 	bl	8007286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	@ 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010000 	.word	0x40010000
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1c      	ldr	r2, [pc, #112]	@ (80019fc <HAL_TIM_Base_MspInit+0x80>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d116      	bne.n	80019bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b1b      	ldr	r3, [pc, #108]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a1a      	ldr	r2, [pc, #104]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	201d      	movs	r0, #29
 80019b0:	f005 fc4d 	bl	800724e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b4:	201d      	movs	r0, #29
 80019b6:	f005 fc66 	bl	8007286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80019ba:	e01a      	b.n	80019f2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a10      	ldr	r2, [pc, #64]	@ (8001a04 <HAL_TIM_Base_MspInit+0x88>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d115      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_TIM_Base_MspInit+0x84>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 80019e2:	2201      	movs	r2, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	2019      	movs	r0, #25
 80019e8:	f005 fc31 	bl	800724e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019ec:	2019      	movs	r0, #25
 80019ee:	f005 fc4a 	bl	8007286 <HAL_NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40014400 	.word	0x40014400

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a19      	ldr	r2, [pc, #100]	@ (8001a8c <HAL_UART_MspInit+0x84>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d12b      	bne.n	8001a82 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a17      	ldr	r2, [pc, #92]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3a:	4b15      	ldr	r3, [pc, #84]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a10      	ldr	r2, [pc, #64]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_UART_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a62:	230c      	movs	r3, #12
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a72:	2307      	movs	r3, #7
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <HAL_UART_MspInit+0x8c>)
 8001a7e:	f005 fc1d 	bl	80072bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	@ 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40004400 	.word	0x40004400
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <NMI_Handler+0x4>

08001aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <HardFault_Handler+0x4>

08001aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <MemManage_Handler+0x4>

08001ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f005 fa8f 	bl	8007010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LidarTrigger_Pin);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f005 fd7c 	bl	80075f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b0a:	f007 fb77 	bl	80091fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b10:	f007 fb74 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000b58 	.word	0x20000b58
 8001b1c:	20000be8 	.word	0x20000be8

08001b20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <TIM3_IRQHandler+0x10>)
 8001b26:	f007 fb69 	bl	80091fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000ba0 	.word	0x20000ba0

08001b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b3c:	f005 fd5c 	bl	80075f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_kill>:

int _kill(int pid, int sig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5e:	f009 fb41 	bl	800b1e4 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_exit>:

void _exit (int status)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffe7 	bl	8001b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e009      	b.n	8001bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fd8a 	bl	80016f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf1      	blt.n	8001bd6 <_write+0x12>
  }
  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_close>:

int _close(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_isatty>:

int _isatty(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f009 faa6 	bl	800b1e4 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000c80 	.word	0x20000c80
 8001ccc:	20000fc8 	.word	0x20000fc8

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f009 fa65 	bl	800b1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fa63 	bl	80011f0 <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8001d38:	0800eb08 	.word	0x0800eb08
  ldr r2, =_sbss
 8001d3c:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 8001d40:	20000fc8 	.word	0x20000fc8

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>

08001d46 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001d54:	6839      	ldr	r1, [r7, #0]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fcd5 	bl	8003706 <VL53L0X_get_offset_calibration_data_micro_meter>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8001d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8001d6c:	b5b0      	push	{r4, r5, r7, lr}
 8001d6e:	b096      	sub	sp, #88	@ 0x58
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8001d7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d107      	bne.n	8001d92 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2188      	movs	r1, #136	@ 0x88
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f004 ff90 	bl	8006cac <VL53L0X_WrByte>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001da0:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001daa:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a9e      	ldr	r2, [pc, #632]	@ (800202c <VL53L0X_DataInit+0x2c0>)
 8001db2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a9d      	ldr	r2, [pc, #628]	@ (8002030 <VL53L0X_DataInit+0x2c4>)
 8001dba:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fac0 	bl	8002350 <VL53L0X_GetDeviceParameters>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8001dd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d112      	bne.n	8001e04 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8001dde:	2300      	movs	r3, #0
 8001de0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8001de2:	2300      	movs	r3, #0
 8001de4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f103 0410 	add.w	r4, r3, #16
 8001dec:	f107 0510 	add.w	r5, r7, #16
 8001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2264      	movs	r2, #100	@ 0x64
 8001e08:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8001e12:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001e1c:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8001e26:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f004 ff38 	bl	8006cac <VL53L0X_WrByte>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	21ff      	movs	r1, #255	@ 0xff
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f004 ff2c 	bl	8006cac <VL53L0X_WrByte>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f004 ff20 	bl	8006cac <VL53L0X_WrByte>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8001e7a:	f107 030f 	add.w	r3, r7, #15
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2191      	movs	r1, #145	@ 0x91
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f004 ffc6 	bl	8006e14 <VL53L0X_RdByte>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f004 ff02 	bl	8006cac <VL53L0X_WrByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	21ff      	movs	r1, #255	@ 0xff
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f004 fef6 	bl	8006cac <VL53L0X_WrByte>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f004 feea 	bl	8006cac <VL53L0X_WrByte>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eea:	e014      	b.n	8001f16 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8001eec:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d114      	bne.n	8001f1e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4619      	mov	r1, r3
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fd65 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f12:	3301      	adds	r3, #1
 8001f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	dde7      	ble.n	8001eec <VL53L0X_DataInit+0x180>
 8001f1c:	e000      	b.n	8001f20 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8001f1e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001f20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d107      	bne.n	8001f38 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fd4d 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f40:	2200      	movs	r2, #0
 8001f42:	2103      	movs	r1, #3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fd41 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f50:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fd35 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8001f68:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d107      	bne.n	8001f80 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001f70:	2200      	movs	r2, #0
 8001f72:	2105      	movs	r1, #5
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fd29 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8001f80:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001f88:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fdcc 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001f9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fdbf 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fbc:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fdb2 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fce:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2103      	movs	r1, #3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fda6 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001fe6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	22ff      	movs	r2, #255	@ 0xff
 8001ff2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001ff6:	22ff      	movs	r2, #255	@ 0xff
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f004 fe56 	bl	8006cac <VL53L0X_WrByte>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800200e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800201e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8002022:	4618      	mov	r0, r3
 8002024:	3758      	adds	r7, #88	@ 0x58
 8002026:	46bd      	mov	sp, r7
 8002028:	bdb0      	pop	{r4, r5, r7, pc}
 800202a:	bf00      	nop
 800202c:	00016b85 	.word	0x00016b85
 8002030:	000970a4 	.word	0x000970a4

08002034 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b09e      	sub	sp, #120	@ 0x78
 8002038:	af02      	add	r7, sp, #8
 800203a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f009 f878 	bl	800b140 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002070:	2101      	movs	r1, #1
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fa9d 	bl	80045b2 <VL53L0X_get_info_from_device>
 8002078:	4603      	mov	r3, r0
 800207a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8002084:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800208c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002090:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002094:	2b01      	cmp	r3, #1
 8002096:	d80d      	bhi.n	80020b4 <VL53L0X_StaticInit+0x80>
 8002098:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800209c:	2b01      	cmp	r3, #1
 800209e:	d102      	bne.n	80020a6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80020a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d806      	bhi.n	80020b4 <VL53L0X_StaticInit+0x80>
 80020a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10e      	bne.n	80020cc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80020ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d90b      	bls.n	80020cc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80020b4:	f107 0218 	add.w	r2, r7, #24
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f001 fd1c 	bl	8003afc <VL53L0X_perform_ref_spad_management>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80020ca:	e009      	b.n	80020e0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80020cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020d0:	461a      	mov	r2, r3
 80020d2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f001 ff1d 	bl	8003f14 <VL53L0X_set_reference_spads>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80020e0:	4b93      	ldr	r3, [pc, #588]	@ (8002330 <VL53L0X_StaticInit+0x2fc>)
 80020e2:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80020e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10f      	bne.n	800210c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80020f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80020f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8002104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002106:	e001      	b.n	800210c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002108:	4b89      	ldr	r3, [pc, #548]	@ (8002330 <VL53L0X_StaticInit+0x2fc>)
 800210a:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800210c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002110:	2b00      	cmp	r3, #0
 8002112:	d106      	bne.n	8002122 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002114:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f003 fdec 	bl	8005cf4 <VL53L0X_load_tuning_settings>
 800211c:	4603      	mov	r3, r0
 800211e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002122:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800212a:	2300      	movs	r3, #0
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2304      	movs	r3, #4
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f001 f919 	bl	800336c <VL53L0X_SetGpioConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002140:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002144:	2b00      	cmp	r3, #0
 8002146:	d121      	bne.n	800218c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002148:	2201      	movs	r2, #1
 800214a:	21ff      	movs	r1, #255	@ 0xff
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f004 fdad 	bl	8006cac <VL53L0X_WrByte>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002158:	f107 031a 	add.w	r3, r7, #26
 800215c:	461a      	mov	r2, r3
 800215e:	2184      	movs	r1, #132	@ 0x84
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f004 fe81 	bl	8006e68 <VL53L0X_RdWord>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800216e:	4313      	orrs	r3, r2
 8002170:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002174:	2200      	movs	r2, #0
 8002176:	21ff      	movs	r1, #255	@ 0xff
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f004 fd97 	bl	8006cac <VL53L0X_WrByte>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002186:	4313      	orrs	r3, r2
 8002188:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800218c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002194:	8b7b      	ldrh	r3, [r7, #26]
 8002196:	011a      	lsls	r2, r3, #4
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800219e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d108      	bne.n	80021b8 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8cf 	bl	8002350 <VL53L0X_GetDeviceParameters>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80021b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d110      	bne.n	80021e2 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80021c0:	f107 0319 	add.w	r3, r7, #25
 80021c4:	4619      	mov	r1, r3
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f991 	bl	80024ee <VL53L0X_GetFractionEnable>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80021d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d103      	bne.n	80021e2 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80021da:	7e7a      	ldrb	r2, [r7, #25]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80021e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f103 0410 	add.w	r4, r3, #16
 80021f0:	f107 051c 	add.w	r5, r7, #28
 80021f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002200:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002208:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8002210:	f107 0319 	add.w	r3, r7, #25
 8002214:	461a      	mov	r2, r3
 8002216:	2101      	movs	r1, #1
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f004 fdfb 	bl	8006e14 <VL53L0X_RdByte>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002224:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800222c:	7e7a      	ldrb	r2, [r7, #25]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002234:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f9c9 	bl	80025d8 <VL53L0X_SetSequenceStepEnable>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800224c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002254:	2200      	movs	r2, #0
 8002256:	2102      	movs	r1, #2
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f9bd 	bl	80025d8 <VL53L0X_SetSequenceStepEnable>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002264:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002268:	2b00      	cmp	r3, #0
 800226a:	d103      	bne.n	8002274 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002274:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 800227c:	f107 0313 	add.w	r3, r7, #19
 8002280:	461a      	mov	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f98f 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 800228a:	4603      	mov	r3, r0
 800228c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002290:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002294:	2b00      	cmp	r3, #0
 8002296:	d103      	bne.n	80022a0 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002298:	7cfa      	ldrb	r2, [r7, #19]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80022a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 80022a8:	f107 0313 	add.w	r3, r7, #19
 80022ac:	461a      	mov	r2, r3
 80022ae:	2101      	movs	r1, #1
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f979 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022c4:	7cfa      	ldrb	r2, [r7, #19]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80022cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	461a      	mov	r2, r3
 80022da:	2103      	movs	r1, #3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f002 fee7 	bl	80050b0 <get_sequence_step_timeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d103      	bne.n	80022f8 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80022f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	461a      	mov	r2, r3
 8002306:	2104      	movs	r1, #4
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f002 fed1 	bl	80050b0 <get_sequence_step_timeout>
 800230e:	4603      	mov	r3, r0
 8002310:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002314:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002318:	2b00      	cmp	r3, #0
 800231a:	d103      	bne.n	8002324 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002324:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8002328:	4618      	mov	r0, r3
 800232a:	3770      	adds	r7, #112	@ 0x70
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	200001bc 	.word	0x200001bc

08002334 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800233c:	239d      	movs	r3, #157	@ 0x9d
 800233e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8002340:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8b0 	bl	80024c8 <VL53L0X_GetDeviceMode>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800236c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	3308      	adds	r3, #8
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 faaa 	bl	80028d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8002384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	3310      	adds	r3, #16
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fae0 	bl	8002966 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80023a6:	4603      	mov	r3, r0
 80023a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	3314      	adds	r3, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff fcc4 	bl	8001d46 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d134      	bne.n	8002434 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	e02a      	b.n	8002426 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80023d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d12a      	bne.n	800242e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	b299      	uxth	r1, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	3308      	adds	r3, #8
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	461a      	mov	r2, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fc00 	bl	8002bf0 <VL53L0X_GetLimitCheckValue>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d117      	bne.n	8002432 <VL53L0X_GetDeviceParameters+0xe2>

				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	b299      	uxth	r1, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	3318      	adds	r3, #24
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4413      	add	r3, r2
 800240e:	461a      	mov	r2, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fb67 	bl	8002ae4 <VL53L0X_GetLimitCheckEnable>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	4313      	orrs	r3, r2
 800241e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2b05      	cmp	r3, #5
 800242a:	ddd1      	ble.n	80023d0 <VL53L0X_GetDeviceParameters+0x80>
 800242c:	e002      	b.n	8002434 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800242e:	bf00      	nop
 8002430:	e000      	b.n	8002434 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8002432:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	333c      	adds	r3, #60	@ 0x3c
 8002440:	4619      	mov	r1, r3
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fc62 	bl	8002d0c <VL53L0X_GetWrapAroundCheckEnable>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f879 	bl	8002552 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	2b15      	cmp	r3, #21
 8002484:	bf8c      	ite	hi
 8002486:	2201      	movhi	r2, #1
 8002488:	2200      	movls	r2, #0
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	2a00      	cmp	r2, #0
 800248e:	d10f      	bne.n	80024b0 <VL53L0X_SetDeviceMode+0x40>
 8002490:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <VL53L0X_SetDeviceMode+0x54>)
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf14      	ite	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	2300      	moveq	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	741a      	strb	r2, [r3, #16]
		break;
 80024ae:	e001      	b.n	80024b4 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80024b0:	23f8      	movs	r3, #248	@ 0xf8
 80024b2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	0030000b 	.word	0x0030000b

080024c8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	7c1a      	ldrb	r2, [r3, #16]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	2109      	movs	r1, #9
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f004 fc87 	bl	8006e14 <VL53L0X_RdByte>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	b2da      	uxtb	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002536:	2300      	movs	r3, #0
 8002538:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f003 fa47 	bl	80059d0 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8002542:	4603      	mov	r3, r0
 8002544:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002560:	6839      	ldr	r1, [r7, #0]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f003 fb14 	bl	8005b90 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	70fb      	strb	r3, [r7, #3]
 8002584:	4613      	mov	r3, r2
 8002586:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800258c:	78ba      	ldrb	r2, [r7, #2]
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f002 ff5e 	bl	8005454 <VL53L0X_set_vcsel_pulse_period>
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	460b      	mov	r3, r1
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4619      	mov	r1, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f003 f9ce 	bl	8005962 <VL53L0X_get_vcsel_pulse_period>
 80025c6:	4603      	mov	r3, r0
 80025c8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80025ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
 80025e4:	4613      	mov	r3, r2
 80025e6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80025f4:	f107 030f 	add.w	r3, r7, #15
 80025f8:	461a      	mov	r2, r3
 80025fa:	2101      	movs	r1, #1
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f004 fc09 	bl	8006e14 <VL53L0X_RdByte>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800260a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d159      	bne.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8002612:	78bb      	ldrb	r3, [r7, #2]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d12b      	bne.n	8002670 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	2b04      	cmp	r3, #4
 800261c:	d825      	bhi.n	800266a <VL53L0X_SetSequenceStepEnable+0x92>
 800261e:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002639 	.word	0x08002639
 8002628:	08002643 	.word	0x08002643
 800262c:	0800264d 	.word	0x0800264d
 8002630:	08002657 	.word	0x08002657
 8002634:	08002661 	.word	0x08002661
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002638:	7dbb      	ldrb	r3, [r7, #22]
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	75bb      	strb	r3, [r7, #22]
				break;
 8002640:	e041      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8002642:	7dbb      	ldrb	r3, [r7, #22]
 8002644:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002648:	75bb      	strb	r3, [r7, #22]
				break;
 800264a:	e03c      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800264c:	7dbb      	ldrb	r3, [r7, #22]
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	75bb      	strb	r3, [r7, #22]
				break;
 8002654:	e037      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8002656:	7dbb      	ldrb	r3, [r7, #22]
 8002658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800265c:	75bb      	strb	r3, [r7, #22]
				break;
 800265e:	e032      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002660:	7dbb      	ldrb	r3, [r7, #22]
 8002662:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002666:	75bb      	strb	r3, [r7, #22]
				break;
 8002668:	e02d      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800266a:	23fc      	movs	r3, #252	@ 0xfc
 800266c:	75fb      	strb	r3, [r7, #23]
 800266e:	e02a      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d825      	bhi.n	80026c2 <VL53L0X_SetSequenceStepEnable+0xea>
 8002676:	a201      	add	r2, pc, #4	@ (adr r2, 800267c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8002678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800267c:	08002691 	.word	0x08002691
 8002680:	0800269b 	.word	0x0800269b
 8002684:	080026a5 	.word	0x080026a5
 8002688:	080026af 	.word	0x080026af
 800268c:	080026b9 	.word	0x080026b9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002690:	7dbb      	ldrb	r3, [r7, #22]
 8002692:	f023 0310 	bic.w	r3, r3, #16
 8002696:	75bb      	strb	r3, [r7, #22]
				break;
 8002698:	e015      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800269a:	7dbb      	ldrb	r3, [r7, #22]
 800269c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80026a0:	75bb      	strb	r3, [r7, #22]
				break;
 80026a2:	e010      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80026a4:	7dbb      	ldrb	r3, [r7, #22]
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	75bb      	strb	r3, [r7, #22]
				break;
 80026ac:	e00b      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80026ae:	7dbb      	ldrb	r3, [r7, #22]
 80026b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026b4:	75bb      	strb	r3, [r7, #22]
				break;
 80026b6:	e006      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80026b8:	7dbb      	ldrb	r3, [r7, #22]
 80026ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026be:	75bb      	strb	r3, [r7, #22]
				break;
 80026c0:	e001      	b.n	80026c6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80026c2:	23fc      	movs	r3, #252	@ 0xfc
 80026c4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	7dba      	ldrb	r2, [r7, #22]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d01e      	beq.n	800270c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80026ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	461a      	mov	r2, r3
 80026da:	2101      	movs	r1, #1
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f004 fae5 	bl	8006cac <VL53L0X_WrByte>
 80026e2:	4603      	mov	r3, r0
 80026e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80026e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7dba      	ldrb	r2, [r7, #22]
 80026f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80026f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002704:	6939      	ldr	r1, [r7, #16]
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff10 	bl	800252c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800270c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	72fb      	strb	r3, [r7, #11]
 8002726:	4613      	mov	r3, r2
 8002728:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d836      	bhi.n	80027a8 <sequence_step_enabled+0x90>
 800273a:	a201      	add	r2, pc, #4	@ (adr r2, 8002740 <sequence_step_enabled+0x28>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002755 	.word	0x08002755
 8002744:	08002767 	.word	0x08002767
 8002748:	08002779 	.word	0x08002779
 800274c:	0800278b 	.word	0x0800278b
 8002750:	0800279d 	.word	0x0800279d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002754:	7abb      	ldrb	r3, [r7, #10]
 8002756:	111b      	asrs	r3, r3, #4
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	701a      	strb	r2, [r3, #0]
		break;
 8002764:	e022      	b.n	80027ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002766:	7abb      	ldrb	r3, [r7, #10]
 8002768:	10db      	asrs	r3, r3, #3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	701a      	strb	r2, [r3, #0]
		break;
 8002776:	e019      	b.n	80027ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002778:	7abb      	ldrb	r3, [r7, #10]
 800277a:	109b      	asrs	r3, r3, #2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	701a      	strb	r2, [r3, #0]
		break;
 8002788:	e010      	b.n	80027ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800278a:	7abb      	ldrb	r3, [r7, #10]
 800278c:	119b      	asrs	r3, r3, #6
 800278e:	b2db      	uxtb	r3, r3
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	701a      	strb	r2, [r3, #0]
		break;
 800279a:	e007      	b.n	80027ac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800279c:	7abb      	ldrb	r3, [r7, #10]
 800279e:	09db      	lsrs	r3, r3, #7
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	701a      	strb	r2, [r3, #0]
		break;
 80027a6:	e001      	b.n	80027ac <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80027a8:	23fc      	movs	r3, #252	@ 0xfc
 80027aa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80027ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80027ce:	f107 030e 	add.w	r3, r7, #14
 80027d2:	461a      	mov	r2, r3
 80027d4:	2101      	movs	r1, #1
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f004 fb1c 	bl	8006e14 <VL53L0X_RdByte>
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d107      	bne.n	80027f8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80027e8:	7bba      	ldrb	r2, [r7, #14]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2100      	movs	r1, #0
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ff92 	bl	8002718 <sequence_step_enabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d108      	bne.n	8002812 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002800:	7bba      	ldrb	r2, [r7, #14]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3302      	adds	r3, #2
 8002806:	2101      	movs	r1, #1
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff85 	bl	8002718 <sequence_step_enabled>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800281a:	7bba      	ldrb	r2, [r7, #14]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	2102      	movs	r1, #2
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff ff78 	bl	8002718 <sequence_step_enabled>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8002834:	7bba      	ldrb	r2, [r7, #14]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	3303      	adds	r3, #3
 800283a:	2103      	movs	r1, #3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff6b 	bl	8002718 <sequence_step_enabled>
 8002842:	4603      	mov	r3, r0
 8002844:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800284e:	7bba      	ldrb	r2, [r7, #14]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	3304      	adds	r3, #4
 8002854:	2104      	movs	r1, #4
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ff5e 	bl	8002718 <sequence_step_enabled>
 800285c:	4603      	mov	r3, r0
 800285e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800287a:	f107 030e 	add.w	r3, r7, #14
 800287e:	461a      	mov	r2, r3
 8002880:	21f8      	movs	r1, #248	@ 0xf8
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f004 faf0 	bl	8006e68 <VL53L0X_RdWord>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800288c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d112      	bne.n	80028ba <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8002894:	89fb      	ldrh	r3, [r7, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e001      	b.n	80028ac <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	2104      	movs	r1, #4
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f004 fa49 	bl	8006d48 <VL53L0X_WrDWord>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80028ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80028c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028de:	2300      	movs	r3, #0
 80028e0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	461a      	mov	r2, r3
 80028e8:	21f8      	movs	r1, #248	@ 0xf8
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f004 fabc 	bl	8006e68 <VL53L0X_RdWord>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80028f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80028fc:	f107 0308 	add.w	r3, r7, #8
 8002900:	461a      	mov	r2, r3
 8002902:	2104      	movs	r1, #4
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f004 fae5 	bl	8006ed4 <VL53L0X_RdDWord>
 800290a:	4603      	mov	r3, r0
 800290c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8002916:	89bb      	ldrh	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	89ba      	ldrh	r2, [r7, #12]
 8002920:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7f1b      	ldrb	r3, [r3, #28]
 800294e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	7bba      	ldrb	r2, [r7, #14]
 8002954:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8002974:	f107 030e 	add.w	r3, r7, #14
 8002978:	461a      	mov	r2, r3
 800297a:	2120      	movs	r1, #32
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f004 fa73 	bl	8006e68 <VL53L0X_RdWord>
 8002982:	4603      	mov	r3, r0
 8002984:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800298e:	89fb      	ldrh	r3, [r7, #14]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	771a      	strb	r2, [r3, #28]
 80029a6:	e00b      	b.n	80029c0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80029a8:	89fb      	ldrh	r3, [r7, #14]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80029c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029dc:	2300      	movs	r3, #0
 80029de:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d902      	bls.n	80029f8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80029f2:	23fc      	movs	r3, #252	@ 0xfc
 80029f4:	75fb      	strb	r3, [r7, #23]
 80029f6:	e05b      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80029f8:	787b      	ldrb	r3, [r7, #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73bb      	strb	r3, [r7, #14]
 8002a0a:	e00a      	b.n	8002a22 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	330c      	adds	r3, #12
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	2b05      	cmp	r3, #5
 8002a26:	d841      	bhi.n	8002aac <VL53L0X_SetLimitCheckEnable+0xe0>
 8002a28:	a201      	add	r2, pc, #4	@ (adr r2, 8002a30 <VL53L0X_SetLimitCheckEnable+0x64>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a49 	.word	0x08002a49
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a69 	.word	0x08002a69
 8002a3c:	08002a73 	.word	0x08002a73
 8002a40:	08002a7d 	.word	0x08002a7d
 8002a44:	08002a95 	.word	0x08002a95

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002a50:	e02e      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2144      	movs	r1, #68	@ 0x44
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f004 f949 	bl	8006cf4 <VL53L0X_WrWord>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]

			break;
 8002a66:	e023      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002a70:	e01e      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002a7a:	e019      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002a82:	7b7b      	ldrb	r3, [r7, #13]
 8002a84:	22fe      	movs	r2, #254	@ 0xfe
 8002a86:	2160      	movs	r1, #96	@ 0x60
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f004 f98f 	bl	8006dac <VL53L0X_UpdateByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002a92:	e00d      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002a9a:	7b7b      	ldrb	r3, [r7, #13]
 8002a9c:	22ef      	movs	r2, #239	@ 0xef
 8002a9e:	2160      	movs	r1, #96	@ 0x60
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f004 f983 	bl	8006dac <VL53L0X_UpdateByte>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002aaa:	e001      	b.n	8002ab0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002aac:	23fc      	movs	r3, #252	@ 0xfc
 8002aae:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10f      	bne.n	8002ad8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002aca:	e005      	b.n	8002ad8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002acc:	887b      	ldrh	r3, [r7, #2]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	460b      	mov	r3, r1
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d905      	bls.n	8002b08 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002afc:	23fc      	movs	r3, #252	@ 0xfc
 8002afe:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e008      	b.n	8002b1a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002b08:	897b      	ldrh	r3, [r7, #10]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b12:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7dba      	ldrb	r2, [r7, #22]
 8002b18:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	460b      	mov	r3, r1
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002b3e:	897b      	ldrh	r3, [r7, #10]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b48:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002b4a:	7dbb      	ldrb	r3, [r7, #22]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	330c      	adds	r3, #12
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	e040      	b.n	8002be2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002b60:	897b      	ldrh	r3, [r7, #10]
 8002b62:	2b05      	cmp	r3, #5
 8002b64:	d830      	bhi.n	8002bc8 <VL53L0X_SetLimitCheckValue+0x9c>
 8002b66:	a201      	add	r2, pc, #4	@ (adr r2, 8002b6c <VL53L0X_SetLimitCheckValue+0x40>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b85 	.word	0x08002b85
 8002b70:	08002b8d 	.word	0x08002b8d
 8002b74:	08002ba3 	.word	0x08002ba3
 8002b78:	08002bab 	.word	0x08002bab
 8002b7c:	08002bb3 	.word	0x08002bb3
 8002b80:	08002bb3 	.word	0x08002bb3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002b8a:	e01f      	b.n	8002bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	2144      	movs	r1, #68	@ 0x44
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f004 f8ac 	bl	8006cf4 <VL53L0X_WrWord>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002ba0:	e014      	b.n	8002bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8002ba8:	e010      	b.n	8002bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002bb0:	e00c      	b.n	8002bcc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2164      	movs	r1, #100	@ 0x64
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f004 f899 	bl	8006cf4 <VL53L0X_WrWord>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002bc6:	e001      	b.n	8002bcc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002bc8:	23fc      	movs	r3, #252	@ 0xfc
 8002bca:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002bd4:	897b      	ldrh	r3, [r7, #10]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop

08002bf0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d847      	bhi.n	8002c9c <VL53L0X_GetLimitCheckValue+0xac>
 8002c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <VL53L0X_GetLimitCheckValue+0x24>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c2d 	.word	0x08002c2d
 8002c18:	08002c39 	.word	0x08002c39
 8002c1c:	08002c5f 	.word	0x08002c5f
 8002c20:	08002c6b 	.word	0x08002c6b
 8002c24:	08002c77 	.word	0x08002c77
 8002c28:	08002c77 	.word	0x08002c77

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c30:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	77bb      	strb	r3, [r7, #30]
		break;
 8002c36:	e033      	b.n	8002ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002c38:	f107 0316 	add.w	r3, r7, #22
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2144      	movs	r1, #68	@ 0x44
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f004 f911 	bl	8006e68 <VL53L0X_RdWord>
 8002c46:	4603      	mov	r3, r0
 8002c48:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	025b      	lsls	r3, r3, #9
 8002c56:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	77bb      	strb	r3, [r7, #30]
		break;
 8002c5c:	e020      	b.n	8002ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c62:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	77bb      	strb	r3, [r7, #30]
		break;
 8002c68:	e01a      	b.n	8002ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	77bb      	strb	r3, [r7, #30]
		break;
 8002c74:	e014      	b.n	8002ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002c76:	f107 0316 	add.w	r3, r7, #22
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2164      	movs	r1, #100	@ 0x64
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f004 f8f2 	bl	8006e68 <VL53L0X_RdWord>
 8002c84:	4603      	mov	r3, r0
 8002c86:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002c90:	8afb      	ldrh	r3, [r7, #22]
 8002c92:	025b      	lsls	r3, r3, #9
 8002c94:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	77bb      	strb	r3, [r7, #30]
		break;
 8002c9a:	e001      	b.n	8002ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002c9c:	23fc      	movs	r3, #252	@ 0xfc
 8002c9e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12a      	bne.n	8002cfe <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8002ca8:	7fbb      	ldrb	r3, [r7, #30]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d124      	bne.n	8002cf8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d110      	bne.n	8002cd6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	330c      	adds	r3, #12
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002cd4:	e013      	b.n	8002cfe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002cdc:	897b      	ldrh	r3, [r7, #10]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4413      	add	r3, r2
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002cf6:	e002      	b.n	8002cfe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002d1a:	f107 030e 	add.w	r3, r7, #14
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2101      	movs	r1, #1
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f004 f876 	bl	8006e14 <VL53L0X_RdByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002d34:	7bba      	ldrb	r2, [r7, #14]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	b25b      	sxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	da03      	bge.n	8002d4c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e002      	b.n	8002d52 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d104      	bne.n	8002d64 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002d7c:	f107 030e 	add.w	r3, r7, #14
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fba0 	bl	80024c8 <VL53L0X_GetDeviceMode>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f898 	bl	8002ed0 <VL53L0X_StartMeasurement>
 8002da0:	4603      	mov	r3, r0
 8002da2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f001 fb33 	bl	8004418 <VL53L0X_measurement_poll_for_completion>
 8002db2:	4603      	mov	r3, r0
 8002db4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8002de8:	2301      	movs	r3, #1
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f001 fad5 	bl	800439e <VL53L0X_perform_ref_calibration>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8002df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8002e1a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8002e1c:	7dbb      	ldrb	r3, [r7, #22]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d005      	beq.n	8002e2e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d002      	beq.n	8002e2e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8002e28:	7dbb      	ldrb	r3, [r7, #22]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d147      	bne.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002e2e:	f107 030c 	add.w	r3, r7, #12
 8002e32:	f107 0210 	add.w	r2, r7, #16
 8002e36:	2101      	movs	r1, #1
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fbb9 	bl	80035b0 <VL53L0X_GetInterruptThresholds>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8002e48:	d803      	bhi.n	8002e52 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8002e4c:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8002e50:	d935      	bls.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8002e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d131      	bne.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8002e60:	491a      	ldr	r1, [pc, #104]	@ (8002ecc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f002 ff46 	bl	8005cf4 <VL53L0X_load_tuning_settings>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
 8002e6c:	e027      	b.n	8002ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8002e6e:	2204      	movs	r2, #4
 8002e70:	21ff      	movs	r1, #255	@ 0xff
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f003 ff1a 	bl	8006cac <VL53L0X_WrByte>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2170      	movs	r1, #112	@ 0x70
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f003 ff10 	bl	8006cac <VL53L0X_WrByte>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	461a      	mov	r2, r3
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e96:	2200      	movs	r2, #0
 8002e98:	21ff      	movs	r1, #255	@ 0xff
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f003 ff06 	bl	8006cac <VL53L0X_WrByte>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2180      	movs	r1, #128	@ 0x80
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f003 fefc 	bl	8006cac <VL53L0X_WrByte>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8002ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8002ee0:	f107 030e 	add.w	r3, r7, #14
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff faee 	bl	80024c8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002eec:	2201      	movs	r2, #1
 8002eee:	2180      	movs	r1, #128	@ 0x80
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f003 fedb 	bl	8006cac <VL53L0X_WrByte>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002efa:	2201      	movs	r2, #1
 8002efc:	21ff      	movs	r1, #255	@ 0xff
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f003 fed4 	bl	8006cac <VL53L0X_WrByte>
 8002f04:	4603      	mov	r3, r0
 8002f06:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f003 fecd 	bl	8006cac <VL53L0X_WrByte>
 8002f12:	4603      	mov	r3, r0
 8002f14:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2191      	movs	r1, #145	@ 0x91
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f003 fec3 	bl	8006cac <VL53L0X_WrByte>
 8002f26:	4603      	mov	r3, r0
 8002f28:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f003 febc 	bl	8006cac <VL53L0X_WrByte>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	21ff      	movs	r1, #255	@ 0xff
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f003 feb5 	bl	8006cac <VL53L0X_WrByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f003 feae 	bl	8006cac <VL53L0X_WrByte>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8002f54:	7bbb      	ldrb	r3, [r7, #14]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d054      	beq.n	8003004 <VL53L0X_StartMeasurement+0x134>
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	dc6c      	bgt.n	8003038 <VL53L0X_StartMeasurement+0x168>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <VL53L0X_StartMeasurement+0x98>
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d034      	beq.n	8002fd0 <VL53L0X_StartMeasurement+0x100>
 8002f66:	e067      	b.n	8003038 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f003 fe9d 	bl	8006cac <VL53L0X_WrByte>
 8002f72:	4603      	mov	r3, r0
 8002f74:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8002f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d15d      	bne.n	800303e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8002f8c:	f107 030d 	add.w	r3, r7, #13
 8002f90:	461a      	mov	r2, r3
 8002f92:	2100      	movs	r1, #0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f003 ff3d 	bl	8006e14 <VL53L0X_RdByte>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002fa4:	7b7a      	ldrb	r2, [r7, #13]
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002fac:	7bfa      	ldrb	r2, [r7, #15]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d107      	bne.n	8002fc2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8002fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d103      	bne.n	8002fc2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fc0:	d3e1      	bcc.n	8002f86 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002fc8:	d339      	bcc.n	800303e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002fca:	23f9      	movs	r3, #249	@ 0xf9
 8002fcc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8002fce:	e036      	b.n	800303e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002fd8:	2101      	movs	r1, #1
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff12 	bl	8002e04 <VL53L0X_CheckAndLoadInterruptSettings>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f003 fe5f 	bl	8006cac <VL53L0X_WrByte>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8002ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d123      	bne.n	8003042 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8003002:	e01e      	b.n	8003042 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800300c:	2101      	movs	r1, #1
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff fef8 	bl	8002e04 <VL53L0X_CheckAndLoadInterruptSettings>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003018:	2204      	movs	r2, #4
 800301a:	2100      	movs	r1, #0
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f003 fe45 	bl	8006cac <VL53L0X_WrByte>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8003036:	e006      	b.n	8003046 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003038:	23f8      	movs	r3, #248	@ 0xf8
 800303a:	75fb      	strb	r3, [r7, #23]
 800303c:	e004      	b.n	8003048 <VL53L0X_StartMeasurement+0x178>
		break;
 800303e:	bf00      	nop
 8003040:	e002      	b.n	8003048 <VL53L0X_StartMeasurement+0x178>
		break;
 8003042:	bf00      	nop
 8003044:	e000      	b.n	8003048 <VL53L0X_StartMeasurement+0x178>
		break;
 8003046:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8003068:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800306a:	7bbb      	ldrb	r3, [r7, #14]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d112      	bne.n	8003096 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fb0e 	bl	8003698 <VL53L0X_GetInterruptMaskStatus>
 800307c:	4603      	mov	r3, r0
 800307e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b04      	cmp	r3, #4
 8003084:	d103      	bne.n	800308e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e01c      	b.n	80030c8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e018      	b.n	80030c8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003096:	f107 030d 	add.w	r3, r7, #13
 800309a:	461a      	mov	r2, r3
 800309c:	2114      	movs	r1, #20
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f003 feb8 	bl	8006e14 <VL53L0X_RdByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80030a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80030b0:	7b7b      	ldrb	r3, [r7, #13]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e002      	b.n	80030c8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80030c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b096      	sub	sp, #88	@ 0x58
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80030e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80030e8:	230c      	movs	r3, #12
 80030ea:	2114      	movs	r1, #20
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f003 fdb1 	bl	8006c54 <VL53L0X_ReadMulti>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80030f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 80c8 	bne.w	8003292 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800310e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003112:	021b      	lsls	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800311a:	4413      	add	r3, r2
 800311c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003126:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b29b      	uxth	r3, r3
 800312e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003132:	4413      	add	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	025b      	lsls	r3, r3, #9
 8003138:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800313e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003140:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	b29b      	uxth	r3, r3
 8003148:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800314c:	4413      	add	r3, r2
 800314e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003152:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003156:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800315c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	b29b      	uxth	r3, r3
 8003164:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003168:	4413      	add	r3, r2
 800316a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003174:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003176:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800317a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8003184:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800318c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003190:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003196:	d046      	beq.n	8003226 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003198:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800319a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80031a6:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <VL53L0X_GetRangingMeasurementData+0x234>)
 80031a8:	fb82 1203 	smull	r1, r2, r2, r3
 80031ac:	1192      	asrs	r2, r2, #6
 80031ae:	17db      	asrs	r3, r3, #31
 80031b0:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80031b2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7f1b      	ldrb	r3, [r3, #28]
 80031c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80031c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d02c      	beq.n	8003226 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80031cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80031ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	121a      	asrs	r2, r3, #8
					<= 0) {
 80031d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10d      	bne.n	80031fa <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 80031de:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 80031e6:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 80031ea:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80031ee:	e016      	b.n	800321e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 80031f0:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 80031f4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80031f8:	e011      	b.n	800321e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80031fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003200:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8003204:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003206:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800320a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800320e:	121b      	asrs	r3, r3, #8
 8003210:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8003212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003214:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800321a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800321e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003222:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8003226:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800322e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800323a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800323e:	b2db      	uxtb	r3, r3
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	75da      	strb	r2, [r3, #23]
 8003248:	e006      	b.n	8003258 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003250:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003258:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800325c:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003260:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f003 f9de 	bl	8006630 <VL53L0X_get_pal_range_status>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800327c:	4313      	orrs	r3, r2
 800327e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8003282:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800328a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003292:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12f      	bne.n	80032fa <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f107 040c 	add.w	r4, r7, #12
 80032a0:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 80032a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80032b4:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80032c2:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80032c8:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80032ce:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80032d4:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80032da:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80032e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 80032ea:	f107 050c 	add.w	r5, r7, #12
 80032ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80032fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3750      	adds	r7, #80	@ 0x50
 8003302:	46bd      	mov	sp, r7
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
 8003306:	bf00      	nop
 8003308:	10624dd3 	.word	0x10624dd3

0800330c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800331a:	2100      	movs	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff f8a7 	bl	8002470 <VL53L0X_SetDeviceMode>
 8003322:	4603      	mov	r3, r0
 8003324:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff fd1e 	bl	8002d70 <VL53L0X_PerformSingleMeasurement>
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003340:	6839      	ldr	r1, [r7, #0]
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fec6 	bl	80030d4 <VL53L0X_GetRangingMeasurementData>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800334c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003354:	2100      	movs	r1, #0
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f95e 	bl	8003618 <VL53L0X_ClearInterruptMask>
 800335c:	4603      	mov	r3, r0
 800335e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	70fb      	strb	r3, [r7, #3]
 800337e:	460b      	mov	r3, r1
 8003380:	70bb      	strb	r3, [r7, #2]
 8003382:	4613      	mov	r3, r2
 8003384:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003390:	23f6      	movs	r3, #246	@ 0xf6
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e105      	b.n	80035a2 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8003396:	78bb      	ldrb	r3, [r7, #2]
 8003398:	2b14      	cmp	r3, #20
 800339a:	d110      	bne.n	80033be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800339c:	7e3b      	ldrb	r3, [r7, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80033a2:	2310      	movs	r3, #16
 80033a4:	73bb      	strb	r3, [r7, #14]
 80033a6:	e001      	b.n	80033ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	461a      	mov	r2, r3
 80033b0:	2184      	movs	r1, #132	@ 0x84
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f003 fc7a 	bl	8006cac <VL53L0X_WrByte>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e0f1      	b.n	80035a2 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80033be:	78bb      	ldrb	r3, [r7, #2]
 80033c0:	2b15      	cmp	r3, #21
 80033c2:	f040 8097 	bne.w	80034f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80033c6:	2201      	movs	r2, #1
 80033c8:	21ff      	movs	r1, #255	@ 0xff
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f003 fc6e 	bl	8006cac <VL53L0X_WrByte>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f003 fc64 	bl	8006cac <VL53L0X_WrByte>
 80033e4:	4603      	mov	r3, r0
 80033e6:	461a      	mov	r2, r3
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80033ee:	2200      	movs	r2, #0
 80033f0:	21ff      	movs	r1, #255	@ 0xff
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f003 fc5a 	bl	8006cac <VL53L0X_WrByte>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	4313      	orrs	r3, r2
 8003400:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003402:	2201      	movs	r2, #1
 8003404:	2180      	movs	r1, #128	@ 0x80
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f003 fc50 	bl	8006cac <VL53L0X_WrByte>
 800340c:	4603      	mov	r3, r0
 800340e:	461a      	mov	r2, r3
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	4313      	orrs	r3, r2
 8003414:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8003416:	2202      	movs	r2, #2
 8003418:	2185      	movs	r1, #133	@ 0x85
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f003 fc46 	bl	8006cac <VL53L0X_WrByte>
 8003420:	4603      	mov	r3, r0
 8003422:	461a      	mov	r2, r3
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	4313      	orrs	r3, r2
 8003428:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800342a:	2204      	movs	r2, #4
 800342c:	21ff      	movs	r1, #255	@ 0xff
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f003 fc3c 	bl	8006cac <VL53L0X_WrByte>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	4313      	orrs	r3, r2
 800343c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800343e:	2200      	movs	r2, #0
 8003440:	21cd      	movs	r1, #205	@ 0xcd
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f003 fc32 	bl	8006cac <VL53L0X_WrByte>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	4313      	orrs	r3, r2
 8003450:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8003452:	2211      	movs	r2, #17
 8003454:	21cc      	movs	r1, #204	@ 0xcc
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f003 fc28 	bl	8006cac <VL53L0X_WrByte>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	4313      	orrs	r3, r2
 8003464:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8003466:	2207      	movs	r2, #7
 8003468:	21ff      	movs	r1, #255	@ 0xff
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f003 fc1e 	bl	8006cac <VL53L0X_WrByte>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4313      	orrs	r3, r2
 8003478:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800347a:	2200      	movs	r2, #0
 800347c:	21be      	movs	r1, #190	@ 0xbe
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f003 fc14 	bl	8006cac <VL53L0X_WrByte>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	4313      	orrs	r3, r2
 800348c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800348e:	2206      	movs	r2, #6
 8003490:	21ff      	movs	r1, #255	@ 0xff
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f003 fc0a 	bl	8006cac <VL53L0X_WrByte>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	4313      	orrs	r3, r2
 80034a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80034a2:	2209      	movs	r2, #9
 80034a4:	21cc      	movs	r1, #204	@ 0xcc
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f003 fc00 	bl	8006cac <VL53L0X_WrByte>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80034b6:	2200      	movs	r2, #0
 80034b8:	21ff      	movs	r1, #255	@ 0xff
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f003 fbf6 	bl	8006cac <VL53L0X_WrByte>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80034ca:	2201      	movs	r2, #1
 80034cc:	21ff      	movs	r1, #255	@ 0xff
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f003 fbec 	bl	8006cac <VL53L0X_WrByte>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	4313      	orrs	r3, r2
 80034dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f003 fbe2 	bl	8006cac <VL53L0X_WrByte>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	73fb      	strb	r3, [r7, #15]
 80034f2:	e056      	b.n	80035a2 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80034f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d120      	bne.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d81b      	bhi.n	800353a <VL53L0X_SetGpioConfig+0x1ce>
 8003502:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <VL53L0X_SetGpioConfig+0x19c>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800351d 	.word	0x0800351d
 800350c:	08003523 	.word	0x08003523
 8003510:	08003529 	.word	0x08003529
 8003514:	0800352f 	.word	0x0800352f
 8003518:	08003535 	.word	0x08003535
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800351c:	2300      	movs	r3, #0
 800351e:	73bb      	strb	r3, [r7, #14]
				break;
 8003520:	e00d      	b.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8003522:	2301      	movs	r3, #1
 8003524:	73bb      	strb	r3, [r7, #14]
				break;
 8003526:	e00a      	b.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003528:	2302      	movs	r3, #2
 800352a:	73bb      	strb	r3, [r7, #14]
				break;
 800352c:	e007      	b.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800352e:	2303      	movs	r3, #3
 8003530:	73bb      	strb	r3, [r7, #14]
				break;
 8003532:	e004      	b.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8003534:	2304      	movs	r3, #4
 8003536:	73bb      	strb	r3, [r7, #14]
				break;
 8003538:	e001      	b.n	800353e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800353a:	23f5      	movs	r3, #245	@ 0xf5
 800353c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800353e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8003546:	7bbb      	ldrb	r3, [r7, #14]
 8003548:	461a      	mov	r2, r3
 800354a:	210a      	movs	r1, #10
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f003 fbad 	bl	8006cac <VL53L0X_WrByte>
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8003556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800355e:	7e3b      	ldrb	r3, [r7, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	73bb      	strb	r3, [r7, #14]
 8003568:	e001      	b.n	800356e <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800356a:	2310      	movs	r3, #16
 800356c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800356e:	7bbb      	ldrb	r3, [r7, #14]
 8003570:	22ef      	movs	r2, #239	@ 0xef
 8003572:	2184      	movs	r1, #132	@ 0x84
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f003 fc19 	bl	8006dac <VL53L0X_UpdateByte>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	787a      	ldrb	r2, [r7, #1]
 800358a:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d105      	bne.n	80035a2 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003596:	2100      	movs	r1, #0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f83d 	bl	8003618 <VL53L0X_ClearInterruptMask>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop

080035b0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	460b      	mov	r3, r1
 80035be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80035c4:	f107 0314 	add.w	r3, r7, #20
 80035c8:	461a      	mov	r2, r3
 80035ca:	210e      	movs	r1, #14
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f003 fc4b 	bl	8006e68 <VL53L0X_RdWord>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80035d6:	8abb      	ldrh	r3, [r7, #20]
 80035d8:	045a      	lsls	r2, r3, #17
 80035da:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <VL53L0X_GetInterruptThresholds+0x64>)
 80035dc:	4013      	ands	r3, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80035e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10e      	bne.n	8003608 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	461a      	mov	r2, r3
 80035f0:	210c      	movs	r1, #12
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f003 fc38 	bl	8006e68 <VL53L0X_RdWord>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80035fc:	8abb      	ldrh	r3, [r7, #20]
 80035fe:	045a      	lsls	r2, r3, #17
 8003600:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <VL53L0X_GetInterruptThresholds+0x64>)
 8003602:	4013      	ands	r3, r2
		*pThresholdHigh =
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003608:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	1ffe0000 	.word	0x1ffe0000

08003618 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800362a:	2201      	movs	r2, #1
 800362c:	210b      	movs	r1, #11
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f003 fb3c 	bl	8006cac <VL53L0X_WrByte>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003638:	2200      	movs	r2, #0
 800363a:	210b      	movs	r1, #11
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f003 fb35 	bl	8006cac <VL53L0X_WrByte>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	4313      	orrs	r3, r2
 800364a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800364c:	f107 030d 	add.w	r3, r7, #13
 8003650:	461a      	mov	r2, r3
 8003652:	2113      	movs	r1, #19
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f003 fbdd 	bl	8006e14 <VL53L0X_RdByte>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4313      	orrs	r3, r2
 8003662:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	3301      	adds	r3, #1
 8003668:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d803      	bhi.n	8003682 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0d3      	beq.n	800362a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8003682:	7bbb      	ldrb	r3, [r7, #14]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003688:	23f4      	movs	r3, #244	@ 0xf4
 800368a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800368c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80036a6:	f107 030e 	add.w	r3, r7, #14
 80036aa:	461a      	mov	r2, r3
 80036ac:	2113      	movs	r1, #19
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f003 fbb0 	bl	8006e14 <VL53L0X_RdByte>
 80036b4:	4603      	mov	r3, r0
 80036b6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80036b8:	7bbb      	ldrb	r3, [r7, #14]
 80036ba:	f003 0207 	and.w	r2, r3, #7
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	f003 0318 	and.w	r3, r3, #24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80036cc:	23fa      	movs	r3, #250	@ 0xfa
 80036ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80036d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa03 	bl	8003afc <VL53L0X_perform_ref_spad_management>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80036fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8003714:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003718:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800371a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800371e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	461a      	mov	r2, r3
 8003726:	2128      	movs	r1, #40	@ 0x28
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f003 fb9d 	bl	8006e68 <VL53L0X_RdWord>
 800372e:	4603      	mov	r3, r0
 8003730:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8003732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11e      	bne.n	8003778 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800373a:	893b      	ldrh	r3, [r7, #8]
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	b29b      	uxth	r3, r3
 8003742:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003744:	893b      	ldrh	r3, [r7, #8]
 8003746:	461a      	mov	r2, r3
 8003748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	dd0b      	ble.n	8003768 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003750:	893a      	ldrh	r2, [r7, #8]
 8003752:	897b      	ldrh	r3, [r7, #10]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	b29b      	uxth	r3, r3
 8003758:	b21b      	sxth	r3, r3
 800375a:	461a      	mov	r2, r3
					* 250;
 800375c:	23fa      	movs	r3, #250	@ 0xfa
 800375e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e007      	b.n	8003778 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003768:	893b      	ldrh	r3, [r7, #8]
 800376a:	b21b      	sxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	23fa      	movs	r3, #250	@ 0xfa
 8003770:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003784:	b480      	push	{r7}
 8003786:	b08b      	sub	sp, #44	@ 0x2c
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003792:	2308      	movs	r3, #8
 8003794:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	f04f 32ff 	mov.w	r2, #4294967295
 80037a0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80037b4:	69b9      	ldr	r1, [r7, #24]
 80037b6:	fb01 f202 	mul.w	r2, r1, r2
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c2:	e030      	b.n	8003826 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	4413      	add	r3, r2
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80037d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11e      	bne.n	8003818 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80037da:	7ffa      	ldrb	r2, [r7, #31]
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	fa42 f303 	asr.w	r3, r2, r3
 80037e2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80037e8:	e016      	b.n	8003818 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80037ea:	7ffb      	ldrb	r3, [r7, #31]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <get_next_good_spad+0x88>
				success = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	fb03 f202 	mul.w	r2, r3, r2
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	4413      	add	r3, r2
 8003804:	461a      	mov	r2, r3
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	601a      	str	r2, [r3, #0]
				break;
 800380a:	e009      	b.n	8003820 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800380c:	7ffb      	ldrb	r3, [r7, #31]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	3301      	adds	r3, #1
 8003816:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003818:	6a3a      	ldr	r2, [r7, #32]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	d3e4      	bcc.n	80037ea <get_next_good_spad+0x66>
				coarseIndex++) {
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	3301      	adds	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d202      	bcs.n	8003834 <get_next_good_spad+0xb0>
 800382e:	7fbb      	ldrb	r3, [r7, #30]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0c7      	beq.n	80037c4 <get_next_good_spad+0x40>
		}
	}
}
 8003834:	bf00      	nop
 8003836:	372c      	adds	r7, #44	@ 0x2c
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003852:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <is_aperture+0x30>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <is_aperture+0x22>
		isAperture = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	200002b0 	.word	0x200002b0

08003874 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003874:	b480      	push	{r7}
 8003876:	b089      	sub	sp, #36	@ 0x24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003880:	2300      	movs	r3, #0
 8003882:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003884:	2308      	movs	r3, #8
 8003886:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	fbb3 f2f2 	udiv	r2, r3, r2
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	fb01 f202 	mul.w	r2, r1, r2
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80038ac:	23ce      	movs	r3, #206	@ 0xce
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e010      	b.n	80038d4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	b25a      	sxtb	r2, r3
 80038bc:	2101      	movs	r1, #1
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b259      	sxtb	r1, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4413      	add	r3, r2
 80038d0:	b2ca      	uxtb	r2, r1
 80038d2:	701a      	strb	r2, [r3, #0]

	return status;
 80038d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3724      	adds	r7, #36	@ 0x24
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80038ee:	2306      	movs	r3, #6
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	21b0      	movs	r1, #176	@ 0xb0
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f003 f97d 	bl	8006bf4 <VL53L0X_WriteMulti>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003914:	2306      	movs	r3, #6
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	21b0      	movs	r1, #176	@ 0xb0
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f003 f99a 	bl	8006c54 <VL53L0X_ReadMulti>
 8003920:	4603      	mov	r3, r0
 8003922:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003948:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800394a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800394e:	2300      	movs	r3, #0
 8003950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003952:	e02b      	b.n	80039ac <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff11 	bl	8003784 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d103      	bne.n	8003972 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800396a:	23ce      	movs	r3, #206	@ 0xce
 800396c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8003970:	e020      	b.n	80039b4 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	461a      	mov	r2, r3
 8003976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003978:	4413      	add	r3, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff ff60 	bl	8003840 <is_aperture>
 8003980:	4603      	mov	r3, r0
 8003982:	461a      	mov	r2, r3
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800398a:	23ce      	movs	r3, #206	@ 0xce
 800398c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8003990:	e010      	b.n	80039b4 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003996:	6a3a      	ldr	r2, [r7, #32]
 8003998:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800399a:	6838      	ldr	r0, [r7, #0]
 800399c:	f7ff ff6a 	bl	8003874 <enable_spad_bit>
		currentSpad++;
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	3301      	adds	r3, #1
 80039a4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80039a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a8:	3301      	adds	r3, #1
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d3cf      	bcc.n	8003954 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80039b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80039ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80039c2:	6839      	ldr	r1, [r7, #0]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f7ff ff8d 	bl	80038e4 <set_ref_spad_map>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80039d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d121      	bne.n	8003a1c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80039d8:	f107 0314 	add.w	r3, r7, #20
 80039dc:	4619      	mov	r1, r3
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff93 	bl	800390a <get_ref_spad_map>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80039ee:	e011      	b.n	8003a14 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	4413      	add	r3, r2
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	f107 0114 	add.w	r1, r7, #20
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	440b      	add	r3, r1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d003      	beq.n	8003a0e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003a06:	23ce      	movs	r3, #206	@ 0xce
 8003a08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8003a0c:	e006      	b.n	8003a1c <enable_ref_spads+0xec>
			}
			i++;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	3301      	adds	r3, #1
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8003a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3e9      	bcc.n	80039f0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003a1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3730      	adds	r7, #48	@ 0x30
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003a44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d107      	bne.n	8003a60 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003a50:	22c0      	movs	r2, #192	@ 0xc0
 8003a52:	2101      	movs	r1, #1
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f003 f929 	bl	8006cac <VL53L0X_WrByte>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003a60:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d108      	bne.n	8003a7a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003a68:	f107 0308 	add.w	r3, r7, #8
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fc4c 	bl	800330c <VL53L0X_PerformSingleRangingMeasurement>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003a7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d107      	bne.n	8003a92 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a82:	2201      	movs	r2, #1
 8003a84:	21ff      	movs	r1, #255	@ 0xff
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f003 f910 	bl	8006cac <VL53L0X_WrByte>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003a92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	21b6      	movs	r1, #182	@ 0xb6
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f003 f9e2 	bl	8006e68 <VL53L0X_RdWord>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003aaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	21ff      	movs	r1, #255	@ 0xff
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f003 f8f8 	bl	8006cac <VL53L0X_WrByte>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003ac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d112      	bne.n	8003af0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003aca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f003 f8ea 	bl	8006cac <VL53L0X_WrByte>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003aec:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8003af0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	@ 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003afc:	b590      	push	{r4, r7, lr}
 8003afe:	b09d      	sub	sp, #116	@ 0x74
 8003b00:	af06      	add	r7, sp, #24
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003b0e:	23b4      	movs	r3, #180	@ 0xb4
 8003b10:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8003b14:	2303      	movs	r3, #3
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8003b18:	232c      	movs	r3, #44	@ 0x2c
 8003b1a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003b28:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003b2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8003b36:	2306      	movs	r3, #6
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8003b60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b66:	e009      	b.n	8003b7c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b78:	3301      	adds	r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3f1      	bcc.n	8003b68 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b84:	2201      	movs	r2, #1
 8003b86:	21ff      	movs	r1, #255	@ 0xff
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f003 f88f 	bl	8006cac <VL53L0X_WrByte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003b94:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	214f      	movs	r1, #79	@ 0x4f
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f003 f883 	bl	8006cac <VL53L0X_WrByte>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003bac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003bb4:	222c      	movs	r2, #44	@ 0x2c
 8003bb6:	214e      	movs	r1, #78	@ 0x4e
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f003 f877 	bl	8006cac <VL53L0X_WrByte>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003bc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	21ff      	movs	r1, #255	@ 0xff
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f003 f86b 	bl	8006cac <VL53L0X_WrByte>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003bdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003be4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003be8:	461a      	mov	r2, r3
 8003bea:	21b6      	movs	r1, #182	@ 0xb6
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f003 f85d 	bl	8006cac <VL53L0X_WrByte>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003bf8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d107      	bne.n	8003c10 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	@ 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f003 f851 	bl	8006cac <VL53L0X_WrByte>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003c10:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10a      	bne.n	8003c2e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003c18:	f107 0210 	add.w	r2, r7, #16
 8003c1c:	f107 0111 	add.w	r1, r7, #17
 8003c20:	2300      	movs	r3, #0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fbbb 	bl	800439e <VL53L0X_perform_ref_calibration>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003c2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d121      	bne.n	8003c7a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c3c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8003c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c44:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8003c52:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003c56:	f107 0218 	add.w	r2, r7, #24
 8003c5a:	9204      	str	r2, [sp, #16]
 8003c5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff fe5e 	bl	8003930 <enable_ref_spads>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003c7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d174      	bne.n	8003d6c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003c86:	f107 0312 	add.w	r3, r7, #18
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7ff fecb 	bl	8003a28 <perform_ref_signal_measurement>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003c98:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d161      	bne.n	8003d64 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003ca0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003ca2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d25d      	bcs.n	8003d64 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cac:	e009      	b.n	8003cc2 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3f1      	bcc.n	8003cae <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003cca:	e002      	b.n	8003cd2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cce:	3301      	adds	r3, #1
 8003cd0:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003cd2:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fdb0 	bl	8003840 <is_aperture>
 8003ce0:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <VL53L0X_perform_ref_spad_management+0x1f2>
 8003ce6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d3ee      	bcc.n	8003ccc <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8003cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cf4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8003d02:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003d06:	f107 0218 	add.w	r2, r7, #24
 8003d0a:	9204      	str	r2, [sp, #16]
 8003d0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d0e:	9203      	str	r2, [sp, #12]
 8003d10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003d12:	9202      	str	r2, [sp, #8]
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4623      	mov	r3, r4
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff fe06 	bl	8003930 <enable_ref_spads>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003d2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11b      	bne.n	8003d6a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8003d36:	f107 0312 	add.w	r3, r7, #18
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fe73 	bl	8003a28 <perform_ref_signal_measurement>
 8003d42:	4603      	mov	r3, r0
 8003d44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8003d50:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8003d52:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d208      	bcs.n	8003d6a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8003d62:	e002      	b.n	8003d6a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	e000      	b.n	8003d6c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8003d6a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003d6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 80af 	bne.w	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8003d76:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8003d78:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f240 80aa 	bls.w	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8003d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d88:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d96:	4618      	mov	r0, r3
 8003d98:	f007 fa59 	bl	800b24e <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003d9c:	8a7b      	ldrh	r3, [r7, #18]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfb8      	it	lt
 8003da8:	425b      	neglt	r3, r3
 8003daa:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8003db2:	e086      	b.n	8003ec2 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8003dba:	f107 0314 	add.w	r3, r7, #20
 8003dbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc2:	f7ff fcdf 	bl	8003784 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dcc:	d103      	bne.n	8003dd6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003dce:	23ce      	movs	r3, #206	@ 0xce
 8003dd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8003dd4:	e07e      	b.n	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8003dd6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fd2e 	bl	8003840 <is_aperture>
 8003de4:	4603      	mov	r3, r0
 8003de6:	461a      	mov	r2, r3
 8003de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8003df4:	e06e      	b.n	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8003df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df8:	3301      	adds	r3, #1
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8003e06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fd32 	bl	8003874 <enable_spad_bit>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8003e16:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e20:	3301      	adds	r3, #1
 8003e22:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fd59 	bl	80038e4 <set_ref_spad_map>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8003e38:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d146      	bne.n	8003ece <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8003e40:	f107 0312 	add.w	r3, r7, #18
 8003e44:	4619      	mov	r1, r3
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f7ff fdee 	bl	8003a28 <perform_ref_signal_measurement>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8003e52:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d13b      	bne.n	8003ed2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8003e5a:	8a7b      	ldrh	r3, [r7, #18]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	425b      	neglt	r3, r3
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8003e6a:	8a7b      	ldrh	r3, [r7, #18]
 8003e6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d21c      	bcs.n	8003eac <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d914      	bls.n	8003ea4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8003e7a:	f107 031c 	add.w	r3, r7, #28
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fd2f 	bl	80038e4 <set_ref_spad_map>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 8003e92:	f107 011c 	add.w	r1, r7, #28
 8003e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f007 f9d8 	bl	800b24e <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003eaa:	e00a      	b.n	8003ec2 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 8003eb6:	f107 031c 	add.w	r3, r7, #28
 8003eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f007 f9c6 	bl	800b24e <memcpy>
		while (!complete) {
 8003ec2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f43f af74 	beq.w	8003db4 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003ecc:	e002      	b.n	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003ed2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ed4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d115      	bne.n	8003f08 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ee0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8003ee8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8003f08:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	375c      	adds	r7, #92	@ 0x5c
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}

08003f14 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b093      	sub	sp, #76	@ 0x4c
 8003f18:	af06      	add	r7, sp, #24
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8003f2c:	23b4      	movs	r3, #180	@ 0xb4
 8003f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8003f32:	2306      	movs	r3, #6
 8003f34:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8003f36:	232c      	movs	r3, #44	@ 0x2c
 8003f38:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	21ff      	movs	r1, #255	@ 0xff
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f002 feb4 	bl	8006cac <VL53L0X_WrByte>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003f4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8003f52:	2200      	movs	r2, #0
 8003f54:	214f      	movs	r1, #79	@ 0x4f
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f002 fea8 	bl	8006cac <VL53L0X_WrByte>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003f62:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8003f6a:	222c      	movs	r2, #44	@ 0x2c
 8003f6c:	214e      	movs	r1, #78	@ 0x4e
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f002 fe9c 	bl	8006cac <VL53L0X_WrByte>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003f7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d107      	bne.n	8003f92 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f82:	2200      	movs	r2, #0
 8003f84:	21ff      	movs	r1, #255	@ 0xff
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f002 fe90 	bl	8006cac <VL53L0X_WrByte>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003f92:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8003f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	21b6      	movs	r1, #182	@ 0xb6
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f002 fe82 	bl	8006cac <VL53L0X_WrByte>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb2:	e009      	b.n	8003fc8 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d3f1      	bcc.n	8003fb4 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d011      	beq.n	8003ffa <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003fd6:	e002      	b.n	8003fde <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8003fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fda:	3301      	adds	r3, #1
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003fde:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fc2a 	bl	8003840 <is_aperture>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <VL53L0X_set_reference_spads+0xe6>
 8003ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3ee      	bcc.n	8003fd8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8004006:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800400a:	79f9      	ldrb	r1, [r7, #7]
 800400c:	f107 0214 	add.w	r2, r7, #20
 8004010:	9204      	str	r2, [sp, #16]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	9203      	str	r2, [sp, #12]
 8004016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004018:	9202      	str	r2, [sp, #8]
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	4623      	mov	r3, r4
 8004022:	4602      	mov	r2, r0
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff fc83 	bl	8003930 <enable_ref_spads>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004030:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10c      	bne.n	8004052 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	79fa      	ldrb	r2, [r7, #7]
 800404e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004052:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004056:	4618      	mov	r0, r3
 8004058:	3734      	adds	r7, #52	@ 0x34
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}

0800405e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	2100      	movs	r1, #0
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f002 fe12 	bl	8006cac <VL53L0X_WrByte>
 8004088:	4603      	mov	r3, r0
 800408a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800408c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d104      	bne.n	800409e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f9bf 	bl	8004418 <VL53L0X_measurement_poll_for_completion>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800409e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80040a6:	2100      	movs	r1, #0
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fab5 	bl	8003618 <VL53L0X_ClearInterruptMask>
 80040ae:	4603      	mov	r3, r0
 80040b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80040b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f002 fdf4 	bl	8006cac <VL53L0X_WrByte>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]

	return Status;
 80040c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	70fb      	strb	r3, [r7, #3]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70bb      	strb	r3, [r7, #2]
 80040ea:	4613      	mov	r3, r2
 80040ec:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80040f6:	2201      	movs	r2, #1
 80040f8:	21ff      	movs	r1, #255	@ 0xff
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f002 fdd6 	bl	8006cac <VL53L0X_WrByte>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	4313      	orrs	r3, r2
 8004108:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f002 fdcc 	bl	8006cac <VL53L0X_WrByte>
 8004114:	4603      	mov	r3, r0
 8004116:	461a      	mov	r2, r3
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	4313      	orrs	r3, r2
 800411c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800411e:	2200      	movs	r2, #0
 8004120:	21ff      	movs	r1, #255	@ 0xff
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f002 fdc2 	bl	8006cac <VL53L0X_WrByte>
 8004128:	4603      	mov	r3, r0
 800412a:	461a      	mov	r2, r3
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	4313      	orrs	r3, r2
 8004130:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d01e      	beq.n	8004176 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004138:	f897 3020 	ldrb.w	r3, [r7, #32]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	21cb      	movs	r1, #203	@ 0xcb
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f002 fe65 	bl	8006e14 <VL53L0X_RdByte>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	4313      	orrs	r3, r2
 8004152:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004154:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02a      	beq.n	80041b2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800415c:	f107 030e 	add.w	r3, r7, #14
 8004160:	461a      	mov	r2, r3
 8004162:	21ee      	movs	r1, #238	@ 0xee
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f002 fe55 	bl	8006e14 <VL53L0X_RdByte>
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	4313      	orrs	r3, r2
 8004172:	73fb      	strb	r3, [r7, #15]
 8004174:	e01d      	b.n	80041b2 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800417e:	78bb      	ldrb	r3, [r7, #2]
 8004180:	461a      	mov	r2, r3
 8004182:	21cb      	movs	r1, #203	@ 0xcb
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f002 fd91 	bl	8006cac <VL53L0X_WrByte>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	4313      	orrs	r3, r2
 8004192:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004194:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800419c:	787b      	ldrb	r3, [r7, #1]
 800419e:	2280      	movs	r2, #128	@ 0x80
 80041a0:	21ee      	movs	r1, #238	@ 0xee
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f002 fe02 	bl	8006dac <VL53L0X_UpdateByte>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80041b2:	2201      	movs	r2, #1
 80041b4:	21ff      	movs	r1, #255	@ 0xff
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f002 fd78 	bl	8006cac <VL53L0X_WrByte>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80041c6:	2201      	movs	r2, #1
 80041c8:	2100      	movs	r1, #0
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f002 fd6e 	bl	8006cac <VL53L0X_WrByte>
 80041d0:	4603      	mov	r3, r0
 80041d2:	461a      	mov	r2, r3
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80041da:	2200      	movs	r2, #0
 80041dc:	21ff      	movs	r1, #255	@ 0xff
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f002 fd64 	bl	8006cac <VL53L0X_WrByte>
 80041e4:	4603      	mov	r3, r0
 80041e6:	461a      	mov	r2, r3
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	f023 0310 	bic.w	r3, r3, #16
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	701a      	strb	r2, [r3, #0]

	return Status;
 80041fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	@ 0x28
 800420a:	af04      	add	r7, sp, #16
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4611      	mov	r1, r2
 8004212:	461a      	mov	r2, r3
 8004214:	460b      	mov	r3, r1
 8004216:	71fb      	strb	r3, [r7, #7]
 8004218:	4613      	mov	r3, r2
 800421a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004220:	2300      	movs	r3, #0
 8004222:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004230:	79bb      	ldrb	r3, [r7, #6]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800423c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800423e:	2201      	movs	r2, #1
 8004240:	2101      	movs	r1, #1
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f002 fd32 	bl	8006cac <VL53L0X_WrByte>
 8004248:	4603      	mov	r3, r0
 800424a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800424c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8004254:	2140      	movs	r1, #64	@ 0x40
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff01 	bl	800405e <VL53L0X_perform_single_ref_calibration>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d115      	bne.n	8004294 <VL53L0X_perform_vhv_calibration+0x8e>
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d112      	bne.n	8004294 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800426e:	7d39      	ldrb	r1, [r7, #20]
 8004270:	7d7a      	ldrb	r2, [r7, #21]
 8004272:	2300      	movs	r3, #0
 8004274:	9303      	str	r3, [sp, #12]
 8004276:	2301      	movs	r3, #1
 8004278:	9302      	str	r3, [sp, #8]
 800427a:	f107 0313 	add.w	r3, r7, #19
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	460b      	mov	r3, r1
 8004286:	2101      	movs	r1, #1
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff ff23 	bl	80040d4 <VL53L0X_ref_calibration_io>
 800428e:	4603      	mov	r3, r0
 8004290:	75fb      	strb	r3, [r7, #23]
 8004292:	e002      	b.n	800429a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800429a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d112      	bne.n	80042c8 <VL53L0X_perform_vhv_calibration+0xc2>
 80042a2:	79bb      	ldrb	r3, [r7, #6]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00f      	beq.n	80042c8 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80042a8:	7dbb      	ldrb	r3, [r7, #22]
 80042aa:	461a      	mov	r2, r3
 80042ac:	2101      	movs	r1, #1
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f002 fcfc 	bl	8006cac <VL53L0X_WrByte>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80042b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d103      	bne.n	80042c8 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	7dba      	ldrb	r2, [r7, #22]
 80042c4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80042c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af04      	add	r7, sp, #16
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	460b      	mov	r3, r1
 80042e4:	71fb      	strb	r3, [r7, #7]
 80042e6:	4613      	mov	r3, r2
 80042e8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80042fa:	79bb      	ldrb	r3, [r7, #6]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8004306:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8004308:	2202      	movs	r2, #2
 800430a:	2101      	movs	r1, #1
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f002 fccd 	bl	8006cac <VL53L0X_WrByte>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800431e:	2100      	movs	r1, #0
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f7ff fe9c 	bl	800405e <VL53L0X_perform_single_ref_calibration>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800432a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d115      	bne.n	800435e <VL53L0X_perform_phase_calibration+0x8a>
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d112      	bne.n	800435e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004338:	7d39      	ldrb	r1, [r7, #20]
 800433a:	7d7a      	ldrb	r2, [r7, #21]
 800433c:	2301      	movs	r3, #1
 800433e:	9303      	str	r3, [sp, #12]
 8004340:	2300      	movs	r3, #0
 8004342:	9302      	str	r3, [sp, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	f107 0313 	add.w	r3, r7, #19
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	460b      	mov	r3, r1
 8004350:	2101      	movs	r1, #1
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff febe 	bl	80040d4 <VL53L0X_ref_calibration_io>
 8004358:	4603      	mov	r3, r0
 800435a:	75fb      	strb	r3, [r7, #23]
 800435c:	e002      	b.n	8004364 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004364:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d112      	bne.n	8004392 <VL53L0X_perform_phase_calibration+0xbe>
 800436c:	79bb      	ldrb	r3, [r7, #6]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00f      	beq.n	8004392 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004372:	7dbb      	ldrb	r3, [r7, #22]
 8004374:	461a      	mov	r2, r3
 8004376:	2101      	movs	r1, #1
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f002 fc97 	bl	8006cac <VL53L0X_WrByte>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004382:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	7dba      	ldrb	r2, [r7, #22]
 800438e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8004392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b086      	sub	sp, #24
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80043ba:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	2300      	movs	r3, #0
 80043c0:	68b9      	ldr	r1, [r7, #8]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f7ff ff1f 	bl	8004206 <VL53L0X_perform_vhv_calibration>
 80043c8:	4603      	mov	r3, r0
 80043ca:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80043cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff ff7a 	bl	80042d4 <VL53L0X_perform_phase_calibration>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80043e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043ec:	7dbb      	ldrb	r3, [r7, #22]
 80043ee:	461a      	mov	r2, r3
 80043f0:	2101      	movs	r1, #1
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f002 fc5a 	bl	8006cac <VL53L0X_WrByte>
 80043f8:	4603      	mov	r3, r0
 80043fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80043fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	7dba      	ldrb	r2, [r7, #22]
 8004408:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800440c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004420:	2300      	movs	r3, #0
 8004422:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800442c:	f107 030f 	add.w	r3, r7, #15
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fe fe0e 	bl	8003054 <VL53L0X_GetMeasurementDataReady>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800443c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d110      	bne.n	8004466 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d00f      	beq.n	800446a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3301      	adds	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004456:	d302      	bcc.n	800445e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004458:	23f9      	movs	r3, #249	@ 0xf9
 800445a:	75fb      	strb	r3, [r7, #23]
			break;
 800445c:	e006      	b.n	800446c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f002 fd74 	bl	8006f4c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004464:	e7e2      	b.n	800442c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800446a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800446c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	3301      	adds	r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800449e:	b480      	push	{r7}
 80044a0:	b085      	sub	sp, #20
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80044d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044d4:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80044d6:	e002      	b.n	80044de <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	089b      	lsrs	r3, r3, #2
 80044dc:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d8f8      	bhi.n	80044d8 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80044e6:	e017      	b.n	8004518 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4413      	add	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d30b      	bcc.n	800450c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4413      	add	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	4413      	add	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	e002      	b.n	8004512 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e4      	bne.n	80044e8 <VL53L0X_isqrt+0x24>
	}

	return res;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004538:	2200      	movs	r2, #0
 800453a:	2183      	movs	r1, #131	@ 0x83
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f002 fbb5 	bl	8006cac <VL53L0X_WrByte>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	4313      	orrs	r3, r2
 800454a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800454c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11e      	bne.n	8004592 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004558:	f107 030f 	add.w	r3, r7, #15
 800455c:	461a      	mov	r2, r3
 800455e:	2183      	movs	r1, #131	@ 0x83
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f002 fc57 	bl	8006e14 <VL53L0X_RdByte>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <VL53L0X_device_read_strobe+0x5a>
 8004570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	3301      	adds	r3, #1
 800457c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004584:	d3e8      	bcc.n	8004558 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800458c:	d301      	bcc.n	8004592 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800458e:	23f9      	movs	r3, #249	@ 0xf9
 8004590:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8004592:	2201      	movs	r2, #1
 8004594:	2183      	movs	r1, #131	@ 0x83
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f002 fb88 	bl	8006cac <VL53L0X_WrByte>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80045a6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b098      	sub	sp, #96	@ 0x60
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80045e2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80045e6:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80045fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80045fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004602:	2b07      	cmp	r3, #7
 8004604:	f000 8408 	beq.w	8004e18 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004608:	2201      	movs	r2, #1
 800460a:	2180      	movs	r1, #128	@ 0x80
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f002 fb4d 	bl	8006cac <VL53L0X_WrByte>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800461a:	4313      	orrs	r3, r2
 800461c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004620:	2201      	movs	r2, #1
 8004622:	21ff      	movs	r1, #255	@ 0xff
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f002 fb41 	bl	8006cac <VL53L0X_WrByte>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004632:	4313      	orrs	r3, r2
 8004634:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004638:	2200      	movs	r2, #0
 800463a:	2100      	movs	r1, #0
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f002 fb35 	bl	8006cac <VL53L0X_WrByte>
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800464a:	4313      	orrs	r3, r2
 800464c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004650:	2206      	movs	r2, #6
 8004652:	21ff      	movs	r1, #255	@ 0xff
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f002 fb29 	bl	8006cac <VL53L0X_WrByte>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004662:	4313      	orrs	r3, r2
 8004664:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004668:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800466c:	461a      	mov	r2, r3
 800466e:	2183      	movs	r1, #131	@ 0x83
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f002 fbcf 	bl	8006e14 <VL53L0X_RdByte>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800467e:	4313      	orrs	r3, r2
 8004680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004684:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	2183      	movs	r1, #131	@ 0x83
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f002 fb0a 	bl	8006cac <VL53L0X_WrByte>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80046a6:	2207      	movs	r2, #7
 80046a8:	21ff      	movs	r1, #255	@ 0xff
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f002 fafe 	bl	8006cac <VL53L0X_WrByte>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80046be:	2201      	movs	r2, #1
 80046c0:	2181      	movs	r1, #129	@ 0x81
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f002 faf2 	bl	8006cac <VL53L0X_WrByte>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f002 fc38 	bl	8006f4c <VL53L0X_PollingDelay>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80046ea:	2201      	movs	r2, #1
 80046ec:	2180      	movs	r1, #128	@ 0x80
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f002 fadc 	bl	8006cac <VL53L0X_WrByte>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8098 	beq.w	800483e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800470e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004712:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 8091 	bne.w	800483e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800471c:	226b      	movs	r2, #107	@ 0x6b
 800471e:	2194      	movs	r1, #148	@ 0x94
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f002 fac3 	bl	8006cac <VL53L0X_WrByte>
 8004726:	4603      	mov	r3, r0
 8004728:	461a      	mov	r2, r3
 800472a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800472e:	4313      	orrs	r3, r2
 8004730:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff fef9 	bl	800452c <VL53L0X_device_read_strobe>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004742:	4313      	orrs	r3, r2
 8004744:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004748:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800474c:	461a      	mov	r2, r3
 800474e:	2190      	movs	r1, #144	@ 0x90
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f002 fbbf 	bl	8006ed4 <VL53L0X_RdDWord>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800475e:	4313      	orrs	r3, r2
 8004760:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800476e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	0bdb      	lsrs	r3, r3, #15
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004780:	2224      	movs	r2, #36	@ 0x24
 8004782:	2194      	movs	r1, #148	@ 0x94
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f002 fa91 	bl	8006cac <VL53L0X_WrByte>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
 800478e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004792:	4313      	orrs	r3, r2
 8004794:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff fec7 	bl	800452c <VL53L0X_device_read_strobe>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80047ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047b0:	461a      	mov	r2, r3
 80047b2:	2190      	movs	r1, #144	@ 0x90
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f002 fb8d 	bl	8006ed4 <VL53L0X_RdDWord>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	0e1b      	lsrs	r3, r3, #24
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80047d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80047e6:	2225      	movs	r2, #37	@ 0x25
 80047e8:	2194      	movs	r1, #148	@ 0x94
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f002 fa5e 	bl	8006cac <VL53L0X_WrByte>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fe94 	bl	800452c <VL53L0X_device_read_strobe>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800480c:	4313      	orrs	r3, r2
 800480e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004812:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004816:	461a      	mov	r2, r3
 8004818:	2190      	movs	r1, #144	@ 0x90
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f002 fb5a 	bl	8006ed4 <VL53L0X_RdDWord>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004828:	4313      	orrs	r3, r2
 800482a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	b2db      	uxtb	r3, r3
 8004834:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	0c1b      	lsrs	r3, r3, #16
 800483a:	b2db      	uxtb	r3, r3
 800483c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8189 	beq.w	8004b5c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800484a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800484e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 8182 	bne.w	8004b5c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8004858:	2202      	movs	r2, #2
 800485a:	2194      	movs	r1, #148	@ 0x94
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f002 fa25 	bl	8006cac <VL53L0X_WrByte>
 8004862:	4603      	mov	r3, r0
 8004864:	461a      	mov	r2, r3
 8004866:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800486a:	4313      	orrs	r3, r2
 800486c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff fe5b 	bl	800452c <VL53L0X_device_read_strobe>
 8004876:	4603      	mov	r3, r0
 8004878:	461a      	mov	r2, r3
 800487a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800487e:	4313      	orrs	r3, r2
 8004880:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004884:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8004888:	461a      	mov	r2, r3
 800488a:	2190      	movs	r1, #144	@ 0x90
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f002 fac1 	bl	8006e14 <VL53L0X_RdByte>
 8004892:	4603      	mov	r3, r0
 8004894:	461a      	mov	r2, r3
 8004896:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800489a:	4313      	orrs	r3, r2
 800489c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80048a0:	227b      	movs	r2, #123	@ 0x7b
 80048a2:	2194      	movs	r1, #148	@ 0x94
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f002 fa01 	bl	8006cac <VL53L0X_WrByte>
 80048aa:	4603      	mov	r3, r0
 80048ac:	461a      	mov	r2, r3
 80048ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fe37 	bl	800452c <VL53L0X_device_read_strobe>
 80048be:	4603      	mov	r3, r0
 80048c0:	461a      	mov	r2, r3
 80048c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80048cc:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80048d0:	461a      	mov	r2, r3
 80048d2:	2190      	movs	r1, #144	@ 0x90
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f002 fa9d 	bl	8006e14 <VL53L0X_RdByte>
 80048da:	4603      	mov	r3, r0
 80048dc:	461a      	mov	r2, r3
 80048de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80048e8:	2277      	movs	r2, #119	@ 0x77
 80048ea:	2194      	movs	r1, #148	@ 0x94
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f002 f9dd 	bl	8006cac <VL53L0X_WrByte>
 80048f2:	4603      	mov	r3, r0
 80048f4:	461a      	mov	r2, r3
 80048f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fe13 	bl	800452c <VL53L0X_device_read_strobe>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800490e:	4313      	orrs	r3, r2
 8004910:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004914:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004918:	461a      	mov	r2, r3
 800491a:	2190      	movs	r1, #144	@ 0x90
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f002 fad9 	bl	8006ed4 <VL53L0X_RdDWord>
 8004922:	4603      	mov	r3, r0
 8004924:	461a      	mov	r2, r3
 8004926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800492a:	4313      	orrs	r3, r2
 800492c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	0e5b      	lsrs	r3, r3, #25
 8004934:	b2db      	uxtb	r3, r3
 8004936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800493a:	b2db      	uxtb	r3, r3
 800493c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004948:	b2db      	uxtb	r3, r3
 800494a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	0adb      	lsrs	r3, r3, #11
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004956:	b2db      	uxtb	r3, r3
 8004958:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004964:	b2db      	uxtb	r3, r3
 8004966:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	b2db      	uxtb	r3, r3
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800497a:	2278      	movs	r2, #120	@ 0x78
 800497c:	2194      	movs	r1, #148	@ 0x94
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f002 f994 	bl	8006cac <VL53L0X_WrByte>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800498c:	4313      	orrs	r3, r2
 800498e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fdca 	bl	800452c <VL53L0X_device_read_strobe>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80049a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80049aa:	461a      	mov	r2, r3
 80049ac:	2190      	movs	r1, #144	@ 0x90
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f002 fa90 	bl	8006ed4 <VL53L0X_RdDWord>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049bc:	4313      	orrs	r3, r2
 80049be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80049c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c4:	0f5b      	lsrs	r3, r3, #29
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049cc:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80049ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049d2:	4413      	add	r3, r2
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80049d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049da:	0d9b      	lsrs	r3, r3, #22
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	0bdb      	lsrs	r3, r3, #15
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	085b      	lsrs	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	019b      	lsls	r3, r3, #6
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004a22:	2279      	movs	r2, #121	@ 0x79
 8004a24:	2194      	movs	r1, #148	@ 0x94
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f002 f940 	bl	8006cac <VL53L0X_WrByte>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7ff fd76 	bl	800452c <VL53L0X_device_read_strobe>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a52:	461a      	mov	r2, r3
 8004a54:	2190      	movs	r1, #144	@ 0x90
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f002 fa3c 	bl	8006ed4 <VL53L0X_RdDWord>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	0e9b      	lsrs	r3, r3, #26
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a74:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004a76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a7a:	4413      	add	r3, r2
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a82:	0cdb      	lsrs	r3, r3, #19
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	0b1b      	lsrs	r3, r3, #12
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004abc:	227a      	movs	r2, #122	@ 0x7a
 8004abe:	2194      	movs	r1, #148	@ 0x94
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f002 f8f3 	bl	8006cac <VL53L0X_WrByte>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff fd29 	bl	800452c <VL53L0X_device_read_strobe>
 8004ada:	4603      	mov	r3, r0
 8004adc:	461a      	mov	r2, r3
 8004ade:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004ae8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004aec:	461a      	mov	r2, r3
 8004aee:	2190      	movs	r1, #144	@ 0x90
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f002 f9ef 	bl	8006ed4 <VL53L0X_RdDWord>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b06:	0f9b      	lsrs	r3, r3, #30
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004b10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b14:	4413      	add	r3, r2
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1c:	0ddb      	lsrs	r3, r3, #23
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	0c1b      	lsrs	r3, r3, #16
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	0a5b      	lsrs	r3, r3, #9
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8004b56:	2300      	movs	r3, #0
 8004b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80f1 	beq.w	8004d4a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004b68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004b6c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 80ea 	bne.w	8004d4a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004b76:	227b      	movs	r2, #123	@ 0x7b
 8004b78:	2194      	movs	r1, #148	@ 0x94
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f002 f896 	bl	8006cac <VL53L0X_WrByte>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fccc 	bl	800452c <VL53L0X_device_read_strobe>
 8004b94:	4603      	mov	r3, r0
 8004b96:	461a      	mov	r2, r3
 8004b98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004ba2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	2190      	movs	r1, #144	@ 0x90
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f002 f992 	bl	8006ed4 <VL53L0X_RdDWord>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004bbe:	227c      	movs	r2, #124	@ 0x7c
 8004bc0:	2194      	movs	r1, #148	@ 0x94
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f002 f872 	bl	8006cac <VL53L0X_WrByte>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fca8 	bl	800452c <VL53L0X_device_read_strobe>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2190      	movs	r1, #144	@ 0x90
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f002 f96e 	bl	8006ed4 <VL53L0X_RdDWord>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004c06:	2273      	movs	r2, #115	@ 0x73
 8004c08:	2194      	movs	r1, #148	@ 0x94
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f002 f84e 	bl	8006cac <VL53L0X_WrByte>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fc84 	bl	800452c <VL53L0X_device_read_strobe>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c36:	461a      	mov	r2, r3
 8004c38:	2190      	movs	r1, #144	@ 0x90
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f002 f94a 	bl	8006ed4 <VL53L0X_RdDWord>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004c56:	2274      	movs	r2, #116	@ 0x74
 8004c58:	2194      	movs	r1, #148	@ 0x94
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f002 f826 	bl	8006cac <VL53L0X_WrByte>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fc5c 	bl	800452c <VL53L0X_device_read_strobe>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c86:	461a      	mov	r2, r3
 8004c88:	2190      	movs	r1, #144	@ 0x90
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f002 f922 	bl	8006ed4 <VL53L0X_RdDWord>
 8004c90:	4603      	mov	r3, r0
 8004c92:	461a      	mov	r2, r3
 8004c94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004ca2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004ca8:	2275      	movs	r2, #117	@ 0x75
 8004caa:	2194      	movs	r1, #148	@ 0x94
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 fffd 	bl	8006cac <VL53L0X_WrByte>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fc33 	bl	800452c <VL53L0X_device_read_strobe>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004cd4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2190      	movs	r1, #144	@ 0x90
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f002 f8f9 	bl	8006ed4 <VL53L0X_RdDWord>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004cf8:	2276      	movs	r2, #118	@ 0x76
 8004cfa:	2194      	movs	r1, #148	@ 0x94
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f001 ffd5 	bl	8006cac <VL53L0X_WrByte>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461a      	mov	r2, r3
 8004d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fc0b 	bl	800452c <VL53L0X_device_read_strobe>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2190      	movs	r1, #144	@ 0x90
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f002 f8d1 	bl	8006ed4 <VL53L0X_RdDWord>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8004d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d42:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8004d44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d46:	4313      	orrs	r3, r2
 8004d48:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2181      	movs	r1, #129	@ 0x81
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 ffac 	bl	8006cac <VL53L0X_WrByte>
 8004d54:	4603      	mov	r3, r0
 8004d56:	461a      	mov	r2, r3
 8004d58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004d62:	2206      	movs	r2, #6
 8004d64:	21ff      	movs	r1, #255	@ 0xff
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 ffa0 	bl	8006cac <VL53L0X_WrByte>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004d7a:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2183      	movs	r1, #131	@ 0x83
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f002 f846 	bl	8006e14 <VL53L0X_RdByte>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8004d96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d9a:	f023 0304 	bic.w	r3, r3, #4
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	2183      	movs	r1, #131	@ 0x83
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f001 ff81 	bl	8006cac <VL53L0X_WrByte>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004db8:	2201      	movs	r2, #1
 8004dba:	21ff      	movs	r1, #255	@ 0xff
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f001 ff75 	bl	8006cac <VL53L0X_WrByte>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 ff69 	bl	8006cac <VL53L0X_WrByte>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004de8:	2200      	movs	r2, #0
 8004dea:	21ff      	movs	r1, #255	@ 0xff
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 ff5d 	bl	8006cac <VL53L0X_WrByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004e00:	2200      	movs	r2, #0
 8004e02:	2180      	movs	r1, #128	@ 0x80
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f001 ff51 	bl	8006cac <VL53L0X_WrByte>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004e18:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 808f 	bne.w	8004f40 <VL53L0X_get_info_from_device+0x98e>
 8004e22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e26:	2b07      	cmp	r3, #7
 8004e28:	f000 808a 	beq.w	8004f40 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d024      	beq.n	8004e80 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8004e36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e3a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11e      	bne.n	8004e80 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8004e48:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8004e52:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004e56:	2300      	movs	r3, #0
 8004e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e5a:	e00e      	b.n	8004e7a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8004e5c:	f107 0208 	add.w	r2, r7, #8
 8004e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e62:	4413      	add	r3, r2
 8004e64:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8004e70:	460a      	mov	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e76:	3301      	adds	r3, #1
 8004e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e7c:	2b05      	cmp	r3, #5
 8004e7e:	dded      	ble.n	8004e5c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e8e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d112      	bne.n	8004ebc <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e96:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ea0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	33f3      	adds	r3, #243	@ 0xf3
 8004eae:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004eb8:	f006 f9c1 	bl	800b23e <strcpy>

		}

		if (((option & 4) == 4) &&
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d030      	beq.n	8004f28 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004eca:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d12a      	bne.n	8004f28 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004ee2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d011      	beq.n	8004f20 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8004efc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8004f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8004f10:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8004f14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8004f18:	425b      	negs	r3, r3
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8004f20:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8004f28:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8004f36:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f40:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3760      	adds	r7, #96	@ 0x60
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8004f58:	f240 6277 	movw	r2, #1655	@ 0x677
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8004f64:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8004f68:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d015      	beq.n	8004fce <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004fa8:	e005      	b.n	8004fb6 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2bff      	cmp	r3, #255	@ 0xff
 8004fba:	d8f6      	bhi.n	8004faa <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004fca:	4413      	add	r3, r2
 8004fcc:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004fce:	8afb      	ldrh	r3, [r7, #22]

}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	0a12      	lsrs	r2, r2, #8
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	4619      	mov	r1, r3
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff ff94 	bl	8004f4c <VL53L0X_calc_macro_period_ps>
 8005024:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800502c:	4a0a      	ldr	r2, [pc, #40]	@ (8005058 <VL53L0X_calc_timeout_mclks+0x50>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	099b      	lsrs	r3, r3, #6
 8005034:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800503c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	085b      	lsrs	r3, r3, #1
 8005044:	441a      	add	r2, r3
	timeout_period_mclks =
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800504e:	69fb      	ldr	r3, [r7, #28]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	10624dd3 	.word	0x10624dd3

0800505c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
 8005068:	4613      	mov	r3, r2
 800506a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005070:	787b      	ldrb	r3, [r7, #1]
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff69 	bl	8004f4c <VL53L0X_calc_macro_period_ps>
 800507a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005082:	4a0a      	ldr	r2, [pc, #40]	@ (80050ac <VL53L0X_calc_timeout_us+0x50>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8005098:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <VL53L0X_calc_timeout_us+0x50>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80050a2:	697b      	ldr	r3, [r7, #20]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	10624dd3 	.word	0x10624dd3

080050b0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08c      	sub	sp, #48	@ 0x30
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	460b      	mov	r3, r1
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <get_sequence_step_timeout+0x38>
 80050dc:	7afb      	ldrb	r3, [r7, #11]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d002      	beq.n	80050e8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d127      	bne.n	8005138 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80050e8:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80050ec:	461a      	mov	r2, r3
 80050ee:	2100      	movs	r1, #0
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7fd fa59 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80050f6:	4603      	mov	r3, r0
 80050f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80050fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005100:	2b00      	cmp	r3, #0
 8005102:	d109      	bne.n	8005118 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005104:	f107 0320 	add.w	r3, r7, #32
 8005108:	461a      	mov	r2, r3
 800510a:	2146      	movs	r1, #70	@ 0x46
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f001 fe81 	bl	8006e14 <VL53L0X_RdByte>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005118:	f897 3020 	ldrb.w	r3, [r7, #32]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff ff5d 	bl	8004fdc <VL53L0X_decode_timeout>
 8005122:	4603      	mov	r3, r0
 8005124:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005126:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800512a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800512c:	4619      	mov	r1, r3
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff ff94 	bl	800505c <VL53L0X_calc_timeout_us>
 8005134:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005136:	e092      	b.n	800525e <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d135      	bne.n	80051aa <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800513e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005142:	461a      	mov	r2, r3
 8005144:	2100      	movs	r1, #0
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7fd fa2e 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 800514c:	4603      	mov	r3, r0
 800514e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005152:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 8081 	bne.w	800525e <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800515c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005160:	461a      	mov	r2, r3
 8005162:	2100      	movs	r1, #0
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7fd fa1f 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 800516a:	4603      	mov	r3, r0
 800516c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005170:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005174:	2b00      	cmp	r3, #0
 8005176:	d109      	bne.n	800518c <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8005178:	f107 031e 	add.w	r3, r7, #30
 800517c:	461a      	mov	r2, r3
 800517e:	2151      	movs	r1, #81	@ 0x51
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f001 fe71 	bl	8006e68 <VL53L0X_RdWord>
 8005186:	4603      	mov	r3, r0
 8005188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800518c:	8bfb      	ldrh	r3, [r7, #30]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ff24 	bl	8004fdc <VL53L0X_decode_timeout>
 8005194:	4603      	mov	r3, r0
 8005196:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005198:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800519c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff ff5b 	bl	800505c <VL53L0X_calc_timeout_us>
 80051a6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80051a8:	e059      	b.n	800525e <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d156      	bne.n	800525e <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80051b0:	f107 0314 	add.w	r3, r7, #20
 80051b4:	4619      	mov	r1, r3
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7fd fb00 	bl	80027bc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01d      	beq.n	8005202 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80051c6:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80051ca:	461a      	mov	r2, r3
 80051cc:	2100      	movs	r1, #0
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7fd f9ea 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80051da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10f      	bne.n	8005202 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 80051e2:	f107 031e 	add.w	r3, r7, #30
 80051e6:	461a      	mov	r2, r3
 80051e8:	2151      	movs	r1, #81	@ 0x51
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f001 fe3c 	bl	8006e68 <VL53L0X_RdWord>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80051f6:	8bfb      	ldrh	r3, [r7, #30]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff feef 	bl	8004fdc <VL53L0X_decode_timeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005202:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800520a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800520e:	461a      	mov	r2, r3
 8005210:	2101      	movs	r1, #1
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7fd f9c8 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800521e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8005226:	f107 031c 	add.w	r3, r7, #28
 800522a:	461a      	mov	r2, r3
 800522c:	2171      	movs	r1, #113	@ 0x71
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f001 fe1a 	bl	8006e68 <VL53L0X_RdWord>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800523a:	8bbb      	ldrh	r3, [r7, #28]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fecd 	bl	8004fdc <VL53L0X_decode_timeout>
 8005242:	4603      	mov	r3, r0
 8005244:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8005246:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005248:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800524e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005252:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005254:	4619      	mov	r1, r3
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ff00 	bl	800505c <VL53L0X_calc_timeout_us>
 800525c:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005262:	601a      	str	r2, [r3, #0]

	return Status;
 8005264:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005268:	4618      	mov	r0, r3
 800526a:	3730      	adds	r7, #48	@ 0x30
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08a      	sub	sp, #40	@ 0x28
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	460b      	mov	r3, r1
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <set_sequence_step_timeout+0x26>
 800528a:	7afb      	ldrb	r3, [r7, #11]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d002      	beq.n	8005296 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d138      	bne.n	8005308 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005296:	f107 031b 	add.w	r3, r7, #27
 800529a:	461a      	mov	r2, r3
 800529c:	2100      	movs	r1, #0
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7fd f982 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80052a4:	4603      	mov	r3, r0
 80052a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80052aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d11a      	bne.n	80052e8 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80052b2:	7efb      	ldrb	r3, [r7, #27]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fea5 	bl	8005008 <VL53L0X_calc_timeout_mclks>
 80052be:	4603      	mov	r3, r0
 80052c0:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80052c2:	8bbb      	ldrh	r3, [r7, #28]
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c8:	d903      	bls.n	80052d2 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80052ca:	23ff      	movs	r3, #255	@ 0xff
 80052cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80052d0:	e004      	b.n	80052dc <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80052d2:	8bbb      	ldrh	r3, [r7, #28]
 80052d4:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80052d6:	3b01      	subs	r3, #1
 80052d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80052e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f040 80ab 	bne.w	8005448 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80052f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052f6:	461a      	mov	r2, r3
 80052f8:	2146      	movs	r1, #70	@ 0x46
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f001 fcd6 	bl	8006cac <VL53L0X_WrByte>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8005306:	e09f      	b.n	8005448 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d135      	bne.n	800537a <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800530e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11b      	bne.n	800534e <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005316:	f107 031b 	add.w	r3, r7, #27
 800531a:	461a      	mov	r2, r3
 800531c:	2100      	movs	r1, #0
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7fd f942 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800532a:	7efb      	ldrb	r3, [r7, #27]
 800532c:	461a      	mov	r2, r3
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff fe69 	bl	8005008 <VL53L0X_calc_timeout_mclks>
 8005336:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005338:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800533a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe23 	bl	8004f88 <VL53L0X_encode_timeout>
 8005342:	4603      	mov	r3, r0
 8005344:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005346:	8b3a      	ldrh	r2, [r7, #24]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800534e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005352:	2b00      	cmp	r3, #0
 8005354:	d108      	bne.n	8005368 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8005356:	8b3b      	ldrh	r3, [r7, #24]
 8005358:	461a      	mov	r2, r3
 800535a:	2151      	movs	r1, #81	@ 0x51
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f001 fcc9 	bl	8006cf4 <VL53L0X_WrWord>
 8005362:	4603      	mov	r3, r0
 8005364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800536c:	2b00      	cmp	r3, #0
 800536e:	d16b      	bne.n	8005448 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8005378:	e066      	b.n	8005448 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800537a:	7afb      	ldrb	r3, [r7, #11]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d160      	bne.n	8005442 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005380:	f107 0310 	add.w	r3, r7, #16
 8005384:	4619      	mov	r1, r3
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7fd fa18 	bl	80027bc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01d      	beq.n	80053d2 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005396:	f107 031b 	add.w	r3, r7, #27
 800539a:	461a      	mov	r2, r3
 800539c:	2100      	movs	r1, #0
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7fd f902 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80053aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10f      	bne.n	80053d2 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80053b2:	f107 0318 	add.w	r3, r7, #24
 80053b6:	461a      	mov	r2, r3
 80053b8:	2151      	movs	r1, #81	@ 0x51
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f001 fd54 	bl	8006e68 <VL53L0X_RdWord>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80053c6:	8b3b      	ldrh	r3, [r7, #24]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fe07 	bl	8004fdc <VL53L0X_decode_timeout>
 80053ce:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80053d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80053d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80053da:	f107 031b 	add.w	r3, r7, #27
 80053de:	461a      	mov	r2, r3
 80053e0:	2101      	movs	r1, #1
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7fd f8e0 	bl	80025a8 <VL53L0X_GetVcselPulsePeriod>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80053ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d128      	bne.n	8005448 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80053f6:	7efb      	ldrb	r3, [r7, #27]
 80053f8:	461a      	mov	r2, r3
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f7ff fe03 	bl	8005008 <VL53L0X_calc_timeout_mclks>
 8005402:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8005404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005406:	6a3a      	ldr	r2, [r7, #32]
 8005408:	4413      	add	r3, r2
 800540a:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800540c:	6a38      	ldr	r0, [r7, #32]
 800540e:	f7ff fdbb 	bl	8004f88 <VL53L0X_encode_timeout>
 8005412:	4603      	mov	r3, r0
 8005414:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8005416:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800541a:	2b00      	cmp	r3, #0
 800541c:	d108      	bne.n	8005430 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800541e:	8bfb      	ldrh	r3, [r7, #30]
 8005420:	461a      	mov	r2, r3
 8005422:	2171      	movs	r1, #113	@ 0x71
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f001 fc65 	bl	8006cf4 <VL53L0X_WrWord>
 800542a:	4603      	mov	r3, r0
 800542c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005430:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8005440:	e002      	b.n	8005448 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005442:	23fc      	movs	r3, #252	@ 0xfc
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8005448:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	@ 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	@ 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
 8005460:	4613      	mov	r3, r2
 8005462:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800546a:	230c      	movs	r3, #12
 800546c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8005470:	2312      	movs	r3, #18
 8005472:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8005476:	2308      	movs	r3, #8
 8005478:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800547c:	230e      	movs	r3, #14
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8005486:	78bb      	ldrb	r3, [r7, #2]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005492:	23fc      	movs	r3, #252	@ 0xfc
 8005494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005498:	e020      	b.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <VL53L0X_set_vcsel_pulse_period+0x68>
 80054a0:	78ba      	ldrb	r2, [r7, #2]
 80054a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d304      	bcc.n	80054b4 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80054aa:	78ba      	ldrb	r2, [r7, #2]
 80054ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d903      	bls.n	80054bc <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054b4:	23fc      	movs	r3, #252	@ 0xfc
 80054b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80054ba:	e00f      	b.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d10c      	bne.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x88>
 80054c2:	78ba      	ldrb	r2, [r7, #2]
 80054c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d304      	bcc.n	80054d6 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80054cc:	78ba      	ldrb	r2, [r7, #2]
 80054ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d902      	bls.n	80054dc <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054d6:	23fc      	movs	r3, #252	@ 0xfc
 80054d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80054dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80054e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80054e8:	e237      	b.n	800595a <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d150      	bne.n	8005592 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80054f0:	78bb      	ldrb	r3, [r7, #2]
 80054f2:	2b0c      	cmp	r3, #12
 80054f4:	d110      	bne.n	8005518 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80054f6:	2218      	movs	r2, #24
 80054f8:	2157      	movs	r1, #87	@ 0x57
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 fbd6 	bl	8006cac <VL53L0X_WrByte>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8005506:	2208      	movs	r2, #8
 8005508:	2156      	movs	r1, #86	@ 0x56
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 fbce 	bl	8006cac <VL53L0X_WrByte>
 8005510:	4603      	mov	r3, r0
 8005512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005516:	e17f      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005518:	78bb      	ldrb	r3, [r7, #2]
 800551a:	2b0e      	cmp	r3, #14
 800551c:	d110      	bne.n	8005540 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800551e:	2230      	movs	r2, #48	@ 0x30
 8005520:	2157      	movs	r1, #87	@ 0x57
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f001 fbc2 	bl	8006cac <VL53L0X_WrByte>
 8005528:	4603      	mov	r3, r0
 800552a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800552e:	2208      	movs	r2, #8
 8005530:	2156      	movs	r1, #86	@ 0x56
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f001 fbba 	bl	8006cac <VL53L0X_WrByte>
 8005538:	4603      	mov	r3, r0
 800553a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800553e:	e16b      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8005540:	78bb      	ldrb	r3, [r7, #2]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d110      	bne.n	8005568 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	2157      	movs	r1, #87	@ 0x57
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f001 fbae 	bl	8006cac <VL53L0X_WrByte>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8005556:	2208      	movs	r2, #8
 8005558:	2156      	movs	r1, #86	@ 0x56
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 fba6 	bl	8006cac <VL53L0X_WrByte>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005566:	e157      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8005568:	78bb      	ldrb	r3, [r7, #2]
 800556a:	2b12      	cmp	r3, #18
 800556c:	f040 8154 	bne.w	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005570:	2250      	movs	r2, #80	@ 0x50
 8005572:	2157      	movs	r1, #87	@ 0x57
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fb99 	bl	8006cac <VL53L0X_WrByte>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8005580:	2208      	movs	r2, #8
 8005582:	2156      	movs	r1, #86	@ 0x56
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fb91 	bl	8006cac <VL53L0X_WrByte>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005590:	e142      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b01      	cmp	r3, #1
 8005596:	f040 813f 	bne.w	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800559a:	78bb      	ldrb	r3, [r7, #2]
 800559c:	2b08      	cmp	r3, #8
 800559e:	d14c      	bne.n	800563a <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80055a0:	2210      	movs	r2, #16
 80055a2:	2148      	movs	r1, #72	@ 0x48
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 fb81 	bl	8006cac <VL53L0X_WrByte>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80055b0:	2208      	movs	r2, #8
 80055b2:	2147      	movs	r1, #71	@ 0x47
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f001 fb79 	bl	8006cac <VL53L0X_WrByte>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80055c0:	2202      	movs	r2, #2
 80055c2:	2132      	movs	r1, #50	@ 0x32
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f001 fb71 	bl	8006cac <VL53L0X_WrByte>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80055d8:	220c      	movs	r2, #12
 80055da:	2130      	movs	r1, #48	@ 0x30
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 fb65 	bl	8006cac <VL53L0X_WrByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	461a      	mov	r2, r3
 80055e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80055f0:	2201      	movs	r2, #1
 80055f2:	21ff      	movs	r1, #255	@ 0xff
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fb59 	bl	8006cac <VL53L0X_WrByte>
 80055fa:	4603      	mov	r3, r0
 80055fc:	461a      	mov	r2, r3
 80055fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005602:	4313      	orrs	r3, r2
 8005604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005608:	2230      	movs	r2, #48	@ 0x30
 800560a:	2130      	movs	r1, #48	@ 0x30
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f001 fb4d 	bl	8006cac <VL53L0X_WrByte>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800561a:	4313      	orrs	r3, r2
 800561c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005620:	2200      	movs	r2, #0
 8005622:	21ff      	movs	r1, #255	@ 0xff
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f001 fb41 	bl	8006cac <VL53L0X_WrByte>
 800562a:	4603      	mov	r3, r0
 800562c:	461a      	mov	r2, r3
 800562e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005632:	4313      	orrs	r3, r2
 8005634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005638:	e0ee      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800563a:	78bb      	ldrb	r3, [r7, #2]
 800563c:	2b0a      	cmp	r3, #10
 800563e:	d14c      	bne.n	80056da <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8005640:	2228      	movs	r2, #40	@ 0x28
 8005642:	2148      	movs	r1, #72	@ 0x48
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 fb31 	bl	8006cac <VL53L0X_WrByte>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8005650:	2208      	movs	r2, #8
 8005652:	2147      	movs	r1, #71	@ 0x47
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fb29 	bl	8006cac <VL53L0X_WrByte>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005660:	2203      	movs	r2, #3
 8005662:	2132      	movs	r1, #50	@ 0x32
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fb21 	bl	8006cac <VL53L0X_WrByte>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005672:	4313      	orrs	r3, r2
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005678:	2209      	movs	r2, #9
 800567a:	2130      	movs	r1, #48	@ 0x30
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f001 fb15 	bl	8006cac <VL53L0X_WrByte>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800568a:	4313      	orrs	r3, r2
 800568c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005690:	2201      	movs	r2, #1
 8005692:	21ff      	movs	r1, #255	@ 0xff
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fb09 	bl	8006cac <VL53L0X_WrByte>
 800569a:	4603      	mov	r3, r0
 800569c:	461a      	mov	r2, r3
 800569e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80056a8:	2220      	movs	r2, #32
 80056aa:	2130      	movs	r1, #48	@ 0x30
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fafd 	bl	8006cac <VL53L0X_WrByte>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80056c0:	2200      	movs	r2, #0
 80056c2:	21ff      	movs	r1, #255	@ 0xff
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f001 faf1 	bl	8006cac <VL53L0X_WrByte>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80056d8:	e09e      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80056da:	78bb      	ldrb	r3, [r7, #2]
 80056dc:	2b0c      	cmp	r3, #12
 80056de:	d14c      	bne.n	800577a <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80056e0:	2238      	movs	r2, #56	@ 0x38
 80056e2:	2148      	movs	r1, #72	@ 0x48
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f001 fae1 	bl	8006cac <VL53L0X_WrByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80056f0:	2208      	movs	r2, #8
 80056f2:	2147      	movs	r1, #71	@ 0x47
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fad9 	bl	8006cac <VL53L0X_WrByte>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005700:	2203      	movs	r2, #3
 8005702:	2132      	movs	r1, #50	@ 0x32
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f001 fad1 	bl	8006cac <VL53L0X_WrByte>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005712:	4313      	orrs	r3, r2
 8005714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005718:	2208      	movs	r2, #8
 800571a:	2130      	movs	r1, #48	@ 0x30
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 fac5 	bl	8006cac <VL53L0X_WrByte>
 8005722:	4603      	mov	r3, r0
 8005724:	461a      	mov	r2, r3
 8005726:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800572a:	4313      	orrs	r3, r2
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005730:	2201      	movs	r2, #1
 8005732:	21ff      	movs	r1, #255	@ 0xff
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fab9 	bl	8006cac <VL53L0X_WrByte>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005742:	4313      	orrs	r3, r2
 8005744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005748:	2220      	movs	r2, #32
 800574a:	2130      	movs	r1, #48	@ 0x30
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 faad 	bl	8006cac <VL53L0X_WrByte>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800575a:	4313      	orrs	r3, r2
 800575c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005760:	2200      	movs	r2, #0
 8005762:	21ff      	movs	r1, #255	@ 0xff
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 faa1 	bl	8006cac <VL53L0X_WrByte>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
 800576e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005772:	4313      	orrs	r3, r2
 8005774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005778:	e04e      	b.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800577a:	78bb      	ldrb	r3, [r7, #2]
 800577c:	2b0e      	cmp	r3, #14
 800577e:	d14b      	bne.n	8005818 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005780:	2248      	movs	r2, #72	@ 0x48
 8005782:	2148      	movs	r1, #72	@ 0x48
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fa91 	bl	8006cac <VL53L0X_WrByte>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8005790:	2208      	movs	r2, #8
 8005792:	2147      	movs	r1, #71	@ 0x47
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 fa89 	bl	8006cac <VL53L0X_WrByte>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80057a0:	2203      	movs	r2, #3
 80057a2:	2132      	movs	r1, #50	@ 0x32
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f001 fa81 	bl	8006cac <VL53L0X_WrByte>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80057b8:	2207      	movs	r2, #7
 80057ba:	2130      	movs	r1, #48	@ 0x30
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fa75 	bl	8006cac <VL53L0X_WrByte>
 80057c2:	4603      	mov	r3, r0
 80057c4:	461a      	mov	r2, r3
 80057c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80057d0:	2201      	movs	r2, #1
 80057d2:	21ff      	movs	r1, #255	@ 0xff
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fa69 	bl	8006cac <VL53L0X_WrByte>
 80057da:	4603      	mov	r3, r0
 80057dc:	461a      	mov	r2, r3
 80057de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80057e8:	2220      	movs	r2, #32
 80057ea:	2130      	movs	r1, #48	@ 0x30
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fa5d 	bl	8006cac <VL53L0X_WrByte>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005800:	2200      	movs	r2, #0
 8005802:	21ff      	movs	r1, #255	@ 0xff
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fa51 	bl	8006cac <VL53L0X_WrByte>
 800580a:	4603      	mov	r3, r0
 800580c:	461a      	mov	r2, r3
 800580e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005812:	4313      	orrs	r3, r2
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8005818:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800581c:	2b00      	cmp	r3, #0
 800581e:	d17e      	bne.n	800591e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8005820:	78bb      	ldrb	r3, [r7, #2]
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe fe3b 	bl	800449e <VL53L0X_encode_vcsel_period>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8005834:	2b01      	cmp	r3, #1
 8005836:	d045      	beq.n	80058c4 <VL53L0X_set_vcsel_pulse_period+0x470>
 8005838:	e06e      	b.n	8005918 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	461a      	mov	r2, r3
 8005840:	2103      	movs	r1, #3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fc34 	bl	80050b0 <get_sequence_step_timeout>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800584e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005852:	2b00      	cmp	r3, #0
 8005854:	d109      	bne.n	800586a <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8005856:	f107 0310 	add.w	r3, r7, #16
 800585a:	461a      	mov	r2, r3
 800585c:	2102      	movs	r1, #2
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fc26 	bl	80050b0 <get_sequence_step_timeout>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800586a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8005872:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005876:	461a      	mov	r2, r3
 8005878:	2150      	movs	r1, #80	@ 0x50
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fa16 	bl	8006cac <VL53L0X_WrByte>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005886:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800588a:	2b00      	cmp	r3, #0
 800588c:	d108      	bne.n	80058a0 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	461a      	mov	r2, r3
 8005892:	2103      	movs	r1, #3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff fceb 	bl	8005270 <set_sequence_step_timeout>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80058a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	461a      	mov	r2, r3
 80058ac:	2102      	movs	r1, #2
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff fcde 	bl	8005270 <set_sequence_step_timeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	78ba      	ldrb	r2, [r7, #2]
 80058be:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80058c2:	e02c      	b.n	800591e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80058c4:	f107 0318 	add.w	r3, r7, #24
 80058c8:	461a      	mov	r2, r3
 80058ca:	2104      	movs	r1, #4
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fbef 	bl	80050b0 <get_sequence_step_timeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80058d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d109      	bne.n	80058f4 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80058e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058e4:	461a      	mov	r2, r3
 80058e6:	2170      	movs	r1, #112	@ 0x70
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f001 f9df 	bl	8006cac <VL53L0X_WrByte>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80058f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	461a      	mov	r2, r3
 8005900:	2104      	movs	r1, #4
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff fcb4 	bl	8005270 <set_sequence_step_timeout>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	78ba      	ldrb	r2, [r7, #2]
 8005912:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005916:	e002      	b.n	800591e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005918:	23fc      	movs	r3, #252	@ 0xfc
 800591a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800591e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800592c:	69f9      	ldr	r1, [r7, #28]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc fdfc 	bl	800252c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005934:	4603      	mov	r3, r0
 8005936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800593a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8005942:	f107 010f 	add.w	r1, r7, #15
 8005946:	2301      	movs	r3, #1
 8005948:	2200      	movs	r2, #0
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fe fcc2 	bl	80042d4 <VL53L0X_perform_phase_calibration>
 8005950:	4603      	mov	r3, r0
 8005952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8005956:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800595a:	4618      	mov	r0, r3
 800595c:	3728      	adds	r7, #40	@ 0x28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	460b      	mov	r3, r1
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005970:	2300      	movs	r3, #0
 8005972:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00a      	beq.n	8005994 <VL53L0X_get_vcsel_pulse_period+0x32>
 800597e:	e013      	b.n	80059a8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005980:	f107 0316 	add.w	r3, r7, #22
 8005984:	461a      	mov	r2, r3
 8005986:	2150      	movs	r1, #80	@ 0x50
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f001 fa43 	bl	8006e14 <VL53L0X_RdByte>
 800598e:	4603      	mov	r3, r0
 8005990:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005992:	e00b      	b.n	80059ac <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005994:	f107 0316 	add.w	r3, r7, #22
 8005998:	461a      	mov	r2, r3
 800599a:	2170      	movs	r1, #112	@ 0x70
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f001 fa39 	bl	8006e14 <VL53L0X_RdByte>
 80059a2:	4603      	mov	r3, r0
 80059a4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80059a6:	e001      	b.n	80059ac <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80059a8:	23fc      	movs	r3, #252	@ 0xfc
 80059aa:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80059ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d107      	bne.n	80059c4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80059b4:	7dbb      	ldrb	r3, [r7, #22]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fd5e 	bl	8004478 <VL53L0X_decode_vcsel_period>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	701a      	strb	r2, [r3, #0]

	return Status;
 80059c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b092      	sub	sp, #72	@ 0x48
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80059e0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80059e4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80059e6:	f240 7376 	movw	r3, #1910	@ 0x776
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 80059ec:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80059f2:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80059f6:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 80059f8:	f240 234e 	movw	r3, #590	@ 0x24e
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80059fe:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8005a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005a04:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005a08:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005a0a:	f240 2326 	movw	r3, #550	@ 0x226
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005a14:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005a18:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d205      	bcs.n	8005a32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a26:	23fc      	movs	r3, #252	@ 0xfc
 8005a28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8005a2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005a30:	e0aa      	b.n	8005b88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005a32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a36:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005a3e:	f107 0314 	add.w	r3, r7, #20
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fc feb9 	bl	80027bc <VL53L0X_GetSequenceStepEnables>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005a50:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d15b      	bne.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8005a58:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8005a5e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8005a64:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d052      	beq.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005a6a:	f107 0310 	add.w	r3, r7, #16
 8005a6e:	461a      	mov	r2, r3
 8005a70:	2102      	movs	r1, #2
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fb1c 	bl	80050b0 <get_sequence_step_timeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005a7e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8005a86:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005a8a:	e07d      	b.n	8005b88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005a8c:	7d3b      	ldrb	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00f      	beq.n	8005ab2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005a92:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a96:	4413      	add	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d204      	bcs.n	8005aac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aaa:	e002      	b.n	8005ab2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005aac:	23fc      	movs	r3, #252	@ 0xfc
 8005aae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005ab2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8005aba:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005abe:	e063      	b.n	8005b88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005ac0:	7dbb      	ldrb	r3, [r7, #22]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d011      	beq.n	8005aea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aca:	4413      	add	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d204      	bcs.n	8005ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005ad8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae0:	e016      	b.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005ae2:	23fc      	movs	r3, #252	@ 0xfc
 8005ae4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005ae8:	e012      	b.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005aea:	7d7b      	ldrb	r3, [r7, #21]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00f      	beq.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005af4:	4413      	add	r3, r2
 8005af6:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d204      	bcs.n	8005b0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005b00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b08:	e002      	b.n	8005b10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b0a:	23fc      	movs	r3, #252	@ 0xfc
 8005b0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005b10:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005b18:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005b1c:	e034      	b.n	8005b88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d019      	beq.n	8005b58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2103      	movs	r1, #3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fabf 	bl	80050b0 <get_sequence_step_timeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d204      	bcs.n	8005b52 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005b48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b50:	e002      	b.n	8005b58 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005b52:	23fc      	movs	r3, #252	@ 0xfc
 8005b54:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005b58:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d111      	bne.n	8005b84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005b60:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005b6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b70:	2104      	movs	r1, #4
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fb7c 	bl	8005270 <set_sequence_step_timeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005b84:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3748      	adds	r7, #72	@ 0x48
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	@ 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005ba0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005ba4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005ba6:	f240 7376 	movw	r3, #1910	@ 0x776
 8005baa:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005bac:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005bb2:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005bb6:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005bb8:	f240 234e 	movw	r3, #590	@ 0x24e
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005bbe:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8005bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005bc4:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005bca:	f240 2326 	movw	r3, #550	@ 0x226
 8005bce:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd8:	441a      	add	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005bde:	f107 0318 	add.w	r3, r7, #24
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fc fde9 	bl	80027bc <VL53L0X_GetSequenceStepEnables>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005bf0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005bf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005bfc:	e075      	b.n	8005cea <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005bfe:	7e3b      	ldrb	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8005c04:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005c0a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d030      	beq.n	8005c72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005c10:	f107 0310 	add.w	r3, r7, #16
 8005c14:	461a      	mov	r2, r3
 8005c16:	2102      	movs	r1, #2
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fa49 	bl	80050b0 <get_sequence_step_timeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005c24:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d122      	bne.n	8005c72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005c2c:	7e3b      	ldrb	r3, [r7, #24]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005c36:	6939      	ldr	r1, [r7, #16]
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c3c:	441a      	add	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005c42:	7ebb      	ldrb	r3, [r7, #26]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005c4c:	6939      	ldr	r1, [r7, #16]
 8005c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c50:	440b      	add	r3, r1
 8005c52:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c54:	441a      	add	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e00a      	b.n	8005c72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005c5c:	7e7b      	ldrb	r3, [r7, #25]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005c66:	6939      	ldr	r1, [r7, #16]
 8005c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005c6c:	441a      	add	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d114      	bne.n	8005ca4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005c7a:	7efb      	ldrb	r3, [r7, #27]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	461a      	mov	r2, r3
 8005c86:	2103      	movs	r1, #3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fa11 	bl	80050b0 <get_sequence_step_timeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005c9e:	441a      	add	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ca4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d114      	bne.n	8005cd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005cac:	7f3b      	ldrb	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d011      	beq.n	8005cd6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8005cb2:	f107 0314 	add.w	r3, r7, #20
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2104      	movs	r1, #4
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff f9f8 	bl	80050b0 <get_sequence_step_timeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005cca:	6979      	ldr	r1, [r7, #20]
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005cd0:	441a      	add	r2, r3
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005cd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d103      	bne.n	8005ce6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005ce6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3740      	adds	r7, #64	@ 0x40
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005d06:	e0c6      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	3301      	adds	r3, #1
 8005d16:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2bff      	cmp	r3, #255	@ 0xff
 8005d1c:	f040 808d 	bne.w	8005e3a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	747b      	strb	r3, [r7, #17]
			Index++;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8005d30:	7c7b      	ldrb	r3, [r7, #17]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d87e      	bhi.n	8005e34 <VL53L0X_load_tuning_settings+0x140>
 8005d36:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <VL53L0X_load_tuning_settings+0x48>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d87 	.word	0x08005d87
 8005d44:	08005dc1 	.word	0x08005dc1
 8005d48:	08005dfb 	.word	0x08005dfb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	4413      	add	r3, r2
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005d6c:	7c3b      	ldrb	r3, [r7, #16]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	89ba      	ldrh	r2, [r7, #12]
 8005d80:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 8005d84:	e087      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	743b      	strb	r3, [r7, #16]
				Index++;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3301      	adds	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	3301      	adds	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005da6:	7c3b      	ldrb	r3, [r7, #16]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4413      	add	r3, r2
 8005db4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	89ba      	ldrh	r2, [r7, #12]
 8005dba:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 8005dbe:	e06a      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	743b      	strb	r3, [r7, #16]
				Index++;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005de0:	7c3b      	ldrb	r3, [r7, #16]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4413      	add	r3, r2
 8005dee:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	89ba      	ldrh	r2, [r7, #12]
 8005df4:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8005df8:	e04d      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4413      	add	r3, r2
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	743b      	strb	r3, [r7, #16]
				Index++;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005e1a:	7c3b      	ldrb	r3, [r7, #16]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	89ba      	ldrh	r2, [r7, #12]
 8005e2e:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 8005e32:	e030      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e34:	23fc      	movs	r3, #252	@ 0xfc
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e02d      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8005e3a:	7cfb      	ldrb	r3, [r7, #19]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d828      	bhi.n	8005e92 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	74bb      	strb	r3, [r7, #18]
			Index++;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00f      	b.n	8005e76 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	f107 0208 	add.w	r2, r7, #8
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	4413      	add	r3, r2
 8005e66:	460a      	mov	r2, r1
 8005e68:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	dbeb      	blt.n	8005e56 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005e7e:	7cfb      	ldrb	r3, [r7, #19]
 8005e80:	f107 0208 	add.w	r2, r7, #8
 8005e84:	7cb9      	ldrb	r1, [r7, #18]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 feb4 	bl	8006bf4 <VL53L0X_WriteMulti>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e001      	b.n	8005e96 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e92:	23fc      	movs	r3, #252	@ 0xfc
 8005e94:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <VL53L0X_load_tuning_settings+0x1b8>
 8005ea2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f43f af2e 	beq.w	8005d08 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005eac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005ece:	f107 0313 	add.w	r3, r7, #19
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7fc fd31 	bl	800293c <VL53L0X_GetXTalkCompensationEnable>
 8005eda:	4603      	mov	r3, r0
 8005edc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005ede:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d111      	bne.n	8005f0a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8005ee6:	7cfb      	ldrb	r3, [r7, #19]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00e      	beq.n	8005f0a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	8a9b      	ldrh	r3, [r3, #20]
 8005ef6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3380      	adds	r3, #128	@ 0x80
 8005f04:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005f0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	60b9      	str	r1, [r7, #8]
 8005f20:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8005f2e:	f107 0310 	add.w	r3, r7, #16
 8005f32:	461a      	mov	r2, r3
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff ffbe 	bl	8005eb8 <VL53L0X_get_total_xtalk_rate>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8005f40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	441a      	add	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]

	return Status;
 8005f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b09a      	sub	sp, #104	@ 0x68
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8005f6e:	2312      	movs	r3, #18
 8005f70:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8005f72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f76:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8005f78:	2342      	movs	r3, #66	@ 0x42
 8005f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8005f7c:	2306      	movs	r3, #6
 8005f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8005f80:	2307      	movs	r3, #7
 8005f82:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005f98:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8005f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa6:	3380      	adds	r3, #128	@ 0x80
 8005fa8:	0a1b      	lsrs	r3, r3, #8
 8005faa:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8005fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01a      	beq.n	8005ff6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	029b      	lsls	r3, r3, #10
 8005fc4:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8005fca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fcc:	4413      	add	r3, r2
 8005fce:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8005fd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8005fda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8005fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe6:	fb03 f303 	mul.w	r3, r3, r3
 8005fea:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8005fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fee:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006002:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006006:	0c1b      	lsrs	r3, r3, #16
 8006008:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	fb03 f303 	mul.w	r3, r3, r3
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006014:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800601c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800601e:	085a      	lsrs	r2, r3, #1
 8006020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006022:	441a      	add	r2, r3
 8006024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800603c:	d302      	bcc.n	8006044 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800603e:	4b54      	ldr	r3, [pc, #336]	@ (8006190 <VL53L0X_calc_dmax+0x230>)
 8006040:	663b      	str	r3, [r7, #96]	@ 0x60
 8006042:	e015      	b.n	8006070 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006046:	085a      	lsrs	r2, r3, #1
 8006048:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800604a:	441a      	add	r2, r3
 800604c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800604e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006052:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006058:	fb02 f303 	mul.w	r3, r2, r3
 800605c:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800605e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006060:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006068:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800606a:	fb03 f303 	mul.w	r3, r3, r3
 800606e:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006072:	039b      	lsls	r3, r3, #14
 8006074:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006078:	4a46      	ldr	r2, [pc, #280]	@ (8006194 <VL53L0X_calc_dmax+0x234>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	099b      	lsrs	r3, r3, #6
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	fb03 f303 	mul.w	r3, r3, r3
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800608a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800608c:	fb03 f303 	mul.w	r3, r3, r3
 8006090:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	3308      	adds	r3, #8
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800609a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80060a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80060b4:	0b9b      	lsrs	r3, r3, #14
 80060b6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80060b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060bc:	4413      	add	r3, r2
 80060be:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80060c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4413      	add	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	039b      	lsls	r3, r3, #14
 80060d8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	085b      	lsrs	r3, r3, #1
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4413      	add	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ec:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80060f2:	fb02 f303 	mul.w	r3, r2, r3
 80060f6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80060fe:	4a25      	ldr	r2, [pc, #148]	@ (8006194 <VL53L0X_calc_dmax+0x234>)
 8006100:	fba2 2303 	umull	r2, r3, r2, r3
 8006104:	099b      	lsrs	r3, r3, #6
 8006106:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006114:	4a1f      	ldr	r2, [pc, #124]	@ (8006194 <VL53L0X_calc_dmax+0x234>)
 8006116:	fba2 2303 	umull	r2, r3, r2, r3
 800611a:	099b      	lsrs	r3, r3, #6
 800611c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800611e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006120:	3380      	adds	r3, #128	@ 0x80
 8006122:	0a1b      	lsrs	r3, r3, #8
 8006124:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d008      	beq.n	800613e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	085a      	lsrs	r2, r3, #1
 8006130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006132:	441a      	add	r2, r3
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	fbb2 f3f3 	udiv	r3, r2, r3
 800613a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800613c:	e001      	b.n	8006142 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006142:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006144:	f7fe f9be 	bl	80044c4 <VL53L0X_isqrt>
 8006148:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	085a      	lsrs	r2, r3, #1
 8006154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006156:	441a      	add	r2, r3
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006160:	e001      	b.n	8006166 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8006166:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006168:	f7fe f9ac 	bl	80044c4 <VL53L0X_isqrt>
 800616c:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800616e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006178:	429a      	cmp	r2, r3
 800617a:	d902      	bls.n	8006182 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800617c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800617e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006180:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006182:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 8006186:	4618      	mov	r0, r3
 8006188:	3768      	adds	r7, #104	@ 0x68
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	fff00000 	.word	0xfff00000
 8006194:	10624dd3 	.word	0x10624dd3

08006198 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b0b4      	sub	sp, #208	@ 0xd0
 800619c:	af04      	add	r7, sp, #16
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80061a6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80061aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80061ae:	f44f 7316 	mov.w	r3, #600	@ 0x258
 80061b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80061b6:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 80061ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80061be:	f241 235c 	movw	r3, #4700	@ 0x125c
 80061c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80061c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006440 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80061c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80061cc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80061d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80061d2:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 80061d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061da:	fbb2 f3f3 	udiv	r3, r2, r3
 80061de:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80061e0:	4b98      	ldr	r3, [pc, #608]	@ (8006444 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80061e2:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80061e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e8:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80061ea:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 80061ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80061f0:	f240 6377 	movw	r3, #1655	@ 0x677
 80061f4:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800620a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8006218:	f107 0310 	add.w	r3, r7, #16
 800621c:	461a      	mov	r2, r3
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fe78 	bl	8005f16 <VL53L0X_get_total_signal_rate>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800622c:	f107 0314 	add.w	r3, r7, #20
 8006230:	461a      	mov	r2, r3
 8006232:	68b9      	ldr	r1, [r7, #8]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fe3f 	bl	8005eb8 <VL53L0X_get_total_xtalk_rate>
 800623a:	4603      	mov	r3, r0
 800623c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800624c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800625c:	fb02 f303 	mul.w	r3, r2, r3
 8006260:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8006264:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800626a:	429a      	cmp	r2, r3
 800626c:	d902      	bls.n	8006274 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800626e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8006274:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8006278:	2b00      	cmp	r3, #0
 800627a:	d168      	bne.n	800634e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006282:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800628c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006290:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8006294:	461a      	mov	r2, r3
 8006296:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7fe feb4 	bl	8005008 <VL53L0X_calc_timeout_mclks>
 80062a0:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 80062b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80062b6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80062ba:	461a      	mov	r2, r3
 80062bc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7fe fea1 	bl	8005008 <VL53L0X_calc_timeout_mclks>
 80062c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80062c8:	2303      	movs	r3, #3
 80062ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 80062ce:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80062d2:	2b08      	cmp	r3, #8
 80062d4:	d102      	bne.n	80062dc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80062d6:	2302      	movs	r3, #2
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80062dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80062e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	02db      	lsls	r3, r3, #11
 80062ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80062f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80062f8:	4a53      	ldr	r2, [pc, #332]	@ (8006448 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8006304:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006308:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8006312:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006316:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800631a:	4a4b      	ldr	r2, [pc, #300]	@ (8006448 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	099b      	lsrs	r3, r3, #6
 8006322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3380      	adds	r3, #128	@ 0x80
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006334:	fb02 f303 	mul.w	r3, r2, r3
 8006338:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800633c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006340:	3380      	adds	r3, #128	@ 0x80
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800634e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8006356:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800635a:	e15e      	b.n	800661a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800635c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006368:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006370:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e14c      	b.n	8006616 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800637c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8006384:	2301      	movs	r3, #1
 8006386:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800638a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800638e:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006392:	041a      	lsls	r2, r3, #16
 8006394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006396:	fbb2 f3f3 	udiv	r3, r2, r3
 800639a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800639e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d902      	bls.n	80063ae <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80063a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80063ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80063b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80063b6:	fb02 f303 	mul.w	r3, r2, r3
 80063ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80063be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80063c2:	4613      	mov	r3, r2
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe f87a 	bl	80044c4 <VL53L0X_isqrt>
 80063d0:	4603      	mov	r3, r0
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	891b      	ldrh	r3, [r3, #8]
 80063da:	461a      	mov	r2, r3
 80063dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063de:	fb02 f303 	mul.w	r3, r2, r3
 80063e2:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80063e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063e6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80063e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ec:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80063ee:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80063f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80063f4:	4a14      	ldr	r2, [pc, #80]	@ (8006448 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	099b      	lsrs	r3, r3, #6
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80063fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006406:	4a10      	ldr	r2, [pc, #64]	@ (8006448 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	099b      	lsrs	r3, r3, #6
 800640e:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8006410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006412:	021b      	lsls	r3, r3, #8
 8006414:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8006416:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfb8      	it	lt
 8006422:	425b      	neglt	r3, r3
 8006424:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8006426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	7e1b      	ldrb	r3, [r3, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8006434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800643c:	e033      	b.n	80064a6 <VL53L0X_calc_sigma_estimate+0x30e>
 800643e:	bf00      	nop
 8006440:	028f87ae 	.word	0x028f87ae
 8006444:	0006999a 	.word	0x0006999a
 8006448:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800644c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800644e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800645a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800645c:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8006460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006464:	fb02 f303 	mul.w	r3, r2, r3
 8006468:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800646c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006470:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006472:	4413      	add	r3, r2
 8006474:	0c1b      	lsrs	r3, r3, #16
 8006476:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800647a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800647e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8006482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8006486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006494:	fb03 f303 	mul.w	r3, r3, r3
 8006498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800649c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064a0:	0b9b      	lsrs	r3, r3, #14
 80064a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80064a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ac:	fb02 f303 	mul.w	r3, r2, r3
 80064b0:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	fb03 f303 	mul.w	r3, r3, r3
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 80064c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80064c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80064d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d6:	fb03 f303 	mul.w	r3, r3, r3
 80064da:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80064dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e0:	4413      	add	r3, r2
 80064e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80064e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064e6:	f7fd ffed 	bl	80044c4 <VL53L0X_isqrt>
 80064ea:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	3332      	adds	r3, #50	@ 0x32
 80064f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006624 <VL53L0X_calc_sigma_estimate+0x48c>)
 80064f8:	fba2 2303 	umull	r2, r3, r2, r3
 80064fc:	095a      	lsrs	r2, r3, #5
 80064fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006500:	fbb2 f3f3 	udiv	r3, r2, r3
 8006504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8006508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800650c:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 8006510:	fb02 f303 	mul.w	r3, r2, r3
 8006514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8006518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800651c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8006520:	3308      	adds	r3, #8
 8006522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 8006526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800652a:	4a3f      	ldr	r2, [pc, #252]	@ (8006628 <VL53L0X_calc_sigma_estimate+0x490>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	0b5b      	lsrs	r3, r3, #13
 8006532:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8006536:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800653a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800653c:	429a      	cmp	r2, r3
 800653e:	d902      	bls.n	8006546 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006540:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8006546:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800654a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800654e:	4413      	add	r3, r2
 8006550:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8006554:	4a35      	ldr	r2, [pc, #212]	@ (800662c <VL53L0X_calc_sigma_estimate+0x494>)
 8006556:	fba2 2303 	umull	r2, r3, r2, r3
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8006562:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006566:	441a      	add	r2, r3
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	4618      	mov	r0, r3
 8006570:	f7fd ffa8 	bl	80044c4 <VL53L0X_isqrt>
 8006574:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006582:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <VL53L0X_calc_sigma_estimate+0x494>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	099b      	lsrs	r3, r3, #6
 800658a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800658c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006590:	fb03 f303 	mul.w	r3, r3, r3
 8006594:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	fb03 f303 	mul.w	r3, r3, r3
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800659e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a2:	4413      	add	r3, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fd ff8d 	bl	80044c4 <VL53L0X_isqrt>
 80065aa:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d009      	beq.n	80065d4 <VL53L0X_calc_sigma_estimate+0x43c>
 80065c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <VL53L0X_calc_sigma_estimate+0x43c>
 80065c8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80065cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d903      	bls.n	80065dc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80065d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80065e2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 80065ee:	6939      	ldr	r1, [r7, #16]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	9303      	str	r3, [sp, #12]
 80065f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006608:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fca8 	bl	8005f60 <VL53L0X_calc_dmax>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006616:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800661a:	4618      	mov	r0, r3
 800661c:	37c0      	adds	r7, #192	@ 0xc0
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	51eb851f 	.word	0x51eb851f
 8006628:	d1b71759 	.word	0xd1b71759
 800662c:	10624dd3 	.word	0x10624dd3

08006630 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b090      	sub	sp, #64	@ 0x40
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	461a      	mov	r2, r3
 800663c:	460b      	mov	r3, r1
 800663e:	72fb      	strb	r3, [r7, #11]
 8006640:	4613      	mov	r3, r2
 8006642:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	10db      	asrs	r3, r3, #3
 8006686:	b2db      	uxtb	r3, r3
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006690:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d017      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
 8006698:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800669c:	2b05      	cmp	r3, #5
 800669e:	d013      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80066a0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80066a4:	2b07      	cmp	r3, #7
 80066a6:	d00f      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80066a8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80066ac:	2b0c      	cmp	r3, #12
 80066ae:	d00b      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80066b0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80066b4:	2b0d      	cmp	r3, #13
 80066b6:	d007      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80066b8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80066bc:	2b0e      	cmp	r3, #14
 80066be:	d003      	beq.n	80066c8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80066c0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80066c4:	2b0f      	cmp	r3, #15
 80066c6:	d103      	bne.n	80066d0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80066ce:	e002      	b.n	80066d6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80066d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80066de:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80066e2:	461a      	mov	r2, r3
 80066e4:	2100      	movs	r1, #0
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7fc f9fc 	bl	8002ae4 <VL53L0X_GetLimitCheckEnable>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80066f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d02e      	beq.n	8006758 <VL53L0X_get_pal_range_status+0x128>
 80066fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d12a      	bne.n	8006758 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8006702:	f107 0310 	add.w	r3, r7, #16
 8006706:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800670a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fd43 	bl	8006198 <VL53L0X_calc_sigma_estimate>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8006718:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800671c:	2b00      	cmp	r3, #0
 800671e:	d103      	bne.n	8006728 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	b29a      	uxth	r2, r3
 8006724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006726:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006728:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800672c:	2b00      	cmp	r3, #0
 800672e:	d113      	bne.n	8006758 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006730:	f107 0320 	add.w	r3, r7, #32
 8006734:	461a      	mov	r2, r3
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7fc fa59 	bl	8002bf0 <VL53L0X_GetLimitCheckValue>
 800673e:	4603      	mov	r3, r0
 8006740:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d006      	beq.n	8006758 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800674a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800674e:	429a      	cmp	r2, r3
 8006750:	d902      	bls.n	8006758 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006752:	2301      	movs	r3, #1
 8006754:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006758:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006760:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8006764:	461a      	mov	r2, r3
 8006766:	2102      	movs	r1, #2
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7fc f9bb 	bl	8002ae4 <VL53L0X_GetLimitCheckEnable>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006774:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006778:	2b00      	cmp	r3, #0
 800677a:	d044      	beq.n	8006806 <VL53L0X_get_pal_range_status+0x1d6>
 800677c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006780:	2b00      	cmp	r3, #0
 8006782:	d140      	bne.n	8006806 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006784:	f107 031c 	add.w	r3, r7, #28
 8006788:	461a      	mov	r2, r3
 800678a:	2102      	movs	r1, #2
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7fc fa2f 	bl	8002bf0 <VL53L0X_GetLimitCheckValue>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006798:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067a0:	2201      	movs	r2, #1
 80067a2:	21ff      	movs	r1, #255	@ 0xff
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fa81 	bl	8006cac <VL53L0X_WrByte>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80067b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80067b8:	f107 0316 	add.w	r3, r7, #22
 80067bc:	461a      	mov	r2, r3
 80067be:	21b6      	movs	r1, #182	@ 0xb6
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 fb51 	bl	8006e68 <VL53L0X_RdWord>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80067cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067d4:	2200      	movs	r2, #0
 80067d6:	21ff      	movs	r1, #255	@ 0xff
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fa67 	bl	8006cac <VL53L0X_WrByte>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80067e4:	8afb      	ldrh	r3, [r7, #22]
 80067e6:	025b      	lsls	r3, r3, #9
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067ee:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80067f8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80067fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d902      	bls.n	8006806 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006806:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800680e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006812:	461a      	mov	r2, r3
 8006814:	2103      	movs	r1, #3
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7fc f964 	bl	8002ae4 <VL53L0X_GetLimitCheckEnable>
 800681c:	4603      	mov	r3, r0
 800681e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006822:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d023      	beq.n	8006872 <VL53L0X_get_pal_range_status+0x242>
 800682a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11f      	bne.n	8006872 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006832:	893b      	ldrh	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
 800683c:	e005      	b.n	800684a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	021a      	lsls	r2, r3, #8
 8006842:	893b      	ldrh	r3, [r7, #8]
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800684a:	f107 0318 	add.w	r3, r7, #24
 800684e:	461a      	mov	r2, r3
 8006850:	2103      	movs	r1, #3
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7fc f9cc 	bl	8002bf0 <VL53L0X_GetLimitCheckValue>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d006      	beq.n	8006872 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006864:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006868:	429a      	cmp	r2, r3
 800686a:	d202      	bcs.n	8006872 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800686c:	2301      	movs	r3, #1
 800686e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006872:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006876:	2b00      	cmp	r3, #0
 8006878:	d14a      	bne.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800687a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800687e:	2b01      	cmp	r3, #1
 8006880:	d103      	bne.n	800688a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006884:	22ff      	movs	r2, #255	@ 0xff
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e042      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800688a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800688e:	2b01      	cmp	r3, #1
 8006890:	d007      	beq.n	80068a2 <VL53L0X_get_pal_range_status+0x272>
 8006892:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006896:	2b02      	cmp	r3, #2
 8006898:	d003      	beq.n	80068a2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800689a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d103      	bne.n	80068aa <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80068a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068a4:	2205      	movs	r2, #5
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e032      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80068aa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80068ae:	2b06      	cmp	r3, #6
 80068b0:	d003      	beq.n	80068ba <VL53L0X_get_pal_range_status+0x28a>
 80068b2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	d103      	bne.n	80068c2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80068ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068bc:	2204      	movs	r2, #4
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e026      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80068c2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d007      	beq.n	80068da <VL53L0X_get_pal_range_status+0x2aa>
 80068ca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80068ce:	2b0a      	cmp	r3, #10
 80068d0:	d003      	beq.n	80068da <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80068d2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d103      	bne.n	80068e2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80068da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068dc:	2203      	movs	r2, #3
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e016      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80068e2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d003      	beq.n	80068f2 <VL53L0X_get_pal_range_status+0x2c2>
 80068ea:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d103      	bne.n	80068fa <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80068f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f4:	2202      	movs	r2, #2
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e00a      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80068fa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d103      	bne.n	800690a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	e002      	b.n	8006910 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800690a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800691a:	2200      	movs	r2, #0
 800691c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800691e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8006922:	461a      	mov	r2, r3
 8006924:	2101      	movs	r1, #1
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7fc f8dc 	bl	8002ae4 <VL53L0X_GetLimitCheckEnable>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006932:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006936:	2b00      	cmp	r3, #0
 8006938:	d14f      	bne.n	80069da <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800693a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <VL53L0X_get_pal_range_status+0x31a>
 8006942:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006946:	2b01      	cmp	r3, #1
 8006948:	d103      	bne.n	8006952 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800694a:	2301      	movs	r3, #1
 800694c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006950:	e002      	b.n	8006958 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800695e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006962:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006966:	2b04      	cmp	r3, #4
 8006968:	d003      	beq.n	8006972 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800696a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800696e:	2b00      	cmp	r3, #0
 8006970:	d103      	bne.n	800697a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006978:	e002      	b.n	8006980 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800697a:	2300      	movs	r3, #0
 800697c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006986:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800698a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <VL53L0X_get_pal_range_status+0x36a>
 8006992:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006996:	2b01      	cmp	r3, #1
 8006998:	d103      	bne.n	80069a2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80069a0:	e002      	b.n	80069a8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80069ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80069b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <VL53L0X_get_pal_range_status+0x392>
 80069ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d103      	bne.n	80069ca <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80069c8:	e002      	b.n	80069d0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80069d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 80069de:	4618      	mov	r0, r3
 80069e0:	3740      	adds	r7, #64	@ 0x40
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <cont_lidar_init>:
	  VL53L0X_SetRangeFractionEnable( Dev, 1);

}

void cont_lidar_init(uint8_t dir, uint32_t ts)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
	  Dev->I2cHandle = &hi2c1;// i2c port to be used
 80069f4:	4b3e      	ldr	r3, [pc, #248]	@ (8006af0 <cont_lidar_init+0x108>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a3e      	ldr	r2, [pc, #248]	@ (8006af4 <cont_lidar_init+0x10c>)
 80069fa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	  Dev->I2cDevAddr = dir;
 80069fe:	4b3c      	ldr	r3, [pc, #240]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	79fa      	ldrb	r2, [r7, #7]
 8006a04:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
      Dev->comms_type=1;
 8006a08:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
      Dev->comms_speed_khz=100;//  i2c a 400khz prima era 400  variato a 100
 8006a12:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2264      	movs	r2, #100	@ 0x64
 8006a18:	f8a3 2176 	strh.w	r2, [r3, #374]	@ 0x176

      VL53L0X_WaitDeviceBooted( Dev );
 8006a1c:	4b34      	ldr	r3, [pc, #208]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fb fc87 	bl	8002334 <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 8006a26:	4b32      	ldr	r3, [pc, #200]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fb f99e 	bl	8001d6c <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8006a30:	4b2f      	ldr	r3, [pc, #188]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fb fafd 	bl	8002034 <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8006a3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006af8 <cont_lidar_init+0x110>)
 8006a40:	492e      	ldr	r1, [pc, #184]	@ (8006afc <cont_lidar_init+0x114>)
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fc f9c8 	bl	8002dd8 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8006a48:	4b29      	ldr	r3, [pc, #164]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006b00 <cont_lidar_init+0x118>)
 8006a4e:	492d      	ldr	r1, [pc, #180]	@ (8006b04 <cont_lidar_init+0x11c>)
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fc fe43 	bl	80036dc <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8006a56:	4b26      	ldr	r3, [pc, #152]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fb fd07 	bl	8002470 <VL53L0X_SetDeviceMode>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8006a62:	4b23      	ldr	r3, [pc, #140]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2201      	movs	r2, #1
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fb ffae 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8006a70:	4b1f      	ldr	r3, [pc, #124]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2201      	movs	r2, #1
 8006a76:	2101      	movs	r1, #1
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fb ffa7 	bl	80029cc <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536)); //long range timing
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f641 1299 	movw	r2, #6553	@ 0x1999
 8006a86:	2101      	movs	r1, #1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fc f84f 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
	  //VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536)); //high accuracy
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18*65536));
 8006a8e:	4b18      	ldr	r3, [pc, #96]	@ (8006af0 <cont_lidar_init+0x108>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fc f847 	bl	8002b2c <VL53L0X_SetLimitCheckValue>
	  //VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 200000);
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000);
 8006a9e:	4b14      	ldr	r3, [pc, #80]	@ (8006af0 <cont_lidar_init+0x108>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fb fd40 	bl	800252c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8006aac:	4b10      	ldr	r3, [pc, #64]	@ (8006af0 <cont_lidar_init+0x108>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2212      	movs	r2, #18
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fb fd5f 	bl	8002578 <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8006aba:	4b0d      	ldr	r3, [pc, #52]	@ (8006af0 <cont_lidar_init+0x108>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	220e      	movs	r2, #14
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fb fd58 	bl	8002578 <VL53L0X_SetVcselPulsePeriod>
	 // VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, 250);
	  VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, ts);
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <cont_lidar_init+0x108>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fb fecc 	bl	800286c <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	  VL53L0X_SetGpioConfig(Dev,LidarTrigger_Pin, VL53L0X_HISTOGRAMMODE_DISABLED,VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,VL53L0X_INTERRUPTPOLARITY_HIGH);
 8006ad4:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <cont_lidar_init+0x108>)
 8006ad6:	6818      	ldr	r0, [r3, #0]
 8006ad8:	2301      	movs	r3, #1
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2304      	movs	r3, #4
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	f7fc fc43 	bl	800336c <VL53L0X_SetGpioConfig>
	 // VL53L0X_SetRangeFractionEnable( Dev, 1);

}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200002c0 	.word	0x200002c0
 8006af4:	20000b04 	.word	0x20000b04
 8006af8:	20000e36 	.word	0x20000e36
 8006afc:	20000e35 	.word	0x20000e35
 8006b00:	20000e34 	.word	0x20000e34
 8006b04:	20000e30 	.word	0x20000e30

08006b08 <startMeasurement>:
{
	VL53L0X_ClearInterruptMask(DIR_S,1);
}

void startMeasurement()
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
	 VL53L0X_StartMeasurement( Dev);
 8006b0c:	4b03      	ldr	r3, [pc, #12]	@ (8006b1c <startMeasurement+0x14>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fc f9dd 	bl	8002ed0 <VL53L0X_StartMeasurement>


}
 8006b16:	bf00      	nop
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200002c0 	.word	0x200002c0

08006b20 <getRangeData>:
	 VL53L0X_StopMeasurement ( Dev);

}


uint16_t getRangeData(){
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0

	uint16_t lidarmill=0;
 8006b26:	2300      	movs	r3, #0
 8006b28:	80fb      	strh	r3, [r7, #6]


		Dev->I2cDevAddr = DIR_S;
 8006b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b68 <getRangeData+0x48>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2252      	movs	r2, #82	@ 0x52
 8006b30:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8006b34:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <getRangeData+0x48>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	490c      	ldr	r1, [pc, #48]	@ (8006b6c <getRangeData+0x4c>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fc faca 	bl	80030d4 <VL53L0X_GetRangingMeasurementData>
	    lidarmill=RangingData.RangeMilliMeter;
 8006b40:	4b0a      	ldr	r3, [pc, #40]	@ (8006b6c <getRangeData+0x4c>)
 8006b42:	891b      	ldrh	r3, [r3, #8]
 8006b44:	80fb      	strh	r3, [r7, #6]
	   if (lidarmill>lidar_max_mm) lidarmill=lidar_max_mm;
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b4a:	d901      	bls.n	8006b50 <getRangeData+0x30>
 8006b4c:	23c8      	movs	r3, #200	@ 0xc8
 8006b4e:	80fb      	strh	r3, [r7, #6]
	    VL53L0X_ClearInterruptMask(Dev, 0);
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <getRangeData+0x48>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2100      	movs	r1, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fc fd5e 	bl	8003618 <VL53L0X_ClearInterruptMask>

	 	return(lidarmill);
 8006b5c:	88fb      	ldrh	r3, [r7, #6]


}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	200002c0 	.word	0x200002c0
 8006b6c:	20000c84 	.word	0x20000c84

08006b70 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	330a      	adds	r3, #10
 8006b80:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006b8e:	4619      	mov	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	f000 fe88 	bl	80078b0 <HAL_I2C_Master_Transmit>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006ba4:	693b      	ldr	r3, [r7, #16]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b088      	sub	sp, #32
 8006bb2:	af02      	add	r7, sp, #8
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	330a      	adds	r3, #10
 8006bbe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	f000 ff64 	bl	8007aac <HAL_I2C_Master_Receive>
 8006be4:	4603      	mov	r3, r0
 8006be6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006be8:	693b      	ldr	r3, [r7, #16]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	460b      	mov	r3, r1
 8006c02:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c0c:	d902      	bls.n	8006c14 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006c0e:	f06f 0303 	mvn.w	r3, #3
 8006c12:	e016      	b.n	8006c42 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8006c14:	4a0d      	ldr	r2, [pc, #52]	@ (8006c4c <VL53L0X_WriteMulti+0x58>)
 8006c16:	7afb      	ldrb	r3, [r7, #11]
 8006c18:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	6879      	ldr	r1, [r7, #4]
 8006c1e:	480c      	ldr	r0, [pc, #48]	@ (8006c50 <VL53L0X_WriteMulti+0x5c>)
 8006c20:	f004 fb15 	bl	800b24e <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4908      	ldr	r1, [pc, #32]	@ (8006c4c <VL53L0X_WriteMulti+0x58>)
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f7ff ff9f 	bl	8006b70 <_I2CWrite>
 8006c32:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006c3a:	23ec      	movs	r3, #236	@ 0xec
 8006c3c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006c3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000e38 	.word	0x20000e38
 8006c50:	20000e39 	.word	0x20000e39

08006c54 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	460b      	mov	r3, r1
 8006c62:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006c68:	f107 030b 	add.w	r3, r7, #11
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff ff7d 	bl	8006b70 <_I2CWrite>
 8006c76:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006c7e:	23ec      	movs	r3, #236	@ 0xec
 8006c80:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006c82:	e00c      	b.n	8006c9e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff ff90 	bl	8006bae <_I2CRead>
 8006c8e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006c96:	23ec      	movs	r3, #236	@ 0xec
 8006c98:	75fb      	strb	r3, [r7, #23]
 8006c9a:	e000      	b.n	8006c9e <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006c9c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf0 <VL53L0X_WrByte+0x44>)
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf0 <VL53L0X_WrByte+0x44>)
 8006cc8:	78bb      	ldrb	r3, [r7, #2]
 8006cca:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006ccc:	2202      	movs	r2, #2
 8006cce:	4908      	ldr	r1, [pc, #32]	@ (8006cf0 <VL53L0X_WrByte+0x44>)
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff4d 	bl	8006b70 <_I2CWrite>
 8006cd6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006cde:	23ec      	movs	r3, #236	@ 0xec
 8006ce0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000e38 	.word	0x20000e38

08006cf4 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
 8006d00:	4613      	mov	r3, r2
 8006d02:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006d08:	4a0e      	ldr	r2, [pc, #56]	@ (8006d44 <VL53L0X_WrWord+0x50>)
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006d0e:	883b      	ldrh	r3, [r7, #0]
 8006d10:	0a1b      	lsrs	r3, r3, #8
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <VL53L0X_WrWord+0x50>)
 8006d18:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006d1a:	883b      	ldrh	r3, [r7, #0]
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b09      	ldr	r3, [pc, #36]	@ (8006d44 <VL53L0X_WrWord+0x50>)
 8006d20:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006d22:	2203      	movs	r2, #3
 8006d24:	4907      	ldr	r1, [pc, #28]	@ (8006d44 <VL53L0X_WrWord+0x50>)
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7ff ff22 	bl	8006b70 <_I2CWrite>
 8006d2c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006d34:	23ec      	movs	r3, #236	@ 0xec
 8006d36:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000e38 	.word	0x20000e38

08006d48 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	460b      	mov	r3, r1
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8006d5a:	4a13      	ldr	r2, [pc, #76]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
 8006d5e:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	0e1b      	lsrs	r3, r3, #24
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	4b10      	ldr	r3, [pc, #64]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d68:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	4b0d      	ldr	r3, [pc, #52]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d72:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d7c:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4b09      	ldr	r3, [pc, #36]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d84:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8006d86:	2205      	movs	r2, #5
 8006d88:	4907      	ldr	r1, [pc, #28]	@ (8006da8 <VL53L0X_WrDWord+0x60>)
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fef0 	bl	8006b70 <_I2CWrite>
 8006d90:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006d98:	23ec      	movs	r3, #236	@ 0xec
 8006d9a:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3718      	adds	r7, #24
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000e38 	.word	0x20000e38

08006dac <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	70fb      	strb	r3, [r7, #3]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	70bb      	strb	r3, [r7, #2]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8006dca:	f107 020e 	add.w	r2, r7, #14
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f81e 	bl	8006e14 <VL53L0X_RdByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8006ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d110      	bne.n	8006e06 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8006de4:	7bba      	ldrb	r2, [r7, #14]
 8006de6:	78bb      	ldrb	r3, [r7, #2]
 8006de8:	4013      	ands	r3, r2
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	787b      	ldrb	r3, [r7, #1]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8006df4:	7bba      	ldrb	r2, [r7, #14]
 8006df6:	78fb      	ldrb	r3, [r7, #3]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff ff56 	bl	8006cac <VL53L0X_WrByte>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	e000      	b.n	8006e08 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8006e06:	bf00      	nop
done:
    return Status;
 8006e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006e26:	f107 030b 	add.w	r3, r7, #11
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fe9e 	bl	8006b70 <_I2CWrite>
 8006e34:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006e3c:	23ec      	movs	r3, #236	@ 0xec
 8006e3e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006e40:	e00c      	b.n	8006e5c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8006e42:	2201      	movs	r2, #1
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff feb1 	bl	8006bae <_I2CRead>
 8006e4c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006e54:	23ec      	movs	r3, #236	@ 0xec
 8006e56:	75fb      	strb	r3, [r7, #23]
 8006e58:	e000      	b.n	8006e5c <VL53L0X_RdByte+0x48>
    }
done:
 8006e5a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	460b      	mov	r3, r1
 8006e72:	607a      	str	r2, [r7, #4]
 8006e74:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006e7a:	f107 030b 	add.w	r3, r7, #11
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4619      	mov	r1, r3
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fe74 	bl	8006b70 <_I2CWrite>
 8006e88:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006e90:	23ec      	movs	r3, #236	@ 0xec
 8006e92:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006e94:	e015      	b.n	8006ec2 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8006e96:	2202      	movs	r2, #2
 8006e98:	490d      	ldr	r1, [pc, #52]	@ (8006ed0 <VL53L0X_RdWord+0x68>)
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f7ff fe87 	bl	8006bae <_I2CRead>
 8006ea0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006ea8:	23ec      	movs	r3, #236	@ 0xec
 8006eaa:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006eac:	e009      	b.n	8006ec2 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8006eae:	4b08      	ldr	r3, [pc, #32]	@ (8006ed0 <VL53L0X_RdWord+0x68>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4a06      	ldr	r2, [pc, #24]	@ (8006ed0 <VL53L0X_RdWord+0x68>)
 8006eb8:	7852      	ldrb	r2, [r2, #1]
 8006eba:	4413      	add	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8006ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20000e38 	.word	0x20000e38

08006ed4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	460b      	mov	r3, r1
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006ee6:	f107 030b 	add.w	r3, r7, #11
 8006eea:	2201      	movs	r2, #1
 8006eec:	4619      	mov	r1, r3
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fe3e 	bl	8006b70 <_I2CWrite>
 8006ef4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006efc:	23ec      	movs	r3, #236	@ 0xec
 8006efe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006f00:	e01b      	b.n	8006f3a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8006f02:	2204      	movs	r2, #4
 8006f04:	4910      	ldr	r1, [pc, #64]	@ (8006f48 <VL53L0X_RdDWord+0x74>)
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fe51 	bl	8006bae <_I2CRead>
 8006f0c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f14:	23ec      	movs	r3, #236	@ 0xec
 8006f16:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006f18:	e00f      	b.n	8006f3a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f48 <VL53L0X_RdDWord+0x74>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	061a      	lsls	r2, r3, #24
 8006f20:	4b09      	ldr	r3, [pc, #36]	@ (8006f48 <VL53L0X_RdDWord+0x74>)
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	441a      	add	r2, r3
 8006f28:	4b07      	ldr	r3, [pc, #28]	@ (8006f48 <VL53L0X_RdDWord+0x74>)
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	4413      	add	r3, r2
 8006f30:	4a05      	ldr	r2, [pc, #20]	@ (8006f48 <VL53L0X_RdDWord+0x74>)
 8006f32:	78d2      	ldrb	r2, [r2, #3]
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8006f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20000e38 	.word	0x20000e38

08006f4c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8006f58:	2002      	movs	r0, #2
 8006f5a:	f000 f879 	bl	8007050 <HAL_Delay>
    return status;
 8006f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f70:	4b0e      	ldr	r3, [pc, #56]	@ (8006fac <HAL_Init+0x40>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0d      	ldr	r2, [pc, #52]	@ (8006fac <HAL_Init+0x40>)
 8006f76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fac <HAL_Init+0x40>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a0a      	ldr	r2, [pc, #40]	@ (8006fac <HAL_Init+0x40>)
 8006f82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f88:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <HAL_Init+0x40>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a07      	ldr	r2, [pc, #28]	@ (8006fac <HAL_Init+0x40>)
 8006f8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f94:	2003      	movs	r0, #3
 8006f96:	f000 f94f 	bl	8007238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	f000 f808 	bl	8006fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fa0:	f7fa fc2c 	bl	80017fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023c00 	.word	0x40023c00

08006fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fb8:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <HAL_InitTick+0x54>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	4b12      	ldr	r3, [pc, #72]	@ (8007008 <HAL_InitTick+0x58>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f967 	bl	80072a2 <HAL_SYSTICK_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e00e      	b.n	8006ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b0f      	cmp	r3, #15
 8006fe2:	d80a      	bhi.n	8006ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	f000 f92f 	bl	800724e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ff0:	4a06      	ldr	r2, [pc, #24]	@ (800700c <HAL_InitTick+0x5c>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e000      	b.n	8006ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000000 	.word	0x20000000
 8007008:	200002c8 	.word	0x200002c8
 800700c:	200002c4 	.word	0x200002c4

08007010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007010:	b480      	push	{r7}
 8007012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007014:	4b06      	ldr	r3, [pc, #24]	@ (8007030 <HAL_IncTick+0x20>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <HAL_IncTick+0x24>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4413      	add	r3, r2
 8007020:	4a04      	ldr	r2, [pc, #16]	@ (8007034 <HAL_IncTick+0x24>)
 8007022:	6013      	str	r3, [r2, #0]
}
 8007024:	bf00      	nop
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	200002c8 	.word	0x200002c8
 8007034:	20000e78 	.word	0x20000e78

08007038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
  return uwTick;
 800703c:	4b03      	ldr	r3, [pc, #12]	@ (800704c <HAL_GetTick+0x14>)
 800703e:	681b      	ldr	r3, [r3, #0]
}
 8007040:	4618      	mov	r0, r3
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20000e78 	.word	0x20000e78

08007050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007058:	f7ff ffee 	bl	8007038 <HAL_GetTick>
 800705c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d005      	beq.n	8007076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800706a:	4b0a      	ldr	r3, [pc, #40]	@ (8007094 <HAL_Delay+0x44>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007076:	bf00      	nop
 8007078:	f7ff ffde 	bl	8007038 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	429a      	cmp	r2, r3
 8007086:	d8f7      	bhi.n	8007078 <HAL_Delay+0x28>
  {
  }
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200002c8 	.word	0x200002c8

08007098 <__NVIC_SetPriorityGrouping>:
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070a8:	4b0c      	ldr	r3, [pc, #48]	@ (80070dc <__NVIC_SetPriorityGrouping+0x44>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070b4:	4013      	ands	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ca:	4a04      	ldr	r2, [pc, #16]	@ (80070dc <__NVIC_SetPriorityGrouping+0x44>)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	60d3      	str	r3, [r2, #12]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	e000ed00 	.word	0xe000ed00

080070e0 <__NVIC_GetPriorityGrouping>:
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <__NVIC_GetPriorityGrouping+0x18>)
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	0a1b      	lsrs	r3, r3, #8
 80070ea:	f003 0307 	and.w	r3, r3, #7
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	e000ed00 	.word	0xe000ed00

080070fc <__NVIC_EnableIRQ>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710a:	2b00      	cmp	r3, #0
 800710c:	db0b      	blt.n	8007126 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	f003 021f 	and.w	r2, r3, #31
 8007114:	4907      	ldr	r1, [pc, #28]	@ (8007134 <__NVIC_EnableIRQ+0x38>)
 8007116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711a:	095b      	lsrs	r3, r3, #5
 800711c:	2001      	movs	r0, #1
 800711e:	fa00 f202 	lsl.w	r2, r0, r2
 8007122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	e000e100 	.word	0xe000e100

08007138 <__NVIC_SetPriority>:
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007148:	2b00      	cmp	r3, #0
 800714a:	db0a      	blt.n	8007162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	b2da      	uxtb	r2, r3
 8007150:	490c      	ldr	r1, [pc, #48]	@ (8007184 <__NVIC_SetPriority+0x4c>)
 8007152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007156:	0112      	lsls	r2, r2, #4
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	440b      	add	r3, r1
 800715c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007160:	e00a      	b.n	8007178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	4908      	ldr	r1, [pc, #32]	@ (8007188 <__NVIC_SetPriority+0x50>)
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	3b04      	subs	r3, #4
 8007170:	0112      	lsls	r2, r2, #4
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	440b      	add	r3, r1
 8007176:	761a      	strb	r2, [r3, #24]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	e000e100 	.word	0xe000e100
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <NVIC_EncodePriority>:
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	@ 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f1c3 0307 	rsb	r3, r3, #7
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	bf28      	it	cs
 80071aa:	2304      	movcs	r3, #4
 80071ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	3304      	adds	r3, #4
 80071b2:	2b06      	cmp	r3, #6
 80071b4:	d902      	bls.n	80071bc <NVIC_EncodePriority+0x30>
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3b03      	subs	r3, #3
 80071ba:	e000      	b.n	80071be <NVIC_EncodePriority+0x32>
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c0:	f04f 32ff 	mov.w	r2, #4294967295
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	401a      	ands	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071d4:	f04f 31ff 	mov.w	r1, #4294967295
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	43d9      	mvns	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e4:	4313      	orrs	r3, r2
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3724      	adds	r7, #36	@ 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <SysTick_Config>:
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3b01      	subs	r3, #1
 8007200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007204:	d301      	bcc.n	800720a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007206:	2301      	movs	r3, #1
 8007208:	e00f      	b.n	800722a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800720a:	4a0a      	ldr	r2, [pc, #40]	@ (8007234 <SysTick_Config+0x40>)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3b01      	subs	r3, #1
 8007210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007212:	210f      	movs	r1, #15
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	f7ff ff8e 	bl	8007138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <SysTick_Config+0x40>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007222:	4b04      	ldr	r3, [pc, #16]	@ (8007234 <SysTick_Config+0x40>)
 8007224:	2207      	movs	r2, #7
 8007226:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	e000e010 	.word	0xe000e010

08007238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff ff29 	bl	8007098 <__NVIC_SetPriorityGrouping>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800724e:	b580      	push	{r7, lr}
 8007250:	b086      	sub	sp, #24
 8007252:	af00      	add	r7, sp, #0
 8007254:	4603      	mov	r3, r0
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
 800725a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007260:	f7ff ff3e 	bl	80070e0 <__NVIC_GetPriorityGrouping>
 8007264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	6978      	ldr	r0, [r7, #20]
 800726c:	f7ff ff8e 	bl	800718c <NVIC_EncodePriority>
 8007270:	4602      	mov	r2, r0
 8007272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff5d 	bl	8007138 <__NVIC_SetPriority>
}
 800727e:	bf00      	nop
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	4603      	mov	r3, r0
 800728e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff ff31 	bl	80070fc <__NVIC_EnableIRQ>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ffa2 	bl	80071f4 <SysTick_Config>
 80072b0:	4603      	mov	r3, r0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072bc:	b480      	push	{r7}
 80072be:	b089      	sub	sp, #36	@ 0x24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e159      	b.n	800758c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072d8:	2201      	movs	r2, #1
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4013      	ands	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	f040 8148 	bne.w	8007586 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d005      	beq.n	800730e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800730a:	2b02      	cmp	r3, #2
 800730c:	d130      	bne.n	8007370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	2203      	movs	r2, #3
 800731a:	fa02 f303 	lsl.w	r3, r2, r3
 800731e:	43db      	mvns	r3, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4013      	ands	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	4313      	orrs	r3, r2
 8007336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007344:	2201      	movs	r2, #1
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	fa02 f303 	lsl.w	r3, r2, r3
 800734c:	43db      	mvns	r3, r3
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	4013      	ands	r3, r2
 8007352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	091b      	lsrs	r3, r3, #4
 800735a:	f003 0201 	and.w	r2, r3, #1
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	4313      	orrs	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2b03      	cmp	r3, #3
 800737a:	d017      	beq.n	80073ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	2203      	movs	r2, #3
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	43db      	mvns	r3, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4013      	ands	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f003 0303 	and.w	r3, r3, #3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d123      	bne.n	8007400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	08da      	lsrs	r2, r3, #3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3208      	adds	r2, #8
 80073c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	220f      	movs	r2, #15
 80073d0:	fa02 f303 	lsl.w	r3, r2, r3
 80073d4:	43db      	mvns	r3, r3
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	4013      	ands	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	08da      	lsrs	r2, r3, #3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3208      	adds	r2, #8
 80073fa:	69b9      	ldr	r1, [r7, #24]
 80073fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	2203      	movs	r2, #3
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	43db      	mvns	r3, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4013      	ands	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f003 0203 	and.w	r2, r3, #3
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	fa02 f303 	lsl.w	r3, r2, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4313      	orrs	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80a2 	beq.w	8007586 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	4b57      	ldr	r3, [pc, #348]	@ (80075a4 <HAL_GPIO_Init+0x2e8>)
 8007448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744a:	4a56      	ldr	r2, [pc, #344]	@ (80075a4 <HAL_GPIO_Init+0x2e8>)
 800744c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007450:	6453      	str	r3, [r2, #68]	@ 0x44
 8007452:	4b54      	ldr	r3, [pc, #336]	@ (80075a4 <HAL_GPIO_Init+0x2e8>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800745e:	4a52      	ldr	r2, [pc, #328]	@ (80075a8 <HAL_GPIO_Init+0x2ec>)
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	089b      	lsrs	r3, r3, #2
 8007464:	3302      	adds	r3, #2
 8007466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	220f      	movs	r2, #15
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4013      	ands	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a49      	ldr	r2, [pc, #292]	@ (80075ac <HAL_GPIO_Init+0x2f0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d019      	beq.n	80074be <HAL_GPIO_Init+0x202>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a48      	ldr	r2, [pc, #288]	@ (80075b0 <HAL_GPIO_Init+0x2f4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <HAL_GPIO_Init+0x1fe>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a47      	ldr	r2, [pc, #284]	@ (80075b4 <HAL_GPIO_Init+0x2f8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00d      	beq.n	80074b6 <HAL_GPIO_Init+0x1fa>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a46      	ldr	r2, [pc, #280]	@ (80075b8 <HAL_GPIO_Init+0x2fc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d007      	beq.n	80074b2 <HAL_GPIO_Init+0x1f6>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a45      	ldr	r2, [pc, #276]	@ (80075bc <HAL_GPIO_Init+0x300>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d101      	bne.n	80074ae <HAL_GPIO_Init+0x1f2>
 80074aa:	2304      	movs	r3, #4
 80074ac:	e008      	b.n	80074c0 <HAL_GPIO_Init+0x204>
 80074ae:	2307      	movs	r3, #7
 80074b0:	e006      	b.n	80074c0 <HAL_GPIO_Init+0x204>
 80074b2:	2303      	movs	r3, #3
 80074b4:	e004      	b.n	80074c0 <HAL_GPIO_Init+0x204>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e002      	b.n	80074c0 <HAL_GPIO_Init+0x204>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <HAL_GPIO_Init+0x204>
 80074be:	2300      	movs	r3, #0
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	f002 0203 	and.w	r2, r2, #3
 80074c6:	0092      	lsls	r2, r2, #2
 80074c8:	4093      	lsls	r3, r2
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074d0:	4935      	ldr	r1, [pc, #212]	@ (80075a8 <HAL_GPIO_Init+0x2ec>)
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	089b      	lsrs	r3, r3, #2
 80074d6:	3302      	adds	r3, #2
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074de:	4b38      	ldr	r3, [pc, #224]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	43db      	mvns	r3, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4013      	ands	r3, r2
 80074ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007502:	4a2f      	ldr	r2, [pc, #188]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007508:	4b2d      	ldr	r3, [pc, #180]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	43db      	mvns	r3, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4013      	ands	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800752c:	4a24      	ldr	r2, [pc, #144]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007532:	4b23      	ldr	r3, [pc, #140]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007556:	4a1a      	ldr	r2, [pc, #104]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800755c:	4b18      	ldr	r3, [pc, #96]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	43db      	mvns	r3, r3
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	4013      	ands	r3, r2
 800756a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d003      	beq.n	8007580 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007580:	4a0f      	ldr	r2, [pc, #60]	@ (80075c0 <HAL_GPIO_Init+0x304>)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3301      	adds	r3, #1
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b0f      	cmp	r3, #15
 8007590:	f67f aea2 	bls.w	80072d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3724      	adds	r7, #36	@ 0x24
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40023800 	.word	0x40023800
 80075a8:	40013800 	.word	0x40013800
 80075ac:	40020000 	.word	0x40020000
 80075b0:	40020400 	.word	0x40020400
 80075b4:	40020800 	.word	0x40020800
 80075b8:	40020c00 	.word	0x40020c00
 80075bc:	40021000 	.word	0x40021000
 80075c0:	40013c00 	.word	0x40013c00

080075c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	460b      	mov	r3, r1
 80075ce:	807b      	strh	r3, [r7, #2]
 80075d0:	4613      	mov	r3, r2
 80075d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d4:	787b      	ldrb	r3, [r7, #1]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075e0:	e003      	b.n	80075ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	619a      	str	r2, [r3, #24]
}
 80075ea:	bf00      	nop
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007602:	4b08      	ldr	r3, [pc, #32]	@ (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	4013      	ands	r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d006      	beq.n	800761c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800760e:	4a05      	ldr	r2, [pc, #20]	@ (8007624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007614:	88fb      	ldrh	r3, [r7, #6]
 8007616:	4618      	mov	r0, r3
 8007618:	f7f9 fcec 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 800761c:	bf00      	nop
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40013c00 	.word	0x40013c00

08007628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e12b      	b.n	8007892 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fa f8fc 	bl	800184c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2224      	movs	r2, #36	@ 0x24
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800767a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800768a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800768c:	f001 fc36 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 8007690:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4a81      	ldr	r2, [pc, #516]	@ (800789c <HAL_I2C_Init+0x274>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d807      	bhi.n	80076ac <HAL_I2C_Init+0x84>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a80      	ldr	r2, [pc, #512]	@ (80078a0 <HAL_I2C_Init+0x278>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	bf94      	ite	ls
 80076a4:	2301      	movls	r3, #1
 80076a6:	2300      	movhi	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e006      	b.n	80076ba <HAL_I2C_Init+0x92>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a7d      	ldr	r2, [pc, #500]	@ (80078a4 <HAL_I2C_Init+0x27c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	bf94      	ite	ls
 80076b4:	2301      	movls	r3, #1
 80076b6:	2300      	movhi	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0e7      	b.n	8007892 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	4a78      	ldr	r2, [pc, #480]	@ (80078a8 <HAL_I2C_Init+0x280>)
 80076c6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ca:	0c9b      	lsrs	r3, r3, #18
 80076cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	4a6a      	ldr	r2, [pc, #424]	@ (800789c <HAL_I2C_Init+0x274>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d802      	bhi.n	80076fc <HAL_I2C_Init+0xd4>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	3301      	adds	r3, #1
 80076fa:	e009      	b.n	8007710 <HAL_I2C_Init+0xe8>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007702:	fb02 f303 	mul.w	r3, r2, r3
 8007706:	4a69      	ldr	r2, [pc, #420]	@ (80078ac <HAL_I2C_Init+0x284>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	099b      	lsrs	r3, r3, #6
 800770e:	3301      	adds	r3, #1
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	430b      	orrs	r3, r1
 8007716:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007722:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	495c      	ldr	r1, [pc, #368]	@ (800789c <HAL_I2C_Init+0x274>)
 800772c:	428b      	cmp	r3, r1
 800772e:	d819      	bhi.n	8007764 <HAL_I2C_Init+0x13c>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	1e59      	subs	r1, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	fbb1 f3f3 	udiv	r3, r1, r3
 800773e:	1c59      	adds	r1, r3, #1
 8007740:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007744:	400b      	ands	r3, r1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <HAL_I2C_Init+0x138>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1e59      	subs	r1, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	fbb1 f3f3 	udiv	r3, r1, r3
 8007758:	3301      	adds	r3, #1
 800775a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775e:	e051      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 8007760:	2304      	movs	r3, #4
 8007762:	e04f      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d111      	bne.n	8007790 <HAL_I2C_Init+0x168>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	1e58      	subs	r0, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6859      	ldr	r1, [r3, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	440b      	add	r3, r1
 800777a:	fbb0 f3f3 	udiv	r3, r0, r3
 800777e:	3301      	adds	r3, #1
 8007780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007784:	2b00      	cmp	r3, #0
 8007786:	bf0c      	ite	eq
 8007788:	2301      	moveq	r3, #1
 800778a:	2300      	movne	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e012      	b.n	80077b6 <HAL_I2C_Init+0x18e>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1e58      	subs	r0, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	440b      	add	r3, r1
 800779e:	0099      	lsls	r1, r3, #2
 80077a0:	440b      	add	r3, r1
 80077a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80077a6:	3301      	adds	r3, #1
 80077a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf0c      	ite	eq
 80077b0:	2301      	moveq	r3, #1
 80077b2:	2300      	movne	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_Init+0x196>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e022      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10e      	bne.n	80077e4 <HAL_I2C_Init+0x1bc>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	1e58      	subs	r0, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6859      	ldr	r1, [r3, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	005b      	lsls	r3, r3, #1
 80077d2:	440b      	add	r3, r1
 80077d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80077d8:	3301      	adds	r3, #1
 80077da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e2:	e00f      	b.n	8007804 <HAL_I2C_Init+0x1dc>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	1e58      	subs	r0, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	0099      	lsls	r1, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077fa:	3301      	adds	r3, #1
 80077fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	6809      	ldr	r1, [r1, #0]
 8007808:	4313      	orrs	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007832:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6911      	ldr	r1, [r2, #16]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68d2      	ldr	r2, [r2, #12]
 800783e:	4311      	orrs	r1, r2
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	430b      	orrs	r3, r1
 8007846:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	000186a0 	.word	0x000186a0
 80078a0:	001e847f 	.word	0x001e847f
 80078a4:	003d08ff 	.word	0x003d08ff
 80078a8:	431bde83 	.word	0x431bde83
 80078ac:	10624dd3 	.word	0x10624dd3

080078b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	607a      	str	r2, [r7, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	460b      	mov	r3, r1
 80078be:	817b      	strh	r3, [r7, #10]
 80078c0:	4613      	mov	r3, r2
 80078c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078c4:	f7ff fbb8 	bl	8007038 <HAL_GetTick>
 80078c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	f040 80e0 	bne.w	8007a98 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2319      	movs	r3, #25
 80078de:	2201      	movs	r2, #1
 80078e0:	4970      	ldr	r1, [pc, #448]	@ (8007aa4 <HAL_I2C_Master_Transmit+0x1f4>)
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fc64 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80078ee:	2302      	movs	r3, #2
 80078f0:	e0d3      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_I2C_Master_Transmit+0x50>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e0cc      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d007      	beq.n	8007926 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f042 0201 	orr.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007934:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2221      	movs	r2, #33	@ 0x21
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2210      	movs	r2, #16
 8007942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	893a      	ldrh	r2, [r7, #8]
 8007956:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a50      	ldr	r2, [pc, #320]	@ (8007aa8 <HAL_I2C_Master_Transmit+0x1f8>)
 8007966:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007968:	8979      	ldrh	r1, [r7, #10]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	6a3a      	ldr	r2, [r7, #32]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 face 	bl	8007f10 <I2C_MasterRequestWrite>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e08d      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797e:	2300      	movs	r3, #0
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007994:	e066      	b.n	8007a64 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	6a39      	ldr	r1, [r7, #32]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fd22 	bl	80083e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d107      	bne.n	80079be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e06b      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c6:	781a      	ldrb	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	3b01      	subs	r3, #1
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d11b      	bne.n	8007a38 <HAL_I2C_Master_Transmit+0x188>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d017      	beq.n	8007a38 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	6a39      	ldr	r1, [r7, #32]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fd19 	bl	8008474 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4c:	2b04      	cmp	r3, #4
 8007a4e:	d107      	bne.n	8007a60 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a5e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e01a      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d194      	bne.n	8007996 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	00100002 	.word	0x00100002
 8007aa8:	ffff0000 	.word	0xffff0000

08007aac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08c      	sub	sp, #48	@ 0x30
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	460b      	mov	r3, r1
 8007aba:	817b      	strh	r3, [r7, #10]
 8007abc:	4613      	mov	r3, r2
 8007abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ac0:	f7ff faba 	bl	8007038 <HAL_GetTick>
 8007ac4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	f040 8217 	bne.w	8007f02 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2319      	movs	r3, #25
 8007ada:	2201      	movs	r2, #1
 8007adc:	497c      	ldr	r1, [pc, #496]	@ (8007cd0 <HAL_I2C_Master_Receive+0x224>)
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fb66 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007aea:	2302      	movs	r3, #2
 8007aec:	e20a      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_I2C_Master_Receive+0x50>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e203      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d007      	beq.n	8007b22 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2222      	movs	r2, #34	@ 0x22
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	893a      	ldrh	r2, [r7, #8]
 8007b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4a5c      	ldr	r2, [pc, #368]	@ (8007cd4 <HAL_I2C_Master_Receive+0x228>)
 8007b62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b64:	8979      	ldrh	r1, [r7, #10]
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fa52 	bl	8008014 <I2C_MasterRequestRead>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e1c4      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d113      	bne.n	8007baa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b82:	2300      	movs	r3, #0
 8007b84:	623b      	str	r3, [r7, #32]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	623b      	str	r3, [r7, #32]
 8007b96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e198      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d11b      	bne.n	8007bea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	61fb      	str	r3, [r7, #28]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	61fb      	str	r3, [r7, #28]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e178      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d11b      	bne.n	8007c2a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c12:	2300      	movs	r3, #0
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	61bb      	str	r3, [r7, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	61bb      	str	r3, [r7, #24]
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	e158      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c50:	e144      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f200 80f1 	bhi.w	8007e3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d123      	bne.n	8007cac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fc4b 	bl	8008504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e145      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	691a      	ldr	r2, [r3, #16]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c94:	3b01      	subs	r3, #1
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007caa:	e117      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d14e      	bne.n	8007d52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4906      	ldr	r1, [pc, #24]	@ (8007cd8 <HAL_I2C_Master_Receive+0x22c>)
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa76 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e11a      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
 8007cce:	bf00      	nop
 8007cd0:	00100002 	.word	0x00100002
 8007cd4:	ffff0000 	.word	0xffff0000
 8007cd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	b29a      	uxth	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d50:	e0c4      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	2200      	movs	r2, #0
 8007d5a:	496c      	ldr	r1, [pc, #432]	@ (8007f0c <HAL_I2C_Master_Receive+0x460>)
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 fa27 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e0cb      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691a      	ldr	r2, [r3, #16]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	2200      	movs	r2, #0
 8007db6:	4955      	ldr	r1, [pc, #340]	@ (8007f0c <HAL_I2C_Master_Receive+0x460>)
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 f9f9 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e09d      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691a      	ldr	r2, [r3, #16]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	b2d2      	uxtb	r2, r2
 8007de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007e3c:	e04e      	b.n	8007edc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fb5e 	bl	8008504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e058      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d124      	bne.n	8007edc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d107      	bne.n	8007eaa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691a      	ldr	r2, [r3, #16]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f47f aeb6 	bne.w	8007c52 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2220      	movs	r2, #32
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	e000      	b.n	8007f04 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
  }
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3728      	adds	r7, #40	@ 0x28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	00010004 	.word	0x00010004

08007f10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d006      	beq.n	8007f3a <I2C_MasterRequestWrite+0x2a>
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d003      	beq.n	8007f3a <I2C_MasterRequestWrite+0x2a>
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f38:	d108      	bne.n	8007f4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	e00b      	b.n	8007f64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	2b12      	cmp	r3, #18
 8007f52:	d107      	bne.n	8007f64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f91d 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00d      	beq.n	8007f98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f8a:	d103      	bne.n	8007f94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e035      	b.n	8008004 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa0:	d108      	bne.n	8007fb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fa2:	897b      	ldrh	r3, [r7, #10]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007fb0:	611a      	str	r2, [r3, #16]
 8007fb2:	e01b      	b.n	8007fec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fb4:	897b      	ldrh	r3, [r7, #10]
 8007fb6:	11db      	asrs	r3, r3, #7
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 0306 	and.w	r3, r3, #6
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	f063 030f 	orn	r3, r3, #15
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	490e      	ldr	r1, [pc, #56]	@ (800800c <I2C_MasterRequestWrite+0xfc>)
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f966 	bl	80082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e010      	b.n	8008004 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007fe2:	897b      	ldrh	r3, [r7, #10]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	4907      	ldr	r1, [pc, #28]	@ (8008010 <I2C_MasterRequestWrite+0x100>)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 f956 	bl	80082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	00010008 	.word	0x00010008
 8008010:	00010002 	.word	0x00010002

08008014 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b088      	sub	sp, #32
 8008018:	af02      	add	r7, sp, #8
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	460b      	mov	r3, r1
 8008022:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008038:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d006      	beq.n	800804e <I2C_MasterRequestRead+0x3a>
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d003      	beq.n	800804e <I2C_MasterRequestRead+0x3a>
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800804c:	d108      	bne.n	8008060 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	e00b      	b.n	8008078 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	2b11      	cmp	r3, #17
 8008066:	d107      	bne.n	8008078 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 f893 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00d      	beq.n	80080ac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800809a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809e:	d103      	bne.n	80080a8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e079      	b.n	80081a0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080b4:	d108      	bne.n	80080c8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080b6:	897b      	ldrh	r3, [r7, #10]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f043 0301 	orr.w	r3, r3, #1
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	611a      	str	r2, [r3, #16]
 80080c6:	e05f      	b.n	8008188 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080c8:	897b      	ldrh	r3, [r7, #10]
 80080ca:	11db      	asrs	r3, r3, #7
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	f003 0306 	and.w	r3, r3, #6
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f063 030f 	orn	r3, r3, #15
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4930      	ldr	r1, [pc, #192]	@ (80081a8 <I2C_MasterRequestRead+0x194>)
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 f8dc 	bl	80082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e054      	b.n	80081a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080f6:	897b      	ldrh	r3, [r7, #10]
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4929      	ldr	r1, [pc, #164]	@ (80081ac <I2C_MasterRequestRead+0x198>)
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 f8cc 	bl	80082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e044      	b.n	80081a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008116:	2300      	movs	r3, #0
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	613b      	str	r3, [r7, #16]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800813a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f831 	bl	80081b0 <I2C_WaitOnFlagUntilTimeout>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00d      	beq.n	8008170 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008162:	d103      	bne.n	800816c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800816a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e017      	b.n	80081a0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008170:	897b      	ldrh	r3, [r7, #10]
 8008172:	11db      	asrs	r3, r3, #7
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 0306 	and.w	r3, r3, #6
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f063 030e 	orn	r3, r3, #14
 8008180:	b2da      	uxtb	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4907      	ldr	r1, [pc, #28]	@ (80081ac <I2C_MasterRequestRead+0x198>)
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 f888 	bl	80082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e000      	b.n	80081a0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	00010008 	.word	0x00010008
 80081ac:	00010002 	.word	0x00010002

080081b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	4613      	mov	r3, r2
 80081be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c0:	e048      	b.n	8008254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d044      	beq.n	8008254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ca:	f7fe ff35 	bl	8007038 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d302      	bcc.n	80081e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d139      	bne.n	8008254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d10d      	bne.n	8008206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	43da      	mvns	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4013      	ands	r3, r2
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	e00c      	b.n	8008220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	43da      	mvns	r2, r3
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4013      	ands	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	bf0c      	ite	eq
 8008218:	2301      	moveq	r3, #1
 800821a:	2300      	movne	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	79fb      	ldrb	r3, [r7, #7]
 8008222:	429a      	cmp	r2, r3
 8008224:	d116      	bne.n	8008254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	f043 0220 	orr.w	r2, r3, #32
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e023      	b.n	800829c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b01      	cmp	r3, #1
 800825c:	d10d      	bne.n	800827a <I2C_WaitOnFlagUntilTimeout+0xca>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	43da      	mvns	r2, r3
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4013      	ands	r3, r2
 800826a:	b29b      	uxth	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf0c      	ite	eq
 8008270:	2301      	moveq	r3, #1
 8008272:	2300      	movne	r3, #0
 8008274:	b2db      	uxtb	r3, r3
 8008276:	461a      	mov	r2, r3
 8008278:	e00c      	b.n	8008294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	43da      	mvns	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4013      	ands	r3, r2
 8008286:	b29b      	uxth	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	bf0c      	ite	eq
 800828c:	2301      	moveq	r3, #1
 800828e:	2300      	movne	r3, #0
 8008290:	b2db      	uxtb	r3, r3
 8008292:	461a      	mov	r2, r3
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	429a      	cmp	r2, r3
 8008298:	d093      	beq.n	80081c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082b2:	e071      	b.n	8008398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082c2:	d123      	bne.n	800830c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80082dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f8:	f043 0204 	orr.w	r2, r3, #4
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e067      	b.n	80083dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d041      	beq.n	8008398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008314:	f7fe fe90 	bl	8007038 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d302      	bcc.n	800832a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d136      	bne.n	8008398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	0c1b      	lsrs	r3, r3, #16
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b01      	cmp	r3, #1
 8008332:	d10c      	bne.n	800834e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	43da      	mvns	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4013      	ands	r3, r2
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	bf14      	ite	ne
 8008346:	2301      	movne	r3, #1
 8008348:	2300      	moveq	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	e00b      	b.n	8008366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	43da      	mvns	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	4013      	ands	r3, r2
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d016      	beq.n	8008398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008384:	f043 0220 	orr.w	r2, r3, #32
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e021      	b.n	80083dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0c1b      	lsrs	r3, r3, #16
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d10c      	bne.n	80083bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	43da      	mvns	r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	4013      	ands	r3, r2
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	bf14      	ite	ne
 80083b4:	2301      	movne	r3, #1
 80083b6:	2300      	moveq	r3, #0
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	e00b      	b.n	80083d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	699b      	ldr	r3, [r3, #24]
 80083c2:	43da      	mvns	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	4013      	ands	r3, r2
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f af6d 	bne.w	80082b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083f0:	e034      	b.n	800845c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f8e3 	bl	80085be <I2C_IsAcknowledgeFailed>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e034      	b.n	800846c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008408:	d028      	beq.n	800845c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800840a:	f7fe fe15 	bl	8007038 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	429a      	cmp	r2, r3
 8008418:	d302      	bcc.n	8008420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11d      	bne.n	800845c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800842a:	2b80      	cmp	r3, #128	@ 0x80
 800842c:	d016      	beq.n	800845c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2220      	movs	r2, #32
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2200      	movs	r2, #0
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008448:	f043 0220 	orr.w	r2, r3, #32
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e007      	b.n	800846c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008466:	2b80      	cmp	r3, #128	@ 0x80
 8008468:	d1c3      	bne.n	80083f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008480:	e034      	b.n	80084ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 f89b 	bl	80085be <I2C_IsAcknowledgeFailed>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e034      	b.n	80084fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d028      	beq.n	80084ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800849a:	f7fe fdcd 	bl	8007038 <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d302      	bcc.n	80084b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11d      	bne.n	80084ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d016      	beq.n	80084ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	f043 0220 	orr.w	r2, r3, #32
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e007      	b.n	80084fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d1c3      	bne.n	8008482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008510:	e049      	b.n	80085a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b10      	cmp	r3, #16
 800851e:	d119      	bne.n	8008554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0210 	mvn.w	r2, #16
 8008528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2220      	movs	r2, #32
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e030      	b.n	80085b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008554:	f7fe fd70 	bl	8007038 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	429a      	cmp	r2, r3
 8008562:	d302      	bcc.n	800856a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d11d      	bne.n	80085a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b40      	cmp	r3, #64	@ 0x40
 8008576:	d016      	beq.n	80085a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008592:	f043 0220 	orr.w	r2, r3, #32
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e007      	b.n	80085b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b0:	2b40      	cmp	r3, #64	@ 0x40
 80085b2:	d1ae      	bne.n	8008512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085d4:	d11b      	bne.n	800860e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	f043 0204 	orr.w	r2, r3, #4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e267      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d075      	beq.n	8008726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800863a:	4b88      	ldr	r3, [pc, #544]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 030c 	and.w	r3, r3, #12
 8008642:	2b04      	cmp	r3, #4
 8008644:	d00c      	beq.n	8008660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008646:	4b85      	ldr	r3, [pc, #532]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800864e:	2b08      	cmp	r3, #8
 8008650:	d112      	bne.n	8008678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008652:	4b82      	ldr	r3, [pc, #520]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800865a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800865e:	d10b      	bne.n	8008678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008660:	4b7e      	ldr	r3, [pc, #504]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d05b      	beq.n	8008724 <HAL_RCC_OscConfig+0x108>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d157      	bne.n	8008724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e242      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008680:	d106      	bne.n	8008690 <HAL_RCC_OscConfig+0x74>
 8008682:	4b76      	ldr	r3, [pc, #472]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a75      	ldr	r2, [pc, #468]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e01d      	b.n	80086cc <HAL_RCC_OscConfig+0xb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008698:	d10c      	bne.n	80086b4 <HAL_RCC_OscConfig+0x98>
 800869a:	4b70      	ldr	r3, [pc, #448]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a6f      	ldr	r2, [pc, #444]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4b6d      	ldr	r3, [pc, #436]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a6c      	ldr	r2, [pc, #432]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	e00b      	b.n	80086cc <HAL_RCC_OscConfig+0xb0>
 80086b4:	4b69      	ldr	r3, [pc, #420]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a68      	ldr	r2, [pc, #416]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	4b66      	ldr	r3, [pc, #408]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a65      	ldr	r2, [pc, #404]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d013      	beq.n	80086fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d4:	f7fe fcb0 	bl	8007038 <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086da:	e008      	b.n	80086ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086dc:	f7fe fcac 	bl	8007038 <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b64      	cmp	r3, #100	@ 0x64
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e207      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ee:	4b5b      	ldr	r3, [pc, #364]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0f0      	beq.n	80086dc <HAL_RCC_OscConfig+0xc0>
 80086fa:	e014      	b.n	8008726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fc:	f7fe fc9c 	bl	8007038 <HAL_GetTick>
 8008700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008702:	e008      	b.n	8008716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008704:	f7fe fc98 	bl	8007038 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b64      	cmp	r3, #100	@ 0x64
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e1f3      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008716:	4b51      	ldr	r3, [pc, #324]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1f0      	bne.n	8008704 <HAL_RCC_OscConfig+0xe8>
 8008722:	e000      	b.n	8008726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d063      	beq.n	80087fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008732:	4b4a      	ldr	r3, [pc, #296]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 030c 	and.w	r3, r3, #12
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00b      	beq.n	8008756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800873e:	4b47      	ldr	r3, [pc, #284]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008746:	2b08      	cmp	r3, #8
 8008748:	d11c      	bne.n	8008784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800874a:	4b44      	ldr	r3, [pc, #272]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d116      	bne.n	8008784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008756:	4b41      	ldr	r3, [pc, #260]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_RCC_OscConfig+0x152>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d001      	beq.n	800876e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e1c7      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800876e:	4b3b      	ldr	r3, [pc, #236]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	4937      	ldr	r1, [pc, #220]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 800877e:	4313      	orrs	r3, r2
 8008780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008782:	e03a      	b.n	80087fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d020      	beq.n	80087ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800878c:	4b34      	ldr	r3, [pc, #208]	@ (8008860 <HAL_RCC_OscConfig+0x244>)
 800878e:	2201      	movs	r2, #1
 8008790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008792:	f7fe fc51 	bl	8007038 <HAL_GetTick>
 8008796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008798:	e008      	b.n	80087ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800879a:	f7fe fc4d 	bl	8007038 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e1a8      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087ac:	4b2b      	ldr	r3, [pc, #172]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0f0      	beq.n	800879a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087b8:	4b28      	ldr	r3, [pc, #160]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4925      	ldr	r1, [pc, #148]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	600b      	str	r3, [r1, #0]
 80087cc:	e015      	b.n	80087fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ce:	4b24      	ldr	r3, [pc, #144]	@ (8008860 <HAL_RCC_OscConfig+0x244>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d4:	f7fe fc30 	bl	8007038 <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087dc:	f7fe fc2c 	bl	8007038 <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e187      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ee:	4b1b      	ldr	r3, [pc, #108]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f0      	bne.n	80087dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0308 	and.w	r3, r3, #8
 8008802:	2b00      	cmp	r3, #0
 8008804:	d036      	beq.n	8008874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d016      	beq.n	800883c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <HAL_RCC_OscConfig+0x248>)
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008814:	f7fe fc10 	bl	8007038 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800881c:	f7fe fc0c 	bl	8007038 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e167      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800882e:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <HAL_RCC_OscConfig+0x240>)
 8008830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f0      	beq.n	800881c <HAL_RCC_OscConfig+0x200>
 800883a:	e01b      	b.n	8008874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800883c:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_RCC_OscConfig+0x248>)
 800883e:	2200      	movs	r2, #0
 8008840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008842:	f7fe fbf9 	bl	8007038 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008848:	e00e      	b.n	8008868 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800884a:	f7fe fbf5 	bl	8007038 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d907      	bls.n	8008868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e150      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
 800885c:	40023800 	.word	0x40023800
 8008860:	42470000 	.word	0x42470000
 8008864:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008868:	4b88      	ldr	r3, [pc, #544]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800886a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1ea      	bne.n	800884a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8097 	beq.w	80089b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008886:	4b81      	ldr	r3, [pc, #516]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10f      	bne.n	80088b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
 8008896:	4b7d      	ldr	r3, [pc, #500]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	4a7c      	ldr	r2, [pc, #496]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800889c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80088a2:	4b7a      	ldr	r3, [pc, #488]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088aa:	60bb      	str	r3, [r7, #8]
 80088ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088ae:	2301      	movs	r3, #1
 80088b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b2:	4b77      	ldr	r3, [pc, #476]	@ (8008a90 <HAL_RCC_OscConfig+0x474>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d118      	bne.n	80088f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088be:	4b74      	ldr	r3, [pc, #464]	@ (8008a90 <HAL_RCC_OscConfig+0x474>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a73      	ldr	r2, [pc, #460]	@ (8008a90 <HAL_RCC_OscConfig+0x474>)
 80088c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ca:	f7fe fbb5 	bl	8007038 <HAL_GetTick>
 80088ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d0:	e008      	b.n	80088e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088d2:	f7fe fbb1 	bl	8007038 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d901      	bls.n	80088e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e10c      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008a90 <HAL_RCC_OscConfig+0x474>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0f0      	beq.n	80088d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d106      	bne.n	8008906 <HAL_RCC_OscConfig+0x2ea>
 80088f8:	4b64      	ldr	r3, [pc, #400]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80088fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fc:	4a63      	ldr	r2, [pc, #396]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	6713      	str	r3, [r2, #112]	@ 0x70
 8008904:	e01c      	b.n	8008940 <HAL_RCC_OscConfig+0x324>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b05      	cmp	r3, #5
 800890c:	d10c      	bne.n	8008928 <HAL_RCC_OscConfig+0x30c>
 800890e:	4b5f      	ldr	r3, [pc, #380]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008912:	4a5e      	ldr	r2, [pc, #376]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008914:	f043 0304 	orr.w	r3, r3, #4
 8008918:	6713      	str	r3, [r2, #112]	@ 0x70
 800891a:	4b5c      	ldr	r3, [pc, #368]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800891c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891e:	4a5b      	ldr	r2, [pc, #364]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008920:	f043 0301 	orr.w	r3, r3, #1
 8008924:	6713      	str	r3, [r2, #112]	@ 0x70
 8008926:	e00b      	b.n	8008940 <HAL_RCC_OscConfig+0x324>
 8008928:	4b58      	ldr	r3, [pc, #352]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892c:	4a57      	ldr	r2, [pc, #348]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800892e:	f023 0301 	bic.w	r3, r3, #1
 8008932:	6713      	str	r3, [r2, #112]	@ 0x70
 8008934:	4b55      	ldr	r3, [pc, #340]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008938:	4a54      	ldr	r2, [pc, #336]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 800893a:	f023 0304 	bic.w	r3, r3, #4
 800893e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d015      	beq.n	8008974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008948:	f7fe fb76 	bl	8007038 <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800894e:	e00a      	b.n	8008966 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008950:	f7fe fb72 	bl	8007038 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800895e:	4293      	cmp	r3, r2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e0cb      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008966:	4b49      	ldr	r3, [pc, #292]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d0ee      	beq.n	8008950 <HAL_RCC_OscConfig+0x334>
 8008972:	e014      	b.n	800899e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008974:	f7fe fb60 	bl	8007038 <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897a:	e00a      	b.n	8008992 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800897c:	f7fe fb5c 	bl	8007038 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800898a:	4293      	cmp	r3, r2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e0b5      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008992:	4b3e      	ldr	r3, [pc, #248]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1ee      	bne.n	800897c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d105      	bne.n	80089b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a4:	4b39      	ldr	r3, [pc, #228]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a8:	4a38      	ldr	r2, [pc, #224]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80089aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	f000 80a1 	beq.w	8008afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089ba:	4b34      	ldr	r3, [pc, #208]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f003 030c 	and.w	r3, r3, #12
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d05c      	beq.n	8008a80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d141      	bne.n	8008a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ce:	4b31      	ldr	r3, [pc, #196]	@ (8008a94 <HAL_RCC_OscConfig+0x478>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d4:	f7fe fb30 	bl	8007038 <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089dc:	f7fe fb2c 	bl	8007038 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e087      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ee:	4b27      	ldr	r3, [pc, #156]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a08:	019b      	lsls	r3, r3, #6
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	3b01      	subs	r3, #1
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	061b      	lsls	r3, r3, #24
 8008a1e:	491b      	ldr	r1, [pc, #108]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a24:	4b1b      	ldr	r3, [pc, #108]	@ (8008a94 <HAL_RCC_OscConfig+0x478>)
 8008a26:	2201      	movs	r2, #1
 8008a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a2a:	f7fe fb05 	bl	8007038 <HAL_GetTick>
 8008a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a30:	e008      	b.n	8008a44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a32:	f7fe fb01 	bl	8007038 <HAL_GetTick>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e05c      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a44:	4b11      	ldr	r3, [pc, #68]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f0      	beq.n	8008a32 <HAL_RCC_OscConfig+0x416>
 8008a50:	e054      	b.n	8008afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a52:	4b10      	ldr	r3, [pc, #64]	@ (8008a94 <HAL_RCC_OscConfig+0x478>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a58:	f7fe faee 	bl	8007038 <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a5e:	e008      	b.n	8008a72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a60:	f7fe faea 	bl	8007038 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e045      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a72:	4b06      	ldr	r3, [pc, #24]	@ (8008a8c <HAL_RCC_OscConfig+0x470>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f0      	bne.n	8008a60 <HAL_RCC_OscConfig+0x444>
 8008a7e:	e03d      	b.n	8008afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d107      	bne.n	8008a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e038      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
 8008a8c:	40023800 	.word	0x40023800
 8008a90:	40007000 	.word	0x40007000
 8008a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a98:	4b1b      	ldr	r3, [pc, #108]	@ (8008b08 <HAL_RCC_OscConfig+0x4ec>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d028      	beq.n	8008af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d121      	bne.n	8008af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d11a      	bne.n	8008af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ac8:	4013      	ands	r3, r2
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d111      	bne.n	8008af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ade:	085b      	lsrs	r3, r3, #1
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d107      	bne.n	8008af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d001      	beq.n	8008afc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3718      	adds	r7, #24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	40023800 	.word	0x40023800

08008b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0cc      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b20:	4b68      	ldr	r3, [pc, #416]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0307 	and.w	r3, r3, #7
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d90c      	bls.n	8008b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2e:	4b65      	ldr	r3, [pc, #404]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	b2d2      	uxtb	r2, r2
 8008b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b36:	4b63      	ldr	r3, [pc, #396]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d001      	beq.n	8008b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0b8      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d020      	beq.n	8008b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b60:	4b59      	ldr	r3, [pc, #356]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	4a58      	ldr	r2, [pc, #352]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b78:	4b53      	ldr	r3, [pc, #332]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	4a52      	ldr	r2, [pc, #328]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b84:	4b50      	ldr	r3, [pc, #320]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	494d      	ldr	r1, [pc, #308]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d044      	beq.n	8008c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d107      	bne.n	8008bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008baa:	4b47      	ldr	r3, [pc, #284]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d119      	bne.n	8008bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e07f      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d003      	beq.n	8008bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bc6:	2b03      	cmp	r3, #3
 8008bc8:	d107      	bne.n	8008bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bca:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e06f      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bda:	4b3b      	ldr	r3, [pc, #236]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e067      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bea:	4b37      	ldr	r3, [pc, #220]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f023 0203 	bic.w	r2, r3, #3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	4934      	ldr	r1, [pc, #208]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bfc:	f7fe fa1c 	bl	8007038 <HAL_GetTick>
 8008c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c02:	e00a      	b.n	8008c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c04:	f7fe fa18 	bl	8007038 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e04f      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 020c 	and.w	r2, r3, #12
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d1eb      	bne.n	8008c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c2c:	4b25      	ldr	r3, [pc, #148]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d20c      	bcs.n	8008c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c3a:	4b22      	ldr	r3, [pc, #136]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	b2d2      	uxtb	r2, r2
 8008c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c42:	4b20      	ldr	r3, [pc, #128]	@ (8008cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d001      	beq.n	8008c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e032      	b.n	8008cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d008      	beq.n	8008c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c60:	4b19      	ldr	r3, [pc, #100]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	4916      	ldr	r1, [pc, #88]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c7e:	4b12      	ldr	r3, [pc, #72]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	490e      	ldr	r1, [pc, #56]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c92:	f000 f821 	bl	8008cd8 <HAL_RCC_GetSysClockFreq>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	091b      	lsrs	r3, r3, #4
 8008c9e:	f003 030f 	and.w	r3, r3, #15
 8008ca2:	490a      	ldr	r1, [pc, #40]	@ (8008ccc <HAL_RCC_ClockConfig+0x1c0>)
 8008ca4:	5ccb      	ldrb	r3, [r1, r3]
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	4a09      	ldr	r2, [pc, #36]	@ (8008cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8008cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008cae:	4b09      	ldr	r3, [pc, #36]	@ (8008cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe f97c 	bl	8006fb0 <HAL_InitTick>

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	40023c00 	.word	0x40023c00
 8008cc8:	40023800 	.word	0x40023800
 8008ccc:	0800e6b4 	.word	0x0800e6b4
 8008cd0:	20000000 	.word	0x20000000
 8008cd4:	200002c4 	.word	0x200002c4

08008cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cdc:	b094      	sub	sp, #80	@ 0x50
 8008cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce8:	2300      	movs	r3, #0
 8008cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cf0:	4b79      	ldr	r3, [pc, #484]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	f003 030c 	and.w	r3, r3, #12
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d00d      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x40>
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	f200 80e1 	bhi.w	8008ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HAL_RCC_GetSysClockFreq+0x34>
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d003      	beq.n	8008d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d0a:	e0db      	b.n	8008ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d0c:	4b73      	ldr	r3, [pc, #460]	@ (8008edc <HAL_RCC_GetSysClockFreq+0x204>)
 8008d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008d10:	e0db      	b.n	8008eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d12:	4b73      	ldr	r3, [pc, #460]	@ (8008ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d16:	e0d8      	b.n	8008eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d18:	4b6f      	ldr	r3, [pc, #444]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d22:	4b6d      	ldr	r3, [pc, #436]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d063      	beq.n	8008df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	099b      	lsrs	r3, r3, #6
 8008d34:	2200      	movs	r2, #0
 8008d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	f04f 0000 	mov.w	r0, #0
 8008d52:	f04f 0100 	mov.w	r1, #0
 8008d56:	0159      	lsls	r1, r3, #5
 8008d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d5c:	0150      	lsls	r0, r2, #5
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4621      	mov	r1, r4
 8008d64:	1a51      	subs	r1, r2, r1
 8008d66:	6139      	str	r1, [r7, #16]
 8008d68:	4629      	mov	r1, r5
 8008d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8008d6e:	617b      	str	r3, [r7, #20]
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	f04f 0300 	mov.w	r3, #0
 8008d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	018b      	lsls	r3, r1, #6
 8008d80:	4651      	mov	r1, sl
 8008d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008d86:	4651      	mov	r1, sl
 8008d88:	018a      	lsls	r2, r1, #6
 8008d8a:	4651      	mov	r1, sl
 8008d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8008d90:	4659      	mov	r1, fp
 8008d92:	eb63 0901 	sbc.w	r9, r3, r1
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	f04f 0300 	mov.w	r3, #0
 8008d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008daa:	4690      	mov	r8, r2
 8008dac:	4699      	mov	r9, r3
 8008dae:	4623      	mov	r3, r4
 8008db0:	eb18 0303 	adds.w	r3, r8, r3
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	462b      	mov	r3, r5
 8008db8:	eb49 0303 	adc.w	r3, r9, r3
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008dca:	4629      	mov	r1, r5
 8008dcc:	024b      	lsls	r3, r1, #9
 8008dce:	4621      	mov	r1, r4
 8008dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	024a      	lsls	r2, r1, #9
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dde:	2200      	movs	r2, #0
 8008de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008de8:	f7f7 ff56 	bl	8000c98 <__aeabi_uldivmod>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4613      	mov	r3, r2
 8008df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008df4:	e058      	b.n	8008ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008df6:	4b38      	ldr	r3, [pc, #224]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	099b      	lsrs	r3, r3, #6
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	4618      	mov	r0, r3
 8008e00:	4611      	mov	r1, r2
 8008e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e06:	623b      	str	r3, [r7, #32]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e10:	4642      	mov	r2, r8
 8008e12:	464b      	mov	r3, r9
 8008e14:	f04f 0000 	mov.w	r0, #0
 8008e18:	f04f 0100 	mov.w	r1, #0
 8008e1c:	0159      	lsls	r1, r3, #5
 8008e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e22:	0150      	lsls	r0, r2, #5
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4641      	mov	r1, r8
 8008e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e2e:	4649      	mov	r1, r9
 8008e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e48:	ebb2 040a 	subs.w	r4, r2, sl
 8008e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8008e50:	f04f 0200 	mov.w	r2, #0
 8008e54:	f04f 0300 	mov.w	r3, #0
 8008e58:	00eb      	lsls	r3, r5, #3
 8008e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e5e:	00e2      	lsls	r2, r4, #3
 8008e60:	4614      	mov	r4, r2
 8008e62:	461d      	mov	r5, r3
 8008e64:	4643      	mov	r3, r8
 8008e66:	18e3      	adds	r3, r4, r3
 8008e68:	603b      	str	r3, [r7, #0]
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	eb45 0303 	adc.w	r3, r5, r3
 8008e70:	607b      	str	r3, [r7, #4]
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e7e:	4629      	mov	r1, r5
 8008e80:	028b      	lsls	r3, r1, #10
 8008e82:	4621      	mov	r1, r4
 8008e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e88:	4621      	mov	r1, r4
 8008e8a:	028a      	lsls	r2, r1, #10
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e92:	2200      	movs	r2, #0
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	61fa      	str	r2, [r7, #28]
 8008e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e9c:	f7f7 fefc 	bl	8000c98 <__aeabi_uldivmod>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	0c1b      	lsrs	r3, r3, #16
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ec2:	e002      	b.n	8008eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ec4:	4b05      	ldr	r3, [pc, #20]	@ (8008edc <HAL_RCC_GetSysClockFreq+0x204>)
 8008ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3750      	adds	r7, #80	@ 0x50
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	00f42400 	.word	0x00f42400
 8008ee0:	007a1200 	.word	0x007a1200

08008ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ee8:	4b03      	ldr	r3, [pc, #12]	@ (8008ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008eea:	681b      	ldr	r3, [r3, #0]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000000 	.word	0x20000000

08008efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f00:	f7ff fff0 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b05      	ldr	r3, [pc, #20]	@ (8008f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	0a9b      	lsrs	r3, r3, #10
 8008f0c:	f003 0307 	and.w	r3, r3, #7
 8008f10:	4903      	ldr	r1, [pc, #12]	@ (8008f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	0800e6c4 	.word	0x0800e6c4

08008f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f28:	f7ff ffdc 	bl	8008ee4 <HAL_RCC_GetHCLKFreq>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	0b5b      	lsrs	r3, r3, #13
 8008f34:	f003 0307 	and.w	r3, r3, #7
 8008f38:	4903      	ldr	r1, [pc, #12]	@ (8008f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f3a:	5ccb      	ldrb	r3, [r1, r3]
 8008f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	40023800 	.word	0x40023800
 8008f48:	0800e6c4 	.word	0x0800e6c4

08008f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e041      	b.n	8008fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f8 fd02 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3304      	adds	r3, #4
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f000 fb16 	bl	80095bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
	...

08008fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d001      	beq.n	8009004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e044      	b.n	800908e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2202      	movs	r2, #2
 8009008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0201 	orr.w	r2, r2, #1
 800901a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1e      	ldr	r2, [pc, #120]	@ (800909c <HAL_TIM_Base_Start_IT+0xb0>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d018      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x6c>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800902e:	d013      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x6c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1a      	ldr	r2, [pc, #104]	@ (80090a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00e      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x6c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a19      	ldr	r2, [pc, #100]	@ (80090a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d009      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x6c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a17      	ldr	r2, [pc, #92]	@ (80090a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d004      	beq.n	8009058 <HAL_TIM_Base_Start_IT+0x6c>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a16      	ldr	r2, [pc, #88]	@ (80090ac <HAL_TIM_Base_Start_IT+0xc0>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d111      	bne.n	800907c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b06      	cmp	r3, #6
 8009068:	d010      	beq.n	800908c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0201 	orr.w	r2, r2, #1
 8009078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907a:	e007      	b.n	800908c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40010000 	.word	0x40010000
 80090a0:	40000400 	.word	0x40000400
 80090a4:	40000800 	.word	0x40000800
 80090a8:	40000c00 	.word	0x40000c00
 80090ac:	40014000 	.word	0x40014000

080090b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e097      	b.n	80091f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7f8 fbff 	bl	80018dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2202      	movs	r2, #2
 80090e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6812      	ldr	r2, [r2, #0]
 80090f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f4:	f023 0307 	bic.w	r3, r3, #7
 80090f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	3304      	adds	r3, #4
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f000 fa59 	bl	80095bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	4313      	orrs	r3, r2
 800912a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	4313      	orrs	r3, r2
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	4313      	orrs	r3, r2
 8009148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009150:	f023 030c 	bic.w	r3, r3, #12
 8009154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800915c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68da      	ldr	r2, [r3, #12]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	4313      	orrs	r3, r2
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	011a      	lsls	r2, r3, #4
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	031b      	lsls	r3, r3, #12
 8009180:	4313      	orrs	r3, r2
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800918e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	011b      	lsls	r3, r3, #4
 80091a2:	4313      	orrs	r3, r2
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	691b      	ldr	r3, [r3, #16]
 8009212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d020      	beq.n	8009260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01b      	beq.n	8009260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0202 	mvn.w	r2, #2
 8009230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0303 	and.w	r3, r3, #3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f999 	bl	800957e <HAL_TIM_IC_CaptureCallback>
 800924c:	e005      	b.n	800925a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f98b 	bl	800956a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f99c 	bl	8009592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f003 0304 	and.w	r3, r3, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	d020      	beq.n	80092ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01b      	beq.n	80092ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0204 	mvn.w	r2, #4
 800927c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f973 	bl	800957e <HAL_TIM_IC_CaptureCallback>
 8009298:	e005      	b.n	80092a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f965 	bl	800956a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f976 	bl	8009592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d020      	beq.n	80092f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d01b      	beq.n	80092f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f06f 0208 	mvn.w	r2, #8
 80092c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2204      	movs	r2, #4
 80092ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69db      	ldr	r3, [r3, #28]
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d003      	beq.n	80092e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f94d 	bl	800957e <HAL_TIM_IC_CaptureCallback>
 80092e4:	e005      	b.n	80092f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f93f 	bl	800956a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f950 	bl	8009592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	f003 0310 	and.w	r3, r3, #16
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d020      	beq.n	8009344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f003 0310 	and.w	r3, r3, #16
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01b      	beq.n	8009344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f06f 0210 	mvn.w	r2, #16
 8009314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2208      	movs	r2, #8
 800931a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f927 	bl	800957e <HAL_TIM_IC_CaptureCallback>
 8009330:	e005      	b.n	800933e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f919 	bl	800956a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f92a 	bl	8009592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00c      	beq.n	8009368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0201 	mvn.w	r2, #1
 8009360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7f7 fe5a 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00c      	beq.n	800938c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fab6 	bl	80098f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00c      	beq.n	80093b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	d007      	beq.n	80093b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f8fb 	bl	80095a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00c      	beq.n	80093d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f003 0320 	and.w	r3, r3, #32
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f06f 0220 	mvn.w	r2, #32
 80093cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa88 	bl	80098e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_TIM_ConfigClockSource+0x1c>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e0b4      	b.n	8009562 <HAL_TIM_ConfigClockSource+0x186>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800941e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009430:	d03e      	beq.n	80094b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009432:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009436:	f200 8087 	bhi.w	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 800943a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800943e:	f000 8086 	beq.w	800954e <HAL_TIM_ConfigClockSource+0x172>
 8009442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009446:	d87f      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009448:	2b70      	cmp	r3, #112	@ 0x70
 800944a:	d01a      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0xa6>
 800944c:	2b70      	cmp	r3, #112	@ 0x70
 800944e:	d87b      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009450:	2b60      	cmp	r3, #96	@ 0x60
 8009452:	d050      	beq.n	80094f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009454:	2b60      	cmp	r3, #96	@ 0x60
 8009456:	d877      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009458:	2b50      	cmp	r3, #80	@ 0x50
 800945a:	d03c      	beq.n	80094d6 <HAL_TIM_ConfigClockSource+0xfa>
 800945c:	2b50      	cmp	r3, #80	@ 0x50
 800945e:	d873      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009460:	2b40      	cmp	r3, #64	@ 0x40
 8009462:	d058      	beq.n	8009516 <HAL_TIM_ConfigClockSource+0x13a>
 8009464:	2b40      	cmp	r3, #64	@ 0x40
 8009466:	d86f      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009468:	2b30      	cmp	r3, #48	@ 0x30
 800946a:	d064      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x15a>
 800946c:	2b30      	cmp	r3, #48	@ 0x30
 800946e:	d86b      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009470:	2b20      	cmp	r3, #32
 8009472:	d060      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x15a>
 8009474:	2b20      	cmp	r3, #32
 8009476:	d867      	bhi.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d05c      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x15a>
 800947c:	2b10      	cmp	r3, #16
 800947e:	d05a      	beq.n	8009536 <HAL_TIM_ConfigClockSource+0x15a>
 8009480:	e062      	b.n	8009548 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009492:	f000 f999 	bl	80097c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80094a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	609a      	str	r2, [r3, #8]
      break;
 80094ae:	e04f      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094c0:	f000 f982 	bl	80097c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094d2:	609a      	str	r2, [r3, #8]
      break;
 80094d4:	e03c      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094e2:	461a      	mov	r2, r3
 80094e4:	f000 f8f6 	bl	80096d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2150      	movs	r1, #80	@ 0x50
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f94f 	bl	8009792 <TIM_ITRx_SetConfig>
      break;
 80094f4:	e02c      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009502:	461a      	mov	r2, r3
 8009504:	f000 f915 	bl	8009732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	2160      	movs	r1, #96	@ 0x60
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f93f 	bl	8009792 <TIM_ITRx_SetConfig>
      break;
 8009514:	e01c      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009522:	461a      	mov	r2, r3
 8009524:	f000 f8d6 	bl	80096d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2140      	movs	r1, #64	@ 0x40
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f92f 	bl	8009792 <TIM_ITRx_SetConfig>
      break;
 8009534:	e00c      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f000 f926 	bl	8009792 <TIM_ITRx_SetConfig>
      break;
 8009546:	e003      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	73fb      	strb	r3, [r7, #15]
      break;
 800954c:	e000      	b.n	8009550 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800954e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095ae:	bf00      	nop
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
	...

080095bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a3a      	ldr	r2, [pc, #232]	@ (80096b8 <TIM_Base_SetConfig+0xfc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00f      	beq.n	80095f4 <TIM_Base_SetConfig+0x38>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095da:	d00b      	beq.n	80095f4 <TIM_Base_SetConfig+0x38>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a37      	ldr	r2, [pc, #220]	@ (80096bc <TIM_Base_SetConfig+0x100>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d007      	beq.n	80095f4 <TIM_Base_SetConfig+0x38>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a36      	ldr	r2, [pc, #216]	@ (80096c0 <TIM_Base_SetConfig+0x104>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d003      	beq.n	80095f4 <TIM_Base_SetConfig+0x38>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a35      	ldr	r2, [pc, #212]	@ (80096c4 <TIM_Base_SetConfig+0x108>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d108      	bne.n	8009606 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a2b      	ldr	r2, [pc, #172]	@ (80096b8 <TIM_Base_SetConfig+0xfc>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d01b      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009614:	d017      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a28      	ldr	r2, [pc, #160]	@ (80096bc <TIM_Base_SetConfig+0x100>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d013      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a27      	ldr	r2, [pc, #156]	@ (80096c0 <TIM_Base_SetConfig+0x104>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00f      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a26      	ldr	r2, [pc, #152]	@ (80096c4 <TIM_Base_SetConfig+0x108>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d00b      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a25      	ldr	r2, [pc, #148]	@ (80096c8 <TIM_Base_SetConfig+0x10c>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d007      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a24      	ldr	r2, [pc, #144]	@ (80096cc <TIM_Base_SetConfig+0x110>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d003      	beq.n	8009646 <TIM_Base_SetConfig+0x8a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a23      	ldr	r2, [pc, #140]	@ (80096d0 <TIM_Base_SetConfig+0x114>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d108      	bne.n	8009658 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800964c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a0e      	ldr	r2, [pc, #56]	@ (80096b8 <TIM_Base_SetConfig+0xfc>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d103      	bne.n	800968c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	2b01      	cmp	r3, #1
 800969c:	d105      	bne.n	80096aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f023 0201 	bic.w	r2, r3, #1
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	611a      	str	r2, [r3, #16]
  }
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40014400 	.word	0x40014400
 80096d0:	40014800 	.word	0x40014800

080096d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f023 0201 	bic.w	r2, r3, #1
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f023 030a 	bic.w	r3, r3, #10
 8009710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	4313      	orrs	r3, r2
 8009718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	621a      	str	r2, [r3, #32]
}
 8009726:	bf00      	nop
 8009728:	371c      	adds	r7, #28
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	f023 0210 	bic.w	r2, r3, #16
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800975c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	031b      	lsls	r3, r3, #12
 8009762:	693a      	ldr	r2, [r7, #16]
 8009764:	4313      	orrs	r3, r2
 8009766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800976e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	4313      	orrs	r3, r2
 8009778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	621a      	str	r2, [r3, #32]
}
 8009786:	bf00      	nop
 8009788:	371c      	adds	r7, #28
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f043 0307 	orr.w	r3, r3, #7
 80097b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	609a      	str	r2, [r3, #8]
}
 80097bc:	bf00      	nop
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	021a      	lsls	r2, r3, #8
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	431a      	orrs	r2, r3
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	697a      	ldr	r2, [r7, #20]
 80097fa:	609a      	str	r2, [r3, #8]
}
 80097fc:	bf00      	nop
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800981c:	2302      	movs	r3, #2
 800981e:	e050      	b.n	80098c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2202      	movs	r2, #2
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a1c      	ldr	r2, [pc, #112]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d018      	beq.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800986c:	d013      	beq.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a18      	ldr	r2, [pc, #96]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d00e      	beq.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a16      	ldr	r2, [pc, #88]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d009      	beq.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d004      	beq.n	8009896 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a13      	ldr	r2, [pc, #76]	@ (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d10c      	bne.n	80098b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800989c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	40010000 	.word	0x40010000
 80098d4:	40000400 	.word	0x40000400
 80098d8:	40000800 	.word	0x40000800
 80098dc:	40000c00 	.word	0x40000c00
 80098e0:	40014000 	.word	0x40014000

080098e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098ec:	bf00      	nop
 80098ee:	370c      	adds	r7, #12
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e042      	b.n	80099a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7f8 f868 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2224      	movs	r2, #36	@ 0x24
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800994e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f82b 	bl	80099ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	691a      	ldr	r2, [r3, #16]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	695a      	ldr	r2, [r3, #20]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099b0:	b0c0      	sub	sp, #256	@ 0x100
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c8:	68d9      	ldr	r1, [r3, #12]
 80099ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	ea40 0301 	orr.w	r3, r0, r1
 80099d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a04:	f021 010c 	bic.w	r1, r1, #12
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a12:	430b      	orrs	r3, r1
 8009a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a26:	6999      	ldr	r1, [r3, #24]
 8009a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	ea40 0301 	orr.w	r3, r0, r1
 8009a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4b8f      	ldr	r3, [pc, #572]	@ (8009c78 <UART_SetConfig+0x2cc>)
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d005      	beq.n	8009a4c <UART_SetConfig+0xa0>
 8009a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4b8d      	ldr	r3, [pc, #564]	@ (8009c7c <UART_SetConfig+0x2d0>)
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d104      	bne.n	8009a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a4c:	f7ff fa6a 	bl	8008f24 <HAL_RCC_GetPCLK2Freq>
 8009a50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a54:	e003      	b.n	8009a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a56:	f7ff fa51 	bl	8008efc <HAL_RCC_GetPCLK1Freq>
 8009a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a68:	f040 810c 	bne.w	8009c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a7e:	4622      	mov	r2, r4
 8009a80:	462b      	mov	r3, r5
 8009a82:	1891      	adds	r1, r2, r2
 8009a84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a86:	415b      	adcs	r3, r3
 8009a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a8e:	4621      	mov	r1, r4
 8009a90:	eb12 0801 	adds.w	r8, r2, r1
 8009a94:	4629      	mov	r1, r5
 8009a96:	eb43 0901 	adc.w	r9, r3, r1
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	f04f 0300 	mov.w	r3, #0
 8009aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aae:	4690      	mov	r8, r2
 8009ab0:	4699      	mov	r9, r3
 8009ab2:	4623      	mov	r3, r4
 8009ab4:	eb18 0303 	adds.w	r3, r8, r3
 8009ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009abc:	462b      	mov	r3, r5
 8009abe:	eb49 0303 	adc.w	r3, r9, r3
 8009ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ada:	460b      	mov	r3, r1
 8009adc:	18db      	adds	r3, r3, r3
 8009ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	eb42 0303 	adc.w	r3, r2, r3
 8009ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009af0:	f7f7 f8d2 	bl	8000c98 <__aeabi_uldivmod>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4b61      	ldr	r3, [pc, #388]	@ (8009c80 <UART_SetConfig+0x2d4>)
 8009afa:	fba3 2302 	umull	r2, r3, r3, r2
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	011c      	lsls	r4, r3, #4
 8009b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	1891      	adds	r1, r2, r2
 8009b1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b1c:	415b      	adcs	r3, r3
 8009b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b24:	4641      	mov	r1, r8
 8009b26:	eb12 0a01 	adds.w	sl, r2, r1
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b44:	4692      	mov	sl, r2
 8009b46:	469b      	mov	fp, r3
 8009b48:	4643      	mov	r3, r8
 8009b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8009b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b52:	464b      	mov	r3, r9
 8009b54:	eb4b 0303 	adc.w	r3, fp, r3
 8009b58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b70:	460b      	mov	r3, r1
 8009b72:	18db      	adds	r3, r3, r3
 8009b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b76:	4613      	mov	r3, r2
 8009b78:	eb42 0303 	adc.w	r3, r2, r3
 8009b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b86:	f7f7 f887 	bl	8000c98 <__aeabi_uldivmod>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4b3b      	ldr	r3, [pc, #236]	@ (8009c80 <UART_SetConfig+0x2d4>)
 8009b92:	fba3 2301 	umull	r2, r3, r3, r1
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	2264      	movs	r2, #100	@ 0x64
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
 8009b9e:	1acb      	subs	r3, r1, r3
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ba6:	4b36      	ldr	r3, [pc, #216]	@ (8009c80 <UART_SetConfig+0x2d4>)
 8009ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009bb4:	441c      	add	r4, r3
 8009bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009bc8:	4642      	mov	r2, r8
 8009bca:	464b      	mov	r3, r9
 8009bcc:	1891      	adds	r1, r2, r2
 8009bce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bd0:	415b      	adcs	r3, r3
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009bd8:	4641      	mov	r1, r8
 8009bda:	1851      	adds	r1, r2, r1
 8009bdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009bde:	4649      	mov	r1, r9
 8009be0:	414b      	adcs	r3, r1
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	f04f 0300 	mov.w	r3, #0
 8009bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	00cb      	lsls	r3, r1, #3
 8009bf4:	4651      	mov	r1, sl
 8009bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bfa:	4651      	mov	r1, sl
 8009bfc:	00ca      	lsls	r2, r1, #3
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4619      	mov	r1, r3
 8009c02:	4603      	mov	r3, r0
 8009c04:	4642      	mov	r2, r8
 8009c06:	189b      	adds	r3, r3, r2
 8009c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	460a      	mov	r2, r1
 8009c10:	eb42 0303 	adc.w	r3, r2, r3
 8009c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	18db      	adds	r3, r3, r3
 8009c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c32:	4613      	mov	r3, r2
 8009c34:	eb42 0303 	adc.w	r3, r2, r3
 8009c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c42:	f7f7 f829 	bl	8000c98 <__aeabi_uldivmod>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c80 <UART_SetConfig+0x2d4>)
 8009c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c50:	095b      	lsrs	r3, r3, #5
 8009c52:	2164      	movs	r1, #100	@ 0x64
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	3332      	adds	r3, #50	@ 0x32
 8009c5e:	4a08      	ldr	r2, [pc, #32]	@ (8009c80 <UART_SetConfig+0x2d4>)
 8009c60:	fba2 2303 	umull	r2, r3, r2, r3
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	f003 0207 	and.w	r2, r3, #7
 8009c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4422      	add	r2, r4
 8009c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c74:	e106      	b.n	8009e84 <UART_SetConfig+0x4d8>
 8009c76:	bf00      	nop
 8009c78:	40011000 	.word	0x40011000
 8009c7c:	40011400 	.word	0x40011400
 8009c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c96:	4642      	mov	r2, r8
 8009c98:	464b      	mov	r3, r9
 8009c9a:	1891      	adds	r1, r2, r2
 8009c9c:	6239      	str	r1, [r7, #32]
 8009c9e:	415b      	adcs	r3, r3
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	1854      	adds	r4, r2, r1
 8009caa:	4649      	mov	r1, r9
 8009cac:	eb43 0501 	adc.w	r5, r3, r1
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	00eb      	lsls	r3, r5, #3
 8009cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cbe:	00e2      	lsls	r2, r4, #3
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	461d      	mov	r5, r3
 8009cc4:	4643      	mov	r3, r8
 8009cc6:	18e3      	adds	r3, r4, r3
 8009cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ccc:	464b      	mov	r3, r9
 8009cce:	eb45 0303 	adc.w	r3, r5, r3
 8009cd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ce2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ce6:	f04f 0200 	mov.w	r2, #0
 8009cea:	f04f 0300 	mov.w	r3, #0
 8009cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	008b      	lsls	r3, r1, #2
 8009cf6:	4621      	mov	r1, r4
 8009cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	008a      	lsls	r2, r1, #2
 8009d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d04:	f7f6 ffc8 	bl	8000c98 <__aeabi_uldivmod>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	4b60      	ldr	r3, [pc, #384]	@ (8009e90 <UART_SetConfig+0x4e4>)
 8009d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d12:	095b      	lsrs	r3, r3, #5
 8009d14:	011c      	lsls	r4, r3, #4
 8009d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d28:	4642      	mov	r2, r8
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	1891      	adds	r1, r2, r2
 8009d2e:	61b9      	str	r1, [r7, #24]
 8009d30:	415b      	adcs	r3, r3
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d38:	4641      	mov	r1, r8
 8009d3a:	1851      	adds	r1, r2, r1
 8009d3c:	6139      	str	r1, [r7, #16]
 8009d3e:	4649      	mov	r1, r9
 8009d40:	414b      	adcs	r3, r1
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d50:	4659      	mov	r1, fp
 8009d52:	00cb      	lsls	r3, r1, #3
 8009d54:	4651      	mov	r1, sl
 8009d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	00ca      	lsls	r2, r1, #3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	4642      	mov	r2, r8
 8009d66:	189b      	adds	r3, r3, r2
 8009d68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	460a      	mov	r2, r1
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d90:	4649      	mov	r1, r9
 8009d92:	008b      	lsls	r3, r1, #2
 8009d94:	4641      	mov	r1, r8
 8009d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d9a:	4641      	mov	r1, r8
 8009d9c:	008a      	lsls	r2, r1, #2
 8009d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009da2:	f7f6 ff79 	bl	8000c98 <__aeabi_uldivmod>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4611      	mov	r1, r2
 8009dac:	4b38      	ldr	r3, [pc, #224]	@ (8009e90 <UART_SetConfig+0x4e4>)
 8009dae:	fba3 2301 	umull	r2, r3, r3, r1
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	2264      	movs	r2, #100	@ 0x64
 8009db6:	fb02 f303 	mul.w	r3, r2, r3
 8009dba:	1acb      	subs	r3, r1, r3
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	3332      	adds	r3, #50	@ 0x32
 8009dc0:	4a33      	ldr	r2, [pc, #204]	@ (8009e90 <UART_SetConfig+0x4e4>)
 8009dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc6:	095b      	lsrs	r3, r3, #5
 8009dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dcc:	441c      	add	r4, r3
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009ddc:	4642      	mov	r2, r8
 8009dde:	464b      	mov	r3, r9
 8009de0:	1891      	adds	r1, r2, r2
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	415b      	adcs	r3, r3
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dec:	4641      	mov	r1, r8
 8009dee:	1851      	adds	r1, r2, r1
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	4649      	mov	r1, r9
 8009df4:	414b      	adcs	r3, r1
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e04:	4659      	mov	r1, fp
 8009e06:	00cb      	lsls	r3, r1, #3
 8009e08:	4651      	mov	r1, sl
 8009e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e0e:	4651      	mov	r1, sl
 8009e10:	00ca      	lsls	r2, r1, #3
 8009e12:	4610      	mov	r0, r2
 8009e14:	4619      	mov	r1, r3
 8009e16:	4603      	mov	r3, r0
 8009e18:	4642      	mov	r2, r8
 8009e1a:	189b      	adds	r3, r3, r2
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1e:	464b      	mov	r3, r9
 8009e20:	460a      	mov	r2, r1
 8009e22:	eb42 0303 	adc.w	r3, r2, r3
 8009e26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e32:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e34:	f04f 0200 	mov.w	r2, #0
 8009e38:	f04f 0300 	mov.w	r3, #0
 8009e3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e40:	4649      	mov	r1, r9
 8009e42:	008b      	lsls	r3, r1, #2
 8009e44:	4641      	mov	r1, r8
 8009e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e4a:	4641      	mov	r1, r8
 8009e4c:	008a      	lsls	r2, r1, #2
 8009e4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e52:	f7f6 ff21 	bl	8000c98 <__aeabi_uldivmod>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <UART_SetConfig+0x4e4>)
 8009e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	2164      	movs	r1, #100	@ 0x64
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	3332      	adds	r3, #50	@ 0x32
 8009e6e:	4a08      	ldr	r2, [pc, #32]	@ (8009e90 <UART_SetConfig+0x4e4>)
 8009e70:	fba2 2303 	umull	r2, r3, r2, r3
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	f003 020f 	and.w	r2, r3, #15
 8009e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4422      	add	r2, r4
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e90:	51eb851f 	.word	0x51eb851f

08009e94 <__cvt>:
 8009e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e98:	ec57 6b10 	vmov	r6, r7, d0
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	bfbb      	ittet	lt
 8009ea6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009eaa:	461f      	movlt	r7, r3
 8009eac:	2300      	movge	r3, #0
 8009eae:	232d      	movlt	r3, #45	@ 0x2d
 8009eb0:	700b      	strb	r3, [r1, #0]
 8009eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009eb8:	4691      	mov	r9, r2
 8009eba:	f023 0820 	bic.w	r8, r3, #32
 8009ebe:	bfbc      	itt	lt
 8009ec0:	4632      	movlt	r2, r6
 8009ec2:	4616      	movlt	r6, r2
 8009ec4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ec8:	d005      	beq.n	8009ed6 <__cvt+0x42>
 8009eca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ece:	d100      	bne.n	8009ed2 <__cvt+0x3e>
 8009ed0:	3401      	adds	r4, #1
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	e000      	b.n	8009ed8 <__cvt+0x44>
 8009ed6:	2103      	movs	r1, #3
 8009ed8:	ab03      	add	r3, sp, #12
 8009eda:	9301      	str	r3, [sp, #4]
 8009edc:	ab02      	add	r3, sp, #8
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	ec47 6b10 	vmov	d0, r6, r7
 8009ee4:	4653      	mov	r3, sl
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	f001 fa4e 	bl	800b388 <_dtoa_r>
 8009eec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	d119      	bne.n	8009f28 <__cvt+0x94>
 8009ef4:	f019 0f01 	tst.w	r9, #1
 8009ef8:	d00e      	beq.n	8009f18 <__cvt+0x84>
 8009efa:	eb00 0904 	add.w	r9, r0, r4
 8009efe:	2200      	movs	r2, #0
 8009f00:	2300      	movs	r3, #0
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 fde7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f0a:	b108      	cbz	r0, 8009f10 <__cvt+0x7c>
 8009f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f10:	2230      	movs	r2, #48	@ 0x30
 8009f12:	9b03      	ldr	r3, [sp, #12]
 8009f14:	454b      	cmp	r3, r9
 8009f16:	d31e      	bcc.n	8009f56 <__cvt+0xc2>
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f1c:	1b5b      	subs	r3, r3, r5
 8009f1e:	4628      	mov	r0, r5
 8009f20:	6013      	str	r3, [r2, #0]
 8009f22:	b004      	add	sp, #16
 8009f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f2c:	eb00 0904 	add.w	r9, r0, r4
 8009f30:	d1e5      	bne.n	8009efe <__cvt+0x6a>
 8009f32:	7803      	ldrb	r3, [r0, #0]
 8009f34:	2b30      	cmp	r3, #48	@ 0x30
 8009f36:	d10a      	bne.n	8009f4e <__cvt+0xba>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f44:	b918      	cbnz	r0, 8009f4e <__cvt+0xba>
 8009f46:	f1c4 0401 	rsb	r4, r4, #1
 8009f4a:	f8ca 4000 	str.w	r4, [sl]
 8009f4e:	f8da 3000 	ldr.w	r3, [sl]
 8009f52:	4499      	add	r9, r3
 8009f54:	e7d3      	b.n	8009efe <__cvt+0x6a>
 8009f56:	1c59      	adds	r1, r3, #1
 8009f58:	9103      	str	r1, [sp, #12]
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	e7d9      	b.n	8009f12 <__cvt+0x7e>

08009f5e <__exponent>:
 8009f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f60:	2900      	cmp	r1, #0
 8009f62:	bfba      	itte	lt
 8009f64:	4249      	neglt	r1, r1
 8009f66:	232d      	movlt	r3, #45	@ 0x2d
 8009f68:	232b      	movge	r3, #43	@ 0x2b
 8009f6a:	2909      	cmp	r1, #9
 8009f6c:	7002      	strb	r2, [r0, #0]
 8009f6e:	7043      	strb	r3, [r0, #1]
 8009f70:	dd29      	ble.n	8009fc6 <__exponent+0x68>
 8009f72:	f10d 0307 	add.w	r3, sp, #7
 8009f76:	461d      	mov	r5, r3
 8009f78:	270a      	movs	r7, #10
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f80:	fb07 1416 	mls	r4, r7, r6, r1
 8009f84:	3430      	adds	r4, #48	@ 0x30
 8009f86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	2c63      	cmp	r4, #99	@ 0x63
 8009f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f92:	4631      	mov	r1, r6
 8009f94:	dcf1      	bgt.n	8009f7a <__exponent+0x1c>
 8009f96:	3130      	adds	r1, #48	@ 0x30
 8009f98:	1e94      	subs	r4, r2, #2
 8009f9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f9e:	1c41      	adds	r1, r0, #1
 8009fa0:	4623      	mov	r3, r4
 8009fa2:	42ab      	cmp	r3, r5
 8009fa4:	d30a      	bcc.n	8009fbc <__exponent+0x5e>
 8009fa6:	f10d 0309 	add.w	r3, sp, #9
 8009faa:	1a9b      	subs	r3, r3, r2
 8009fac:	42ac      	cmp	r4, r5
 8009fae:	bf88      	it	hi
 8009fb0:	2300      	movhi	r3, #0
 8009fb2:	3302      	adds	r3, #2
 8009fb4:	4403      	add	r3, r0
 8009fb6:	1a18      	subs	r0, r3, r0
 8009fb8:	b003      	add	sp, #12
 8009fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fc4:	e7ed      	b.n	8009fa2 <__exponent+0x44>
 8009fc6:	2330      	movs	r3, #48	@ 0x30
 8009fc8:	3130      	adds	r1, #48	@ 0x30
 8009fca:	7083      	strb	r3, [r0, #2]
 8009fcc:	70c1      	strb	r1, [r0, #3]
 8009fce:	1d03      	adds	r3, r0, #4
 8009fd0:	e7f1      	b.n	8009fb6 <__exponent+0x58>
	...

08009fd4 <_printf_float>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	b08d      	sub	sp, #52	@ 0x34
 8009fda:	460c      	mov	r4, r1
 8009fdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	461f      	mov	r7, r3
 8009fe4:	4605      	mov	r5, r0
 8009fe6:	f001 f8b3 	bl	800b150 <_localeconv_r>
 8009fea:	6803      	ldr	r3, [r0, #0]
 8009fec:	9304      	str	r3, [sp, #16]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7f6 f946 	bl	8000280 <strlen>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ff8:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffc:	9005      	str	r0, [sp, #20]
 8009ffe:	3307      	adds	r3, #7
 800a000:	f023 0307 	bic.w	r3, r3, #7
 800a004:	f103 0208 	add.w	r2, r3, #8
 800a008:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a00c:	f8d4 b000 	ldr.w	fp, [r4]
 800a010:	f8c8 2000 	str.w	r2, [r8]
 800a014:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a018:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a01c:	9307      	str	r3, [sp, #28]
 800a01e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a022:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a02a:	4b9c      	ldr	r3, [pc, #624]	@ (800a29c <_printf_float+0x2c8>)
 800a02c:	f04f 32ff 	mov.w	r2, #4294967295
 800a030:	f7f6 fd84 	bl	8000b3c <__aeabi_dcmpun>
 800a034:	bb70      	cbnz	r0, 800a094 <_printf_float+0xc0>
 800a036:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03a:	4b98      	ldr	r3, [pc, #608]	@ (800a29c <_printf_float+0x2c8>)
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	f7f6 fd5e 	bl	8000b00 <__aeabi_dcmple>
 800a044:	bb30      	cbnz	r0, 800a094 <_printf_float+0xc0>
 800a046:	2200      	movs	r2, #0
 800a048:	2300      	movs	r3, #0
 800a04a:	4640      	mov	r0, r8
 800a04c:	4649      	mov	r1, r9
 800a04e:	f7f6 fd4d 	bl	8000aec <__aeabi_dcmplt>
 800a052:	b110      	cbz	r0, 800a05a <_printf_float+0x86>
 800a054:	232d      	movs	r3, #45	@ 0x2d
 800a056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a05a:	4a91      	ldr	r2, [pc, #580]	@ (800a2a0 <_printf_float+0x2cc>)
 800a05c:	4b91      	ldr	r3, [pc, #580]	@ (800a2a4 <_printf_float+0x2d0>)
 800a05e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a062:	bf94      	ite	ls
 800a064:	4690      	movls	r8, r2
 800a066:	4698      	movhi	r8, r3
 800a068:	2303      	movs	r3, #3
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	f02b 0304 	bic.w	r3, fp, #4
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	f04f 0900 	mov.w	r9, #0
 800a076:	9700      	str	r7, [sp, #0]
 800a078:	4633      	mov	r3, r6
 800a07a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a07c:	4621      	mov	r1, r4
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 f9d2 	bl	800a428 <_printf_common>
 800a084:	3001      	adds	r0, #1
 800a086:	f040 808d 	bne.w	800a1a4 <_printf_float+0x1d0>
 800a08a:	f04f 30ff 	mov.w	r0, #4294967295
 800a08e:	b00d      	add	sp, #52	@ 0x34
 800a090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	4642      	mov	r2, r8
 800a096:	464b      	mov	r3, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	4649      	mov	r1, r9
 800a09c:	f7f6 fd4e 	bl	8000b3c <__aeabi_dcmpun>
 800a0a0:	b140      	cbz	r0, 800a0b4 <_printf_float+0xe0>
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfbc      	itt	lt
 800a0a8:	232d      	movlt	r3, #45	@ 0x2d
 800a0aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0ae:	4a7e      	ldr	r2, [pc, #504]	@ (800a2a8 <_printf_float+0x2d4>)
 800a0b0:	4b7e      	ldr	r3, [pc, #504]	@ (800a2ac <_printf_float+0x2d8>)
 800a0b2:	e7d4      	b.n	800a05e <_printf_float+0x8a>
 800a0b4:	6863      	ldr	r3, [r4, #4]
 800a0b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0ba:	9206      	str	r2, [sp, #24]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	d13b      	bne.n	800a138 <_printf_float+0x164>
 800a0c0:	2306      	movs	r3, #6
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	6022      	str	r2, [r4, #0]
 800a0cc:	9303      	str	r3, [sp, #12]
 800a0ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0d4:	ab09      	add	r3, sp, #36	@ 0x24
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	6861      	ldr	r1, [r4, #4]
 800a0da:	ec49 8b10 	vmov	d0, r8, r9
 800a0de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7ff fed6 	bl	8009e94 <__cvt>
 800a0e8:	9b06      	ldr	r3, [sp, #24]
 800a0ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0ec:	2b47      	cmp	r3, #71	@ 0x47
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	d129      	bne.n	800a146 <_printf_float+0x172>
 800a0f2:	1cc8      	adds	r0, r1, #3
 800a0f4:	db02      	blt.n	800a0fc <_printf_float+0x128>
 800a0f6:	6863      	ldr	r3, [r4, #4]
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	dd41      	ble.n	800a180 <_printf_float+0x1ac>
 800a0fc:	f1aa 0a02 	sub.w	sl, sl, #2
 800a100:	fa5f fa8a 	uxtb.w	sl, sl
 800a104:	3901      	subs	r1, #1
 800a106:	4652      	mov	r2, sl
 800a108:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a10c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a10e:	f7ff ff26 	bl	8009f5e <__exponent>
 800a112:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a114:	1813      	adds	r3, r2, r0
 800a116:	2a01      	cmp	r2, #1
 800a118:	4681      	mov	r9, r0
 800a11a:	6123      	str	r3, [r4, #16]
 800a11c:	dc02      	bgt.n	800a124 <_printf_float+0x150>
 800a11e:	6822      	ldr	r2, [r4, #0]
 800a120:	07d2      	lsls	r2, r2, #31
 800a122:	d501      	bpl.n	800a128 <_printf_float+0x154>
 800a124:	3301      	adds	r3, #1
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0a2      	beq.n	800a076 <_printf_float+0xa2>
 800a130:	232d      	movs	r3, #45	@ 0x2d
 800a132:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a136:	e79e      	b.n	800a076 <_printf_float+0xa2>
 800a138:	9a06      	ldr	r2, [sp, #24]
 800a13a:	2a47      	cmp	r2, #71	@ 0x47
 800a13c:	d1c2      	bne.n	800a0c4 <_printf_float+0xf0>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1c0      	bne.n	800a0c4 <_printf_float+0xf0>
 800a142:	2301      	movs	r3, #1
 800a144:	e7bd      	b.n	800a0c2 <_printf_float+0xee>
 800a146:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a14a:	d9db      	bls.n	800a104 <_printf_float+0x130>
 800a14c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a150:	d118      	bne.n	800a184 <_printf_float+0x1b0>
 800a152:	2900      	cmp	r1, #0
 800a154:	6863      	ldr	r3, [r4, #4]
 800a156:	dd0b      	ble.n	800a170 <_printf_float+0x19c>
 800a158:	6121      	str	r1, [r4, #16]
 800a15a:	b913      	cbnz	r3, 800a162 <_printf_float+0x18e>
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	07d0      	lsls	r0, r2, #31
 800a160:	d502      	bpl.n	800a168 <_printf_float+0x194>
 800a162:	3301      	adds	r3, #1
 800a164:	440b      	add	r3, r1
 800a166:	6123      	str	r3, [r4, #16]
 800a168:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a16a:	f04f 0900 	mov.w	r9, #0
 800a16e:	e7db      	b.n	800a128 <_printf_float+0x154>
 800a170:	b913      	cbnz	r3, 800a178 <_printf_float+0x1a4>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	07d2      	lsls	r2, r2, #31
 800a176:	d501      	bpl.n	800a17c <_printf_float+0x1a8>
 800a178:	3302      	adds	r3, #2
 800a17a:	e7f4      	b.n	800a166 <_printf_float+0x192>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e7f2      	b.n	800a166 <_printf_float+0x192>
 800a180:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a186:	4299      	cmp	r1, r3
 800a188:	db05      	blt.n	800a196 <_printf_float+0x1c2>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	6121      	str	r1, [r4, #16]
 800a18e:	07d8      	lsls	r0, r3, #31
 800a190:	d5ea      	bpl.n	800a168 <_printf_float+0x194>
 800a192:	1c4b      	adds	r3, r1, #1
 800a194:	e7e7      	b.n	800a166 <_printf_float+0x192>
 800a196:	2900      	cmp	r1, #0
 800a198:	bfd4      	ite	le
 800a19a:	f1c1 0202 	rsble	r2, r1, #2
 800a19e:	2201      	movgt	r2, #1
 800a1a0:	4413      	add	r3, r2
 800a1a2:	e7e0      	b.n	800a166 <_printf_float+0x192>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	055a      	lsls	r2, r3, #21
 800a1a8:	d407      	bmi.n	800a1ba <_printf_float+0x1e6>
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	47b8      	blx	r7
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d12b      	bne.n	800a210 <_printf_float+0x23c>
 800a1b8:	e767      	b.n	800a08a <_printf_float+0xb6>
 800a1ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1be:	f240 80dd 	bls.w	800a37c <_printf_float+0x3a8>
 800a1c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	f7f6 fc85 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d033      	beq.n	800a23a <_printf_float+0x266>
 800a1d2:	4a37      	ldr	r2, [pc, #220]	@ (800a2b0 <_printf_float+0x2dc>)
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	4628      	mov	r0, r5
 800a1da:	47b8      	blx	r7
 800a1dc:	3001      	adds	r0, #1
 800a1de:	f43f af54 	beq.w	800a08a <_printf_float+0xb6>
 800a1e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1e6:	4543      	cmp	r3, r8
 800a1e8:	db02      	blt.n	800a1f0 <_printf_float+0x21c>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	07d8      	lsls	r0, r3, #31
 800a1ee:	d50f      	bpl.n	800a210 <_printf_float+0x23c>
 800a1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1f4:	4631      	mov	r1, r6
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	47b8      	blx	r7
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	f43f af45 	beq.w	800a08a <_printf_float+0xb6>
 800a200:	f04f 0900 	mov.w	r9, #0
 800a204:	f108 38ff 	add.w	r8, r8, #4294967295
 800a208:	f104 0a1a 	add.w	sl, r4, #26
 800a20c:	45c8      	cmp	r8, r9
 800a20e:	dc09      	bgt.n	800a224 <_printf_float+0x250>
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	079b      	lsls	r3, r3, #30
 800a214:	f100 8103 	bmi.w	800a41e <_printf_float+0x44a>
 800a218:	68e0      	ldr	r0, [r4, #12]
 800a21a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a21c:	4298      	cmp	r0, r3
 800a21e:	bfb8      	it	lt
 800a220:	4618      	movlt	r0, r3
 800a222:	e734      	b.n	800a08e <_printf_float+0xba>
 800a224:	2301      	movs	r3, #1
 800a226:	4652      	mov	r2, sl
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f af2b 	beq.w	800a08a <_printf_float+0xb6>
 800a234:	f109 0901 	add.w	r9, r9, #1
 800a238:	e7e8      	b.n	800a20c <_printf_float+0x238>
 800a23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	dc39      	bgt.n	800a2b4 <_printf_float+0x2e0>
 800a240:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b0 <_printf_float+0x2dc>)
 800a242:	2301      	movs	r3, #1
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	f43f af1d 	beq.w	800a08a <_printf_float+0xb6>
 800a250:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a254:	ea59 0303 	orrs.w	r3, r9, r3
 800a258:	d102      	bne.n	800a260 <_printf_float+0x28c>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	07d9      	lsls	r1, r3, #31
 800a25e:	d5d7      	bpl.n	800a210 <_printf_float+0x23c>
 800a260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	47b8      	blx	r7
 800a26a:	3001      	adds	r0, #1
 800a26c:	f43f af0d 	beq.w	800a08a <_printf_float+0xb6>
 800a270:	f04f 0a00 	mov.w	sl, #0
 800a274:	f104 0b1a 	add.w	fp, r4, #26
 800a278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a27a:	425b      	negs	r3, r3
 800a27c:	4553      	cmp	r3, sl
 800a27e:	dc01      	bgt.n	800a284 <_printf_float+0x2b0>
 800a280:	464b      	mov	r3, r9
 800a282:	e793      	b.n	800a1ac <_printf_float+0x1d8>
 800a284:	2301      	movs	r3, #1
 800a286:	465a      	mov	r2, fp
 800a288:	4631      	mov	r1, r6
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b8      	blx	r7
 800a28e:	3001      	adds	r0, #1
 800a290:	f43f aefb 	beq.w	800a08a <_printf_float+0xb6>
 800a294:	f10a 0a01 	add.w	sl, sl, #1
 800a298:	e7ee      	b.n	800a278 <_printf_float+0x2a4>
 800a29a:	bf00      	nop
 800a29c:	7fefffff 	.word	0x7fefffff
 800a2a0:	0800e6cc 	.word	0x0800e6cc
 800a2a4:	0800e6d0 	.word	0x0800e6d0
 800a2a8:	0800e6d4 	.word	0x0800e6d4
 800a2ac:	0800e6d8 	.word	0x0800e6d8
 800a2b0:	0800e6dc 	.word	0x0800e6dc
 800a2b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2ba:	4553      	cmp	r3, sl
 800a2bc:	bfa8      	it	ge
 800a2be:	4653      	movge	r3, sl
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	4699      	mov	r9, r3
 800a2c4:	dc36      	bgt.n	800a334 <_printf_float+0x360>
 800a2c6:	f04f 0b00 	mov.w	fp, #0
 800a2ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ce:	f104 021a 	add.w	r2, r4, #26
 800a2d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2d4:	9306      	str	r3, [sp, #24]
 800a2d6:	eba3 0309 	sub.w	r3, r3, r9
 800a2da:	455b      	cmp	r3, fp
 800a2dc:	dc31      	bgt.n	800a342 <_printf_float+0x36e>
 800a2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e0:	459a      	cmp	sl, r3
 800a2e2:	dc3a      	bgt.n	800a35a <_printf_float+0x386>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	07da      	lsls	r2, r3, #31
 800a2e8:	d437      	bmi.n	800a35a <_printf_float+0x386>
 800a2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ec:	ebaa 0903 	sub.w	r9, sl, r3
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	ebaa 0303 	sub.w	r3, sl, r3
 800a2f6:	4599      	cmp	r9, r3
 800a2f8:	bfa8      	it	ge
 800a2fa:	4699      	movge	r9, r3
 800a2fc:	f1b9 0f00 	cmp.w	r9, #0
 800a300:	dc33      	bgt.n	800a36a <_printf_float+0x396>
 800a302:	f04f 0800 	mov.w	r8, #0
 800a306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a30a:	f104 0b1a 	add.w	fp, r4, #26
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	ebaa 0303 	sub.w	r3, sl, r3
 800a314:	eba3 0309 	sub.w	r3, r3, r9
 800a318:	4543      	cmp	r3, r8
 800a31a:	f77f af79 	ble.w	800a210 <_printf_float+0x23c>
 800a31e:	2301      	movs	r3, #1
 800a320:	465a      	mov	r2, fp
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f aeae 	beq.w	800a08a <_printf_float+0xb6>
 800a32e:	f108 0801 	add.w	r8, r8, #1
 800a332:	e7ec      	b.n	800a30e <_printf_float+0x33a>
 800a334:	4642      	mov	r2, r8
 800a336:	4631      	mov	r1, r6
 800a338:	4628      	mov	r0, r5
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	d1c2      	bne.n	800a2c6 <_printf_float+0x2f2>
 800a340:	e6a3      	b.n	800a08a <_printf_float+0xb6>
 800a342:	2301      	movs	r3, #1
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	9206      	str	r2, [sp, #24]
 800a34a:	47b8      	blx	r7
 800a34c:	3001      	adds	r0, #1
 800a34e:	f43f ae9c 	beq.w	800a08a <_printf_float+0xb6>
 800a352:	9a06      	ldr	r2, [sp, #24]
 800a354:	f10b 0b01 	add.w	fp, fp, #1
 800a358:	e7bb      	b.n	800a2d2 <_printf_float+0x2fe>
 800a35a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a35e:	4631      	mov	r1, r6
 800a360:	4628      	mov	r0, r5
 800a362:	47b8      	blx	r7
 800a364:	3001      	adds	r0, #1
 800a366:	d1c0      	bne.n	800a2ea <_printf_float+0x316>
 800a368:	e68f      	b.n	800a08a <_printf_float+0xb6>
 800a36a:	9a06      	ldr	r2, [sp, #24]
 800a36c:	464b      	mov	r3, r9
 800a36e:	4442      	add	r2, r8
 800a370:	4631      	mov	r1, r6
 800a372:	4628      	mov	r0, r5
 800a374:	47b8      	blx	r7
 800a376:	3001      	adds	r0, #1
 800a378:	d1c3      	bne.n	800a302 <_printf_float+0x32e>
 800a37a:	e686      	b.n	800a08a <_printf_float+0xb6>
 800a37c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a380:	f1ba 0f01 	cmp.w	sl, #1
 800a384:	dc01      	bgt.n	800a38a <_printf_float+0x3b6>
 800a386:	07db      	lsls	r3, r3, #31
 800a388:	d536      	bpl.n	800a3f8 <_printf_float+0x424>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4642      	mov	r2, r8
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	f43f ae78 	beq.w	800a08a <_printf_float+0xb6>
 800a39a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f ae70 	beq.w	800a08a <_printf_float+0xb6>
 800a3aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b6:	f7f6 fb8f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3ba:	b9c0      	cbnz	r0, 800a3ee <_printf_float+0x41a>
 800a3bc:	4653      	mov	r3, sl
 800a3be:	f108 0201 	add.w	r2, r8, #1
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	47b8      	blx	r7
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	d10c      	bne.n	800a3e6 <_printf_float+0x412>
 800a3cc:	e65d      	b.n	800a08a <_printf_float+0xb6>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	465a      	mov	r2, fp
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	47b8      	blx	r7
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f43f ae56 	beq.w	800a08a <_printf_float+0xb6>
 800a3de:	f108 0801 	add.w	r8, r8, #1
 800a3e2:	45d0      	cmp	r8, sl
 800a3e4:	dbf3      	blt.n	800a3ce <_printf_float+0x3fa>
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3ec:	e6df      	b.n	800a1ae <_printf_float+0x1da>
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	f104 0b1a 	add.w	fp, r4, #26
 800a3f6:	e7f4      	b.n	800a3e2 <_printf_float+0x40e>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	4642      	mov	r2, r8
 800a3fc:	e7e1      	b.n	800a3c2 <_printf_float+0x3ee>
 800a3fe:	2301      	movs	r3, #1
 800a400:	464a      	mov	r2, r9
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f ae3e 	beq.w	800a08a <_printf_float+0xb6>
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	68e3      	ldr	r3, [r4, #12]
 800a414:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a416:	1a5b      	subs	r3, r3, r1
 800a418:	4543      	cmp	r3, r8
 800a41a:	dcf0      	bgt.n	800a3fe <_printf_float+0x42a>
 800a41c:	e6fc      	b.n	800a218 <_printf_float+0x244>
 800a41e:	f04f 0800 	mov.w	r8, #0
 800a422:	f104 0919 	add.w	r9, r4, #25
 800a426:	e7f4      	b.n	800a412 <_printf_float+0x43e>

0800a428 <_printf_common>:
 800a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	4616      	mov	r6, r2
 800a42e:	4698      	mov	r8, r3
 800a430:	688a      	ldr	r2, [r1, #8]
 800a432:	690b      	ldr	r3, [r1, #16]
 800a434:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a438:	4293      	cmp	r3, r2
 800a43a:	bfb8      	it	lt
 800a43c:	4613      	movlt	r3, r2
 800a43e:	6033      	str	r3, [r6, #0]
 800a440:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a444:	4607      	mov	r7, r0
 800a446:	460c      	mov	r4, r1
 800a448:	b10a      	cbz	r2, 800a44e <_printf_common+0x26>
 800a44a:	3301      	adds	r3, #1
 800a44c:	6033      	str	r3, [r6, #0]
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	0699      	lsls	r1, r3, #26
 800a452:	bf42      	ittt	mi
 800a454:	6833      	ldrmi	r3, [r6, #0]
 800a456:	3302      	addmi	r3, #2
 800a458:	6033      	strmi	r3, [r6, #0]
 800a45a:	6825      	ldr	r5, [r4, #0]
 800a45c:	f015 0506 	ands.w	r5, r5, #6
 800a460:	d106      	bne.n	800a470 <_printf_common+0x48>
 800a462:	f104 0a19 	add.w	sl, r4, #25
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	6832      	ldr	r2, [r6, #0]
 800a46a:	1a9b      	subs	r3, r3, r2
 800a46c:	42ab      	cmp	r3, r5
 800a46e:	dc26      	bgt.n	800a4be <_printf_common+0x96>
 800a470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	3b00      	subs	r3, #0
 800a478:	bf18      	it	ne
 800a47a:	2301      	movne	r3, #1
 800a47c:	0692      	lsls	r2, r2, #26
 800a47e:	d42b      	bmi.n	800a4d8 <_printf_common+0xb0>
 800a480:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a484:	4641      	mov	r1, r8
 800a486:	4638      	mov	r0, r7
 800a488:	47c8      	blx	r9
 800a48a:	3001      	adds	r0, #1
 800a48c:	d01e      	beq.n	800a4cc <_printf_common+0xa4>
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	6922      	ldr	r2, [r4, #16]
 800a492:	f003 0306 	and.w	r3, r3, #6
 800a496:	2b04      	cmp	r3, #4
 800a498:	bf02      	ittt	eq
 800a49a:	68e5      	ldreq	r5, [r4, #12]
 800a49c:	6833      	ldreq	r3, [r6, #0]
 800a49e:	1aed      	subeq	r5, r5, r3
 800a4a0:	68a3      	ldr	r3, [r4, #8]
 800a4a2:	bf0c      	ite	eq
 800a4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4a8:	2500      	movne	r5, #0
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	bfc4      	itt	gt
 800a4ae:	1a9b      	subgt	r3, r3, r2
 800a4b0:	18ed      	addgt	r5, r5, r3
 800a4b2:	2600      	movs	r6, #0
 800a4b4:	341a      	adds	r4, #26
 800a4b6:	42b5      	cmp	r5, r6
 800a4b8:	d11a      	bne.n	800a4f0 <_printf_common+0xc8>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e008      	b.n	800a4d0 <_printf_common+0xa8>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	4652      	mov	r2, sl
 800a4c2:	4641      	mov	r1, r8
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	47c8      	blx	r9
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d103      	bne.n	800a4d4 <_printf_common+0xac>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	e7c6      	b.n	800a466 <_printf_common+0x3e>
 800a4d8:	18e1      	adds	r1, r4, r3
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	2030      	movs	r0, #48	@ 0x30
 800a4de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4e2:	4422      	add	r2, r4
 800a4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4ec:	3302      	adds	r3, #2
 800a4ee:	e7c7      	b.n	800a480 <_printf_common+0x58>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4622      	mov	r2, r4
 800a4f4:	4641      	mov	r1, r8
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c8      	blx	r9
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d0e6      	beq.n	800a4cc <_printf_common+0xa4>
 800a4fe:	3601      	adds	r6, #1
 800a500:	e7d9      	b.n	800a4b6 <_printf_common+0x8e>
	...

0800a504 <_printf_i>:
 800a504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	7e0f      	ldrb	r7, [r1, #24]
 800a50a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a50c:	2f78      	cmp	r7, #120	@ 0x78
 800a50e:	4691      	mov	r9, r2
 800a510:	4680      	mov	r8, r0
 800a512:	460c      	mov	r4, r1
 800a514:	469a      	mov	sl, r3
 800a516:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a51a:	d807      	bhi.n	800a52c <_printf_i+0x28>
 800a51c:	2f62      	cmp	r7, #98	@ 0x62
 800a51e:	d80a      	bhi.n	800a536 <_printf_i+0x32>
 800a520:	2f00      	cmp	r7, #0
 800a522:	f000 80d2 	beq.w	800a6ca <_printf_i+0x1c6>
 800a526:	2f58      	cmp	r7, #88	@ 0x58
 800a528:	f000 80b9 	beq.w	800a69e <_printf_i+0x19a>
 800a52c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a530:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a534:	e03a      	b.n	800a5ac <_printf_i+0xa8>
 800a536:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a53a:	2b15      	cmp	r3, #21
 800a53c:	d8f6      	bhi.n	800a52c <_printf_i+0x28>
 800a53e:	a101      	add	r1, pc, #4	@ (adr r1, 800a544 <_printf_i+0x40>)
 800a540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a544:	0800a59d 	.word	0x0800a59d
 800a548:	0800a5b1 	.word	0x0800a5b1
 800a54c:	0800a52d 	.word	0x0800a52d
 800a550:	0800a52d 	.word	0x0800a52d
 800a554:	0800a52d 	.word	0x0800a52d
 800a558:	0800a52d 	.word	0x0800a52d
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a52d 	.word	0x0800a52d
 800a564:	0800a52d 	.word	0x0800a52d
 800a568:	0800a52d 	.word	0x0800a52d
 800a56c:	0800a52d 	.word	0x0800a52d
 800a570:	0800a6b1 	.word	0x0800a6b1
 800a574:	0800a5db 	.word	0x0800a5db
 800a578:	0800a66b 	.word	0x0800a66b
 800a57c:	0800a52d 	.word	0x0800a52d
 800a580:	0800a52d 	.word	0x0800a52d
 800a584:	0800a6d3 	.word	0x0800a6d3
 800a588:	0800a52d 	.word	0x0800a52d
 800a58c:	0800a5db 	.word	0x0800a5db
 800a590:	0800a52d 	.word	0x0800a52d
 800a594:	0800a52d 	.word	0x0800a52d
 800a598:	0800a673 	.word	0x0800a673
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	1d1a      	adds	r2, r3, #4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	6032      	str	r2, [r6, #0]
 800a5a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e09d      	b.n	800a6ec <_printf_i+0x1e8>
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	6820      	ldr	r0, [r4, #0]
 800a5b4:	1d19      	adds	r1, r3, #4
 800a5b6:	6031      	str	r1, [r6, #0]
 800a5b8:	0606      	lsls	r6, r0, #24
 800a5ba:	d501      	bpl.n	800a5c0 <_printf_i+0xbc>
 800a5bc:	681d      	ldr	r5, [r3, #0]
 800a5be:	e003      	b.n	800a5c8 <_printf_i+0xc4>
 800a5c0:	0645      	lsls	r5, r0, #25
 800a5c2:	d5fb      	bpl.n	800a5bc <_printf_i+0xb8>
 800a5c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5c8:	2d00      	cmp	r5, #0
 800a5ca:	da03      	bge.n	800a5d4 <_printf_i+0xd0>
 800a5cc:	232d      	movs	r3, #45	@ 0x2d
 800a5ce:	426d      	negs	r5, r5
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5d4:	4859      	ldr	r0, [pc, #356]	@ (800a73c <_printf_i+0x238>)
 800a5d6:	230a      	movs	r3, #10
 800a5d8:	e011      	b.n	800a5fe <_printf_i+0xfa>
 800a5da:	6821      	ldr	r1, [r4, #0]
 800a5dc:	6833      	ldr	r3, [r6, #0]
 800a5de:	0608      	lsls	r0, r1, #24
 800a5e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5e4:	d402      	bmi.n	800a5ec <_printf_i+0xe8>
 800a5e6:	0649      	lsls	r1, r1, #25
 800a5e8:	bf48      	it	mi
 800a5ea:	b2ad      	uxthmi	r5, r5
 800a5ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5ee:	4853      	ldr	r0, [pc, #332]	@ (800a73c <_printf_i+0x238>)
 800a5f0:	6033      	str	r3, [r6, #0]
 800a5f2:	bf14      	ite	ne
 800a5f4:	230a      	movne	r3, #10
 800a5f6:	2308      	moveq	r3, #8
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5fe:	6866      	ldr	r6, [r4, #4]
 800a600:	60a6      	str	r6, [r4, #8]
 800a602:	2e00      	cmp	r6, #0
 800a604:	bfa2      	ittt	ge
 800a606:	6821      	ldrge	r1, [r4, #0]
 800a608:	f021 0104 	bicge.w	r1, r1, #4
 800a60c:	6021      	strge	r1, [r4, #0]
 800a60e:	b90d      	cbnz	r5, 800a614 <_printf_i+0x110>
 800a610:	2e00      	cmp	r6, #0
 800a612:	d04b      	beq.n	800a6ac <_printf_i+0x1a8>
 800a614:	4616      	mov	r6, r2
 800a616:	fbb5 f1f3 	udiv	r1, r5, r3
 800a61a:	fb03 5711 	mls	r7, r3, r1, r5
 800a61e:	5dc7      	ldrb	r7, [r0, r7]
 800a620:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a624:	462f      	mov	r7, r5
 800a626:	42bb      	cmp	r3, r7
 800a628:	460d      	mov	r5, r1
 800a62a:	d9f4      	bls.n	800a616 <_printf_i+0x112>
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d10b      	bne.n	800a648 <_printf_i+0x144>
 800a630:	6823      	ldr	r3, [r4, #0]
 800a632:	07df      	lsls	r7, r3, #31
 800a634:	d508      	bpl.n	800a648 <_printf_i+0x144>
 800a636:	6923      	ldr	r3, [r4, #16]
 800a638:	6861      	ldr	r1, [r4, #4]
 800a63a:	4299      	cmp	r1, r3
 800a63c:	bfde      	ittt	le
 800a63e:	2330      	movle	r3, #48	@ 0x30
 800a640:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a644:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a648:	1b92      	subs	r2, r2, r6
 800a64a:	6122      	str	r2, [r4, #16]
 800a64c:	f8cd a000 	str.w	sl, [sp]
 800a650:	464b      	mov	r3, r9
 800a652:	aa03      	add	r2, sp, #12
 800a654:	4621      	mov	r1, r4
 800a656:	4640      	mov	r0, r8
 800a658:	f7ff fee6 	bl	800a428 <_printf_common>
 800a65c:	3001      	adds	r0, #1
 800a65e:	d14a      	bne.n	800a6f6 <_printf_i+0x1f2>
 800a660:	f04f 30ff 	mov.w	r0, #4294967295
 800a664:	b004      	add	sp, #16
 800a666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	f043 0320 	orr.w	r3, r3, #32
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	4833      	ldr	r0, [pc, #204]	@ (800a740 <_printf_i+0x23c>)
 800a674:	2778      	movs	r7, #120	@ 0x78
 800a676:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	6831      	ldr	r1, [r6, #0]
 800a67e:	061f      	lsls	r7, r3, #24
 800a680:	f851 5b04 	ldr.w	r5, [r1], #4
 800a684:	d402      	bmi.n	800a68c <_printf_i+0x188>
 800a686:	065f      	lsls	r7, r3, #25
 800a688:	bf48      	it	mi
 800a68a:	b2ad      	uxthmi	r5, r5
 800a68c:	6031      	str	r1, [r6, #0]
 800a68e:	07d9      	lsls	r1, r3, #31
 800a690:	bf44      	itt	mi
 800a692:	f043 0320 	orrmi.w	r3, r3, #32
 800a696:	6023      	strmi	r3, [r4, #0]
 800a698:	b11d      	cbz	r5, 800a6a2 <_printf_i+0x19e>
 800a69a:	2310      	movs	r3, #16
 800a69c:	e7ac      	b.n	800a5f8 <_printf_i+0xf4>
 800a69e:	4827      	ldr	r0, [pc, #156]	@ (800a73c <_printf_i+0x238>)
 800a6a0:	e7e9      	b.n	800a676 <_printf_i+0x172>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	f023 0320 	bic.w	r3, r3, #32
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	e7f6      	b.n	800a69a <_printf_i+0x196>
 800a6ac:	4616      	mov	r6, r2
 800a6ae:	e7bd      	b.n	800a62c <_printf_i+0x128>
 800a6b0:	6833      	ldr	r3, [r6, #0]
 800a6b2:	6825      	ldr	r5, [r4, #0]
 800a6b4:	6961      	ldr	r1, [r4, #20]
 800a6b6:	1d18      	adds	r0, r3, #4
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	062e      	lsls	r6, r5, #24
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	d501      	bpl.n	800a6c4 <_printf_i+0x1c0>
 800a6c0:	6019      	str	r1, [r3, #0]
 800a6c2:	e002      	b.n	800a6ca <_printf_i+0x1c6>
 800a6c4:	0668      	lsls	r0, r5, #25
 800a6c6:	d5fb      	bpl.n	800a6c0 <_printf_i+0x1bc>
 800a6c8:	8019      	strh	r1, [r3, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	4616      	mov	r6, r2
 800a6d0:	e7bc      	b.n	800a64c <_printf_i+0x148>
 800a6d2:	6833      	ldr	r3, [r6, #0]
 800a6d4:	1d1a      	adds	r2, r3, #4
 800a6d6:	6032      	str	r2, [r6, #0]
 800a6d8:	681e      	ldr	r6, [r3, #0]
 800a6da:	6862      	ldr	r2, [r4, #4]
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7f5 fd7e 	bl	80001e0 <memchr>
 800a6e4:	b108      	cbz	r0, 800a6ea <_printf_i+0x1e6>
 800a6e6:	1b80      	subs	r0, r0, r6
 800a6e8:	6060      	str	r0, [r4, #4]
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6f4:	e7aa      	b.n	800a64c <_printf_i+0x148>
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	4632      	mov	r2, r6
 800a6fa:	4649      	mov	r1, r9
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	47d0      	blx	sl
 800a700:	3001      	adds	r0, #1
 800a702:	d0ad      	beq.n	800a660 <_printf_i+0x15c>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	079b      	lsls	r3, r3, #30
 800a708:	d413      	bmi.n	800a732 <_printf_i+0x22e>
 800a70a:	68e0      	ldr	r0, [r4, #12]
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	4298      	cmp	r0, r3
 800a710:	bfb8      	it	lt
 800a712:	4618      	movlt	r0, r3
 800a714:	e7a6      	b.n	800a664 <_printf_i+0x160>
 800a716:	2301      	movs	r3, #1
 800a718:	4632      	mov	r2, r6
 800a71a:	4649      	mov	r1, r9
 800a71c:	4640      	mov	r0, r8
 800a71e:	47d0      	blx	sl
 800a720:	3001      	adds	r0, #1
 800a722:	d09d      	beq.n	800a660 <_printf_i+0x15c>
 800a724:	3501      	adds	r5, #1
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	9903      	ldr	r1, [sp, #12]
 800a72a:	1a5b      	subs	r3, r3, r1
 800a72c:	42ab      	cmp	r3, r5
 800a72e:	dcf2      	bgt.n	800a716 <_printf_i+0x212>
 800a730:	e7eb      	b.n	800a70a <_printf_i+0x206>
 800a732:	2500      	movs	r5, #0
 800a734:	f104 0619 	add.w	r6, r4, #25
 800a738:	e7f5      	b.n	800a726 <_printf_i+0x222>
 800a73a:	bf00      	nop
 800a73c:	0800e6de 	.word	0x0800e6de
 800a740:	0800e6ef 	.word	0x0800e6ef

0800a744 <_scanf_float>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	b087      	sub	sp, #28
 800a74a:	4617      	mov	r7, r2
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	688b      	ldr	r3, [r1, #8]
 800a750:	1e5a      	subs	r2, r3, #1
 800a752:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a756:	bf81      	itttt	hi
 800a758:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a75c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a760:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a764:	608b      	strhi	r3, [r1, #8]
 800a766:	680b      	ldr	r3, [r1, #0]
 800a768:	460a      	mov	r2, r1
 800a76a:	f04f 0500 	mov.w	r5, #0
 800a76e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a772:	f842 3b1c 	str.w	r3, [r2], #28
 800a776:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a77a:	4680      	mov	r8, r0
 800a77c:	460c      	mov	r4, r1
 800a77e:	bf98      	it	ls
 800a780:	f04f 0b00 	movls.w	fp, #0
 800a784:	9201      	str	r2, [sp, #4]
 800a786:	4616      	mov	r6, r2
 800a788:	46aa      	mov	sl, r5
 800a78a:	46a9      	mov	r9, r5
 800a78c:	9502      	str	r5, [sp, #8]
 800a78e:	68a2      	ldr	r2, [r4, #8]
 800a790:	b152      	cbz	r2, 800a7a8 <_scanf_float+0x64>
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b4e      	cmp	r3, #78	@ 0x4e
 800a798:	d864      	bhi.n	800a864 <_scanf_float+0x120>
 800a79a:	2b40      	cmp	r3, #64	@ 0x40
 800a79c:	d83c      	bhi.n	800a818 <_scanf_float+0xd4>
 800a79e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a7a2:	b2c8      	uxtb	r0, r1
 800a7a4:	280e      	cmp	r0, #14
 800a7a6:	d93a      	bls.n	800a81e <_scanf_float+0xda>
 800a7a8:	f1b9 0f00 	cmp.w	r9, #0
 800a7ac:	d003      	beq.n	800a7b6 <_scanf_float+0x72>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7ba:	f1ba 0f01 	cmp.w	sl, #1
 800a7be:	f200 8117 	bhi.w	800a9f0 <_scanf_float+0x2ac>
 800a7c2:	9b01      	ldr	r3, [sp, #4]
 800a7c4:	429e      	cmp	r6, r3
 800a7c6:	f200 8108 	bhi.w	800a9da <_scanf_float+0x296>
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	b007      	add	sp, #28
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a7d6:	2a0d      	cmp	r2, #13
 800a7d8:	d8e6      	bhi.n	800a7a8 <_scanf_float+0x64>
 800a7da:	a101      	add	r1, pc, #4	@ (adr r1, 800a7e0 <_scanf_float+0x9c>)
 800a7dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a7e0:	0800a927 	.word	0x0800a927
 800a7e4:	0800a7a9 	.word	0x0800a7a9
 800a7e8:	0800a7a9 	.word	0x0800a7a9
 800a7ec:	0800a7a9 	.word	0x0800a7a9
 800a7f0:	0800a987 	.word	0x0800a987
 800a7f4:	0800a95f 	.word	0x0800a95f
 800a7f8:	0800a7a9 	.word	0x0800a7a9
 800a7fc:	0800a7a9 	.word	0x0800a7a9
 800a800:	0800a935 	.word	0x0800a935
 800a804:	0800a7a9 	.word	0x0800a7a9
 800a808:	0800a7a9 	.word	0x0800a7a9
 800a80c:	0800a7a9 	.word	0x0800a7a9
 800a810:	0800a7a9 	.word	0x0800a7a9
 800a814:	0800a8ed 	.word	0x0800a8ed
 800a818:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a81c:	e7db      	b.n	800a7d6 <_scanf_float+0x92>
 800a81e:	290e      	cmp	r1, #14
 800a820:	d8c2      	bhi.n	800a7a8 <_scanf_float+0x64>
 800a822:	a001      	add	r0, pc, #4	@ (adr r0, 800a828 <_scanf_float+0xe4>)
 800a824:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a828:	0800a8dd 	.word	0x0800a8dd
 800a82c:	0800a7a9 	.word	0x0800a7a9
 800a830:	0800a8dd 	.word	0x0800a8dd
 800a834:	0800a973 	.word	0x0800a973
 800a838:	0800a7a9 	.word	0x0800a7a9
 800a83c:	0800a885 	.word	0x0800a885
 800a840:	0800a8c3 	.word	0x0800a8c3
 800a844:	0800a8c3 	.word	0x0800a8c3
 800a848:	0800a8c3 	.word	0x0800a8c3
 800a84c:	0800a8c3 	.word	0x0800a8c3
 800a850:	0800a8c3 	.word	0x0800a8c3
 800a854:	0800a8c3 	.word	0x0800a8c3
 800a858:	0800a8c3 	.word	0x0800a8c3
 800a85c:	0800a8c3 	.word	0x0800a8c3
 800a860:	0800a8c3 	.word	0x0800a8c3
 800a864:	2b6e      	cmp	r3, #110	@ 0x6e
 800a866:	d809      	bhi.n	800a87c <_scanf_float+0x138>
 800a868:	2b60      	cmp	r3, #96	@ 0x60
 800a86a:	d8b2      	bhi.n	800a7d2 <_scanf_float+0x8e>
 800a86c:	2b54      	cmp	r3, #84	@ 0x54
 800a86e:	d07b      	beq.n	800a968 <_scanf_float+0x224>
 800a870:	2b59      	cmp	r3, #89	@ 0x59
 800a872:	d199      	bne.n	800a7a8 <_scanf_float+0x64>
 800a874:	2d07      	cmp	r5, #7
 800a876:	d197      	bne.n	800a7a8 <_scanf_float+0x64>
 800a878:	2508      	movs	r5, #8
 800a87a:	e02c      	b.n	800a8d6 <_scanf_float+0x192>
 800a87c:	2b74      	cmp	r3, #116	@ 0x74
 800a87e:	d073      	beq.n	800a968 <_scanf_float+0x224>
 800a880:	2b79      	cmp	r3, #121	@ 0x79
 800a882:	e7f6      	b.n	800a872 <_scanf_float+0x12e>
 800a884:	6821      	ldr	r1, [r4, #0]
 800a886:	05c8      	lsls	r0, r1, #23
 800a888:	d51b      	bpl.n	800a8c2 <_scanf_float+0x17e>
 800a88a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a88e:	6021      	str	r1, [r4, #0]
 800a890:	f109 0901 	add.w	r9, r9, #1
 800a894:	f1bb 0f00 	cmp.w	fp, #0
 800a898:	d003      	beq.n	800a8a2 <_scanf_float+0x15e>
 800a89a:	3201      	adds	r2, #1
 800a89c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8a0:	60a2      	str	r2, [r4, #8]
 800a8a2:	68a3      	ldr	r3, [r4, #8]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	60a3      	str	r3, [r4, #8]
 800a8a8:	6923      	ldr	r3, [r4, #16]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	607b      	str	r3, [r7, #4]
 800a8b6:	f340 8087 	ble.w	800a9c8 <_scanf_float+0x284>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	e765      	b.n	800a78e <_scanf_float+0x4a>
 800a8c2:	eb1a 0105 	adds.w	r1, sl, r5
 800a8c6:	f47f af6f 	bne.w	800a7a8 <_scanf_float+0x64>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a8d0:	6022      	str	r2, [r4, #0]
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	468a      	mov	sl, r1
 800a8d6:	f806 3b01 	strb.w	r3, [r6], #1
 800a8da:	e7e2      	b.n	800a8a2 <_scanf_float+0x15e>
 800a8dc:	6822      	ldr	r2, [r4, #0]
 800a8de:	0610      	lsls	r0, r2, #24
 800a8e0:	f57f af62 	bpl.w	800a7a8 <_scanf_float+0x64>
 800a8e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a8e8:	6022      	str	r2, [r4, #0]
 800a8ea:	e7f4      	b.n	800a8d6 <_scanf_float+0x192>
 800a8ec:	f1ba 0f00 	cmp.w	sl, #0
 800a8f0:	d10e      	bne.n	800a910 <_scanf_float+0x1cc>
 800a8f2:	f1b9 0f00 	cmp.w	r9, #0
 800a8f6:	d10e      	bne.n	800a916 <_scanf_float+0x1d2>
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8fe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a902:	d108      	bne.n	800a916 <_scanf_float+0x1d2>
 800a904:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a908:	6022      	str	r2, [r4, #0]
 800a90a:	f04f 0a01 	mov.w	sl, #1
 800a90e:	e7e2      	b.n	800a8d6 <_scanf_float+0x192>
 800a910:	f1ba 0f02 	cmp.w	sl, #2
 800a914:	d055      	beq.n	800a9c2 <_scanf_float+0x27e>
 800a916:	2d01      	cmp	r5, #1
 800a918:	d002      	beq.n	800a920 <_scanf_float+0x1dc>
 800a91a:	2d04      	cmp	r5, #4
 800a91c:	f47f af44 	bne.w	800a7a8 <_scanf_float+0x64>
 800a920:	3501      	adds	r5, #1
 800a922:	b2ed      	uxtb	r5, r5
 800a924:	e7d7      	b.n	800a8d6 <_scanf_float+0x192>
 800a926:	f1ba 0f01 	cmp.w	sl, #1
 800a92a:	f47f af3d 	bne.w	800a7a8 <_scanf_float+0x64>
 800a92e:	f04f 0a02 	mov.w	sl, #2
 800a932:	e7d0      	b.n	800a8d6 <_scanf_float+0x192>
 800a934:	b97d      	cbnz	r5, 800a956 <_scanf_float+0x212>
 800a936:	f1b9 0f00 	cmp.w	r9, #0
 800a93a:	f47f af38 	bne.w	800a7ae <_scanf_float+0x6a>
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a944:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a948:	f040 8108 	bne.w	800ab5c <_scanf_float+0x418>
 800a94c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a950:	6022      	str	r2, [r4, #0]
 800a952:	2501      	movs	r5, #1
 800a954:	e7bf      	b.n	800a8d6 <_scanf_float+0x192>
 800a956:	2d03      	cmp	r5, #3
 800a958:	d0e2      	beq.n	800a920 <_scanf_float+0x1dc>
 800a95a:	2d05      	cmp	r5, #5
 800a95c:	e7de      	b.n	800a91c <_scanf_float+0x1d8>
 800a95e:	2d02      	cmp	r5, #2
 800a960:	f47f af22 	bne.w	800a7a8 <_scanf_float+0x64>
 800a964:	2503      	movs	r5, #3
 800a966:	e7b6      	b.n	800a8d6 <_scanf_float+0x192>
 800a968:	2d06      	cmp	r5, #6
 800a96a:	f47f af1d 	bne.w	800a7a8 <_scanf_float+0x64>
 800a96e:	2507      	movs	r5, #7
 800a970:	e7b1      	b.n	800a8d6 <_scanf_float+0x192>
 800a972:	6822      	ldr	r2, [r4, #0]
 800a974:	0591      	lsls	r1, r2, #22
 800a976:	f57f af17 	bpl.w	800a7a8 <_scanf_float+0x64>
 800a97a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	f8cd 9008 	str.w	r9, [sp, #8]
 800a984:	e7a7      	b.n	800a8d6 <_scanf_float+0x192>
 800a986:	6822      	ldr	r2, [r4, #0]
 800a988:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a98c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a990:	d006      	beq.n	800a9a0 <_scanf_float+0x25c>
 800a992:	0550      	lsls	r0, r2, #21
 800a994:	f57f af08 	bpl.w	800a7a8 <_scanf_float+0x64>
 800a998:	f1b9 0f00 	cmp.w	r9, #0
 800a99c:	f000 80de 	beq.w	800ab5c <_scanf_float+0x418>
 800a9a0:	0591      	lsls	r1, r2, #22
 800a9a2:	bf58      	it	pl
 800a9a4:	9902      	ldrpl	r1, [sp, #8]
 800a9a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9aa:	bf58      	it	pl
 800a9ac:	eba9 0101 	subpl.w	r1, r9, r1
 800a9b0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a9b4:	bf58      	it	pl
 800a9b6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a9ba:	6022      	str	r2, [r4, #0]
 800a9bc:	f04f 0900 	mov.w	r9, #0
 800a9c0:	e789      	b.n	800a8d6 <_scanf_float+0x192>
 800a9c2:	f04f 0a03 	mov.w	sl, #3
 800a9c6:	e786      	b.n	800a8d6 <_scanf_float+0x192>
 800a9c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9cc:	4639      	mov	r1, r7
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4798      	blx	r3
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f aedb 	beq.w	800a78e <_scanf_float+0x4a>
 800a9d8:	e6e6      	b.n	800a7a8 <_scanf_float+0x64>
 800a9da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9e2:	463a      	mov	r2, r7
 800a9e4:	4640      	mov	r0, r8
 800a9e6:	4798      	blx	r3
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	3b01      	subs	r3, #1
 800a9ec:	6123      	str	r3, [r4, #16]
 800a9ee:	e6e8      	b.n	800a7c2 <_scanf_float+0x7e>
 800a9f0:	1e6b      	subs	r3, r5, #1
 800a9f2:	2b06      	cmp	r3, #6
 800a9f4:	d824      	bhi.n	800aa40 <_scanf_float+0x2fc>
 800a9f6:	2d02      	cmp	r5, #2
 800a9f8:	d836      	bhi.n	800aa68 <_scanf_float+0x324>
 800a9fa:	9b01      	ldr	r3, [sp, #4]
 800a9fc:	429e      	cmp	r6, r3
 800a9fe:	f67f aee4 	bls.w	800a7ca <_scanf_float+0x86>
 800aa02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa0a:	463a      	mov	r2, r7
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4798      	blx	r3
 800aa10:	6923      	ldr	r3, [r4, #16]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	6123      	str	r3, [r4, #16]
 800aa16:	e7f0      	b.n	800a9fa <_scanf_float+0x2b6>
 800aa18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa20:	463a      	mov	r2, r7
 800aa22:	4640      	mov	r0, r8
 800aa24:	4798      	blx	r3
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa30:	fa5f fa8a 	uxtb.w	sl, sl
 800aa34:	f1ba 0f02 	cmp.w	sl, #2
 800aa38:	d1ee      	bne.n	800aa18 <_scanf_float+0x2d4>
 800aa3a:	3d03      	subs	r5, #3
 800aa3c:	b2ed      	uxtb	r5, r5
 800aa3e:	1b76      	subs	r6, r6, r5
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	05da      	lsls	r2, r3, #23
 800aa44:	d530      	bpl.n	800aaa8 <_scanf_float+0x364>
 800aa46:	055b      	lsls	r3, r3, #21
 800aa48:	d511      	bpl.n	800aa6e <_scanf_float+0x32a>
 800aa4a:	9b01      	ldr	r3, [sp, #4]
 800aa4c:	429e      	cmp	r6, r3
 800aa4e:	f67f aebc 	bls.w	800a7ca <_scanf_float+0x86>
 800aa52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa5a:	463a      	mov	r2, r7
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	4798      	blx	r3
 800aa60:	6923      	ldr	r3, [r4, #16]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	6123      	str	r3, [r4, #16]
 800aa66:	e7f0      	b.n	800aa4a <_scanf_float+0x306>
 800aa68:	46aa      	mov	sl, r5
 800aa6a:	46b3      	mov	fp, r6
 800aa6c:	e7de      	b.n	800aa2c <_scanf_float+0x2e8>
 800aa6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	2965      	cmp	r1, #101	@ 0x65
 800aa76:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	d00c      	beq.n	800aa9c <_scanf_float+0x358>
 800aa82:	2945      	cmp	r1, #69	@ 0x45
 800aa84:	d00a      	beq.n	800aa9c <_scanf_float+0x358>
 800aa86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa8a:	463a      	mov	r2, r7
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4798      	blx	r3
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	1eb5      	subs	r5, r6, #2
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaa0:	463a      	mov	r2, r7
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4798      	blx	r3
 800aaa6:	462e      	mov	r6, r5
 800aaa8:	6822      	ldr	r2, [r4, #0]
 800aaaa:	f012 0210 	ands.w	r2, r2, #16
 800aaae:	d001      	beq.n	800aab4 <_scanf_float+0x370>
 800aab0:	2000      	movs	r0, #0
 800aab2:	e68b      	b.n	800a7cc <_scanf_float+0x88>
 800aab4:	7032      	strb	r2, [r6, #0]
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aabc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aac0:	d11c      	bne.n	800aafc <_scanf_float+0x3b8>
 800aac2:	9b02      	ldr	r3, [sp, #8]
 800aac4:	454b      	cmp	r3, r9
 800aac6:	eba3 0209 	sub.w	r2, r3, r9
 800aaca:	d123      	bne.n	800ab14 <_scanf_float+0x3d0>
 800aacc:	9901      	ldr	r1, [sp, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	4640      	mov	r0, r8
 800aad2:	f002 fdd1 	bl	800d678 <_strtod_r>
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	6821      	ldr	r1, [r4, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f011 0f02 	tst.w	r1, #2
 800aae0:	ec57 6b10 	vmov	r6, r7, d0
 800aae4:	f103 0204 	add.w	r2, r3, #4
 800aae8:	d01f      	beq.n	800ab2a <_scanf_float+0x3e6>
 800aaea:	9903      	ldr	r1, [sp, #12]
 800aaec:	600a      	str	r2, [r1, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	e9c3 6700 	strd	r6, r7, [r3]
 800aaf4:	68e3      	ldr	r3, [r4, #12]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	60e3      	str	r3, [r4, #12]
 800aafa:	e7d9      	b.n	800aab0 <_scanf_float+0x36c>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0e4      	beq.n	800aacc <_scanf_float+0x388>
 800ab02:	9905      	ldr	r1, [sp, #20]
 800ab04:	230a      	movs	r3, #10
 800ab06:	3101      	adds	r1, #1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	f002 fe35 	bl	800d778 <_strtol_r>
 800ab0e:	9b04      	ldr	r3, [sp, #16]
 800ab10:	9e05      	ldr	r6, [sp, #20]
 800ab12:	1ac2      	subs	r2, r0, r3
 800ab14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab18:	429e      	cmp	r6, r3
 800ab1a:	bf28      	it	cs
 800ab1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab20:	4910      	ldr	r1, [pc, #64]	@ (800ab64 <_scanf_float+0x420>)
 800ab22:	4630      	mov	r0, r6
 800ab24:	f000 fa14 	bl	800af50 <siprintf>
 800ab28:	e7d0      	b.n	800aacc <_scanf_float+0x388>
 800ab2a:	f011 0f04 	tst.w	r1, #4
 800ab2e:	9903      	ldr	r1, [sp, #12]
 800ab30:	600a      	str	r2, [r1, #0]
 800ab32:	d1dc      	bne.n	800aaee <_scanf_float+0x3aa>
 800ab34:	681d      	ldr	r5, [r3, #0]
 800ab36:	4632      	mov	r2, r6
 800ab38:	463b      	mov	r3, r7
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	f7f5 fffd 	bl	8000b3c <__aeabi_dcmpun>
 800ab42:	b128      	cbz	r0, 800ab50 <_scanf_float+0x40c>
 800ab44:	4808      	ldr	r0, [pc, #32]	@ (800ab68 <_scanf_float+0x424>)
 800ab46:	f000 fb91 	bl	800b26c <nanf>
 800ab4a:	ed85 0a00 	vstr	s0, [r5]
 800ab4e:	e7d1      	b.n	800aaf4 <_scanf_float+0x3b0>
 800ab50:	4630      	mov	r0, r6
 800ab52:	4639      	mov	r1, r7
 800ab54:	f7f6 f850 	bl	8000bf8 <__aeabi_d2f>
 800ab58:	6028      	str	r0, [r5, #0]
 800ab5a:	e7cb      	b.n	800aaf4 <_scanf_float+0x3b0>
 800ab5c:	f04f 0900 	mov.w	r9, #0
 800ab60:	e629      	b.n	800a7b6 <_scanf_float+0x72>
 800ab62:	bf00      	nop
 800ab64:	0800e700 	.word	0x0800e700
 800ab68:	0800ea95 	.word	0x0800ea95

0800ab6c <__sflush_r>:
 800ab6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab74:	0716      	lsls	r6, r2, #28
 800ab76:	4605      	mov	r5, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	d454      	bmi.n	800ac26 <__sflush_r+0xba>
 800ab7c:	684b      	ldr	r3, [r1, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	dc02      	bgt.n	800ab88 <__sflush_r+0x1c>
 800ab82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dd48      	ble.n	800ac1a <__sflush_r+0xae>
 800ab88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab8a:	2e00      	cmp	r6, #0
 800ab8c:	d045      	beq.n	800ac1a <__sflush_r+0xae>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab94:	682f      	ldr	r7, [r5, #0]
 800ab96:	6a21      	ldr	r1, [r4, #32]
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	d030      	beq.n	800abfe <__sflush_r+0x92>
 800ab9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	0759      	lsls	r1, r3, #29
 800aba2:	d505      	bpl.n	800abb0 <__sflush_r+0x44>
 800aba4:	6863      	ldr	r3, [r4, #4]
 800aba6:	1ad2      	subs	r2, r2, r3
 800aba8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abaa:	b10b      	cbz	r3, 800abb0 <__sflush_r+0x44>
 800abac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abae:	1ad2      	subs	r2, r2, r3
 800abb0:	2300      	movs	r3, #0
 800abb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b0      	blx	r6
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	d106      	bne.n	800abce <__sflush_r+0x62>
 800abc0:	6829      	ldr	r1, [r5, #0]
 800abc2:	291d      	cmp	r1, #29
 800abc4:	d82b      	bhi.n	800ac1e <__sflush_r+0xb2>
 800abc6:	4a2a      	ldr	r2, [pc, #168]	@ (800ac70 <__sflush_r+0x104>)
 800abc8:	410a      	asrs	r2, r1
 800abca:	07d6      	lsls	r6, r2, #31
 800abcc:	d427      	bmi.n	800ac1e <__sflush_r+0xb2>
 800abce:	2200      	movs	r2, #0
 800abd0:	6062      	str	r2, [r4, #4]
 800abd2:	04d9      	lsls	r1, r3, #19
 800abd4:	6922      	ldr	r2, [r4, #16]
 800abd6:	6022      	str	r2, [r4, #0]
 800abd8:	d504      	bpl.n	800abe4 <__sflush_r+0x78>
 800abda:	1c42      	adds	r2, r0, #1
 800abdc:	d101      	bne.n	800abe2 <__sflush_r+0x76>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	b903      	cbnz	r3, 800abe4 <__sflush_r+0x78>
 800abe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800abe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abe6:	602f      	str	r7, [r5, #0]
 800abe8:	b1b9      	cbz	r1, 800ac1a <__sflush_r+0xae>
 800abea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abee:	4299      	cmp	r1, r3
 800abf0:	d002      	beq.n	800abf8 <__sflush_r+0x8c>
 800abf2:	4628      	mov	r0, r5
 800abf4:	f001 f98c 	bl	800bf10 <_free_r>
 800abf8:	2300      	movs	r3, #0
 800abfa:	6363      	str	r3, [r4, #52]	@ 0x34
 800abfc:	e00d      	b.n	800ac1a <__sflush_r+0xae>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4628      	mov	r0, r5
 800ac02:	47b0      	blx	r6
 800ac04:	4602      	mov	r2, r0
 800ac06:	1c50      	adds	r0, r2, #1
 800ac08:	d1c9      	bne.n	800ab9e <__sflush_r+0x32>
 800ac0a:	682b      	ldr	r3, [r5, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d0c6      	beq.n	800ab9e <__sflush_r+0x32>
 800ac10:	2b1d      	cmp	r3, #29
 800ac12:	d001      	beq.n	800ac18 <__sflush_r+0xac>
 800ac14:	2b16      	cmp	r3, #22
 800ac16:	d11e      	bne.n	800ac56 <__sflush_r+0xea>
 800ac18:	602f      	str	r7, [r5, #0]
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	e022      	b.n	800ac64 <__sflush_r+0xf8>
 800ac1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac22:	b21b      	sxth	r3, r3
 800ac24:	e01b      	b.n	800ac5e <__sflush_r+0xf2>
 800ac26:	690f      	ldr	r7, [r1, #16]
 800ac28:	2f00      	cmp	r7, #0
 800ac2a:	d0f6      	beq.n	800ac1a <__sflush_r+0xae>
 800ac2c:	0793      	lsls	r3, r2, #30
 800ac2e:	680e      	ldr	r6, [r1, #0]
 800ac30:	bf08      	it	eq
 800ac32:	694b      	ldreq	r3, [r1, #20]
 800ac34:	600f      	str	r7, [r1, #0]
 800ac36:	bf18      	it	ne
 800ac38:	2300      	movne	r3, #0
 800ac3a:	eba6 0807 	sub.w	r8, r6, r7
 800ac3e:	608b      	str	r3, [r1, #8]
 800ac40:	f1b8 0f00 	cmp.w	r8, #0
 800ac44:	dde9      	ble.n	800ac1a <__sflush_r+0xae>
 800ac46:	6a21      	ldr	r1, [r4, #32]
 800ac48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac4a:	4643      	mov	r3, r8
 800ac4c:	463a      	mov	r2, r7
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b0      	blx	r6
 800ac52:	2800      	cmp	r0, #0
 800ac54:	dc08      	bgt.n	800ac68 <__sflush_r+0xfc>
 800ac56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac68:	4407      	add	r7, r0
 800ac6a:	eba8 0800 	sub.w	r8, r8, r0
 800ac6e:	e7e7      	b.n	800ac40 <__sflush_r+0xd4>
 800ac70:	dfbffffe 	.word	0xdfbffffe

0800ac74 <_fflush_r>:
 800ac74:	b538      	push	{r3, r4, r5, lr}
 800ac76:	690b      	ldr	r3, [r1, #16]
 800ac78:	4605      	mov	r5, r0
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	b913      	cbnz	r3, 800ac84 <_fflush_r+0x10>
 800ac7e:	2500      	movs	r5, #0
 800ac80:	4628      	mov	r0, r5
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	b118      	cbz	r0, 800ac8e <_fflush_r+0x1a>
 800ac86:	6a03      	ldr	r3, [r0, #32]
 800ac88:	b90b      	cbnz	r3, 800ac8e <_fflush_r+0x1a>
 800ac8a:	f000 f8bb 	bl	800ae04 <__sinit>
 800ac8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f3      	beq.n	800ac7e <_fflush_r+0xa>
 800ac96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac98:	07d0      	lsls	r0, r2, #31
 800ac9a:	d404      	bmi.n	800aca6 <_fflush_r+0x32>
 800ac9c:	0599      	lsls	r1, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_fflush_r+0x32>
 800aca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aca2:	f000 faca 	bl	800b23a <__retarget_lock_acquire_recursive>
 800aca6:	4628      	mov	r0, r5
 800aca8:	4621      	mov	r1, r4
 800acaa:	f7ff ff5f 	bl	800ab6c <__sflush_r>
 800acae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acb0:	07da      	lsls	r2, r3, #31
 800acb2:	4605      	mov	r5, r0
 800acb4:	d4e4      	bmi.n	800ac80 <_fflush_r+0xc>
 800acb6:	89a3      	ldrh	r3, [r4, #12]
 800acb8:	059b      	lsls	r3, r3, #22
 800acba:	d4e1      	bmi.n	800ac80 <_fflush_r+0xc>
 800acbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acbe:	f000 fabd 	bl	800b23c <__retarget_lock_release_recursive>
 800acc2:	e7dd      	b.n	800ac80 <_fflush_r+0xc>

0800acc4 <fflush>:
 800acc4:	4601      	mov	r1, r0
 800acc6:	b920      	cbnz	r0, 800acd2 <fflush+0xe>
 800acc8:	4a04      	ldr	r2, [pc, #16]	@ (800acdc <fflush+0x18>)
 800acca:	4905      	ldr	r1, [pc, #20]	@ (800ace0 <fflush+0x1c>)
 800accc:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <fflush+0x20>)
 800acce:	f000 b8b1 	b.w	800ae34 <_fwalk_sglue>
 800acd2:	4b05      	ldr	r3, [pc, #20]	@ (800ace8 <fflush+0x24>)
 800acd4:	6818      	ldr	r0, [r3, #0]
 800acd6:	f7ff bfcd 	b.w	800ac74 <_fflush_r>
 800acda:	bf00      	nop
 800acdc:	200002cc 	.word	0x200002cc
 800ace0:	0800ac75 	.word	0x0800ac75
 800ace4:	200002dc 	.word	0x200002dc
 800ace8:	200002d8 	.word	0x200002d8

0800acec <std>:
 800acec:	2300      	movs	r3, #0
 800acee:	b510      	push	{r4, lr}
 800acf0:	4604      	mov	r4, r0
 800acf2:	e9c0 3300 	strd	r3, r3, [r0]
 800acf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acfa:	6083      	str	r3, [r0, #8]
 800acfc:	8181      	strh	r1, [r0, #12]
 800acfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800ad00:	81c2      	strh	r2, [r0, #14]
 800ad02:	6183      	str	r3, [r0, #24]
 800ad04:	4619      	mov	r1, r3
 800ad06:	2208      	movs	r2, #8
 800ad08:	305c      	adds	r0, #92	@ 0x5c
 800ad0a:	f000 fa19 	bl	800b140 <memset>
 800ad0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad44 <std+0x58>)
 800ad10:	6263      	str	r3, [r4, #36]	@ 0x24
 800ad12:	4b0d      	ldr	r3, [pc, #52]	@ (800ad48 <std+0x5c>)
 800ad14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ad16:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <std+0x60>)
 800ad18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ad1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad50 <std+0x64>)
 800ad1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <std+0x68>)
 800ad20:	6224      	str	r4, [r4, #32]
 800ad22:	429c      	cmp	r4, r3
 800ad24:	d006      	beq.n	800ad34 <std+0x48>
 800ad26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad2a:	4294      	cmp	r4, r2
 800ad2c:	d002      	beq.n	800ad34 <std+0x48>
 800ad2e:	33d0      	adds	r3, #208	@ 0xd0
 800ad30:	429c      	cmp	r4, r3
 800ad32:	d105      	bne.n	800ad40 <std+0x54>
 800ad34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3c:	f000 ba7c 	b.w	800b238 <__retarget_lock_init_recursive>
 800ad40:	bd10      	pop	{r4, pc}
 800ad42:	bf00      	nop
 800ad44:	0800af91 	.word	0x0800af91
 800ad48:	0800afb3 	.word	0x0800afb3
 800ad4c:	0800afeb 	.word	0x0800afeb
 800ad50:	0800b00f 	.word	0x0800b00f
 800ad54:	20000e7c 	.word	0x20000e7c

0800ad58 <stdio_exit_handler>:
 800ad58:	4a02      	ldr	r2, [pc, #8]	@ (800ad64 <stdio_exit_handler+0xc>)
 800ad5a:	4903      	ldr	r1, [pc, #12]	@ (800ad68 <stdio_exit_handler+0x10>)
 800ad5c:	4803      	ldr	r0, [pc, #12]	@ (800ad6c <stdio_exit_handler+0x14>)
 800ad5e:	f000 b869 	b.w	800ae34 <_fwalk_sglue>
 800ad62:	bf00      	nop
 800ad64:	200002cc 	.word	0x200002cc
 800ad68:	0800ac75 	.word	0x0800ac75
 800ad6c:	200002dc 	.word	0x200002dc

0800ad70 <cleanup_stdio>:
 800ad70:	6841      	ldr	r1, [r0, #4]
 800ad72:	4b0c      	ldr	r3, [pc, #48]	@ (800ada4 <cleanup_stdio+0x34>)
 800ad74:	4299      	cmp	r1, r3
 800ad76:	b510      	push	{r4, lr}
 800ad78:	4604      	mov	r4, r0
 800ad7a:	d001      	beq.n	800ad80 <cleanup_stdio+0x10>
 800ad7c:	f7ff ff7a 	bl	800ac74 <_fflush_r>
 800ad80:	68a1      	ldr	r1, [r4, #8]
 800ad82:	4b09      	ldr	r3, [pc, #36]	@ (800ada8 <cleanup_stdio+0x38>)
 800ad84:	4299      	cmp	r1, r3
 800ad86:	d002      	beq.n	800ad8e <cleanup_stdio+0x1e>
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f7ff ff73 	bl	800ac74 <_fflush_r>
 800ad8e:	68e1      	ldr	r1, [r4, #12]
 800ad90:	4b06      	ldr	r3, [pc, #24]	@ (800adac <cleanup_stdio+0x3c>)
 800ad92:	4299      	cmp	r1, r3
 800ad94:	d004      	beq.n	800ada0 <cleanup_stdio+0x30>
 800ad96:	4620      	mov	r0, r4
 800ad98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad9c:	f7ff bf6a 	b.w	800ac74 <_fflush_r>
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	20000e7c 	.word	0x20000e7c
 800ada8:	20000ee4 	.word	0x20000ee4
 800adac:	20000f4c 	.word	0x20000f4c

0800adb0 <global_stdio_init.part.0>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	4b0b      	ldr	r3, [pc, #44]	@ (800ade0 <global_stdio_init.part.0+0x30>)
 800adb4:	4c0b      	ldr	r4, [pc, #44]	@ (800ade4 <global_stdio_init.part.0+0x34>)
 800adb6:	4a0c      	ldr	r2, [pc, #48]	@ (800ade8 <global_stdio_init.part.0+0x38>)
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	4620      	mov	r0, r4
 800adbc:	2200      	movs	r2, #0
 800adbe:	2104      	movs	r1, #4
 800adc0:	f7ff ff94 	bl	800acec <std>
 800adc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800adc8:	2201      	movs	r2, #1
 800adca:	2109      	movs	r1, #9
 800adcc:	f7ff ff8e 	bl	800acec <std>
 800add0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800add4:	2202      	movs	r2, #2
 800add6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adda:	2112      	movs	r1, #18
 800addc:	f7ff bf86 	b.w	800acec <std>
 800ade0:	20000fb4 	.word	0x20000fb4
 800ade4:	20000e7c 	.word	0x20000e7c
 800ade8:	0800ad59 	.word	0x0800ad59

0800adec <__sfp_lock_acquire>:
 800adec:	4801      	ldr	r0, [pc, #4]	@ (800adf4 <__sfp_lock_acquire+0x8>)
 800adee:	f000 ba24 	b.w	800b23a <__retarget_lock_acquire_recursive>
 800adf2:	bf00      	nop
 800adf4:	20000fbd 	.word	0x20000fbd

0800adf8 <__sfp_lock_release>:
 800adf8:	4801      	ldr	r0, [pc, #4]	@ (800ae00 <__sfp_lock_release+0x8>)
 800adfa:	f000 ba1f 	b.w	800b23c <__retarget_lock_release_recursive>
 800adfe:	bf00      	nop
 800ae00:	20000fbd 	.word	0x20000fbd

0800ae04 <__sinit>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	4604      	mov	r4, r0
 800ae08:	f7ff fff0 	bl	800adec <__sfp_lock_acquire>
 800ae0c:	6a23      	ldr	r3, [r4, #32]
 800ae0e:	b11b      	cbz	r3, 800ae18 <__sinit+0x14>
 800ae10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae14:	f7ff bff0 	b.w	800adf8 <__sfp_lock_release>
 800ae18:	4b04      	ldr	r3, [pc, #16]	@ (800ae2c <__sinit+0x28>)
 800ae1a:	6223      	str	r3, [r4, #32]
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <__sinit+0x2c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1f5      	bne.n	800ae10 <__sinit+0xc>
 800ae24:	f7ff ffc4 	bl	800adb0 <global_stdio_init.part.0>
 800ae28:	e7f2      	b.n	800ae10 <__sinit+0xc>
 800ae2a:	bf00      	nop
 800ae2c:	0800ad71 	.word	0x0800ad71
 800ae30:	20000fb4 	.word	0x20000fb4

0800ae34 <_fwalk_sglue>:
 800ae34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae38:	4607      	mov	r7, r0
 800ae3a:	4688      	mov	r8, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	2600      	movs	r6, #0
 800ae40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae44:	f1b9 0901 	subs.w	r9, r9, #1
 800ae48:	d505      	bpl.n	800ae56 <_fwalk_sglue+0x22>
 800ae4a:	6824      	ldr	r4, [r4, #0]
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	d1f7      	bne.n	800ae40 <_fwalk_sglue+0xc>
 800ae50:	4630      	mov	r0, r6
 800ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae56:	89ab      	ldrh	r3, [r5, #12]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d907      	bls.n	800ae6c <_fwalk_sglue+0x38>
 800ae5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae60:	3301      	adds	r3, #1
 800ae62:	d003      	beq.n	800ae6c <_fwalk_sglue+0x38>
 800ae64:	4629      	mov	r1, r5
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c0      	blx	r8
 800ae6a:	4306      	orrs	r6, r0
 800ae6c:	3568      	adds	r5, #104	@ 0x68
 800ae6e:	e7e9      	b.n	800ae44 <_fwalk_sglue+0x10>

0800ae70 <iprintf>:
 800ae70:	b40f      	push	{r0, r1, r2, r3}
 800ae72:	b507      	push	{r0, r1, r2, lr}
 800ae74:	4906      	ldr	r1, [pc, #24]	@ (800ae90 <iprintf+0x20>)
 800ae76:	ab04      	add	r3, sp, #16
 800ae78:	6808      	ldr	r0, [r1, #0]
 800ae7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae7e:	6881      	ldr	r1, [r0, #8]
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	f002 fdfd 	bl	800da80 <_vfiprintf_r>
 800ae86:	b003      	add	sp, #12
 800ae88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae8c:	b004      	add	sp, #16
 800ae8e:	4770      	bx	lr
 800ae90:	200002d8 	.word	0x200002d8

0800ae94 <_puts_r>:
 800ae94:	6a03      	ldr	r3, [r0, #32]
 800ae96:	b570      	push	{r4, r5, r6, lr}
 800ae98:	6884      	ldr	r4, [r0, #8]
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	460e      	mov	r6, r1
 800ae9e:	b90b      	cbnz	r3, 800aea4 <_puts_r+0x10>
 800aea0:	f7ff ffb0 	bl	800ae04 <__sinit>
 800aea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d405      	bmi.n	800aeb6 <_puts_r+0x22>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	0598      	lsls	r0, r3, #22
 800aeae:	d402      	bmi.n	800aeb6 <_puts_r+0x22>
 800aeb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeb2:	f000 f9c2 	bl	800b23a <__retarget_lock_acquire_recursive>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	0719      	lsls	r1, r3, #28
 800aeba:	d502      	bpl.n	800aec2 <_puts_r+0x2e>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d135      	bne.n	800af2e <_puts_r+0x9a>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4628      	mov	r0, r5
 800aec6:	f000 f8e5 	bl	800b094 <__swsetup_r>
 800aeca:	b380      	cbz	r0, 800af2e <_puts_r+0x9a>
 800aecc:	f04f 35ff 	mov.w	r5, #4294967295
 800aed0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aed2:	07da      	lsls	r2, r3, #31
 800aed4:	d405      	bmi.n	800aee2 <_puts_r+0x4e>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	059b      	lsls	r3, r3, #22
 800aeda:	d402      	bmi.n	800aee2 <_puts_r+0x4e>
 800aedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aede:	f000 f9ad 	bl	800b23c <__retarget_lock_release_recursive>
 800aee2:	4628      	mov	r0, r5
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	da04      	bge.n	800aef4 <_puts_r+0x60>
 800aeea:	69a2      	ldr	r2, [r4, #24]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	dc17      	bgt.n	800af20 <_puts_r+0x8c>
 800aef0:	290a      	cmp	r1, #10
 800aef2:	d015      	beq.n	800af20 <_puts_r+0x8c>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	6022      	str	r2, [r4, #0]
 800aefa:	7019      	strb	r1, [r3, #0]
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800af02:	3b01      	subs	r3, #1
 800af04:	60a3      	str	r3, [r4, #8]
 800af06:	2900      	cmp	r1, #0
 800af08:	d1ed      	bne.n	800aee6 <_puts_r+0x52>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da11      	bge.n	800af32 <_puts_r+0x9e>
 800af0e:	4622      	mov	r2, r4
 800af10:	210a      	movs	r1, #10
 800af12:	4628      	mov	r0, r5
 800af14:	f000 f87f 	bl	800b016 <__swbuf_r>
 800af18:	3001      	adds	r0, #1
 800af1a:	d0d7      	beq.n	800aecc <_puts_r+0x38>
 800af1c:	250a      	movs	r5, #10
 800af1e:	e7d7      	b.n	800aed0 <_puts_r+0x3c>
 800af20:	4622      	mov	r2, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f877 	bl	800b016 <__swbuf_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	d1e7      	bne.n	800aefc <_puts_r+0x68>
 800af2c:	e7ce      	b.n	800aecc <_puts_r+0x38>
 800af2e:	3e01      	subs	r6, #1
 800af30:	e7e4      	b.n	800aefc <_puts_r+0x68>
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	6022      	str	r2, [r4, #0]
 800af38:	220a      	movs	r2, #10
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	e7ee      	b.n	800af1c <_puts_r+0x88>
	...

0800af40 <puts>:
 800af40:	4b02      	ldr	r3, [pc, #8]	@ (800af4c <puts+0xc>)
 800af42:	4601      	mov	r1, r0
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	f7ff bfa5 	b.w	800ae94 <_puts_r>
 800af4a:	bf00      	nop
 800af4c:	200002d8 	.word	0x200002d8

0800af50 <siprintf>:
 800af50:	b40e      	push	{r1, r2, r3}
 800af52:	b500      	push	{lr}
 800af54:	b09c      	sub	sp, #112	@ 0x70
 800af56:	ab1d      	add	r3, sp, #116	@ 0x74
 800af58:	9002      	str	r0, [sp, #8]
 800af5a:	9006      	str	r0, [sp, #24]
 800af5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af60:	4809      	ldr	r0, [pc, #36]	@ (800af88 <siprintf+0x38>)
 800af62:	9107      	str	r1, [sp, #28]
 800af64:	9104      	str	r1, [sp, #16]
 800af66:	4909      	ldr	r1, [pc, #36]	@ (800af8c <siprintf+0x3c>)
 800af68:	f853 2b04 	ldr.w	r2, [r3], #4
 800af6c:	9105      	str	r1, [sp, #20]
 800af6e:	6800      	ldr	r0, [r0, #0]
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	a902      	add	r1, sp, #8
 800af74:	f002 fc5e 	bl	800d834 <_svfiprintf_r>
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	b01c      	add	sp, #112	@ 0x70
 800af80:	f85d eb04 	ldr.w	lr, [sp], #4
 800af84:	b003      	add	sp, #12
 800af86:	4770      	bx	lr
 800af88:	200002d8 	.word	0x200002d8
 800af8c:	ffff0208 	.word	0xffff0208

0800af90 <__sread>:
 800af90:	b510      	push	{r4, lr}
 800af92:	460c      	mov	r4, r1
 800af94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af98:	f000 f900 	bl	800b19c <_read_r>
 800af9c:	2800      	cmp	r0, #0
 800af9e:	bfab      	itete	ge
 800afa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afa2:	89a3      	ldrhlt	r3, [r4, #12]
 800afa4:	181b      	addge	r3, r3, r0
 800afa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afaa:	bfac      	ite	ge
 800afac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afae:	81a3      	strhlt	r3, [r4, #12]
 800afb0:	bd10      	pop	{r4, pc}

0800afb2 <__swrite>:
 800afb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	461f      	mov	r7, r3
 800afb8:	898b      	ldrh	r3, [r1, #12]
 800afba:	05db      	lsls	r3, r3, #23
 800afbc:	4605      	mov	r5, r0
 800afbe:	460c      	mov	r4, r1
 800afc0:	4616      	mov	r6, r2
 800afc2:	d505      	bpl.n	800afd0 <__swrite+0x1e>
 800afc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc8:	2302      	movs	r3, #2
 800afca:	2200      	movs	r2, #0
 800afcc:	f000 f8d4 	bl	800b178 <_lseek_r>
 800afd0:	89a3      	ldrh	r3, [r4, #12]
 800afd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afda:	81a3      	strh	r3, [r4, #12]
 800afdc:	4632      	mov	r2, r6
 800afde:	463b      	mov	r3, r7
 800afe0:	4628      	mov	r0, r5
 800afe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afe6:	f000 b8eb 	b.w	800b1c0 <_write_r>

0800afea <__sseek>:
 800afea:	b510      	push	{r4, lr}
 800afec:	460c      	mov	r4, r1
 800afee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff2:	f000 f8c1 	bl	800b178 <_lseek_r>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	bf15      	itete	ne
 800affc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800affe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b002:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b006:	81a3      	strheq	r3, [r4, #12]
 800b008:	bf18      	it	ne
 800b00a:	81a3      	strhne	r3, [r4, #12]
 800b00c:	bd10      	pop	{r4, pc}

0800b00e <__sclose>:
 800b00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b012:	f000 b8a1 	b.w	800b158 <_close_r>

0800b016 <__swbuf_r>:
 800b016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b018:	460e      	mov	r6, r1
 800b01a:	4614      	mov	r4, r2
 800b01c:	4605      	mov	r5, r0
 800b01e:	b118      	cbz	r0, 800b028 <__swbuf_r+0x12>
 800b020:	6a03      	ldr	r3, [r0, #32]
 800b022:	b90b      	cbnz	r3, 800b028 <__swbuf_r+0x12>
 800b024:	f7ff feee 	bl	800ae04 <__sinit>
 800b028:	69a3      	ldr	r3, [r4, #24]
 800b02a:	60a3      	str	r3, [r4, #8]
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	071a      	lsls	r2, r3, #28
 800b030:	d501      	bpl.n	800b036 <__swbuf_r+0x20>
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	b943      	cbnz	r3, 800b048 <__swbuf_r+0x32>
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 f82b 	bl	800b094 <__swsetup_r>
 800b03e:	b118      	cbz	r0, 800b048 <__swbuf_r+0x32>
 800b040:	f04f 37ff 	mov.w	r7, #4294967295
 800b044:	4638      	mov	r0, r7
 800b046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	6922      	ldr	r2, [r4, #16]
 800b04c:	1a98      	subs	r0, r3, r2
 800b04e:	6963      	ldr	r3, [r4, #20]
 800b050:	b2f6      	uxtb	r6, r6
 800b052:	4283      	cmp	r3, r0
 800b054:	4637      	mov	r7, r6
 800b056:	dc05      	bgt.n	800b064 <__swbuf_r+0x4e>
 800b058:	4621      	mov	r1, r4
 800b05a:	4628      	mov	r0, r5
 800b05c:	f7ff fe0a 	bl	800ac74 <_fflush_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	d1ed      	bne.n	800b040 <__swbuf_r+0x2a>
 800b064:	68a3      	ldr	r3, [r4, #8]
 800b066:	3b01      	subs	r3, #1
 800b068:	60a3      	str	r3, [r4, #8]
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	1c5a      	adds	r2, r3, #1
 800b06e:	6022      	str	r2, [r4, #0]
 800b070:	701e      	strb	r6, [r3, #0]
 800b072:	6962      	ldr	r2, [r4, #20]
 800b074:	1c43      	adds	r3, r0, #1
 800b076:	429a      	cmp	r2, r3
 800b078:	d004      	beq.n	800b084 <__swbuf_r+0x6e>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	07db      	lsls	r3, r3, #31
 800b07e:	d5e1      	bpl.n	800b044 <__swbuf_r+0x2e>
 800b080:	2e0a      	cmp	r6, #10
 800b082:	d1df      	bne.n	800b044 <__swbuf_r+0x2e>
 800b084:	4621      	mov	r1, r4
 800b086:	4628      	mov	r0, r5
 800b088:	f7ff fdf4 	bl	800ac74 <_fflush_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d0d9      	beq.n	800b044 <__swbuf_r+0x2e>
 800b090:	e7d6      	b.n	800b040 <__swbuf_r+0x2a>
	...

0800b094 <__swsetup_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4b29      	ldr	r3, [pc, #164]	@ (800b13c <__swsetup_r+0xa8>)
 800b098:	4605      	mov	r5, r0
 800b09a:	6818      	ldr	r0, [r3, #0]
 800b09c:	460c      	mov	r4, r1
 800b09e:	b118      	cbz	r0, 800b0a8 <__swsetup_r+0x14>
 800b0a0:	6a03      	ldr	r3, [r0, #32]
 800b0a2:	b90b      	cbnz	r3, 800b0a8 <__swsetup_r+0x14>
 800b0a4:	f7ff feae 	bl	800ae04 <__sinit>
 800b0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ac:	0719      	lsls	r1, r3, #28
 800b0ae:	d422      	bmi.n	800b0f6 <__swsetup_r+0x62>
 800b0b0:	06da      	lsls	r2, r3, #27
 800b0b2:	d407      	bmi.n	800b0c4 <__swsetup_r+0x30>
 800b0b4:	2209      	movs	r2, #9
 800b0b6:	602a      	str	r2, [r5, #0]
 800b0b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0bc:	81a3      	strh	r3, [r4, #12]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	e033      	b.n	800b12c <__swsetup_r+0x98>
 800b0c4:	0758      	lsls	r0, r3, #29
 800b0c6:	d512      	bpl.n	800b0ee <__swsetup_r+0x5a>
 800b0c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ca:	b141      	cbz	r1, 800b0de <__swsetup_r+0x4a>
 800b0cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0d0:	4299      	cmp	r1, r3
 800b0d2:	d002      	beq.n	800b0da <__swsetup_r+0x46>
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f000 ff1b 	bl	800bf10 <_free_r>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0e4:	81a3      	strh	r3, [r4, #12]
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	6063      	str	r3, [r4, #4]
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f043 0308 	orr.w	r3, r3, #8
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	b94b      	cbnz	r3, 800b10e <__swsetup_r+0x7a>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b104:	d003      	beq.n	800b10e <__swsetup_r+0x7a>
 800b106:	4621      	mov	r1, r4
 800b108:	4628      	mov	r0, r5
 800b10a:	f002 fdf7 	bl	800dcfc <__smakebuf_r>
 800b10e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b112:	f013 0201 	ands.w	r2, r3, #1
 800b116:	d00a      	beq.n	800b12e <__swsetup_r+0x9a>
 800b118:	2200      	movs	r2, #0
 800b11a:	60a2      	str	r2, [r4, #8]
 800b11c:	6962      	ldr	r2, [r4, #20]
 800b11e:	4252      	negs	r2, r2
 800b120:	61a2      	str	r2, [r4, #24]
 800b122:	6922      	ldr	r2, [r4, #16]
 800b124:	b942      	cbnz	r2, 800b138 <__swsetup_r+0xa4>
 800b126:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b12a:	d1c5      	bne.n	800b0b8 <__swsetup_r+0x24>
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	0799      	lsls	r1, r3, #30
 800b130:	bf58      	it	pl
 800b132:	6962      	ldrpl	r2, [r4, #20]
 800b134:	60a2      	str	r2, [r4, #8]
 800b136:	e7f4      	b.n	800b122 <__swsetup_r+0x8e>
 800b138:	2000      	movs	r0, #0
 800b13a:	e7f7      	b.n	800b12c <__swsetup_r+0x98>
 800b13c:	200002d8 	.word	0x200002d8

0800b140 <memset>:
 800b140:	4402      	add	r2, r0
 800b142:	4603      	mov	r3, r0
 800b144:	4293      	cmp	r3, r2
 800b146:	d100      	bne.n	800b14a <memset+0xa>
 800b148:	4770      	bx	lr
 800b14a:	f803 1b01 	strb.w	r1, [r3], #1
 800b14e:	e7f9      	b.n	800b144 <memset+0x4>

0800b150 <_localeconv_r>:
 800b150:	4800      	ldr	r0, [pc, #0]	@ (800b154 <_localeconv_r+0x4>)
 800b152:	4770      	bx	lr
 800b154:	20000418 	.word	0x20000418

0800b158 <_close_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4d06      	ldr	r5, [pc, #24]	@ (800b174 <_close_r+0x1c>)
 800b15c:	2300      	movs	r3, #0
 800b15e:	4604      	mov	r4, r0
 800b160:	4608      	mov	r0, r1
 800b162:	602b      	str	r3, [r5, #0]
 800b164:	f7f6 fd4a 	bl	8001bfc <_close>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_close_r+0x1a>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_close_r+0x1a>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	20000fb8 	.word	0x20000fb8

0800b178 <_lseek_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4d07      	ldr	r5, [pc, #28]	@ (800b198 <_lseek_r+0x20>)
 800b17c:	4604      	mov	r4, r0
 800b17e:	4608      	mov	r0, r1
 800b180:	4611      	mov	r1, r2
 800b182:	2200      	movs	r2, #0
 800b184:	602a      	str	r2, [r5, #0]
 800b186:	461a      	mov	r2, r3
 800b188:	f7f6 fd5f 	bl	8001c4a <_lseek>
 800b18c:	1c43      	adds	r3, r0, #1
 800b18e:	d102      	bne.n	800b196 <_lseek_r+0x1e>
 800b190:	682b      	ldr	r3, [r5, #0]
 800b192:	b103      	cbz	r3, 800b196 <_lseek_r+0x1e>
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	20000fb8 	.word	0x20000fb8

0800b19c <_read_r>:
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4d07      	ldr	r5, [pc, #28]	@ (800b1bc <_read_r+0x20>)
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	4608      	mov	r0, r1
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	602a      	str	r2, [r5, #0]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	f7f6 fced 	bl	8001b8a <_read>
 800b1b0:	1c43      	adds	r3, r0, #1
 800b1b2:	d102      	bne.n	800b1ba <_read_r+0x1e>
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	b103      	cbz	r3, 800b1ba <_read_r+0x1e>
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	bd38      	pop	{r3, r4, r5, pc}
 800b1bc:	20000fb8 	.word	0x20000fb8

0800b1c0 <_write_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d07      	ldr	r5, [pc, #28]	@ (800b1e0 <_write_r+0x20>)
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	4608      	mov	r0, r1
 800b1c8:	4611      	mov	r1, r2
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	602a      	str	r2, [r5, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	f7f6 fcf8 	bl	8001bc4 <_write>
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d102      	bne.n	800b1de <_write_r+0x1e>
 800b1d8:	682b      	ldr	r3, [r5, #0]
 800b1da:	b103      	cbz	r3, 800b1de <_write_r+0x1e>
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	bd38      	pop	{r3, r4, r5, pc}
 800b1e0:	20000fb8 	.word	0x20000fb8

0800b1e4 <__errno>:
 800b1e4:	4b01      	ldr	r3, [pc, #4]	@ (800b1ec <__errno+0x8>)
 800b1e6:	6818      	ldr	r0, [r3, #0]
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	200002d8 	.word	0x200002d8

0800b1f0 <__libc_init_array>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b228 <__libc_init_array+0x38>)
 800b1f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b22c <__libc_init_array+0x3c>)
 800b1f6:	1b64      	subs	r4, r4, r5
 800b1f8:	10a4      	asrs	r4, r4, #2
 800b1fa:	2600      	movs	r6, #0
 800b1fc:	42a6      	cmp	r6, r4
 800b1fe:	d109      	bne.n	800b214 <__libc_init_array+0x24>
 800b200:	4d0b      	ldr	r5, [pc, #44]	@ (800b230 <__libc_init_array+0x40>)
 800b202:	4c0c      	ldr	r4, [pc, #48]	@ (800b234 <__libc_init_array+0x44>)
 800b204:	f003 fa3a 	bl	800e67c <_init>
 800b208:	1b64      	subs	r4, r4, r5
 800b20a:	10a4      	asrs	r4, r4, #2
 800b20c:	2600      	movs	r6, #0
 800b20e:	42a6      	cmp	r6, r4
 800b210:	d105      	bne.n	800b21e <__libc_init_array+0x2e>
 800b212:	bd70      	pop	{r4, r5, r6, pc}
 800b214:	f855 3b04 	ldr.w	r3, [r5], #4
 800b218:	4798      	blx	r3
 800b21a:	3601      	adds	r6, #1
 800b21c:	e7ee      	b.n	800b1fc <__libc_init_array+0xc>
 800b21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b222:	4798      	blx	r3
 800b224:	3601      	adds	r6, #1
 800b226:	e7f2      	b.n	800b20e <__libc_init_array+0x1e>
 800b228:	0800eb00 	.word	0x0800eb00
 800b22c:	0800eb00 	.word	0x0800eb00
 800b230:	0800eb00 	.word	0x0800eb00
 800b234:	0800eb04 	.word	0x0800eb04

0800b238 <__retarget_lock_init_recursive>:
 800b238:	4770      	bx	lr

0800b23a <__retarget_lock_acquire_recursive>:
 800b23a:	4770      	bx	lr

0800b23c <__retarget_lock_release_recursive>:
 800b23c:	4770      	bx	lr

0800b23e <strcpy>:
 800b23e:	4603      	mov	r3, r0
 800b240:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b244:	f803 2b01 	strb.w	r2, [r3], #1
 800b248:	2a00      	cmp	r2, #0
 800b24a:	d1f9      	bne.n	800b240 <strcpy+0x2>
 800b24c:	4770      	bx	lr

0800b24e <memcpy>:
 800b24e:	440a      	add	r2, r1
 800b250:	4291      	cmp	r1, r2
 800b252:	f100 33ff 	add.w	r3, r0, #4294967295
 800b256:	d100      	bne.n	800b25a <memcpy+0xc>
 800b258:	4770      	bx	lr
 800b25a:	b510      	push	{r4, lr}
 800b25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b264:	4291      	cmp	r1, r2
 800b266:	d1f9      	bne.n	800b25c <memcpy+0xe>
 800b268:	bd10      	pop	{r4, pc}
	...

0800b26c <nanf>:
 800b26c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b274 <nanf+0x8>
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	7fc00000 	.word	0x7fc00000

0800b278 <quorem>:
 800b278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	6903      	ldr	r3, [r0, #16]
 800b27e:	690c      	ldr	r4, [r1, #16]
 800b280:	42a3      	cmp	r3, r4
 800b282:	4607      	mov	r7, r0
 800b284:	db7e      	blt.n	800b384 <quorem+0x10c>
 800b286:	3c01      	subs	r4, #1
 800b288:	f101 0814 	add.w	r8, r1, #20
 800b28c:	00a3      	lsls	r3, r4, #2
 800b28e:	f100 0514 	add.w	r5, r0, #20
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b29e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2ae:	d32e      	bcc.n	800b30e <quorem+0x96>
 800b2b0:	f04f 0a00 	mov.w	sl, #0
 800b2b4:	46c4      	mov	ip, r8
 800b2b6:	46ae      	mov	lr, r5
 800b2b8:	46d3      	mov	fp, sl
 800b2ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2be:	b298      	uxth	r0, r3
 800b2c0:	fb06 a000 	mla	r0, r6, r0, sl
 800b2c4:	0c02      	lsrs	r2, r0, #16
 800b2c6:	0c1b      	lsrs	r3, r3, #16
 800b2c8:	fb06 2303 	mla	r3, r6, r3, r2
 800b2cc:	f8de 2000 	ldr.w	r2, [lr]
 800b2d0:	b280      	uxth	r0, r0
 800b2d2:	b292      	uxth	r2, r2
 800b2d4:	1a12      	subs	r2, r2, r0
 800b2d6:	445a      	add	r2, fp
 800b2d8:	f8de 0000 	ldr.w	r0, [lr]
 800b2dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b2e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b2f0:	45e1      	cmp	r9, ip
 800b2f2:	f84e 2b04 	str.w	r2, [lr], #4
 800b2f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b2fa:	d2de      	bcs.n	800b2ba <quorem+0x42>
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	58eb      	ldr	r3, [r5, r3]
 800b300:	b92b      	cbnz	r3, 800b30e <quorem+0x96>
 800b302:	9b01      	ldr	r3, [sp, #4]
 800b304:	3b04      	subs	r3, #4
 800b306:	429d      	cmp	r5, r3
 800b308:	461a      	mov	r2, r3
 800b30a:	d32f      	bcc.n	800b36c <quorem+0xf4>
 800b30c:	613c      	str	r4, [r7, #16]
 800b30e:	4638      	mov	r0, r7
 800b310:	f001 f9c2 	bl	800c698 <__mcmp>
 800b314:	2800      	cmp	r0, #0
 800b316:	db25      	blt.n	800b364 <quorem+0xec>
 800b318:	4629      	mov	r1, r5
 800b31a:	2000      	movs	r0, #0
 800b31c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b320:	f8d1 c000 	ldr.w	ip, [r1]
 800b324:	fa1f fe82 	uxth.w	lr, r2
 800b328:	fa1f f38c 	uxth.w	r3, ip
 800b32c:	eba3 030e 	sub.w	r3, r3, lr
 800b330:	4403      	add	r3, r0
 800b332:	0c12      	lsrs	r2, r2, #16
 800b334:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b338:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b342:	45c1      	cmp	r9, r8
 800b344:	f841 3b04 	str.w	r3, [r1], #4
 800b348:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b34c:	d2e6      	bcs.n	800b31c <quorem+0xa4>
 800b34e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b356:	b922      	cbnz	r2, 800b362 <quorem+0xea>
 800b358:	3b04      	subs	r3, #4
 800b35a:	429d      	cmp	r5, r3
 800b35c:	461a      	mov	r2, r3
 800b35e:	d30b      	bcc.n	800b378 <quorem+0x100>
 800b360:	613c      	str	r4, [r7, #16]
 800b362:	3601      	adds	r6, #1
 800b364:	4630      	mov	r0, r6
 800b366:	b003      	add	sp, #12
 800b368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36c:	6812      	ldr	r2, [r2, #0]
 800b36e:	3b04      	subs	r3, #4
 800b370:	2a00      	cmp	r2, #0
 800b372:	d1cb      	bne.n	800b30c <quorem+0x94>
 800b374:	3c01      	subs	r4, #1
 800b376:	e7c6      	b.n	800b306 <quorem+0x8e>
 800b378:	6812      	ldr	r2, [r2, #0]
 800b37a:	3b04      	subs	r3, #4
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	d1ef      	bne.n	800b360 <quorem+0xe8>
 800b380:	3c01      	subs	r4, #1
 800b382:	e7ea      	b.n	800b35a <quorem+0xe2>
 800b384:	2000      	movs	r0, #0
 800b386:	e7ee      	b.n	800b366 <quorem+0xee>

0800b388 <_dtoa_r>:
 800b388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	69c7      	ldr	r7, [r0, #28]
 800b38e:	b099      	sub	sp, #100	@ 0x64
 800b390:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b394:	ec55 4b10 	vmov	r4, r5, d0
 800b398:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b39a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b39c:	4683      	mov	fp, r0
 800b39e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3a2:	b97f      	cbnz	r7, 800b3c4 <_dtoa_r+0x3c>
 800b3a4:	2010      	movs	r0, #16
 800b3a6:	f000 fdfd 	bl	800bfa4 <malloc>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800b3b0:	b920      	cbnz	r0, 800b3bc <_dtoa_r+0x34>
 800b3b2:	4ba7      	ldr	r3, [pc, #668]	@ (800b650 <_dtoa_r+0x2c8>)
 800b3b4:	21ef      	movs	r1, #239	@ 0xef
 800b3b6:	48a7      	ldr	r0, [pc, #668]	@ (800b654 <_dtoa_r+0x2cc>)
 800b3b8:	f002 fd42 	bl	800de40 <__assert_func>
 800b3bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b3c0:	6007      	str	r7, [r0, #0]
 800b3c2:	60c7      	str	r7, [r0, #12]
 800b3c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3c8:	6819      	ldr	r1, [r3, #0]
 800b3ca:	b159      	cbz	r1, 800b3e4 <_dtoa_r+0x5c>
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	604a      	str	r2, [r1, #4]
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4093      	lsls	r3, r2
 800b3d4:	608b      	str	r3, [r1, #8]
 800b3d6:	4658      	mov	r0, fp
 800b3d8:	f000 feda 	bl	800c190 <_Bfree>
 800b3dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	601a      	str	r2, [r3, #0]
 800b3e4:	1e2b      	subs	r3, r5, #0
 800b3e6:	bfb9      	ittee	lt
 800b3e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b3ec:	9303      	strlt	r3, [sp, #12]
 800b3ee:	2300      	movge	r3, #0
 800b3f0:	6033      	strge	r3, [r6, #0]
 800b3f2:	9f03      	ldr	r7, [sp, #12]
 800b3f4:	4b98      	ldr	r3, [pc, #608]	@ (800b658 <_dtoa_r+0x2d0>)
 800b3f6:	bfbc      	itt	lt
 800b3f8:	2201      	movlt	r2, #1
 800b3fa:	6032      	strlt	r2, [r6, #0]
 800b3fc:	43bb      	bics	r3, r7
 800b3fe:	d112      	bne.n	800b426 <_dtoa_r+0x9e>
 800b400:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b402:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b40c:	4323      	orrs	r3, r4
 800b40e:	f000 854d 	beq.w	800beac <_dtoa_r+0xb24>
 800b412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b66c <_dtoa_r+0x2e4>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 854f 	beq.w	800bebc <_dtoa_r+0xb34>
 800b41e:	f10a 0303 	add.w	r3, sl, #3
 800b422:	f000 bd49 	b.w	800beb8 <_dtoa_r+0xb30>
 800b426:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	ec51 0b17 	vmov	r0, r1, d7
 800b430:	2300      	movs	r3, #0
 800b432:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b436:	f7f5 fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b43a:	4680      	mov	r8, r0
 800b43c:	b158      	cbz	r0, 800b456 <_dtoa_r+0xce>
 800b43e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b440:	2301      	movs	r3, #1
 800b442:	6013      	str	r3, [r2, #0]
 800b444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b446:	b113      	cbz	r3, 800b44e <_dtoa_r+0xc6>
 800b448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b44a:	4b84      	ldr	r3, [pc, #528]	@ (800b65c <_dtoa_r+0x2d4>)
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b670 <_dtoa_r+0x2e8>
 800b452:	f000 bd33 	b.w	800bebc <_dtoa_r+0xb34>
 800b456:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b45a:	aa16      	add	r2, sp, #88	@ 0x58
 800b45c:	a917      	add	r1, sp, #92	@ 0x5c
 800b45e:	4658      	mov	r0, fp
 800b460:	f001 fa3a 	bl	800c8d8 <__d2b>
 800b464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b468:	4681      	mov	r9, r0
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	d077      	beq.n	800b55e <_dtoa_r+0x1d6>
 800b46e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b470:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b47c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b488:	4619      	mov	r1, r3
 800b48a:	2200      	movs	r2, #0
 800b48c:	4b74      	ldr	r3, [pc, #464]	@ (800b660 <_dtoa_r+0x2d8>)
 800b48e:	f7f4 ff03 	bl	8000298 <__aeabi_dsub>
 800b492:	a369      	add	r3, pc, #420	@ (adr r3, 800b638 <_dtoa_r+0x2b0>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f7f5 f8b6 	bl	8000608 <__aeabi_dmul>
 800b49c:	a368      	add	r3, pc, #416	@ (adr r3, 800b640 <_dtoa_r+0x2b8>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f7f4 fefb 	bl	800029c <__adddf3>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	f7f5 f842 	bl	8000534 <__aeabi_i2d>
 800b4b0:	a365      	add	r3, pc, #404	@ (adr r3, 800b648 <_dtoa_r+0x2c0>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f5 f8a7 	bl	8000608 <__aeabi_dmul>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4620      	mov	r0, r4
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f4 feeb 	bl	800029c <__adddf3>
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	f7f5 fb4d 	bl	8000b68 <__aeabi_d2iz>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f5 fb08 	bl	8000aec <__aeabi_dcmplt>
 800b4dc:	b140      	cbz	r0, 800b4f0 <_dtoa_r+0x168>
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f7f5 f828 	bl	8000534 <__aeabi_i2d>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f5 faf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4ec:	b900      	cbnz	r0, 800b4f0 <_dtoa_r+0x168>
 800b4ee:	3f01      	subs	r7, #1
 800b4f0:	2f16      	cmp	r7, #22
 800b4f2:	d851      	bhi.n	800b598 <_dtoa_r+0x210>
 800b4f4:	4b5b      	ldr	r3, [pc, #364]	@ (800b664 <_dtoa_r+0x2dc>)
 800b4f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b502:	f7f5 faf3 	bl	8000aec <__aeabi_dcmplt>
 800b506:	2800      	cmp	r0, #0
 800b508:	d048      	beq.n	800b59c <_dtoa_r+0x214>
 800b50a:	3f01      	subs	r7, #1
 800b50c:	2300      	movs	r3, #0
 800b50e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b510:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b512:	1b9b      	subs	r3, r3, r6
 800b514:	1e5a      	subs	r2, r3, #1
 800b516:	bf44      	itt	mi
 800b518:	f1c3 0801 	rsbmi	r8, r3, #1
 800b51c:	2300      	movmi	r3, #0
 800b51e:	9208      	str	r2, [sp, #32]
 800b520:	bf54      	ite	pl
 800b522:	f04f 0800 	movpl.w	r8, #0
 800b526:	9308      	strmi	r3, [sp, #32]
 800b528:	2f00      	cmp	r7, #0
 800b52a:	db39      	blt.n	800b5a0 <_dtoa_r+0x218>
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b530:	443b      	add	r3, r7
 800b532:	9308      	str	r3, [sp, #32]
 800b534:	2300      	movs	r3, #0
 800b536:	930a      	str	r3, [sp, #40]	@ 0x28
 800b538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53a:	2b09      	cmp	r3, #9
 800b53c:	d864      	bhi.n	800b608 <_dtoa_r+0x280>
 800b53e:	2b05      	cmp	r3, #5
 800b540:	bfc4      	itt	gt
 800b542:	3b04      	subgt	r3, #4
 800b544:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b548:	f1a3 0302 	sub.w	r3, r3, #2
 800b54c:	bfcc      	ite	gt
 800b54e:	2400      	movgt	r4, #0
 800b550:	2401      	movle	r4, #1
 800b552:	2b03      	cmp	r3, #3
 800b554:	d863      	bhi.n	800b61e <_dtoa_r+0x296>
 800b556:	e8df f003 	tbb	[pc, r3]
 800b55a:	372a      	.short	0x372a
 800b55c:	5535      	.short	0x5535
 800b55e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b562:	441e      	add	r6, r3
 800b564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b568:	2b20      	cmp	r3, #32
 800b56a:	bfc1      	itttt	gt
 800b56c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b570:	409f      	lslgt	r7, r3
 800b572:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b576:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b57a:	bfd6      	itet	le
 800b57c:	f1c3 0320 	rsble	r3, r3, #32
 800b580:	ea47 0003 	orrgt.w	r0, r7, r3
 800b584:	fa04 f003 	lslle.w	r0, r4, r3
 800b588:	f7f4 ffc4 	bl	8000514 <__aeabi_ui2d>
 800b58c:	2201      	movs	r2, #1
 800b58e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b592:	3e01      	subs	r6, #1
 800b594:	9214      	str	r2, [sp, #80]	@ 0x50
 800b596:	e777      	b.n	800b488 <_dtoa_r+0x100>
 800b598:	2301      	movs	r3, #1
 800b59a:	e7b8      	b.n	800b50e <_dtoa_r+0x186>
 800b59c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b59e:	e7b7      	b.n	800b510 <_dtoa_r+0x188>
 800b5a0:	427b      	negs	r3, r7
 800b5a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	eba8 0807 	sub.w	r8, r8, r7
 800b5aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5ac:	e7c4      	b.n	800b538 <_dtoa_r+0x1b0>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dc35      	bgt.n	800b624 <_dtoa_r+0x29c>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	9307      	str	r3, [sp, #28]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5c2:	e00b      	b.n	800b5dc <_dtoa_r+0x254>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e7f3      	b.n	800b5b0 <_dtoa_r+0x228>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5ce:	18fb      	adds	r3, r7, r3
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	9307      	str	r3, [sp, #28]
 800b5d8:	bfb8      	it	lt
 800b5da:	2301      	movlt	r3, #1
 800b5dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	f102 0514 	add.w	r5, r2, #20
 800b5e8:	429d      	cmp	r5, r3
 800b5ea:	d91f      	bls.n	800b62c <_dtoa_r+0x2a4>
 800b5ec:	6041      	str	r1, [r0, #4]
 800b5ee:	4658      	mov	r0, fp
 800b5f0:	f000 fd8e 	bl	800c110 <_Balloc>
 800b5f4:	4682      	mov	sl, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d13c      	bne.n	800b674 <_dtoa_r+0x2ec>
 800b5fa:	4b1b      	ldr	r3, [pc, #108]	@ (800b668 <_dtoa_r+0x2e0>)
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800b602:	e6d8      	b.n	800b3b6 <_dtoa_r+0x2e>
 800b604:	2301      	movs	r3, #1
 800b606:	e7e0      	b.n	800b5ca <_dtoa_r+0x242>
 800b608:	2401      	movs	r4, #1
 800b60a:	2300      	movs	r3, #0
 800b60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	9307      	str	r3, [sp, #28]
 800b618:	2200      	movs	r2, #0
 800b61a:	2312      	movs	r3, #18
 800b61c:	e7d0      	b.n	800b5c0 <_dtoa_r+0x238>
 800b61e:	2301      	movs	r3, #1
 800b620:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b622:	e7f5      	b.n	800b610 <_dtoa_r+0x288>
 800b624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	9307      	str	r3, [sp, #28]
 800b62a:	e7d7      	b.n	800b5dc <_dtoa_r+0x254>
 800b62c:	3101      	adds	r1, #1
 800b62e:	0052      	lsls	r2, r2, #1
 800b630:	e7d8      	b.n	800b5e4 <_dtoa_r+0x25c>
 800b632:	bf00      	nop
 800b634:	f3af 8000 	nop.w
 800b638:	636f4361 	.word	0x636f4361
 800b63c:	3fd287a7 	.word	0x3fd287a7
 800b640:	8b60c8b3 	.word	0x8b60c8b3
 800b644:	3fc68a28 	.word	0x3fc68a28
 800b648:	509f79fb 	.word	0x509f79fb
 800b64c:	3fd34413 	.word	0x3fd34413
 800b650:	0800e712 	.word	0x0800e712
 800b654:	0800e729 	.word	0x0800e729
 800b658:	7ff00000 	.word	0x7ff00000
 800b65c:	0800e6dd 	.word	0x0800e6dd
 800b660:	3ff80000 	.word	0x3ff80000
 800b664:	0800e820 	.word	0x0800e820
 800b668:	0800e781 	.word	0x0800e781
 800b66c:	0800e70e 	.word	0x0800e70e
 800b670:	0800e6dc 	.word	0x0800e6dc
 800b674:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b678:	6018      	str	r0, [r3, #0]
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	2b0e      	cmp	r3, #14
 800b67e:	f200 80a4 	bhi.w	800b7ca <_dtoa_r+0x442>
 800b682:	2c00      	cmp	r4, #0
 800b684:	f000 80a1 	beq.w	800b7ca <_dtoa_r+0x442>
 800b688:	2f00      	cmp	r7, #0
 800b68a:	dd33      	ble.n	800b6f4 <_dtoa_r+0x36c>
 800b68c:	4bad      	ldr	r3, [pc, #692]	@ (800b944 <_dtoa_r+0x5bc>)
 800b68e:	f007 020f 	and.w	r2, r7, #15
 800b692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b696:	ed93 7b00 	vldr	d7, [r3]
 800b69a:	05f8      	lsls	r0, r7, #23
 800b69c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b6a4:	d516      	bpl.n	800b6d4 <_dtoa_r+0x34c>
 800b6a6:	4ba8      	ldr	r3, [pc, #672]	@ (800b948 <_dtoa_r+0x5c0>)
 800b6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6b0:	f7f5 f8d4 	bl	800085c <__aeabi_ddiv>
 800b6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6b8:	f004 040f 	and.w	r4, r4, #15
 800b6bc:	2603      	movs	r6, #3
 800b6be:	4da2      	ldr	r5, [pc, #648]	@ (800b948 <_dtoa_r+0x5c0>)
 800b6c0:	b954      	cbnz	r4, 800b6d8 <_dtoa_r+0x350>
 800b6c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ca:	f7f5 f8c7 	bl	800085c <__aeabi_ddiv>
 800b6ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6d2:	e028      	b.n	800b726 <_dtoa_r+0x39e>
 800b6d4:	2602      	movs	r6, #2
 800b6d6:	e7f2      	b.n	800b6be <_dtoa_r+0x336>
 800b6d8:	07e1      	lsls	r1, r4, #31
 800b6da:	d508      	bpl.n	800b6ee <_dtoa_r+0x366>
 800b6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6e4:	f7f4 ff90 	bl	8000608 <__aeabi_dmul>
 800b6e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	1064      	asrs	r4, r4, #1
 800b6f0:	3508      	adds	r5, #8
 800b6f2:	e7e5      	b.n	800b6c0 <_dtoa_r+0x338>
 800b6f4:	f000 80d2 	beq.w	800b89c <_dtoa_r+0x514>
 800b6f8:	427c      	negs	r4, r7
 800b6fa:	4b92      	ldr	r3, [pc, #584]	@ (800b944 <_dtoa_r+0x5bc>)
 800b6fc:	4d92      	ldr	r5, [pc, #584]	@ (800b948 <_dtoa_r+0x5c0>)
 800b6fe:	f004 020f 	and.w	r2, r4, #15
 800b702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b70e:	f7f4 ff7b 	bl	8000608 <__aeabi_dmul>
 800b712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b716:	1124      	asrs	r4, r4, #4
 800b718:	2300      	movs	r3, #0
 800b71a:	2602      	movs	r6, #2
 800b71c:	2c00      	cmp	r4, #0
 800b71e:	f040 80b2 	bne.w	800b886 <_dtoa_r+0x4fe>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1d3      	bne.n	800b6ce <_dtoa_r+0x346>
 800b726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b728:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 80b7 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b732:	4b86      	ldr	r3, [pc, #536]	@ (800b94c <_dtoa_r+0x5c4>)
 800b734:	2200      	movs	r2, #0
 800b736:	4620      	mov	r0, r4
 800b738:	4629      	mov	r1, r5
 800b73a:	f7f5 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800b73e:	2800      	cmp	r0, #0
 800b740:	f000 80ae 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b744:	9b07      	ldr	r3, [sp, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80aa 	beq.w	800b8a0 <_dtoa_r+0x518>
 800b74c:	9b00      	ldr	r3, [sp, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	dd37      	ble.n	800b7c2 <_dtoa_r+0x43a>
 800b752:	1e7b      	subs	r3, r7, #1
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	4620      	mov	r0, r4
 800b758:	4b7d      	ldr	r3, [pc, #500]	@ (800b950 <_dtoa_r+0x5c8>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	4629      	mov	r1, r5
 800b75e:	f7f4 ff53 	bl	8000608 <__aeabi_dmul>
 800b762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b766:	9c00      	ldr	r4, [sp, #0]
 800b768:	3601      	adds	r6, #1
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7f4 fee2 	bl	8000534 <__aeabi_i2d>
 800b770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b774:	f7f4 ff48 	bl	8000608 <__aeabi_dmul>
 800b778:	4b76      	ldr	r3, [pc, #472]	@ (800b954 <_dtoa_r+0x5cc>)
 800b77a:	2200      	movs	r2, #0
 800b77c:	f7f4 fd8e 	bl	800029c <__adddf3>
 800b780:	4605      	mov	r5, r0
 800b782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b786:	2c00      	cmp	r4, #0
 800b788:	f040 808d 	bne.w	800b8a6 <_dtoa_r+0x51e>
 800b78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b790:	4b71      	ldr	r3, [pc, #452]	@ (800b958 <_dtoa_r+0x5d0>)
 800b792:	2200      	movs	r2, #0
 800b794:	f7f4 fd80 	bl	8000298 <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4633      	mov	r3, r6
 800b7a4:	f7f5 f9c0 	bl	8000b28 <__aeabi_dcmpgt>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f040 828b 	bne.w	800bcc4 <_dtoa_r+0x93c>
 800b7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7b8:	f7f5 f998 	bl	8000aec <__aeabi_dcmplt>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	f040 8128 	bne.w	800ba12 <_dtoa_r+0x68a>
 800b7c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b7c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b7ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f2c0 815a 	blt.w	800ba86 <_dtoa_r+0x6fe>
 800b7d2:	2f0e      	cmp	r7, #14
 800b7d4:	f300 8157 	bgt.w	800ba86 <_dtoa_r+0x6fe>
 800b7d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b944 <_dtoa_r+0x5bc>)
 800b7da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7de:	ed93 7b00 	vldr	d7, [r3]
 800b7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	ed8d 7b00 	vstr	d7, [sp]
 800b7ea:	da03      	bge.n	800b7f4 <_dtoa_r+0x46c>
 800b7ec:	9b07      	ldr	r3, [sp, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f340 8101 	ble.w	800b9f6 <_dtoa_r+0x66e>
 800b7f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b7f8:	4656      	mov	r6, sl
 800b7fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7fe:	4620      	mov	r0, r4
 800b800:	4629      	mov	r1, r5
 800b802:	f7f5 f82b 	bl	800085c <__aeabi_ddiv>
 800b806:	f7f5 f9af 	bl	8000b68 <__aeabi_d2iz>
 800b80a:	4680      	mov	r8, r0
 800b80c:	f7f4 fe92 	bl	8000534 <__aeabi_i2d>
 800b810:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b814:	f7f4 fef8 	bl	8000608 <__aeabi_dmul>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4620      	mov	r0, r4
 800b81e:	4629      	mov	r1, r5
 800b820:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b824:	f7f4 fd38 	bl	8000298 <__aeabi_dsub>
 800b828:	f806 4b01 	strb.w	r4, [r6], #1
 800b82c:	9d07      	ldr	r5, [sp, #28]
 800b82e:	eba6 040a 	sub.w	r4, r6, sl
 800b832:	42a5      	cmp	r5, r4
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	f040 8117 	bne.w	800ba6a <_dtoa_r+0x6e2>
 800b83c:	f7f4 fd2e 	bl	800029c <__adddf3>
 800b840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	f7f5 f96e 	bl	8000b28 <__aeabi_dcmpgt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 80f9 	bne.w	800ba44 <_dtoa_r+0x6bc>
 800b852:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f5 f93d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b85e:	b118      	cbz	r0, 800b868 <_dtoa_r+0x4e0>
 800b860:	f018 0f01 	tst.w	r8, #1
 800b864:	f040 80ee 	bne.w	800ba44 <_dtoa_r+0x6bc>
 800b868:	4649      	mov	r1, r9
 800b86a:	4658      	mov	r0, fp
 800b86c:	f000 fc90 	bl	800c190 <_Bfree>
 800b870:	2300      	movs	r3, #0
 800b872:	7033      	strb	r3, [r6, #0]
 800b874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b876:	3701      	adds	r7, #1
 800b878:	601f      	str	r7, [r3, #0]
 800b87a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 831d 	beq.w	800bebc <_dtoa_r+0xb34>
 800b882:	601e      	str	r6, [r3, #0]
 800b884:	e31a      	b.n	800bebc <_dtoa_r+0xb34>
 800b886:	07e2      	lsls	r2, r4, #31
 800b888:	d505      	bpl.n	800b896 <_dtoa_r+0x50e>
 800b88a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b88e:	f7f4 febb 	bl	8000608 <__aeabi_dmul>
 800b892:	3601      	adds	r6, #1
 800b894:	2301      	movs	r3, #1
 800b896:	1064      	asrs	r4, r4, #1
 800b898:	3508      	adds	r5, #8
 800b89a:	e73f      	b.n	800b71c <_dtoa_r+0x394>
 800b89c:	2602      	movs	r6, #2
 800b89e:	e742      	b.n	800b726 <_dtoa_r+0x39e>
 800b8a0:	9c07      	ldr	r4, [sp, #28]
 800b8a2:	9704      	str	r7, [sp, #16]
 800b8a4:	e761      	b.n	800b76a <_dtoa_r+0x3e2>
 800b8a6:	4b27      	ldr	r3, [pc, #156]	@ (800b944 <_dtoa_r+0x5bc>)
 800b8a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8b2:	4454      	add	r4, sl
 800b8b4:	2900      	cmp	r1, #0
 800b8b6:	d053      	beq.n	800b960 <_dtoa_r+0x5d8>
 800b8b8:	4928      	ldr	r1, [pc, #160]	@ (800b95c <_dtoa_r+0x5d4>)
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	f7f4 ffce 	bl	800085c <__aeabi_ddiv>
 800b8c0:	4633      	mov	r3, r6
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	f7f4 fce8 	bl	8000298 <__aeabi_dsub>
 800b8c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8cc:	4656      	mov	r6, sl
 800b8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d2:	f7f5 f949 	bl	8000b68 <__aeabi_d2iz>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	f7f4 fe2c 	bl	8000534 <__aeabi_i2d>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e4:	f7f4 fcd8 	bl	8000298 <__aeabi_dsub>
 800b8e8:	3530      	adds	r5, #48	@ 0x30
 800b8ea:	4602      	mov	r2, r0
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b8f2:	f806 5b01 	strb.w	r5, [r6], #1
 800b8f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b8fa:	f7f5 f8f7 	bl	8000aec <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d171      	bne.n	800b9e6 <_dtoa_r+0x65e>
 800b902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b906:	4911      	ldr	r1, [pc, #68]	@ (800b94c <_dtoa_r+0x5c4>)
 800b908:	2000      	movs	r0, #0
 800b90a:	f7f4 fcc5 	bl	8000298 <__aeabi_dsub>
 800b90e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b912:	f7f5 f8eb 	bl	8000aec <__aeabi_dcmplt>
 800b916:	2800      	cmp	r0, #0
 800b918:	f040 8095 	bne.w	800ba46 <_dtoa_r+0x6be>
 800b91c:	42a6      	cmp	r6, r4
 800b91e:	f43f af50 	beq.w	800b7c2 <_dtoa_r+0x43a>
 800b922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b926:	4b0a      	ldr	r3, [pc, #40]	@ (800b950 <_dtoa_r+0x5c8>)
 800b928:	2200      	movs	r2, #0
 800b92a:	f7f4 fe6d 	bl	8000608 <__aeabi_dmul>
 800b92e:	4b08      	ldr	r3, [pc, #32]	@ (800b950 <_dtoa_r+0x5c8>)
 800b930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b934:	2200      	movs	r2, #0
 800b936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b93a:	f7f4 fe65 	bl	8000608 <__aeabi_dmul>
 800b93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b942:	e7c4      	b.n	800b8ce <_dtoa_r+0x546>
 800b944:	0800e820 	.word	0x0800e820
 800b948:	0800e7f8 	.word	0x0800e7f8
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	40240000 	.word	0x40240000
 800b954:	401c0000 	.word	0x401c0000
 800b958:	40140000 	.word	0x40140000
 800b95c:	3fe00000 	.word	0x3fe00000
 800b960:	4631      	mov	r1, r6
 800b962:	4628      	mov	r0, r5
 800b964:	f7f4 fe50 	bl	8000608 <__aeabi_dmul>
 800b968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b96c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b96e:	4656      	mov	r6, sl
 800b970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b974:	f7f5 f8f8 	bl	8000b68 <__aeabi_d2iz>
 800b978:	4605      	mov	r5, r0
 800b97a:	f7f4 fddb 	bl	8000534 <__aeabi_i2d>
 800b97e:	4602      	mov	r2, r0
 800b980:	460b      	mov	r3, r1
 800b982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b986:	f7f4 fc87 	bl	8000298 <__aeabi_dsub>
 800b98a:	3530      	adds	r5, #48	@ 0x30
 800b98c:	f806 5b01 	strb.w	r5, [r6], #1
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	42a6      	cmp	r6, r4
 800b996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b99a:	f04f 0200 	mov.w	r2, #0
 800b99e:	d124      	bne.n	800b9ea <_dtoa_r+0x662>
 800b9a0:	4bac      	ldr	r3, [pc, #688]	@ (800bc54 <_dtoa_r+0x8cc>)
 800b9a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9a6:	f7f4 fc79 	bl	800029c <__adddf3>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b2:	f7f5 f8b9 	bl	8000b28 <__aeabi_dcmpgt>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d145      	bne.n	800ba46 <_dtoa_r+0x6be>
 800b9ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9be:	49a5      	ldr	r1, [pc, #660]	@ (800bc54 <_dtoa_r+0x8cc>)
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f7f4 fc69 	bl	8000298 <__aeabi_dsub>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ce:	f7f5 f88d 	bl	8000aec <__aeabi_dcmplt>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	f43f aef5 	beq.w	800b7c2 <_dtoa_r+0x43a>
 800b9d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b9da:	1e73      	subs	r3, r6, #1
 800b9dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b9e2:	2b30      	cmp	r3, #48	@ 0x30
 800b9e4:	d0f8      	beq.n	800b9d8 <_dtoa_r+0x650>
 800b9e6:	9f04      	ldr	r7, [sp, #16]
 800b9e8:	e73e      	b.n	800b868 <_dtoa_r+0x4e0>
 800b9ea:	4b9b      	ldr	r3, [pc, #620]	@ (800bc58 <_dtoa_r+0x8d0>)
 800b9ec:	f7f4 fe0c 	bl	8000608 <__aeabi_dmul>
 800b9f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9f4:	e7bc      	b.n	800b970 <_dtoa_r+0x5e8>
 800b9f6:	d10c      	bne.n	800ba12 <_dtoa_r+0x68a>
 800b9f8:	4b98      	ldr	r3, [pc, #608]	@ (800bc5c <_dtoa_r+0x8d4>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba00:	f7f4 fe02 	bl	8000608 <__aeabi_dmul>
 800ba04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba08:	f7f5 f884 	bl	8000b14 <__aeabi_dcmpge>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f000 8157 	beq.w	800bcc0 <_dtoa_r+0x938>
 800ba12:	2400      	movs	r4, #0
 800ba14:	4625      	mov	r5, r4
 800ba16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	4656      	mov	r6, sl
 800ba1e:	2700      	movs	r7, #0
 800ba20:	4621      	mov	r1, r4
 800ba22:	4658      	mov	r0, fp
 800ba24:	f000 fbb4 	bl	800c190 <_Bfree>
 800ba28:	2d00      	cmp	r5, #0
 800ba2a:	d0dc      	beq.n	800b9e6 <_dtoa_r+0x65e>
 800ba2c:	b12f      	cbz	r7, 800ba3a <_dtoa_r+0x6b2>
 800ba2e:	42af      	cmp	r7, r5
 800ba30:	d003      	beq.n	800ba3a <_dtoa_r+0x6b2>
 800ba32:	4639      	mov	r1, r7
 800ba34:	4658      	mov	r0, fp
 800ba36:	f000 fbab 	bl	800c190 <_Bfree>
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4658      	mov	r0, fp
 800ba3e:	f000 fba7 	bl	800c190 <_Bfree>
 800ba42:	e7d0      	b.n	800b9e6 <_dtoa_r+0x65e>
 800ba44:	9704      	str	r7, [sp, #16]
 800ba46:	4633      	mov	r3, r6
 800ba48:	461e      	mov	r6, r3
 800ba4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba4e:	2a39      	cmp	r2, #57	@ 0x39
 800ba50:	d107      	bne.n	800ba62 <_dtoa_r+0x6da>
 800ba52:	459a      	cmp	sl, r3
 800ba54:	d1f8      	bne.n	800ba48 <_dtoa_r+0x6c0>
 800ba56:	9a04      	ldr	r2, [sp, #16]
 800ba58:	3201      	adds	r2, #1
 800ba5a:	9204      	str	r2, [sp, #16]
 800ba5c:	2230      	movs	r2, #48	@ 0x30
 800ba5e:	f88a 2000 	strb.w	r2, [sl]
 800ba62:	781a      	ldrb	r2, [r3, #0]
 800ba64:	3201      	adds	r2, #1
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	e7bd      	b.n	800b9e6 <_dtoa_r+0x65e>
 800ba6a:	4b7b      	ldr	r3, [pc, #492]	@ (800bc58 <_dtoa_r+0x8d0>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f7f4 fdcb 	bl	8000608 <__aeabi_dmul>
 800ba72:	2200      	movs	r2, #0
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	f7f5 f82d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f43f aebb 	beq.w	800b7fa <_dtoa_r+0x472>
 800ba84:	e6f0      	b.n	800b868 <_dtoa_r+0x4e0>
 800ba86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	f000 80db 	beq.w	800bc44 <_dtoa_r+0x8bc>
 800ba8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba90:	2a01      	cmp	r2, #1
 800ba92:	f300 80bf 	bgt.w	800bc14 <_dtoa_r+0x88c>
 800ba96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	f000 80b7 	beq.w	800bc0c <_dtoa_r+0x884>
 800ba9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800baa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800baa4:	4646      	mov	r6, r8
 800baa6:	9a08      	ldr	r2, [sp, #32]
 800baa8:	2101      	movs	r1, #1
 800baaa:	441a      	add	r2, r3
 800baac:	4658      	mov	r0, fp
 800baae:	4498      	add	r8, r3
 800bab0:	9208      	str	r2, [sp, #32]
 800bab2:	f000 fc6b 	bl	800c38c <__i2b>
 800bab6:	4605      	mov	r5, r0
 800bab8:	b15e      	cbz	r6, 800bad2 <_dtoa_r+0x74a>
 800baba:	9b08      	ldr	r3, [sp, #32]
 800babc:	2b00      	cmp	r3, #0
 800babe:	dd08      	ble.n	800bad2 <_dtoa_r+0x74a>
 800bac0:	42b3      	cmp	r3, r6
 800bac2:	9a08      	ldr	r2, [sp, #32]
 800bac4:	bfa8      	it	ge
 800bac6:	4633      	movge	r3, r6
 800bac8:	eba8 0803 	sub.w	r8, r8, r3
 800bacc:	1af6      	subs	r6, r6, r3
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	9308      	str	r3, [sp, #32]
 800bad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bad4:	b1f3      	cbz	r3, 800bb14 <_dtoa_r+0x78c>
 800bad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80b7 	beq.w	800bc4c <_dtoa_r+0x8c4>
 800bade:	b18c      	cbz	r4, 800bb04 <_dtoa_r+0x77c>
 800bae0:	4629      	mov	r1, r5
 800bae2:	4622      	mov	r2, r4
 800bae4:	4658      	mov	r0, fp
 800bae6:	f000 fd11 	bl	800c50c <__pow5mult>
 800baea:	464a      	mov	r2, r9
 800baec:	4601      	mov	r1, r0
 800baee:	4605      	mov	r5, r0
 800baf0:	4658      	mov	r0, fp
 800baf2:	f000 fc61 	bl	800c3b8 <__multiply>
 800baf6:	4649      	mov	r1, r9
 800baf8:	9004      	str	r0, [sp, #16]
 800bafa:	4658      	mov	r0, fp
 800bafc:	f000 fb48 	bl	800c190 <_Bfree>
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	4699      	mov	r9, r3
 800bb04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb06:	1b1a      	subs	r2, r3, r4
 800bb08:	d004      	beq.n	800bb14 <_dtoa_r+0x78c>
 800bb0a:	4649      	mov	r1, r9
 800bb0c:	4658      	mov	r0, fp
 800bb0e:	f000 fcfd 	bl	800c50c <__pow5mult>
 800bb12:	4681      	mov	r9, r0
 800bb14:	2101      	movs	r1, #1
 800bb16:	4658      	mov	r0, fp
 800bb18:	f000 fc38 	bl	800c38c <__i2b>
 800bb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb1e:	4604      	mov	r4, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 81cf 	beq.w	800bec4 <_dtoa_r+0xb3c>
 800bb26:	461a      	mov	r2, r3
 800bb28:	4601      	mov	r1, r0
 800bb2a:	4658      	mov	r0, fp
 800bb2c:	f000 fcee 	bl	800c50c <__pow5mult>
 800bb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	4604      	mov	r4, r0
 800bb36:	f300 8095 	bgt.w	800bc64 <_dtoa_r+0x8dc>
 800bb3a:	9b02      	ldr	r3, [sp, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 8087 	bne.w	800bc50 <_dtoa_r+0x8c8>
 800bb42:	9b03      	ldr	r3, [sp, #12]
 800bb44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f040 8089 	bne.w	800bc60 <_dtoa_r+0x8d8>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb54:	0d1b      	lsrs	r3, r3, #20
 800bb56:	051b      	lsls	r3, r3, #20
 800bb58:	b12b      	cbz	r3, 800bb66 <_dtoa_r+0x7de>
 800bb5a:	9b08      	ldr	r3, [sp, #32]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	9308      	str	r3, [sp, #32]
 800bb60:	f108 0801 	add.w	r8, r8, #1
 800bb64:	2301      	movs	r3, #1
 800bb66:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 81b0 	beq.w	800bed0 <_dtoa_r+0xb48>
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb76:	6918      	ldr	r0, [r3, #16]
 800bb78:	f000 fbbc 	bl	800c2f4 <__hi0bits>
 800bb7c:	f1c0 0020 	rsb	r0, r0, #32
 800bb80:	9b08      	ldr	r3, [sp, #32]
 800bb82:	4418      	add	r0, r3
 800bb84:	f010 001f 	ands.w	r0, r0, #31
 800bb88:	d077      	beq.n	800bc7a <_dtoa_r+0x8f2>
 800bb8a:	f1c0 0320 	rsb	r3, r0, #32
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	dd6b      	ble.n	800bc6a <_dtoa_r+0x8e2>
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	f1c0 001c 	rsb	r0, r0, #28
 800bb98:	4403      	add	r3, r0
 800bb9a:	4480      	add	r8, r0
 800bb9c:	4406      	add	r6, r0
 800bb9e:	9308      	str	r3, [sp, #32]
 800bba0:	f1b8 0f00 	cmp.w	r8, #0
 800bba4:	dd05      	ble.n	800bbb2 <_dtoa_r+0x82a>
 800bba6:	4649      	mov	r1, r9
 800bba8:	4642      	mov	r2, r8
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 fd08 	bl	800c5c0 <__lshift>
 800bbb0:	4681      	mov	r9, r0
 800bbb2:	9b08      	ldr	r3, [sp, #32]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dd05      	ble.n	800bbc4 <_dtoa_r+0x83c>
 800bbb8:	4621      	mov	r1, r4
 800bbba:	461a      	mov	r2, r3
 800bbbc:	4658      	mov	r0, fp
 800bbbe:	f000 fcff 	bl	800c5c0 <__lshift>
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d059      	beq.n	800bc7e <_dtoa_r+0x8f6>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4648      	mov	r0, r9
 800bbce:	f000 fd63 	bl	800c698 <__mcmp>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	da53      	bge.n	800bc7e <_dtoa_r+0x8f6>
 800bbd6:	1e7b      	subs	r3, r7, #1
 800bbd8:	9304      	str	r3, [sp, #16]
 800bbda:	4649      	mov	r1, r9
 800bbdc:	2300      	movs	r3, #0
 800bbde:	220a      	movs	r2, #10
 800bbe0:	4658      	mov	r0, fp
 800bbe2:	f000 faf7 	bl	800c1d4 <__multadd>
 800bbe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbe8:	4681      	mov	r9, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 8172 	beq.w	800bed4 <_dtoa_r+0xb4c>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	220a      	movs	r2, #10
 800bbf6:	4658      	mov	r0, fp
 800bbf8:	f000 faec 	bl	800c1d4 <__multadd>
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	4605      	mov	r5, r0
 800bc02:	dc67      	bgt.n	800bcd4 <_dtoa_r+0x94c>
 800bc04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	dc41      	bgt.n	800bc8e <_dtoa_r+0x906>
 800bc0a:	e063      	b.n	800bcd4 <_dtoa_r+0x94c>
 800bc0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc12:	e746      	b.n	800baa2 <_dtoa_r+0x71a>
 800bc14:	9b07      	ldr	r3, [sp, #28]
 800bc16:	1e5c      	subs	r4, r3, #1
 800bc18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	bfbf      	itttt	lt
 800bc1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc24:	1ae3      	sublt	r3, r4, r3
 800bc26:	bfb4      	ite	lt
 800bc28:	18d2      	addlt	r2, r2, r3
 800bc2a:	1b1c      	subge	r4, r3, r4
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	bfbc      	itt	lt
 800bc30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc32:	2400      	movlt	r4, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bfb5      	itete	lt
 800bc38:	eba8 0603 	sublt.w	r6, r8, r3
 800bc3c:	9b07      	ldrge	r3, [sp, #28]
 800bc3e:	2300      	movlt	r3, #0
 800bc40:	4646      	movge	r6, r8
 800bc42:	e730      	b.n	800baa6 <_dtoa_r+0x71e>
 800bc44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc48:	4646      	mov	r6, r8
 800bc4a:	e735      	b.n	800bab8 <_dtoa_r+0x730>
 800bc4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc4e:	e75c      	b.n	800bb0a <_dtoa_r+0x782>
 800bc50:	2300      	movs	r3, #0
 800bc52:	e788      	b.n	800bb66 <_dtoa_r+0x7de>
 800bc54:	3fe00000 	.word	0x3fe00000
 800bc58:	40240000 	.word	0x40240000
 800bc5c:	40140000 	.word	0x40140000
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	e780      	b.n	800bb66 <_dtoa_r+0x7de>
 800bc64:	2300      	movs	r3, #0
 800bc66:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc68:	e782      	b.n	800bb70 <_dtoa_r+0x7e8>
 800bc6a:	d099      	beq.n	800bba0 <_dtoa_r+0x818>
 800bc6c:	9a08      	ldr	r2, [sp, #32]
 800bc6e:	331c      	adds	r3, #28
 800bc70:	441a      	add	r2, r3
 800bc72:	4498      	add	r8, r3
 800bc74:	441e      	add	r6, r3
 800bc76:	9208      	str	r2, [sp, #32]
 800bc78:	e792      	b.n	800bba0 <_dtoa_r+0x818>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	e7f6      	b.n	800bc6c <_dtoa_r+0x8e4>
 800bc7e:	9b07      	ldr	r3, [sp, #28]
 800bc80:	9704      	str	r7, [sp, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	dc20      	bgt.n	800bcc8 <_dtoa_r+0x940>
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	dd1e      	ble.n	800bccc <_dtoa_r+0x944>
 800bc8e:	9b00      	ldr	r3, [sp, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f47f aec0 	bne.w	800ba16 <_dtoa_r+0x68e>
 800bc96:	4621      	mov	r1, r4
 800bc98:	2205      	movs	r2, #5
 800bc9a:	4658      	mov	r0, fp
 800bc9c:	f000 fa9a 	bl	800c1d4 <__multadd>
 800bca0:	4601      	mov	r1, r0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4648      	mov	r0, r9
 800bca6:	f000 fcf7 	bl	800c698 <__mcmp>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f77f aeb3 	ble.w	800ba16 <_dtoa_r+0x68e>
 800bcb0:	4656      	mov	r6, sl
 800bcb2:	2331      	movs	r3, #49	@ 0x31
 800bcb4:	f806 3b01 	strb.w	r3, [r6], #1
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	e6ae      	b.n	800ba1e <_dtoa_r+0x696>
 800bcc0:	9c07      	ldr	r4, [sp, #28]
 800bcc2:	9704      	str	r7, [sp, #16]
 800bcc4:	4625      	mov	r5, r4
 800bcc6:	e7f3      	b.n	800bcb0 <_dtoa_r+0x928>
 800bcc8:	9b07      	ldr	r3, [sp, #28]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 8104 	beq.w	800bedc <_dtoa_r+0xb54>
 800bcd4:	2e00      	cmp	r6, #0
 800bcd6:	dd05      	ble.n	800bce4 <_dtoa_r+0x95c>
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4632      	mov	r2, r6
 800bcdc:	4658      	mov	r0, fp
 800bcde:	f000 fc6f 	bl	800c5c0 <__lshift>
 800bce2:	4605      	mov	r5, r0
 800bce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d05a      	beq.n	800bda0 <_dtoa_r+0xa18>
 800bcea:	6869      	ldr	r1, [r5, #4]
 800bcec:	4658      	mov	r0, fp
 800bcee:	f000 fa0f 	bl	800c110 <_Balloc>
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	b928      	cbnz	r0, 800bd02 <_dtoa_r+0x97a>
 800bcf6:	4b84      	ldr	r3, [pc, #528]	@ (800bf08 <_dtoa_r+0xb80>)
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bcfe:	f7ff bb5a 	b.w	800b3b6 <_dtoa_r+0x2e>
 800bd02:	692a      	ldr	r2, [r5, #16]
 800bd04:	3202      	adds	r2, #2
 800bd06:	0092      	lsls	r2, r2, #2
 800bd08:	f105 010c 	add.w	r1, r5, #12
 800bd0c:	300c      	adds	r0, #12
 800bd0e:	f7ff fa9e 	bl	800b24e <memcpy>
 800bd12:	2201      	movs	r2, #1
 800bd14:	4631      	mov	r1, r6
 800bd16:	4658      	mov	r0, fp
 800bd18:	f000 fc52 	bl	800c5c0 <__lshift>
 800bd1c:	f10a 0301 	add.w	r3, sl, #1
 800bd20:	9307      	str	r3, [sp, #28]
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	4453      	add	r3, sl
 800bd26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	462f      	mov	r7, r5
 800bd30:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd32:	4605      	mov	r5, r0
 800bd34:	9b07      	ldr	r3, [sp, #28]
 800bd36:	4621      	mov	r1, r4
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	4648      	mov	r0, r9
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	f7ff fa9b 	bl	800b278 <quorem>
 800bd42:	4639      	mov	r1, r7
 800bd44:	9002      	str	r0, [sp, #8]
 800bd46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd4a:	4648      	mov	r0, r9
 800bd4c:	f000 fca4 	bl	800c698 <__mcmp>
 800bd50:	462a      	mov	r2, r5
 800bd52:	9008      	str	r0, [sp, #32]
 800bd54:	4621      	mov	r1, r4
 800bd56:	4658      	mov	r0, fp
 800bd58:	f000 fcba 	bl	800c6d0 <__mdiff>
 800bd5c:	68c2      	ldr	r2, [r0, #12]
 800bd5e:	4606      	mov	r6, r0
 800bd60:	bb02      	cbnz	r2, 800bda4 <_dtoa_r+0xa1c>
 800bd62:	4601      	mov	r1, r0
 800bd64:	4648      	mov	r0, r9
 800bd66:	f000 fc97 	bl	800c698 <__mcmp>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	4631      	mov	r1, r6
 800bd6e:	4658      	mov	r0, fp
 800bd70:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd72:	f000 fa0d 	bl	800c190 <_Bfree>
 800bd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd7a:	9e07      	ldr	r6, [sp, #28]
 800bd7c:	ea43 0102 	orr.w	r1, r3, r2
 800bd80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd82:	4319      	orrs	r1, r3
 800bd84:	d110      	bne.n	800bda8 <_dtoa_r+0xa20>
 800bd86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd8a:	d029      	beq.n	800bde0 <_dtoa_r+0xa58>
 800bd8c:	9b08      	ldr	r3, [sp, #32]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dd02      	ble.n	800bd98 <_dtoa_r+0xa10>
 800bd92:	9b02      	ldr	r3, [sp, #8]
 800bd94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd98:	9b00      	ldr	r3, [sp, #0]
 800bd9a:	f883 8000 	strb.w	r8, [r3]
 800bd9e:	e63f      	b.n	800ba20 <_dtoa_r+0x698>
 800bda0:	4628      	mov	r0, r5
 800bda2:	e7bb      	b.n	800bd1c <_dtoa_r+0x994>
 800bda4:	2201      	movs	r2, #1
 800bda6:	e7e1      	b.n	800bd6c <_dtoa_r+0x9e4>
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	db04      	blt.n	800bdb8 <_dtoa_r+0xa30>
 800bdae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdb4:	430b      	orrs	r3, r1
 800bdb6:	d120      	bne.n	800bdfa <_dtoa_r+0xa72>
 800bdb8:	2a00      	cmp	r2, #0
 800bdba:	dded      	ble.n	800bd98 <_dtoa_r+0xa10>
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	4658      	mov	r0, fp
 800bdc2:	f000 fbfd 	bl	800c5c0 <__lshift>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4681      	mov	r9, r0
 800bdca:	f000 fc65 	bl	800c698 <__mcmp>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	dc03      	bgt.n	800bdda <_dtoa_r+0xa52>
 800bdd2:	d1e1      	bne.n	800bd98 <_dtoa_r+0xa10>
 800bdd4:	f018 0f01 	tst.w	r8, #1
 800bdd8:	d0de      	beq.n	800bd98 <_dtoa_r+0xa10>
 800bdda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdde:	d1d8      	bne.n	800bd92 <_dtoa_r+0xa0a>
 800bde0:	9a00      	ldr	r2, [sp, #0]
 800bde2:	2339      	movs	r3, #57	@ 0x39
 800bde4:	7013      	strb	r3, [r2, #0]
 800bde6:	4633      	mov	r3, r6
 800bde8:	461e      	mov	r6, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bdf0:	2a39      	cmp	r2, #57	@ 0x39
 800bdf2:	d052      	beq.n	800be9a <_dtoa_r+0xb12>
 800bdf4:	3201      	adds	r2, #1
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e612      	b.n	800ba20 <_dtoa_r+0x698>
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	dd07      	ble.n	800be0e <_dtoa_r+0xa86>
 800bdfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be02:	d0ed      	beq.n	800bde0 <_dtoa_r+0xa58>
 800be04:	9a00      	ldr	r2, [sp, #0]
 800be06:	f108 0301 	add.w	r3, r8, #1
 800be0a:	7013      	strb	r3, [r2, #0]
 800be0c:	e608      	b.n	800ba20 <_dtoa_r+0x698>
 800be0e:	9b07      	ldr	r3, [sp, #28]
 800be10:	9a07      	ldr	r2, [sp, #28]
 800be12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be18:	4293      	cmp	r3, r2
 800be1a:	d028      	beq.n	800be6e <_dtoa_r+0xae6>
 800be1c:	4649      	mov	r1, r9
 800be1e:	2300      	movs	r3, #0
 800be20:	220a      	movs	r2, #10
 800be22:	4658      	mov	r0, fp
 800be24:	f000 f9d6 	bl	800c1d4 <__multadd>
 800be28:	42af      	cmp	r7, r5
 800be2a:	4681      	mov	r9, r0
 800be2c:	f04f 0300 	mov.w	r3, #0
 800be30:	f04f 020a 	mov.w	r2, #10
 800be34:	4639      	mov	r1, r7
 800be36:	4658      	mov	r0, fp
 800be38:	d107      	bne.n	800be4a <_dtoa_r+0xac2>
 800be3a:	f000 f9cb 	bl	800c1d4 <__multadd>
 800be3e:	4607      	mov	r7, r0
 800be40:	4605      	mov	r5, r0
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	3301      	adds	r3, #1
 800be46:	9307      	str	r3, [sp, #28]
 800be48:	e774      	b.n	800bd34 <_dtoa_r+0x9ac>
 800be4a:	f000 f9c3 	bl	800c1d4 <__multadd>
 800be4e:	4629      	mov	r1, r5
 800be50:	4607      	mov	r7, r0
 800be52:	2300      	movs	r3, #0
 800be54:	220a      	movs	r2, #10
 800be56:	4658      	mov	r0, fp
 800be58:	f000 f9bc 	bl	800c1d4 <__multadd>
 800be5c:	4605      	mov	r5, r0
 800be5e:	e7f0      	b.n	800be42 <_dtoa_r+0xaba>
 800be60:	9b00      	ldr	r3, [sp, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	bfcc      	ite	gt
 800be66:	461e      	movgt	r6, r3
 800be68:	2601      	movle	r6, #1
 800be6a:	4456      	add	r6, sl
 800be6c:	2700      	movs	r7, #0
 800be6e:	4649      	mov	r1, r9
 800be70:	2201      	movs	r2, #1
 800be72:	4658      	mov	r0, fp
 800be74:	f000 fba4 	bl	800c5c0 <__lshift>
 800be78:	4621      	mov	r1, r4
 800be7a:	4681      	mov	r9, r0
 800be7c:	f000 fc0c 	bl	800c698 <__mcmp>
 800be80:	2800      	cmp	r0, #0
 800be82:	dcb0      	bgt.n	800bde6 <_dtoa_r+0xa5e>
 800be84:	d102      	bne.n	800be8c <_dtoa_r+0xb04>
 800be86:	f018 0f01 	tst.w	r8, #1
 800be8a:	d1ac      	bne.n	800bde6 <_dtoa_r+0xa5e>
 800be8c:	4633      	mov	r3, r6
 800be8e:	461e      	mov	r6, r3
 800be90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be94:	2a30      	cmp	r2, #48	@ 0x30
 800be96:	d0fa      	beq.n	800be8e <_dtoa_r+0xb06>
 800be98:	e5c2      	b.n	800ba20 <_dtoa_r+0x698>
 800be9a:	459a      	cmp	sl, r3
 800be9c:	d1a4      	bne.n	800bde8 <_dtoa_r+0xa60>
 800be9e:	9b04      	ldr	r3, [sp, #16]
 800bea0:	3301      	adds	r3, #1
 800bea2:	9304      	str	r3, [sp, #16]
 800bea4:	2331      	movs	r3, #49	@ 0x31
 800bea6:	f88a 3000 	strb.w	r3, [sl]
 800beaa:	e5b9      	b.n	800ba20 <_dtoa_r+0x698>
 800beac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800beae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf0c <_dtoa_r+0xb84>
 800beb2:	b11b      	cbz	r3, 800bebc <_dtoa_r+0xb34>
 800beb4:	f10a 0308 	add.w	r3, sl, #8
 800beb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	4650      	mov	r0, sl
 800bebe:	b019      	add	sp, #100	@ 0x64
 800bec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	f77f ae37 	ble.w	800bb3a <_dtoa_r+0x7b2>
 800becc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bece:	930a      	str	r3, [sp, #40]	@ 0x28
 800bed0:	2001      	movs	r0, #1
 800bed2:	e655      	b.n	800bb80 <_dtoa_r+0x7f8>
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f77f aed6 	ble.w	800bc88 <_dtoa_r+0x900>
 800bedc:	4656      	mov	r6, sl
 800bede:	4621      	mov	r1, r4
 800bee0:	4648      	mov	r0, r9
 800bee2:	f7ff f9c9 	bl	800b278 <quorem>
 800bee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800beea:	f806 8b01 	strb.w	r8, [r6], #1
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	eba6 020a 	sub.w	r2, r6, sl
 800bef4:	4293      	cmp	r3, r2
 800bef6:	ddb3      	ble.n	800be60 <_dtoa_r+0xad8>
 800bef8:	4649      	mov	r1, r9
 800befa:	2300      	movs	r3, #0
 800befc:	220a      	movs	r2, #10
 800befe:	4658      	mov	r0, fp
 800bf00:	f000 f968 	bl	800c1d4 <__multadd>
 800bf04:	4681      	mov	r9, r0
 800bf06:	e7ea      	b.n	800bede <_dtoa_r+0xb56>
 800bf08:	0800e781 	.word	0x0800e781
 800bf0c:	0800e705 	.word	0x0800e705

0800bf10 <_free_r>:
 800bf10:	b538      	push	{r3, r4, r5, lr}
 800bf12:	4605      	mov	r5, r0
 800bf14:	2900      	cmp	r1, #0
 800bf16:	d041      	beq.n	800bf9c <_free_r+0x8c>
 800bf18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf1c:	1f0c      	subs	r4, r1, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bfb8      	it	lt
 800bf22:	18e4      	addlt	r4, r4, r3
 800bf24:	f000 f8e8 	bl	800c0f8 <__malloc_lock>
 800bf28:	4a1d      	ldr	r2, [pc, #116]	@ (800bfa0 <_free_r+0x90>)
 800bf2a:	6813      	ldr	r3, [r2, #0]
 800bf2c:	b933      	cbnz	r3, 800bf3c <_free_r+0x2c>
 800bf2e:	6063      	str	r3, [r4, #4]
 800bf30:	6014      	str	r4, [r2, #0]
 800bf32:	4628      	mov	r0, r5
 800bf34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf38:	f000 b8e4 	b.w	800c104 <__malloc_unlock>
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	d908      	bls.n	800bf52 <_free_r+0x42>
 800bf40:	6820      	ldr	r0, [r4, #0]
 800bf42:	1821      	adds	r1, r4, r0
 800bf44:	428b      	cmp	r3, r1
 800bf46:	bf01      	itttt	eq
 800bf48:	6819      	ldreq	r1, [r3, #0]
 800bf4a:	685b      	ldreq	r3, [r3, #4]
 800bf4c:	1809      	addeq	r1, r1, r0
 800bf4e:	6021      	streq	r1, [r4, #0]
 800bf50:	e7ed      	b.n	800bf2e <_free_r+0x1e>
 800bf52:	461a      	mov	r2, r3
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	b10b      	cbz	r3, 800bf5c <_free_r+0x4c>
 800bf58:	42a3      	cmp	r3, r4
 800bf5a:	d9fa      	bls.n	800bf52 <_free_r+0x42>
 800bf5c:	6811      	ldr	r1, [r2, #0]
 800bf5e:	1850      	adds	r0, r2, r1
 800bf60:	42a0      	cmp	r0, r4
 800bf62:	d10b      	bne.n	800bf7c <_free_r+0x6c>
 800bf64:	6820      	ldr	r0, [r4, #0]
 800bf66:	4401      	add	r1, r0
 800bf68:	1850      	adds	r0, r2, r1
 800bf6a:	4283      	cmp	r3, r0
 800bf6c:	6011      	str	r1, [r2, #0]
 800bf6e:	d1e0      	bne.n	800bf32 <_free_r+0x22>
 800bf70:	6818      	ldr	r0, [r3, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	6053      	str	r3, [r2, #4]
 800bf76:	4408      	add	r0, r1
 800bf78:	6010      	str	r0, [r2, #0]
 800bf7a:	e7da      	b.n	800bf32 <_free_r+0x22>
 800bf7c:	d902      	bls.n	800bf84 <_free_r+0x74>
 800bf7e:	230c      	movs	r3, #12
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	e7d6      	b.n	800bf32 <_free_r+0x22>
 800bf84:	6820      	ldr	r0, [r4, #0]
 800bf86:	1821      	adds	r1, r4, r0
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	bf04      	itt	eq
 800bf8c:	6819      	ldreq	r1, [r3, #0]
 800bf8e:	685b      	ldreq	r3, [r3, #4]
 800bf90:	6063      	str	r3, [r4, #4]
 800bf92:	bf04      	itt	eq
 800bf94:	1809      	addeq	r1, r1, r0
 800bf96:	6021      	streq	r1, [r4, #0]
 800bf98:	6054      	str	r4, [r2, #4]
 800bf9a:	e7ca      	b.n	800bf32 <_free_r+0x22>
 800bf9c:	bd38      	pop	{r3, r4, r5, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000fc4 	.word	0x20000fc4

0800bfa4 <malloc>:
 800bfa4:	4b02      	ldr	r3, [pc, #8]	@ (800bfb0 <malloc+0xc>)
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	f000 b825 	b.w	800bff8 <_malloc_r>
 800bfae:	bf00      	nop
 800bfb0:	200002d8 	.word	0x200002d8

0800bfb4 <sbrk_aligned>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	4e0f      	ldr	r6, [pc, #60]	@ (800bff4 <sbrk_aligned+0x40>)
 800bfb8:	460c      	mov	r4, r1
 800bfba:	6831      	ldr	r1, [r6, #0]
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	b911      	cbnz	r1, 800bfc6 <sbrk_aligned+0x12>
 800bfc0:	f001 ff26 	bl	800de10 <_sbrk_r>
 800bfc4:	6030      	str	r0, [r6, #0]
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4628      	mov	r0, r5
 800bfca:	f001 ff21 	bl	800de10 <_sbrk_r>
 800bfce:	1c43      	adds	r3, r0, #1
 800bfd0:	d103      	bne.n	800bfda <sbrk_aligned+0x26>
 800bfd2:	f04f 34ff 	mov.w	r4, #4294967295
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
 800bfda:	1cc4      	adds	r4, r0, #3
 800bfdc:	f024 0403 	bic.w	r4, r4, #3
 800bfe0:	42a0      	cmp	r0, r4
 800bfe2:	d0f8      	beq.n	800bfd6 <sbrk_aligned+0x22>
 800bfe4:	1a21      	subs	r1, r4, r0
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	f001 ff12 	bl	800de10 <_sbrk_r>
 800bfec:	3001      	adds	r0, #1
 800bfee:	d1f2      	bne.n	800bfd6 <sbrk_aligned+0x22>
 800bff0:	e7ef      	b.n	800bfd2 <sbrk_aligned+0x1e>
 800bff2:	bf00      	nop
 800bff4:	20000fc0 	.word	0x20000fc0

0800bff8 <_malloc_r>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	1ccd      	adds	r5, r1, #3
 800bffe:	f025 0503 	bic.w	r5, r5, #3
 800c002:	3508      	adds	r5, #8
 800c004:	2d0c      	cmp	r5, #12
 800c006:	bf38      	it	cc
 800c008:	250c      	movcc	r5, #12
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	4606      	mov	r6, r0
 800c00e:	db01      	blt.n	800c014 <_malloc_r+0x1c>
 800c010:	42a9      	cmp	r1, r5
 800c012:	d904      	bls.n	800c01e <_malloc_r+0x26>
 800c014:	230c      	movs	r3, #12
 800c016:	6033      	str	r3, [r6, #0]
 800c018:	2000      	movs	r0, #0
 800c01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c01e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0f4 <_malloc_r+0xfc>
 800c022:	f000 f869 	bl	800c0f8 <__malloc_lock>
 800c026:	f8d8 3000 	ldr.w	r3, [r8]
 800c02a:	461c      	mov	r4, r3
 800c02c:	bb44      	cbnz	r4, 800c080 <_malloc_r+0x88>
 800c02e:	4629      	mov	r1, r5
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff ffbf 	bl	800bfb4 <sbrk_aligned>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	4604      	mov	r4, r0
 800c03a:	d158      	bne.n	800c0ee <_malloc_r+0xf6>
 800c03c:	f8d8 4000 	ldr.w	r4, [r8]
 800c040:	4627      	mov	r7, r4
 800c042:	2f00      	cmp	r7, #0
 800c044:	d143      	bne.n	800c0ce <_malloc_r+0xd6>
 800c046:	2c00      	cmp	r4, #0
 800c048:	d04b      	beq.n	800c0e2 <_malloc_r+0xea>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	4639      	mov	r1, r7
 800c04e:	4630      	mov	r0, r6
 800c050:	eb04 0903 	add.w	r9, r4, r3
 800c054:	f001 fedc 	bl	800de10 <_sbrk_r>
 800c058:	4581      	cmp	r9, r0
 800c05a:	d142      	bne.n	800c0e2 <_malloc_r+0xea>
 800c05c:	6821      	ldr	r1, [r4, #0]
 800c05e:	1a6d      	subs	r5, r5, r1
 800c060:	4629      	mov	r1, r5
 800c062:	4630      	mov	r0, r6
 800c064:	f7ff ffa6 	bl	800bfb4 <sbrk_aligned>
 800c068:	3001      	adds	r0, #1
 800c06a:	d03a      	beq.n	800c0e2 <_malloc_r+0xea>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	442b      	add	r3, r5
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	f8d8 3000 	ldr.w	r3, [r8]
 800c076:	685a      	ldr	r2, [r3, #4]
 800c078:	bb62      	cbnz	r2, 800c0d4 <_malloc_r+0xdc>
 800c07a:	f8c8 7000 	str.w	r7, [r8]
 800c07e:	e00f      	b.n	800c0a0 <_malloc_r+0xa8>
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	1b52      	subs	r2, r2, r5
 800c084:	d420      	bmi.n	800c0c8 <_malloc_r+0xd0>
 800c086:	2a0b      	cmp	r2, #11
 800c088:	d917      	bls.n	800c0ba <_malloc_r+0xc2>
 800c08a:	1961      	adds	r1, r4, r5
 800c08c:	42a3      	cmp	r3, r4
 800c08e:	6025      	str	r5, [r4, #0]
 800c090:	bf18      	it	ne
 800c092:	6059      	strne	r1, [r3, #4]
 800c094:	6863      	ldr	r3, [r4, #4]
 800c096:	bf08      	it	eq
 800c098:	f8c8 1000 	streq.w	r1, [r8]
 800c09c:	5162      	str	r2, [r4, r5]
 800c09e:	604b      	str	r3, [r1, #4]
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	f000 f82f 	bl	800c104 <__malloc_unlock>
 800c0a6:	f104 000b 	add.w	r0, r4, #11
 800c0aa:	1d23      	adds	r3, r4, #4
 800c0ac:	f020 0007 	bic.w	r0, r0, #7
 800c0b0:	1ac2      	subs	r2, r0, r3
 800c0b2:	bf1c      	itt	ne
 800c0b4:	1a1b      	subne	r3, r3, r0
 800c0b6:	50a3      	strne	r3, [r4, r2]
 800c0b8:	e7af      	b.n	800c01a <_malloc_r+0x22>
 800c0ba:	6862      	ldr	r2, [r4, #4]
 800c0bc:	42a3      	cmp	r3, r4
 800c0be:	bf0c      	ite	eq
 800c0c0:	f8c8 2000 	streq.w	r2, [r8]
 800c0c4:	605a      	strne	r2, [r3, #4]
 800c0c6:	e7eb      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0c8:	4623      	mov	r3, r4
 800c0ca:	6864      	ldr	r4, [r4, #4]
 800c0cc:	e7ae      	b.n	800c02c <_malloc_r+0x34>
 800c0ce:	463c      	mov	r4, r7
 800c0d0:	687f      	ldr	r7, [r7, #4]
 800c0d2:	e7b6      	b.n	800c042 <_malloc_r+0x4a>
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	42a3      	cmp	r3, r4
 800c0da:	d1fb      	bne.n	800c0d4 <_malloc_r+0xdc>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	6053      	str	r3, [r2, #4]
 800c0e0:	e7de      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0e2:	230c      	movs	r3, #12
 800c0e4:	6033      	str	r3, [r6, #0]
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f000 f80c 	bl	800c104 <__malloc_unlock>
 800c0ec:	e794      	b.n	800c018 <_malloc_r+0x20>
 800c0ee:	6005      	str	r5, [r0, #0]
 800c0f0:	e7d6      	b.n	800c0a0 <_malloc_r+0xa8>
 800c0f2:	bf00      	nop
 800c0f4:	20000fc4 	.word	0x20000fc4

0800c0f8 <__malloc_lock>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	@ (800c100 <__malloc_lock+0x8>)
 800c0fa:	f7ff b89e 	b.w	800b23a <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	20000fbc 	.word	0x20000fbc

0800c104 <__malloc_unlock>:
 800c104:	4801      	ldr	r0, [pc, #4]	@ (800c10c <__malloc_unlock+0x8>)
 800c106:	f7ff b899 	b.w	800b23c <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	20000fbc 	.word	0x20000fbc

0800c110 <_Balloc>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	69c6      	ldr	r6, [r0, #28]
 800c114:	4604      	mov	r4, r0
 800c116:	460d      	mov	r5, r1
 800c118:	b976      	cbnz	r6, 800c138 <_Balloc+0x28>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f7ff ff42 	bl	800bfa4 <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	61e0      	str	r0, [r4, #28]
 800c124:	b920      	cbnz	r0, 800c130 <_Balloc+0x20>
 800c126:	4b18      	ldr	r3, [pc, #96]	@ (800c188 <_Balloc+0x78>)
 800c128:	4818      	ldr	r0, [pc, #96]	@ (800c18c <_Balloc+0x7c>)
 800c12a:	216b      	movs	r1, #107	@ 0x6b
 800c12c:	f001 fe88 	bl	800de40 <__assert_func>
 800c130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c134:	6006      	str	r6, [r0, #0]
 800c136:	60c6      	str	r6, [r0, #12]
 800c138:	69e6      	ldr	r6, [r4, #28]
 800c13a:	68f3      	ldr	r3, [r6, #12]
 800c13c:	b183      	cbz	r3, 800c160 <_Balloc+0x50>
 800c13e:	69e3      	ldr	r3, [r4, #28]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c146:	b9b8      	cbnz	r0, 800c178 <_Balloc+0x68>
 800c148:	2101      	movs	r1, #1
 800c14a:	fa01 f605 	lsl.w	r6, r1, r5
 800c14e:	1d72      	adds	r2, r6, #5
 800c150:	0092      	lsls	r2, r2, #2
 800c152:	4620      	mov	r0, r4
 800c154:	f001 fe92 	bl	800de7c <_calloc_r>
 800c158:	b160      	cbz	r0, 800c174 <_Balloc+0x64>
 800c15a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c15e:	e00e      	b.n	800c17e <_Balloc+0x6e>
 800c160:	2221      	movs	r2, #33	@ 0x21
 800c162:	2104      	movs	r1, #4
 800c164:	4620      	mov	r0, r4
 800c166:	f001 fe89 	bl	800de7c <_calloc_r>
 800c16a:	69e3      	ldr	r3, [r4, #28]
 800c16c:	60f0      	str	r0, [r6, #12]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1e4      	bne.n	800c13e <_Balloc+0x2e>
 800c174:	2000      	movs	r0, #0
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	6802      	ldr	r2, [r0, #0]
 800c17a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c17e:	2300      	movs	r3, #0
 800c180:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c184:	e7f7      	b.n	800c176 <_Balloc+0x66>
 800c186:	bf00      	nop
 800c188:	0800e712 	.word	0x0800e712
 800c18c:	0800e792 	.word	0x0800e792

0800c190 <_Bfree>:
 800c190:	b570      	push	{r4, r5, r6, lr}
 800c192:	69c6      	ldr	r6, [r0, #28]
 800c194:	4605      	mov	r5, r0
 800c196:	460c      	mov	r4, r1
 800c198:	b976      	cbnz	r6, 800c1b8 <_Bfree+0x28>
 800c19a:	2010      	movs	r0, #16
 800c19c:	f7ff ff02 	bl	800bfa4 <malloc>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	61e8      	str	r0, [r5, #28]
 800c1a4:	b920      	cbnz	r0, 800c1b0 <_Bfree+0x20>
 800c1a6:	4b09      	ldr	r3, [pc, #36]	@ (800c1cc <_Bfree+0x3c>)
 800c1a8:	4809      	ldr	r0, [pc, #36]	@ (800c1d0 <_Bfree+0x40>)
 800c1aa:	218f      	movs	r1, #143	@ 0x8f
 800c1ac:	f001 fe48 	bl	800de40 <__assert_func>
 800c1b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1b4:	6006      	str	r6, [r0, #0]
 800c1b6:	60c6      	str	r6, [r0, #12]
 800c1b8:	b13c      	cbz	r4, 800c1ca <_Bfree+0x3a>
 800c1ba:	69eb      	ldr	r3, [r5, #28]
 800c1bc:	6862      	ldr	r2, [r4, #4]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1c4:	6021      	str	r1, [r4, #0]
 800c1c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}
 800c1cc:	0800e712 	.word	0x0800e712
 800c1d0:	0800e792 	.word	0x0800e792

0800c1d4 <__multadd>:
 800c1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d8:	690d      	ldr	r5, [r1, #16]
 800c1da:	4607      	mov	r7, r0
 800c1dc:	460c      	mov	r4, r1
 800c1de:	461e      	mov	r6, r3
 800c1e0:	f101 0c14 	add.w	ip, r1, #20
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c1ea:	b299      	uxth	r1, r3
 800c1ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c1f0:	0c1e      	lsrs	r6, r3, #16
 800c1f2:	0c0b      	lsrs	r3, r1, #16
 800c1f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c1f8:	b289      	uxth	r1, r1
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c200:	4285      	cmp	r5, r0
 800c202:	f84c 1b04 	str.w	r1, [ip], #4
 800c206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c20a:	dcec      	bgt.n	800c1e6 <__multadd+0x12>
 800c20c:	b30e      	cbz	r6, 800c252 <__multadd+0x7e>
 800c20e:	68a3      	ldr	r3, [r4, #8]
 800c210:	42ab      	cmp	r3, r5
 800c212:	dc19      	bgt.n	800c248 <__multadd+0x74>
 800c214:	6861      	ldr	r1, [r4, #4]
 800c216:	4638      	mov	r0, r7
 800c218:	3101      	adds	r1, #1
 800c21a:	f7ff ff79 	bl	800c110 <_Balloc>
 800c21e:	4680      	mov	r8, r0
 800c220:	b928      	cbnz	r0, 800c22e <__multadd+0x5a>
 800c222:	4602      	mov	r2, r0
 800c224:	4b0c      	ldr	r3, [pc, #48]	@ (800c258 <__multadd+0x84>)
 800c226:	480d      	ldr	r0, [pc, #52]	@ (800c25c <__multadd+0x88>)
 800c228:	21ba      	movs	r1, #186	@ 0xba
 800c22a:	f001 fe09 	bl	800de40 <__assert_func>
 800c22e:	6922      	ldr	r2, [r4, #16]
 800c230:	3202      	adds	r2, #2
 800c232:	f104 010c 	add.w	r1, r4, #12
 800c236:	0092      	lsls	r2, r2, #2
 800c238:	300c      	adds	r0, #12
 800c23a:	f7ff f808 	bl	800b24e <memcpy>
 800c23e:	4621      	mov	r1, r4
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ffa5 	bl	800c190 <_Bfree>
 800c246:	4644      	mov	r4, r8
 800c248:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c24c:	3501      	adds	r5, #1
 800c24e:	615e      	str	r6, [r3, #20]
 800c250:	6125      	str	r5, [r4, #16]
 800c252:	4620      	mov	r0, r4
 800c254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c258:	0800e781 	.word	0x0800e781
 800c25c:	0800e792 	.word	0x0800e792

0800c260 <__s2b>:
 800c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c264:	460c      	mov	r4, r1
 800c266:	4615      	mov	r5, r2
 800c268:	461f      	mov	r7, r3
 800c26a:	2209      	movs	r2, #9
 800c26c:	3308      	adds	r3, #8
 800c26e:	4606      	mov	r6, r0
 800c270:	fb93 f3f2 	sdiv	r3, r3, r2
 800c274:	2100      	movs	r1, #0
 800c276:	2201      	movs	r2, #1
 800c278:	429a      	cmp	r2, r3
 800c27a:	db09      	blt.n	800c290 <__s2b+0x30>
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ff47 	bl	800c110 <_Balloc>
 800c282:	b940      	cbnz	r0, 800c296 <__s2b+0x36>
 800c284:	4602      	mov	r2, r0
 800c286:	4b19      	ldr	r3, [pc, #100]	@ (800c2ec <__s2b+0x8c>)
 800c288:	4819      	ldr	r0, [pc, #100]	@ (800c2f0 <__s2b+0x90>)
 800c28a:	21d3      	movs	r1, #211	@ 0xd3
 800c28c:	f001 fdd8 	bl	800de40 <__assert_func>
 800c290:	0052      	lsls	r2, r2, #1
 800c292:	3101      	adds	r1, #1
 800c294:	e7f0      	b.n	800c278 <__s2b+0x18>
 800c296:	9b08      	ldr	r3, [sp, #32]
 800c298:	6143      	str	r3, [r0, #20]
 800c29a:	2d09      	cmp	r5, #9
 800c29c:	f04f 0301 	mov.w	r3, #1
 800c2a0:	6103      	str	r3, [r0, #16]
 800c2a2:	dd16      	ble.n	800c2d2 <__s2b+0x72>
 800c2a4:	f104 0909 	add.w	r9, r4, #9
 800c2a8:	46c8      	mov	r8, r9
 800c2aa:	442c      	add	r4, r5
 800c2ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2b0:	4601      	mov	r1, r0
 800c2b2:	3b30      	subs	r3, #48	@ 0x30
 800c2b4:	220a      	movs	r2, #10
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ff8c 	bl	800c1d4 <__multadd>
 800c2bc:	45a0      	cmp	r8, r4
 800c2be:	d1f5      	bne.n	800c2ac <__s2b+0x4c>
 800c2c0:	f1a5 0408 	sub.w	r4, r5, #8
 800c2c4:	444c      	add	r4, r9
 800c2c6:	1b2d      	subs	r5, r5, r4
 800c2c8:	1963      	adds	r3, r4, r5
 800c2ca:	42bb      	cmp	r3, r7
 800c2cc:	db04      	blt.n	800c2d8 <__s2b+0x78>
 800c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	340a      	adds	r4, #10
 800c2d4:	2509      	movs	r5, #9
 800c2d6:	e7f6      	b.n	800c2c6 <__s2b+0x66>
 800c2d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2dc:	4601      	mov	r1, r0
 800c2de:	3b30      	subs	r3, #48	@ 0x30
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	4630      	mov	r0, r6
 800c2e4:	f7ff ff76 	bl	800c1d4 <__multadd>
 800c2e8:	e7ee      	b.n	800c2c8 <__s2b+0x68>
 800c2ea:	bf00      	nop
 800c2ec:	0800e781 	.word	0x0800e781
 800c2f0:	0800e792 	.word	0x0800e792

0800c2f4 <__hi0bits>:
 800c2f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	bf36      	itet	cc
 800c2fc:	0403      	lslcc	r3, r0, #16
 800c2fe:	2000      	movcs	r0, #0
 800c300:	2010      	movcc	r0, #16
 800c302:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c306:	bf3c      	itt	cc
 800c308:	021b      	lslcc	r3, r3, #8
 800c30a:	3008      	addcc	r0, #8
 800c30c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c310:	bf3c      	itt	cc
 800c312:	011b      	lslcc	r3, r3, #4
 800c314:	3004      	addcc	r0, #4
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c31a:	bf3c      	itt	cc
 800c31c:	009b      	lslcc	r3, r3, #2
 800c31e:	3002      	addcc	r0, #2
 800c320:	2b00      	cmp	r3, #0
 800c322:	db05      	blt.n	800c330 <__hi0bits+0x3c>
 800c324:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c328:	f100 0001 	add.w	r0, r0, #1
 800c32c:	bf08      	it	eq
 800c32e:	2020      	moveq	r0, #32
 800c330:	4770      	bx	lr

0800c332 <__lo0bits>:
 800c332:	6803      	ldr	r3, [r0, #0]
 800c334:	4602      	mov	r2, r0
 800c336:	f013 0007 	ands.w	r0, r3, #7
 800c33a:	d00b      	beq.n	800c354 <__lo0bits+0x22>
 800c33c:	07d9      	lsls	r1, r3, #31
 800c33e:	d421      	bmi.n	800c384 <__lo0bits+0x52>
 800c340:	0798      	lsls	r0, r3, #30
 800c342:	bf49      	itett	mi
 800c344:	085b      	lsrmi	r3, r3, #1
 800c346:	089b      	lsrpl	r3, r3, #2
 800c348:	2001      	movmi	r0, #1
 800c34a:	6013      	strmi	r3, [r2, #0]
 800c34c:	bf5c      	itt	pl
 800c34e:	6013      	strpl	r3, [r2, #0]
 800c350:	2002      	movpl	r0, #2
 800c352:	4770      	bx	lr
 800c354:	b299      	uxth	r1, r3
 800c356:	b909      	cbnz	r1, 800c35c <__lo0bits+0x2a>
 800c358:	0c1b      	lsrs	r3, r3, #16
 800c35a:	2010      	movs	r0, #16
 800c35c:	b2d9      	uxtb	r1, r3
 800c35e:	b909      	cbnz	r1, 800c364 <__lo0bits+0x32>
 800c360:	3008      	adds	r0, #8
 800c362:	0a1b      	lsrs	r3, r3, #8
 800c364:	0719      	lsls	r1, r3, #28
 800c366:	bf04      	itt	eq
 800c368:	091b      	lsreq	r3, r3, #4
 800c36a:	3004      	addeq	r0, #4
 800c36c:	0799      	lsls	r1, r3, #30
 800c36e:	bf04      	itt	eq
 800c370:	089b      	lsreq	r3, r3, #2
 800c372:	3002      	addeq	r0, #2
 800c374:	07d9      	lsls	r1, r3, #31
 800c376:	d403      	bmi.n	800c380 <__lo0bits+0x4e>
 800c378:	085b      	lsrs	r3, r3, #1
 800c37a:	f100 0001 	add.w	r0, r0, #1
 800c37e:	d003      	beq.n	800c388 <__lo0bits+0x56>
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	4770      	bx	lr
 800c384:	2000      	movs	r0, #0
 800c386:	4770      	bx	lr
 800c388:	2020      	movs	r0, #32
 800c38a:	4770      	bx	lr

0800c38c <__i2b>:
 800c38c:	b510      	push	{r4, lr}
 800c38e:	460c      	mov	r4, r1
 800c390:	2101      	movs	r1, #1
 800c392:	f7ff febd 	bl	800c110 <_Balloc>
 800c396:	4602      	mov	r2, r0
 800c398:	b928      	cbnz	r0, 800c3a6 <__i2b+0x1a>
 800c39a:	4b05      	ldr	r3, [pc, #20]	@ (800c3b0 <__i2b+0x24>)
 800c39c:	4805      	ldr	r0, [pc, #20]	@ (800c3b4 <__i2b+0x28>)
 800c39e:	f240 1145 	movw	r1, #325	@ 0x145
 800c3a2:	f001 fd4d 	bl	800de40 <__assert_func>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	6144      	str	r4, [r0, #20]
 800c3aa:	6103      	str	r3, [r0, #16]
 800c3ac:	bd10      	pop	{r4, pc}
 800c3ae:	bf00      	nop
 800c3b0:	0800e781 	.word	0x0800e781
 800c3b4:	0800e792 	.word	0x0800e792

0800c3b8 <__multiply>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	4614      	mov	r4, r2
 800c3be:	690a      	ldr	r2, [r1, #16]
 800c3c0:	6923      	ldr	r3, [r4, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	bfa8      	it	ge
 800c3c6:	4623      	movge	r3, r4
 800c3c8:	460f      	mov	r7, r1
 800c3ca:	bfa4      	itt	ge
 800c3cc:	460c      	movge	r4, r1
 800c3ce:	461f      	movge	r7, r3
 800c3d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c3d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c3d8:	68a3      	ldr	r3, [r4, #8]
 800c3da:	6861      	ldr	r1, [r4, #4]
 800c3dc:	eb0a 0609 	add.w	r6, sl, r9
 800c3e0:	42b3      	cmp	r3, r6
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	bfb8      	it	lt
 800c3e6:	3101      	addlt	r1, #1
 800c3e8:	f7ff fe92 	bl	800c110 <_Balloc>
 800c3ec:	b930      	cbnz	r0, 800c3fc <__multiply+0x44>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4b44      	ldr	r3, [pc, #272]	@ (800c504 <__multiply+0x14c>)
 800c3f2:	4845      	ldr	r0, [pc, #276]	@ (800c508 <__multiply+0x150>)
 800c3f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c3f8:	f001 fd22 	bl	800de40 <__assert_func>
 800c3fc:	f100 0514 	add.w	r5, r0, #20
 800c400:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c404:	462b      	mov	r3, r5
 800c406:	2200      	movs	r2, #0
 800c408:	4543      	cmp	r3, r8
 800c40a:	d321      	bcc.n	800c450 <__multiply+0x98>
 800c40c:	f107 0114 	add.w	r1, r7, #20
 800c410:	f104 0214 	add.w	r2, r4, #20
 800c414:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c418:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c41c:	9302      	str	r3, [sp, #8]
 800c41e:	1b13      	subs	r3, r2, r4
 800c420:	3b15      	subs	r3, #21
 800c422:	f023 0303 	bic.w	r3, r3, #3
 800c426:	3304      	adds	r3, #4
 800c428:	f104 0715 	add.w	r7, r4, #21
 800c42c:	42ba      	cmp	r2, r7
 800c42e:	bf38      	it	cc
 800c430:	2304      	movcc	r3, #4
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	9b02      	ldr	r3, [sp, #8]
 800c436:	9103      	str	r1, [sp, #12]
 800c438:	428b      	cmp	r3, r1
 800c43a:	d80c      	bhi.n	800c456 <__multiply+0x9e>
 800c43c:	2e00      	cmp	r6, #0
 800c43e:	dd03      	ble.n	800c448 <__multiply+0x90>
 800c440:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c444:	2b00      	cmp	r3, #0
 800c446:	d05b      	beq.n	800c500 <__multiply+0x148>
 800c448:	6106      	str	r6, [r0, #16]
 800c44a:	b005      	add	sp, #20
 800c44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c450:	f843 2b04 	str.w	r2, [r3], #4
 800c454:	e7d8      	b.n	800c408 <__multiply+0x50>
 800c456:	f8b1 a000 	ldrh.w	sl, [r1]
 800c45a:	f1ba 0f00 	cmp.w	sl, #0
 800c45e:	d024      	beq.n	800c4aa <__multiply+0xf2>
 800c460:	f104 0e14 	add.w	lr, r4, #20
 800c464:	46a9      	mov	r9, r5
 800c466:	f04f 0c00 	mov.w	ip, #0
 800c46a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c46e:	f8d9 3000 	ldr.w	r3, [r9]
 800c472:	fa1f fb87 	uxth.w	fp, r7
 800c476:	b29b      	uxth	r3, r3
 800c478:	fb0a 330b 	mla	r3, sl, fp, r3
 800c47c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c480:	f8d9 7000 	ldr.w	r7, [r9]
 800c484:	4463      	add	r3, ip
 800c486:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c48a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c48e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c492:	b29b      	uxth	r3, r3
 800c494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c498:	4572      	cmp	r2, lr
 800c49a:	f849 3b04 	str.w	r3, [r9], #4
 800c49e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c4a2:	d8e2      	bhi.n	800c46a <__multiply+0xb2>
 800c4a4:	9b01      	ldr	r3, [sp, #4]
 800c4a6:	f845 c003 	str.w	ip, [r5, r3]
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c4b0:	3104      	adds	r1, #4
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	d021      	beq.n	800c4fc <__multiply+0x144>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	f104 0c14 	add.w	ip, r4, #20
 800c4be:	46ae      	mov	lr, r5
 800c4c0:	f04f 0a00 	mov.w	sl, #0
 800c4c4:	f8bc b000 	ldrh.w	fp, [ip]
 800c4c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c4cc:	fb09 770b 	mla	r7, r9, fp, r7
 800c4d0:	4457      	add	r7, sl
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c4d8:	f84e 3b04 	str.w	r3, [lr], #4
 800c4dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4e4:	f8be 3000 	ldrh.w	r3, [lr]
 800c4e8:	fb09 330a 	mla	r3, r9, sl, r3
 800c4ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c4f0:	4562      	cmp	r2, ip
 800c4f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c4f6:	d8e5      	bhi.n	800c4c4 <__multiply+0x10c>
 800c4f8:	9f01      	ldr	r7, [sp, #4]
 800c4fa:	51eb      	str	r3, [r5, r7]
 800c4fc:	3504      	adds	r5, #4
 800c4fe:	e799      	b.n	800c434 <__multiply+0x7c>
 800c500:	3e01      	subs	r6, #1
 800c502:	e79b      	b.n	800c43c <__multiply+0x84>
 800c504:	0800e781 	.word	0x0800e781
 800c508:	0800e792 	.word	0x0800e792

0800c50c <__pow5mult>:
 800c50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c510:	4615      	mov	r5, r2
 800c512:	f012 0203 	ands.w	r2, r2, #3
 800c516:	4607      	mov	r7, r0
 800c518:	460e      	mov	r6, r1
 800c51a:	d007      	beq.n	800c52c <__pow5mult+0x20>
 800c51c:	4c25      	ldr	r4, [pc, #148]	@ (800c5b4 <__pow5mult+0xa8>)
 800c51e:	3a01      	subs	r2, #1
 800c520:	2300      	movs	r3, #0
 800c522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c526:	f7ff fe55 	bl	800c1d4 <__multadd>
 800c52a:	4606      	mov	r6, r0
 800c52c:	10ad      	asrs	r5, r5, #2
 800c52e:	d03d      	beq.n	800c5ac <__pow5mult+0xa0>
 800c530:	69fc      	ldr	r4, [r7, #28]
 800c532:	b97c      	cbnz	r4, 800c554 <__pow5mult+0x48>
 800c534:	2010      	movs	r0, #16
 800c536:	f7ff fd35 	bl	800bfa4 <malloc>
 800c53a:	4602      	mov	r2, r0
 800c53c:	61f8      	str	r0, [r7, #28]
 800c53e:	b928      	cbnz	r0, 800c54c <__pow5mult+0x40>
 800c540:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b8 <__pow5mult+0xac>)
 800c542:	481e      	ldr	r0, [pc, #120]	@ (800c5bc <__pow5mult+0xb0>)
 800c544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c548:	f001 fc7a 	bl	800de40 <__assert_func>
 800c54c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c550:	6004      	str	r4, [r0, #0]
 800c552:	60c4      	str	r4, [r0, #12]
 800c554:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c558:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c55c:	b94c      	cbnz	r4, 800c572 <__pow5mult+0x66>
 800c55e:	f240 2171 	movw	r1, #625	@ 0x271
 800c562:	4638      	mov	r0, r7
 800c564:	f7ff ff12 	bl	800c38c <__i2b>
 800c568:	2300      	movs	r3, #0
 800c56a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c56e:	4604      	mov	r4, r0
 800c570:	6003      	str	r3, [r0, #0]
 800c572:	f04f 0900 	mov.w	r9, #0
 800c576:	07eb      	lsls	r3, r5, #31
 800c578:	d50a      	bpl.n	800c590 <__pow5mult+0x84>
 800c57a:	4631      	mov	r1, r6
 800c57c:	4622      	mov	r2, r4
 800c57e:	4638      	mov	r0, r7
 800c580:	f7ff ff1a 	bl	800c3b8 <__multiply>
 800c584:	4631      	mov	r1, r6
 800c586:	4680      	mov	r8, r0
 800c588:	4638      	mov	r0, r7
 800c58a:	f7ff fe01 	bl	800c190 <_Bfree>
 800c58e:	4646      	mov	r6, r8
 800c590:	106d      	asrs	r5, r5, #1
 800c592:	d00b      	beq.n	800c5ac <__pow5mult+0xa0>
 800c594:	6820      	ldr	r0, [r4, #0]
 800c596:	b938      	cbnz	r0, 800c5a8 <__pow5mult+0x9c>
 800c598:	4622      	mov	r2, r4
 800c59a:	4621      	mov	r1, r4
 800c59c:	4638      	mov	r0, r7
 800c59e:	f7ff ff0b 	bl	800c3b8 <__multiply>
 800c5a2:	6020      	str	r0, [r4, #0]
 800c5a4:	f8c0 9000 	str.w	r9, [r0]
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	e7e4      	b.n	800c576 <__pow5mult+0x6a>
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5b2:	bf00      	nop
 800c5b4:	0800e7ec 	.word	0x0800e7ec
 800c5b8:	0800e712 	.word	0x0800e712
 800c5bc:	0800e792 	.word	0x0800e792

0800c5c0 <__lshift>:
 800c5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	6849      	ldr	r1, [r1, #4]
 800c5c8:	6923      	ldr	r3, [r4, #16]
 800c5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	4607      	mov	r7, r0
 800c5d2:	4691      	mov	r9, r2
 800c5d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5d8:	f108 0601 	add.w	r6, r8, #1
 800c5dc:	42b3      	cmp	r3, r6
 800c5de:	db0b      	blt.n	800c5f8 <__lshift+0x38>
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff fd95 	bl	800c110 <_Balloc>
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	b948      	cbnz	r0, 800c5fe <__lshift+0x3e>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	4b28      	ldr	r3, [pc, #160]	@ (800c690 <__lshift+0xd0>)
 800c5ee:	4829      	ldr	r0, [pc, #164]	@ (800c694 <__lshift+0xd4>)
 800c5f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c5f4:	f001 fc24 	bl	800de40 <__assert_func>
 800c5f8:	3101      	adds	r1, #1
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	e7ee      	b.n	800c5dc <__lshift+0x1c>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f100 0114 	add.w	r1, r0, #20
 800c604:	f100 0210 	add.w	r2, r0, #16
 800c608:	4618      	mov	r0, r3
 800c60a:	4553      	cmp	r3, sl
 800c60c:	db33      	blt.n	800c676 <__lshift+0xb6>
 800c60e:	6920      	ldr	r0, [r4, #16]
 800c610:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c614:	f104 0314 	add.w	r3, r4, #20
 800c618:	f019 091f 	ands.w	r9, r9, #31
 800c61c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c620:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c624:	d02b      	beq.n	800c67e <__lshift+0xbe>
 800c626:	f1c9 0e20 	rsb	lr, r9, #32
 800c62a:	468a      	mov	sl, r1
 800c62c:	2200      	movs	r2, #0
 800c62e:	6818      	ldr	r0, [r3, #0]
 800c630:	fa00 f009 	lsl.w	r0, r0, r9
 800c634:	4310      	orrs	r0, r2
 800c636:	f84a 0b04 	str.w	r0, [sl], #4
 800c63a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63e:	459c      	cmp	ip, r3
 800c640:	fa22 f20e 	lsr.w	r2, r2, lr
 800c644:	d8f3      	bhi.n	800c62e <__lshift+0x6e>
 800c646:	ebac 0304 	sub.w	r3, ip, r4
 800c64a:	3b15      	subs	r3, #21
 800c64c:	f023 0303 	bic.w	r3, r3, #3
 800c650:	3304      	adds	r3, #4
 800c652:	f104 0015 	add.w	r0, r4, #21
 800c656:	4584      	cmp	ip, r0
 800c658:	bf38      	it	cc
 800c65a:	2304      	movcc	r3, #4
 800c65c:	50ca      	str	r2, [r1, r3]
 800c65e:	b10a      	cbz	r2, 800c664 <__lshift+0xa4>
 800c660:	f108 0602 	add.w	r6, r8, #2
 800c664:	3e01      	subs	r6, #1
 800c666:	4638      	mov	r0, r7
 800c668:	612e      	str	r6, [r5, #16]
 800c66a:	4621      	mov	r1, r4
 800c66c:	f7ff fd90 	bl	800c190 <_Bfree>
 800c670:	4628      	mov	r0, r5
 800c672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c676:	f842 0f04 	str.w	r0, [r2, #4]!
 800c67a:	3301      	adds	r3, #1
 800c67c:	e7c5      	b.n	800c60a <__lshift+0x4a>
 800c67e:	3904      	subs	r1, #4
 800c680:	f853 2b04 	ldr.w	r2, [r3], #4
 800c684:	f841 2f04 	str.w	r2, [r1, #4]!
 800c688:	459c      	cmp	ip, r3
 800c68a:	d8f9      	bhi.n	800c680 <__lshift+0xc0>
 800c68c:	e7ea      	b.n	800c664 <__lshift+0xa4>
 800c68e:	bf00      	nop
 800c690:	0800e781 	.word	0x0800e781
 800c694:	0800e792 	.word	0x0800e792

0800c698 <__mcmp>:
 800c698:	690a      	ldr	r2, [r1, #16]
 800c69a:	4603      	mov	r3, r0
 800c69c:	6900      	ldr	r0, [r0, #16]
 800c69e:	1a80      	subs	r0, r0, r2
 800c6a0:	b530      	push	{r4, r5, lr}
 800c6a2:	d10e      	bne.n	800c6c2 <__mcmp+0x2a>
 800c6a4:	3314      	adds	r3, #20
 800c6a6:	3114      	adds	r1, #20
 800c6a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c6ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c6b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6b8:	4295      	cmp	r5, r2
 800c6ba:	d003      	beq.n	800c6c4 <__mcmp+0x2c>
 800c6bc:	d205      	bcs.n	800c6ca <__mcmp+0x32>
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c2:	bd30      	pop	{r4, r5, pc}
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d3f3      	bcc.n	800c6b0 <__mcmp+0x18>
 800c6c8:	e7fb      	b.n	800c6c2 <__mcmp+0x2a>
 800c6ca:	2001      	movs	r0, #1
 800c6cc:	e7f9      	b.n	800c6c2 <__mcmp+0x2a>
	...

0800c6d0 <__mdiff>:
 800c6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	4689      	mov	r9, r1
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4648      	mov	r0, r9
 800c6dc:	4614      	mov	r4, r2
 800c6de:	f7ff ffdb 	bl	800c698 <__mcmp>
 800c6e2:	1e05      	subs	r5, r0, #0
 800c6e4:	d112      	bne.n	800c70c <__mdiff+0x3c>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff fd11 	bl	800c110 <_Balloc>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	b928      	cbnz	r0, 800c6fe <__mdiff+0x2e>
 800c6f2:	4b3f      	ldr	r3, [pc, #252]	@ (800c7f0 <__mdiff+0x120>)
 800c6f4:	f240 2137 	movw	r1, #567	@ 0x237
 800c6f8:	483e      	ldr	r0, [pc, #248]	@ (800c7f4 <__mdiff+0x124>)
 800c6fa:	f001 fba1 	bl	800de40 <__assert_func>
 800c6fe:	2301      	movs	r3, #1
 800c700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c704:	4610      	mov	r0, r2
 800c706:	b003      	add	sp, #12
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	bfbc      	itt	lt
 800c70e:	464b      	movlt	r3, r9
 800c710:	46a1      	movlt	r9, r4
 800c712:	4630      	mov	r0, r6
 800c714:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c718:	bfba      	itte	lt
 800c71a:	461c      	movlt	r4, r3
 800c71c:	2501      	movlt	r5, #1
 800c71e:	2500      	movge	r5, #0
 800c720:	f7ff fcf6 	bl	800c110 <_Balloc>
 800c724:	4602      	mov	r2, r0
 800c726:	b918      	cbnz	r0, 800c730 <__mdiff+0x60>
 800c728:	4b31      	ldr	r3, [pc, #196]	@ (800c7f0 <__mdiff+0x120>)
 800c72a:	f240 2145 	movw	r1, #581	@ 0x245
 800c72e:	e7e3      	b.n	800c6f8 <__mdiff+0x28>
 800c730:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c734:	6926      	ldr	r6, [r4, #16]
 800c736:	60c5      	str	r5, [r0, #12]
 800c738:	f109 0310 	add.w	r3, r9, #16
 800c73c:	f109 0514 	add.w	r5, r9, #20
 800c740:	f104 0e14 	add.w	lr, r4, #20
 800c744:	f100 0b14 	add.w	fp, r0, #20
 800c748:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c74c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	46d9      	mov	r9, fp
 800c754:	f04f 0c00 	mov.w	ip, #0
 800c758:	9b01      	ldr	r3, [sp, #4]
 800c75a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c75e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c762:	9301      	str	r3, [sp, #4]
 800c764:	fa1f f38a 	uxth.w	r3, sl
 800c768:	4619      	mov	r1, r3
 800c76a:	b283      	uxth	r3, r0
 800c76c:	1acb      	subs	r3, r1, r3
 800c76e:	0c00      	lsrs	r0, r0, #16
 800c770:	4463      	add	r3, ip
 800c772:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c776:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c780:	4576      	cmp	r6, lr
 800c782:	f849 3b04 	str.w	r3, [r9], #4
 800c786:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c78a:	d8e5      	bhi.n	800c758 <__mdiff+0x88>
 800c78c:	1b33      	subs	r3, r6, r4
 800c78e:	3b15      	subs	r3, #21
 800c790:	f023 0303 	bic.w	r3, r3, #3
 800c794:	3415      	adds	r4, #21
 800c796:	3304      	adds	r3, #4
 800c798:	42a6      	cmp	r6, r4
 800c79a:	bf38      	it	cc
 800c79c:	2304      	movcc	r3, #4
 800c79e:	441d      	add	r5, r3
 800c7a0:	445b      	add	r3, fp
 800c7a2:	461e      	mov	r6, r3
 800c7a4:	462c      	mov	r4, r5
 800c7a6:	4544      	cmp	r4, r8
 800c7a8:	d30e      	bcc.n	800c7c8 <__mdiff+0xf8>
 800c7aa:	f108 0103 	add.w	r1, r8, #3
 800c7ae:	1b49      	subs	r1, r1, r5
 800c7b0:	f021 0103 	bic.w	r1, r1, #3
 800c7b4:	3d03      	subs	r5, #3
 800c7b6:	45a8      	cmp	r8, r5
 800c7b8:	bf38      	it	cc
 800c7ba:	2100      	movcc	r1, #0
 800c7bc:	440b      	add	r3, r1
 800c7be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7c2:	b191      	cbz	r1, 800c7ea <__mdiff+0x11a>
 800c7c4:	6117      	str	r7, [r2, #16]
 800c7c6:	e79d      	b.n	800c704 <__mdiff+0x34>
 800c7c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c7cc:	46e6      	mov	lr, ip
 800c7ce:	0c08      	lsrs	r0, r1, #16
 800c7d0:	fa1c fc81 	uxtah	ip, ip, r1
 800c7d4:	4471      	add	r1, lr
 800c7d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c7da:	b289      	uxth	r1, r1
 800c7dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c7e0:	f846 1b04 	str.w	r1, [r6], #4
 800c7e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c7e8:	e7dd      	b.n	800c7a6 <__mdiff+0xd6>
 800c7ea:	3f01      	subs	r7, #1
 800c7ec:	e7e7      	b.n	800c7be <__mdiff+0xee>
 800c7ee:	bf00      	nop
 800c7f0:	0800e781 	.word	0x0800e781
 800c7f4:	0800e792 	.word	0x0800e792

0800c7f8 <__ulp>:
 800c7f8:	b082      	sub	sp, #8
 800c7fa:	ed8d 0b00 	vstr	d0, [sp]
 800c7fe:	9a01      	ldr	r2, [sp, #4]
 800c800:	4b0f      	ldr	r3, [pc, #60]	@ (800c840 <__ulp+0x48>)
 800c802:	4013      	ands	r3, r2
 800c804:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	dc08      	bgt.n	800c81e <__ulp+0x26>
 800c80c:	425b      	negs	r3, r3
 800c80e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c812:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c816:	da04      	bge.n	800c822 <__ulp+0x2a>
 800c818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c81c:	4113      	asrs	r3, r2
 800c81e:	2200      	movs	r2, #0
 800c820:	e008      	b.n	800c834 <__ulp+0x3c>
 800c822:	f1a2 0314 	sub.w	r3, r2, #20
 800c826:	2b1e      	cmp	r3, #30
 800c828:	bfda      	itte	le
 800c82a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c82e:	40da      	lsrle	r2, r3
 800c830:	2201      	movgt	r2, #1
 800c832:	2300      	movs	r3, #0
 800c834:	4619      	mov	r1, r3
 800c836:	4610      	mov	r0, r2
 800c838:	ec41 0b10 	vmov	d0, r0, r1
 800c83c:	b002      	add	sp, #8
 800c83e:	4770      	bx	lr
 800c840:	7ff00000 	.word	0x7ff00000

0800c844 <__b2d>:
 800c844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c848:	6906      	ldr	r6, [r0, #16]
 800c84a:	f100 0814 	add.w	r8, r0, #20
 800c84e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c852:	1f37      	subs	r7, r6, #4
 800c854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c858:	4610      	mov	r0, r2
 800c85a:	f7ff fd4b 	bl	800c2f4 <__hi0bits>
 800c85e:	f1c0 0320 	rsb	r3, r0, #32
 800c862:	280a      	cmp	r0, #10
 800c864:	600b      	str	r3, [r1, #0]
 800c866:	491b      	ldr	r1, [pc, #108]	@ (800c8d4 <__b2d+0x90>)
 800c868:	dc15      	bgt.n	800c896 <__b2d+0x52>
 800c86a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c86e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c872:	45b8      	cmp	r8, r7
 800c874:	ea43 0501 	orr.w	r5, r3, r1
 800c878:	bf34      	ite	cc
 800c87a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c87e:	2300      	movcs	r3, #0
 800c880:	3015      	adds	r0, #21
 800c882:	fa02 f000 	lsl.w	r0, r2, r0
 800c886:	fa23 f30c 	lsr.w	r3, r3, ip
 800c88a:	4303      	orrs	r3, r0
 800c88c:	461c      	mov	r4, r3
 800c88e:	ec45 4b10 	vmov	d0, r4, r5
 800c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c896:	45b8      	cmp	r8, r7
 800c898:	bf3a      	itte	cc
 800c89a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c89e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c8a2:	2300      	movcs	r3, #0
 800c8a4:	380b      	subs	r0, #11
 800c8a6:	d012      	beq.n	800c8ce <__b2d+0x8a>
 800c8a8:	f1c0 0120 	rsb	r1, r0, #32
 800c8ac:	fa23 f401 	lsr.w	r4, r3, r1
 800c8b0:	4082      	lsls	r2, r0
 800c8b2:	4322      	orrs	r2, r4
 800c8b4:	4547      	cmp	r7, r8
 800c8b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c8ba:	bf8c      	ite	hi
 800c8bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c8c0:	2200      	movls	r2, #0
 800c8c2:	4083      	lsls	r3, r0
 800c8c4:	40ca      	lsrs	r2, r1
 800c8c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c8ca:	4313      	orrs	r3, r2
 800c8cc:	e7de      	b.n	800c88c <__b2d+0x48>
 800c8ce:	ea42 0501 	orr.w	r5, r2, r1
 800c8d2:	e7db      	b.n	800c88c <__b2d+0x48>
 800c8d4:	3ff00000 	.word	0x3ff00000

0800c8d8 <__d2b>:
 800c8d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8dc:	460f      	mov	r7, r1
 800c8de:	2101      	movs	r1, #1
 800c8e0:	ec59 8b10 	vmov	r8, r9, d0
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	f7ff fc13 	bl	800c110 <_Balloc>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	b930      	cbnz	r0, 800c8fc <__d2b+0x24>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	4b23      	ldr	r3, [pc, #140]	@ (800c980 <__d2b+0xa8>)
 800c8f2:	4824      	ldr	r0, [pc, #144]	@ (800c984 <__d2b+0xac>)
 800c8f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8f8:	f001 faa2 	bl	800de40 <__assert_func>
 800c8fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c904:	b10d      	cbz	r5, 800c90a <__d2b+0x32>
 800c906:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	f1b8 0300 	subs.w	r3, r8, #0
 800c910:	d023      	beq.n	800c95a <__d2b+0x82>
 800c912:	4668      	mov	r0, sp
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	f7ff fd0c 	bl	800c332 <__lo0bits>
 800c91a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c91e:	b1d0      	cbz	r0, 800c956 <__d2b+0x7e>
 800c920:	f1c0 0320 	rsb	r3, r0, #32
 800c924:	fa02 f303 	lsl.w	r3, r2, r3
 800c928:	430b      	orrs	r3, r1
 800c92a:	40c2      	lsrs	r2, r0
 800c92c:	6163      	str	r3, [r4, #20]
 800c92e:	9201      	str	r2, [sp, #4]
 800c930:	9b01      	ldr	r3, [sp, #4]
 800c932:	61a3      	str	r3, [r4, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bf0c      	ite	eq
 800c938:	2201      	moveq	r2, #1
 800c93a:	2202      	movne	r2, #2
 800c93c:	6122      	str	r2, [r4, #16]
 800c93e:	b1a5      	cbz	r5, 800c96a <__d2b+0x92>
 800c940:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c944:	4405      	add	r5, r0
 800c946:	603d      	str	r5, [r7, #0]
 800c948:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c94c:	6030      	str	r0, [r6, #0]
 800c94e:	4620      	mov	r0, r4
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c956:	6161      	str	r1, [r4, #20]
 800c958:	e7ea      	b.n	800c930 <__d2b+0x58>
 800c95a:	a801      	add	r0, sp, #4
 800c95c:	f7ff fce9 	bl	800c332 <__lo0bits>
 800c960:	9b01      	ldr	r3, [sp, #4]
 800c962:	6163      	str	r3, [r4, #20]
 800c964:	3020      	adds	r0, #32
 800c966:	2201      	movs	r2, #1
 800c968:	e7e8      	b.n	800c93c <__d2b+0x64>
 800c96a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c96e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c972:	6038      	str	r0, [r7, #0]
 800c974:	6918      	ldr	r0, [r3, #16]
 800c976:	f7ff fcbd 	bl	800c2f4 <__hi0bits>
 800c97a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c97e:	e7e5      	b.n	800c94c <__d2b+0x74>
 800c980:	0800e781 	.word	0x0800e781
 800c984:	0800e792 	.word	0x0800e792

0800c988 <__ratio>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	b085      	sub	sp, #20
 800c98e:	e9cd 1000 	strd	r1, r0, [sp]
 800c992:	a902      	add	r1, sp, #8
 800c994:	f7ff ff56 	bl	800c844 <__b2d>
 800c998:	9800      	ldr	r0, [sp, #0]
 800c99a:	a903      	add	r1, sp, #12
 800c99c:	ec55 4b10 	vmov	r4, r5, d0
 800c9a0:	f7ff ff50 	bl	800c844 <__b2d>
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	6919      	ldr	r1, [r3, #16]
 800c9a8:	9b00      	ldr	r3, [sp, #0]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	1ac9      	subs	r1, r1, r3
 800c9ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c9b2:	1a9b      	subs	r3, r3, r2
 800c9b4:	ec5b ab10 	vmov	sl, fp, d0
 800c9b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfce      	itee	gt
 800c9c0:	462a      	movgt	r2, r5
 800c9c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9c6:	465a      	movle	r2, fp
 800c9c8:	462f      	mov	r7, r5
 800c9ca:	46d9      	mov	r9, fp
 800c9cc:	bfcc      	ite	gt
 800c9ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c9d6:	464b      	mov	r3, r9
 800c9d8:	4652      	mov	r2, sl
 800c9da:	4620      	mov	r0, r4
 800c9dc:	4639      	mov	r1, r7
 800c9de:	f7f3 ff3d 	bl	800085c <__aeabi_ddiv>
 800c9e2:	ec41 0b10 	vmov	d0, r0, r1
 800c9e6:	b005      	add	sp, #20
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9ec <__copybits>:
 800c9ec:	3901      	subs	r1, #1
 800c9ee:	b570      	push	{r4, r5, r6, lr}
 800c9f0:	1149      	asrs	r1, r1, #5
 800c9f2:	6914      	ldr	r4, [r2, #16]
 800c9f4:	3101      	adds	r1, #1
 800c9f6:	f102 0314 	add.w	r3, r2, #20
 800c9fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca02:	1f05      	subs	r5, r0, #4
 800ca04:	42a3      	cmp	r3, r4
 800ca06:	d30c      	bcc.n	800ca22 <__copybits+0x36>
 800ca08:	1aa3      	subs	r3, r4, r2
 800ca0a:	3b11      	subs	r3, #17
 800ca0c:	f023 0303 	bic.w	r3, r3, #3
 800ca10:	3211      	adds	r2, #17
 800ca12:	42a2      	cmp	r2, r4
 800ca14:	bf88      	it	hi
 800ca16:	2300      	movhi	r3, #0
 800ca18:	4418      	add	r0, r3
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4288      	cmp	r0, r1
 800ca1e:	d305      	bcc.n	800ca2c <__copybits+0x40>
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca26:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca2a:	e7eb      	b.n	800ca04 <__copybits+0x18>
 800ca2c:	f840 3b04 	str.w	r3, [r0], #4
 800ca30:	e7f4      	b.n	800ca1c <__copybits+0x30>

0800ca32 <__any_on>:
 800ca32:	f100 0214 	add.w	r2, r0, #20
 800ca36:	6900      	ldr	r0, [r0, #16]
 800ca38:	114b      	asrs	r3, r1, #5
 800ca3a:	4298      	cmp	r0, r3
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	db11      	blt.n	800ca64 <__any_on+0x32>
 800ca40:	dd0a      	ble.n	800ca58 <__any_on+0x26>
 800ca42:	f011 011f 	ands.w	r1, r1, #31
 800ca46:	d007      	beq.n	800ca58 <__any_on+0x26>
 800ca48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca4c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca50:	fa00 f101 	lsl.w	r1, r0, r1
 800ca54:	428c      	cmp	r4, r1
 800ca56:	d10b      	bne.n	800ca70 <__any_on+0x3e>
 800ca58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d803      	bhi.n	800ca68 <__any_on+0x36>
 800ca60:	2000      	movs	r0, #0
 800ca62:	bd10      	pop	{r4, pc}
 800ca64:	4603      	mov	r3, r0
 800ca66:	e7f7      	b.n	800ca58 <__any_on+0x26>
 800ca68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca6c:	2900      	cmp	r1, #0
 800ca6e:	d0f5      	beq.n	800ca5c <__any_on+0x2a>
 800ca70:	2001      	movs	r0, #1
 800ca72:	e7f6      	b.n	800ca62 <__any_on+0x30>

0800ca74 <sulp>:
 800ca74:	b570      	push	{r4, r5, r6, lr}
 800ca76:	4604      	mov	r4, r0
 800ca78:	460d      	mov	r5, r1
 800ca7a:	ec45 4b10 	vmov	d0, r4, r5
 800ca7e:	4616      	mov	r6, r2
 800ca80:	f7ff feba 	bl	800c7f8 <__ulp>
 800ca84:	ec51 0b10 	vmov	r0, r1, d0
 800ca88:	b17e      	cbz	r6, 800caaa <sulp+0x36>
 800ca8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ca8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dd09      	ble.n	800caaa <sulp+0x36>
 800ca96:	051b      	lsls	r3, r3, #20
 800ca98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca9c:	2400      	movs	r4, #0
 800ca9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800caa2:	4622      	mov	r2, r4
 800caa4:	462b      	mov	r3, r5
 800caa6:	f7f3 fdaf 	bl	8000608 <__aeabi_dmul>
 800caaa:	ec41 0b10 	vmov	d0, r0, r1
 800caae:	bd70      	pop	{r4, r5, r6, pc}

0800cab0 <_strtod_l>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	b09f      	sub	sp, #124	@ 0x7c
 800cab6:	460c      	mov	r4, r1
 800cab8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800caba:	2200      	movs	r2, #0
 800cabc:	921a      	str	r2, [sp, #104]	@ 0x68
 800cabe:	9005      	str	r0, [sp, #20]
 800cac0:	f04f 0a00 	mov.w	sl, #0
 800cac4:	f04f 0b00 	mov.w	fp, #0
 800cac8:	460a      	mov	r2, r1
 800caca:	9219      	str	r2, [sp, #100]	@ 0x64
 800cacc:	7811      	ldrb	r1, [r2, #0]
 800cace:	292b      	cmp	r1, #43	@ 0x2b
 800cad0:	d04a      	beq.n	800cb68 <_strtod_l+0xb8>
 800cad2:	d838      	bhi.n	800cb46 <_strtod_l+0x96>
 800cad4:	290d      	cmp	r1, #13
 800cad6:	d832      	bhi.n	800cb3e <_strtod_l+0x8e>
 800cad8:	2908      	cmp	r1, #8
 800cada:	d832      	bhi.n	800cb42 <_strtod_l+0x92>
 800cadc:	2900      	cmp	r1, #0
 800cade:	d03b      	beq.n	800cb58 <_strtod_l+0xa8>
 800cae0:	2200      	movs	r2, #0
 800cae2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cae4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cae6:	782a      	ldrb	r2, [r5, #0]
 800cae8:	2a30      	cmp	r2, #48	@ 0x30
 800caea:	f040 80b3 	bne.w	800cc54 <_strtod_l+0x1a4>
 800caee:	786a      	ldrb	r2, [r5, #1]
 800caf0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800caf4:	2a58      	cmp	r2, #88	@ 0x58
 800caf6:	d16e      	bne.n	800cbd6 <_strtod_l+0x126>
 800caf8:	9302      	str	r3, [sp, #8]
 800cafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cafc:	9301      	str	r3, [sp, #4]
 800cafe:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb00:	9300      	str	r3, [sp, #0]
 800cb02:	4a8e      	ldr	r2, [pc, #568]	@ (800cd3c <_strtod_l+0x28c>)
 800cb04:	9805      	ldr	r0, [sp, #20]
 800cb06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb08:	a919      	add	r1, sp, #100	@ 0x64
 800cb0a:	f001 fa33 	bl	800df74 <__gethex>
 800cb0e:	f010 060f 	ands.w	r6, r0, #15
 800cb12:	4604      	mov	r4, r0
 800cb14:	d005      	beq.n	800cb22 <_strtod_l+0x72>
 800cb16:	2e06      	cmp	r6, #6
 800cb18:	d128      	bne.n	800cb6c <_strtod_l+0xbc>
 800cb1a:	3501      	adds	r5, #1
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f040 858e 	bne.w	800d646 <_strtod_l+0xb96>
 800cb2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb2c:	b1cb      	cbz	r3, 800cb62 <_strtod_l+0xb2>
 800cb2e:	4652      	mov	r2, sl
 800cb30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb34:	ec43 2b10 	vmov	d0, r2, r3
 800cb38:	b01f      	add	sp, #124	@ 0x7c
 800cb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3e:	2920      	cmp	r1, #32
 800cb40:	d1ce      	bne.n	800cae0 <_strtod_l+0x30>
 800cb42:	3201      	adds	r2, #1
 800cb44:	e7c1      	b.n	800caca <_strtod_l+0x1a>
 800cb46:	292d      	cmp	r1, #45	@ 0x2d
 800cb48:	d1ca      	bne.n	800cae0 <_strtod_l+0x30>
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cb4e:	1c51      	adds	r1, r2, #1
 800cb50:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb52:	7852      	ldrb	r2, [r2, #1]
 800cb54:	2a00      	cmp	r2, #0
 800cb56:	d1c5      	bne.n	800cae4 <_strtod_l+0x34>
 800cb58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f040 8570 	bne.w	800d642 <_strtod_l+0xb92>
 800cb62:	4652      	mov	r2, sl
 800cb64:	465b      	mov	r3, fp
 800cb66:	e7e5      	b.n	800cb34 <_strtod_l+0x84>
 800cb68:	2100      	movs	r1, #0
 800cb6a:	e7ef      	b.n	800cb4c <_strtod_l+0x9c>
 800cb6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cb6e:	b13a      	cbz	r2, 800cb80 <_strtod_l+0xd0>
 800cb70:	2135      	movs	r1, #53	@ 0x35
 800cb72:	a81c      	add	r0, sp, #112	@ 0x70
 800cb74:	f7ff ff3a 	bl	800c9ec <__copybits>
 800cb78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cb7a:	9805      	ldr	r0, [sp, #20]
 800cb7c:	f7ff fb08 	bl	800c190 <_Bfree>
 800cb80:	3e01      	subs	r6, #1
 800cb82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cb84:	2e04      	cmp	r6, #4
 800cb86:	d806      	bhi.n	800cb96 <_strtod_l+0xe6>
 800cb88:	e8df f006 	tbb	[pc, r6]
 800cb8c:	201d0314 	.word	0x201d0314
 800cb90:	14          	.byte	0x14
 800cb91:	00          	.byte	0x00
 800cb92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cb96:	05e1      	lsls	r1, r4, #23
 800cb98:	bf48      	it	mi
 800cb9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cba2:	0d1b      	lsrs	r3, r3, #20
 800cba4:	051b      	lsls	r3, r3, #20
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1bb      	bne.n	800cb22 <_strtod_l+0x72>
 800cbaa:	f7fe fb1b 	bl	800b1e4 <__errno>
 800cbae:	2322      	movs	r3, #34	@ 0x22
 800cbb0:	6003      	str	r3, [r0, #0]
 800cbb2:	e7b6      	b.n	800cb22 <_strtod_l+0x72>
 800cbb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cbb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cbbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cbc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cbc4:	e7e7      	b.n	800cb96 <_strtod_l+0xe6>
 800cbc6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cd44 <_strtod_l+0x294>
 800cbca:	e7e4      	b.n	800cb96 <_strtod_l+0xe6>
 800cbcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cbd0:	f04f 3aff 	mov.w	sl, #4294967295
 800cbd4:	e7df      	b.n	800cb96 <_strtod_l+0xe6>
 800cbd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbdc:	785b      	ldrb	r3, [r3, #1]
 800cbde:	2b30      	cmp	r3, #48	@ 0x30
 800cbe0:	d0f9      	beq.n	800cbd6 <_strtod_l+0x126>
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d09d      	beq.n	800cb22 <_strtod_l+0x72>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbec:	930c      	str	r3, [sp, #48]	@ 0x30
 800cbee:	2300      	movs	r3, #0
 800cbf0:	9308      	str	r3, [sp, #32]
 800cbf2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbf4:	461f      	mov	r7, r3
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cbfa:	7805      	ldrb	r5, [r0, #0]
 800cbfc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cc00:	b2d9      	uxtb	r1, r3
 800cc02:	2909      	cmp	r1, #9
 800cc04:	d928      	bls.n	800cc58 <_strtod_l+0x1a8>
 800cc06:	494e      	ldr	r1, [pc, #312]	@ (800cd40 <_strtod_l+0x290>)
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f001 f8cd 	bl	800dda8 <strncmp>
 800cc0e:	2800      	cmp	r0, #0
 800cc10:	d032      	beq.n	800cc78 <_strtod_l+0x1c8>
 800cc12:	2000      	movs	r0, #0
 800cc14:	462a      	mov	r2, r5
 800cc16:	4681      	mov	r9, r0
 800cc18:	463d      	mov	r5, r7
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2a65      	cmp	r2, #101	@ 0x65
 800cc1e:	d001      	beq.n	800cc24 <_strtod_l+0x174>
 800cc20:	2a45      	cmp	r2, #69	@ 0x45
 800cc22:	d114      	bne.n	800cc4e <_strtod_l+0x19e>
 800cc24:	b91d      	cbnz	r5, 800cc2e <_strtod_l+0x17e>
 800cc26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc28:	4302      	orrs	r2, r0
 800cc2a:	d095      	beq.n	800cb58 <_strtod_l+0xa8>
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc30:	1c62      	adds	r2, r4, #1
 800cc32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc34:	7862      	ldrb	r2, [r4, #1]
 800cc36:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc38:	d077      	beq.n	800cd2a <_strtod_l+0x27a>
 800cc3a:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc3c:	d07b      	beq.n	800cd36 <_strtod_l+0x286>
 800cc3e:	f04f 0c00 	mov.w	ip, #0
 800cc42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc46:	2909      	cmp	r1, #9
 800cc48:	f240 8082 	bls.w	800cd50 <_strtod_l+0x2a0>
 800cc4c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc4e:	f04f 0800 	mov.w	r8, #0
 800cc52:	e0a2      	b.n	800cd9a <_strtod_l+0x2ea>
 800cc54:	2300      	movs	r3, #0
 800cc56:	e7c7      	b.n	800cbe8 <_strtod_l+0x138>
 800cc58:	2f08      	cmp	r7, #8
 800cc5a:	bfd5      	itete	le
 800cc5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cc5e:	9908      	ldrgt	r1, [sp, #32]
 800cc60:	fb02 3301 	mlale	r3, r2, r1, r3
 800cc64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cc68:	f100 0001 	add.w	r0, r0, #1
 800cc6c:	bfd4      	ite	le
 800cc6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cc70:	9308      	strgt	r3, [sp, #32]
 800cc72:	3701      	adds	r7, #1
 800cc74:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc76:	e7bf      	b.n	800cbf8 <_strtod_l+0x148>
 800cc78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc7e:	785a      	ldrb	r2, [r3, #1]
 800cc80:	b37f      	cbz	r7, 800cce2 <_strtod_l+0x232>
 800cc82:	4681      	mov	r9, r0
 800cc84:	463d      	mov	r5, r7
 800cc86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cc8a:	2b09      	cmp	r3, #9
 800cc8c:	d912      	bls.n	800ccb4 <_strtod_l+0x204>
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e7c4      	b.n	800cc1c <_strtod_l+0x16c>
 800cc92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc98:	785a      	ldrb	r2, [r3, #1]
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	2a30      	cmp	r2, #48	@ 0x30
 800cc9e:	d0f8      	beq.n	800cc92 <_strtod_l+0x1e2>
 800cca0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cca4:	2b08      	cmp	r3, #8
 800cca6:	f200 84d3 	bhi.w	800d650 <_strtod_l+0xba0>
 800ccaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccac:	930c      	str	r3, [sp, #48]	@ 0x30
 800ccae:	4681      	mov	r9, r0
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	3a30      	subs	r2, #48	@ 0x30
 800ccb6:	f100 0301 	add.w	r3, r0, #1
 800ccba:	d02a      	beq.n	800cd12 <_strtod_l+0x262>
 800ccbc:	4499      	add	r9, r3
 800ccbe:	eb00 0c05 	add.w	ip, r0, r5
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	210a      	movs	r1, #10
 800ccc6:	4563      	cmp	r3, ip
 800ccc8:	d10d      	bne.n	800cce6 <_strtod_l+0x236>
 800ccca:	1c69      	adds	r1, r5, #1
 800cccc:	4401      	add	r1, r0
 800ccce:	4428      	add	r0, r5
 800ccd0:	2808      	cmp	r0, #8
 800ccd2:	dc16      	bgt.n	800cd02 <_strtod_l+0x252>
 800ccd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ccd6:	230a      	movs	r3, #10
 800ccd8:	fb03 2300 	mla	r3, r3, r0, r2
 800ccdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccde:	2300      	movs	r3, #0
 800cce0:	e018      	b.n	800cd14 <_strtod_l+0x264>
 800cce2:	4638      	mov	r0, r7
 800cce4:	e7da      	b.n	800cc9c <_strtod_l+0x1ec>
 800cce6:	2b08      	cmp	r3, #8
 800cce8:	f103 0301 	add.w	r3, r3, #1
 800ccec:	dc03      	bgt.n	800ccf6 <_strtod_l+0x246>
 800ccee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ccf0:	434e      	muls	r6, r1
 800ccf2:	960a      	str	r6, [sp, #40]	@ 0x28
 800ccf4:	e7e7      	b.n	800ccc6 <_strtod_l+0x216>
 800ccf6:	2b10      	cmp	r3, #16
 800ccf8:	bfde      	ittt	le
 800ccfa:	9e08      	ldrle	r6, [sp, #32]
 800ccfc:	434e      	mulle	r6, r1
 800ccfe:	9608      	strle	r6, [sp, #32]
 800cd00:	e7e1      	b.n	800ccc6 <_strtod_l+0x216>
 800cd02:	280f      	cmp	r0, #15
 800cd04:	dceb      	bgt.n	800ccde <_strtod_l+0x22e>
 800cd06:	9808      	ldr	r0, [sp, #32]
 800cd08:	230a      	movs	r3, #10
 800cd0a:	fb03 2300 	mla	r3, r3, r0, r2
 800cd0e:	9308      	str	r3, [sp, #32]
 800cd10:	e7e5      	b.n	800ccde <_strtod_l+0x22e>
 800cd12:	4629      	mov	r1, r5
 800cd14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd16:	1c50      	adds	r0, r2, #1
 800cd18:	9019      	str	r0, [sp, #100]	@ 0x64
 800cd1a:	7852      	ldrb	r2, [r2, #1]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	460d      	mov	r5, r1
 800cd20:	e7b1      	b.n	800cc86 <_strtod_l+0x1d6>
 800cd22:	f04f 0900 	mov.w	r9, #0
 800cd26:	2301      	movs	r3, #1
 800cd28:	e77d      	b.n	800cc26 <_strtod_l+0x176>
 800cd2a:	f04f 0c00 	mov.w	ip, #0
 800cd2e:	1ca2      	adds	r2, r4, #2
 800cd30:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd32:	78a2      	ldrb	r2, [r4, #2]
 800cd34:	e785      	b.n	800cc42 <_strtod_l+0x192>
 800cd36:	f04f 0c01 	mov.w	ip, #1
 800cd3a:	e7f8      	b.n	800cd2e <_strtod_l+0x27e>
 800cd3c:	0800e900 	.word	0x0800e900
 800cd40:	0800e8e8 	.word	0x0800e8e8
 800cd44:	7ff00000 	.word	0x7ff00000
 800cd48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd4a:	1c51      	adds	r1, r2, #1
 800cd4c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd4e:	7852      	ldrb	r2, [r2, #1]
 800cd50:	2a30      	cmp	r2, #48	@ 0x30
 800cd52:	d0f9      	beq.n	800cd48 <_strtod_l+0x298>
 800cd54:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cd58:	2908      	cmp	r1, #8
 800cd5a:	f63f af78 	bhi.w	800cc4e <_strtod_l+0x19e>
 800cd5e:	3a30      	subs	r2, #48	@ 0x30
 800cd60:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd64:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cd66:	f04f 080a 	mov.w	r8, #10
 800cd6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd6c:	1c56      	adds	r6, r2, #1
 800cd6e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cd70:	7852      	ldrb	r2, [r2, #1]
 800cd72:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cd76:	f1be 0f09 	cmp.w	lr, #9
 800cd7a:	d939      	bls.n	800cdf0 <_strtod_l+0x340>
 800cd7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cd7e:	1a76      	subs	r6, r6, r1
 800cd80:	2e08      	cmp	r6, #8
 800cd82:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cd86:	dc03      	bgt.n	800cd90 <_strtod_l+0x2e0>
 800cd88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd8a:	4588      	cmp	r8, r1
 800cd8c:	bfa8      	it	ge
 800cd8e:	4688      	movge	r8, r1
 800cd90:	f1bc 0f00 	cmp.w	ip, #0
 800cd94:	d001      	beq.n	800cd9a <_strtod_l+0x2ea>
 800cd96:	f1c8 0800 	rsb	r8, r8, #0
 800cd9a:	2d00      	cmp	r5, #0
 800cd9c:	d14e      	bne.n	800ce3c <_strtod_l+0x38c>
 800cd9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cda0:	4308      	orrs	r0, r1
 800cda2:	f47f aebe 	bne.w	800cb22 <_strtod_l+0x72>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f47f aed6 	bne.w	800cb58 <_strtod_l+0xa8>
 800cdac:	2a69      	cmp	r2, #105	@ 0x69
 800cdae:	d028      	beq.n	800ce02 <_strtod_l+0x352>
 800cdb0:	dc25      	bgt.n	800cdfe <_strtod_l+0x34e>
 800cdb2:	2a49      	cmp	r2, #73	@ 0x49
 800cdb4:	d025      	beq.n	800ce02 <_strtod_l+0x352>
 800cdb6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cdb8:	f47f aece 	bne.w	800cb58 <_strtod_l+0xa8>
 800cdbc:	499b      	ldr	r1, [pc, #620]	@ (800d02c <_strtod_l+0x57c>)
 800cdbe:	a819      	add	r0, sp, #100	@ 0x64
 800cdc0:	f001 fafa 	bl	800e3b8 <__match>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	f43f aec7 	beq.w	800cb58 <_strtod_l+0xa8>
 800cdca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	2b28      	cmp	r3, #40	@ 0x28
 800cdd0:	d12e      	bne.n	800ce30 <_strtod_l+0x380>
 800cdd2:	4997      	ldr	r1, [pc, #604]	@ (800d030 <_strtod_l+0x580>)
 800cdd4:	aa1c      	add	r2, sp, #112	@ 0x70
 800cdd6:	a819      	add	r0, sp, #100	@ 0x64
 800cdd8:	f001 fb02 	bl	800e3e0 <__hexnan>
 800cddc:	2805      	cmp	r0, #5
 800cdde:	d127      	bne.n	800ce30 <_strtod_l+0x380>
 800cde0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cde2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cde6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cdea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cdee:	e698      	b.n	800cb22 <_strtod_l+0x72>
 800cdf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cdf2:	fb08 2101 	mla	r1, r8, r1, r2
 800cdf6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cdfa:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdfc:	e7b5      	b.n	800cd6a <_strtod_l+0x2ba>
 800cdfe:	2a6e      	cmp	r2, #110	@ 0x6e
 800ce00:	e7da      	b.n	800cdb8 <_strtod_l+0x308>
 800ce02:	498c      	ldr	r1, [pc, #560]	@ (800d034 <_strtod_l+0x584>)
 800ce04:	a819      	add	r0, sp, #100	@ 0x64
 800ce06:	f001 fad7 	bl	800e3b8 <__match>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	f43f aea4 	beq.w	800cb58 <_strtod_l+0xa8>
 800ce10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce12:	4989      	ldr	r1, [pc, #548]	@ (800d038 <_strtod_l+0x588>)
 800ce14:	3b01      	subs	r3, #1
 800ce16:	a819      	add	r0, sp, #100	@ 0x64
 800ce18:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce1a:	f001 facd 	bl	800e3b8 <__match>
 800ce1e:	b910      	cbnz	r0, 800ce26 <_strtod_l+0x376>
 800ce20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce22:	3301      	adds	r3, #1
 800ce24:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce26:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d048 <_strtod_l+0x598>
 800ce2a:	f04f 0a00 	mov.w	sl, #0
 800ce2e:	e678      	b.n	800cb22 <_strtod_l+0x72>
 800ce30:	4882      	ldr	r0, [pc, #520]	@ (800d03c <_strtod_l+0x58c>)
 800ce32:	f000 fffd 	bl	800de30 <nan>
 800ce36:	ec5b ab10 	vmov	sl, fp, d0
 800ce3a:	e672      	b.n	800cb22 <_strtod_l+0x72>
 800ce3c:	eba8 0309 	sub.w	r3, r8, r9
 800ce40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce44:	2f00      	cmp	r7, #0
 800ce46:	bf08      	it	eq
 800ce48:	462f      	moveq	r7, r5
 800ce4a:	2d10      	cmp	r5, #16
 800ce4c:	462c      	mov	r4, r5
 800ce4e:	bfa8      	it	ge
 800ce50:	2410      	movge	r4, #16
 800ce52:	f7f3 fb5f 	bl	8000514 <__aeabi_ui2d>
 800ce56:	2d09      	cmp	r5, #9
 800ce58:	4682      	mov	sl, r0
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	dc13      	bgt.n	800ce86 <_strtod_l+0x3d6>
 800ce5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f43f ae5e 	beq.w	800cb22 <_strtod_l+0x72>
 800ce66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce68:	dd78      	ble.n	800cf5c <_strtod_l+0x4ac>
 800ce6a:	2b16      	cmp	r3, #22
 800ce6c:	dc5f      	bgt.n	800cf2e <_strtod_l+0x47e>
 800ce6e:	4974      	ldr	r1, [pc, #464]	@ (800d040 <_strtod_l+0x590>)
 800ce70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce78:	4652      	mov	r2, sl
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	f7f3 fbc4 	bl	8000608 <__aeabi_dmul>
 800ce80:	4682      	mov	sl, r0
 800ce82:	468b      	mov	fp, r1
 800ce84:	e64d      	b.n	800cb22 <_strtod_l+0x72>
 800ce86:	4b6e      	ldr	r3, [pc, #440]	@ (800d040 <_strtod_l+0x590>)
 800ce88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ce90:	f7f3 fbba 	bl	8000608 <__aeabi_dmul>
 800ce94:	4682      	mov	sl, r0
 800ce96:	9808      	ldr	r0, [sp, #32]
 800ce98:	468b      	mov	fp, r1
 800ce9a:	f7f3 fb3b 	bl	8000514 <__aeabi_ui2d>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4650      	mov	r0, sl
 800cea4:	4659      	mov	r1, fp
 800cea6:	f7f3 f9f9 	bl	800029c <__adddf3>
 800ceaa:	2d0f      	cmp	r5, #15
 800ceac:	4682      	mov	sl, r0
 800ceae:	468b      	mov	fp, r1
 800ceb0:	ddd5      	ble.n	800ce5e <_strtod_l+0x3ae>
 800ceb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb4:	1b2c      	subs	r4, r5, r4
 800ceb6:	441c      	add	r4, r3
 800ceb8:	2c00      	cmp	r4, #0
 800ceba:	f340 8096 	ble.w	800cfea <_strtod_l+0x53a>
 800cebe:	f014 030f 	ands.w	r3, r4, #15
 800cec2:	d00a      	beq.n	800ceda <_strtod_l+0x42a>
 800cec4:	495e      	ldr	r1, [pc, #376]	@ (800d040 <_strtod_l+0x590>)
 800cec6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ceca:	4652      	mov	r2, sl
 800cecc:	465b      	mov	r3, fp
 800cece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced2:	f7f3 fb99 	bl	8000608 <__aeabi_dmul>
 800ced6:	4682      	mov	sl, r0
 800ced8:	468b      	mov	fp, r1
 800ceda:	f034 040f 	bics.w	r4, r4, #15
 800cede:	d073      	beq.n	800cfc8 <_strtod_l+0x518>
 800cee0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cee4:	dd48      	ble.n	800cf78 <_strtod_l+0x4c8>
 800cee6:	2400      	movs	r4, #0
 800cee8:	46a0      	mov	r8, r4
 800ceea:	940a      	str	r4, [sp, #40]	@ 0x28
 800ceec:	46a1      	mov	r9, r4
 800ceee:	9a05      	ldr	r2, [sp, #20]
 800cef0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d048 <_strtod_l+0x598>
 800cef4:	2322      	movs	r3, #34	@ 0x22
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	f04f 0a00 	mov.w	sl, #0
 800cefc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f43f ae0f 	beq.w	800cb22 <_strtod_l+0x72>
 800cf04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf06:	9805      	ldr	r0, [sp, #20]
 800cf08:	f7ff f942 	bl	800c190 <_Bfree>
 800cf0c:	9805      	ldr	r0, [sp, #20]
 800cf0e:	4649      	mov	r1, r9
 800cf10:	f7ff f93e 	bl	800c190 <_Bfree>
 800cf14:	9805      	ldr	r0, [sp, #20]
 800cf16:	4641      	mov	r1, r8
 800cf18:	f7ff f93a 	bl	800c190 <_Bfree>
 800cf1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cf1e:	9805      	ldr	r0, [sp, #20]
 800cf20:	f7ff f936 	bl	800c190 <_Bfree>
 800cf24:	9805      	ldr	r0, [sp, #20]
 800cf26:	4621      	mov	r1, r4
 800cf28:	f7ff f932 	bl	800c190 <_Bfree>
 800cf2c:	e5f9      	b.n	800cb22 <_strtod_l+0x72>
 800cf2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf34:	4293      	cmp	r3, r2
 800cf36:	dbbc      	blt.n	800ceb2 <_strtod_l+0x402>
 800cf38:	4c41      	ldr	r4, [pc, #260]	@ (800d040 <_strtod_l+0x590>)
 800cf3a:	f1c5 050f 	rsb	r5, r5, #15
 800cf3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf42:	4652      	mov	r2, sl
 800cf44:	465b      	mov	r3, fp
 800cf46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf4a:	f7f3 fb5d 	bl	8000608 <__aeabi_dmul>
 800cf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf50:	1b5d      	subs	r5, r3, r5
 800cf52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cf56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cf5a:	e78f      	b.n	800ce7c <_strtod_l+0x3cc>
 800cf5c:	3316      	adds	r3, #22
 800cf5e:	dba8      	blt.n	800ceb2 <_strtod_l+0x402>
 800cf60:	4b37      	ldr	r3, [pc, #220]	@ (800d040 <_strtod_l+0x590>)
 800cf62:	eba9 0808 	sub.w	r8, r9, r8
 800cf66:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cf6a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cf6e:	4650      	mov	r0, sl
 800cf70:	4659      	mov	r1, fp
 800cf72:	f7f3 fc73 	bl	800085c <__aeabi_ddiv>
 800cf76:	e783      	b.n	800ce80 <_strtod_l+0x3d0>
 800cf78:	4b32      	ldr	r3, [pc, #200]	@ (800d044 <_strtod_l+0x594>)
 800cf7a:	9308      	str	r3, [sp, #32]
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	1124      	asrs	r4, r4, #4
 800cf80:	4650      	mov	r0, sl
 800cf82:	4659      	mov	r1, fp
 800cf84:	461e      	mov	r6, r3
 800cf86:	2c01      	cmp	r4, #1
 800cf88:	dc21      	bgt.n	800cfce <_strtod_l+0x51e>
 800cf8a:	b10b      	cbz	r3, 800cf90 <_strtod_l+0x4e0>
 800cf8c:	4682      	mov	sl, r0
 800cf8e:	468b      	mov	fp, r1
 800cf90:	492c      	ldr	r1, [pc, #176]	@ (800d044 <_strtod_l+0x594>)
 800cf92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cf96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf9a:	4652      	mov	r2, sl
 800cf9c:	465b      	mov	r3, fp
 800cf9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfa2:	f7f3 fb31 	bl	8000608 <__aeabi_dmul>
 800cfa6:	4b28      	ldr	r3, [pc, #160]	@ (800d048 <_strtod_l+0x598>)
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	400b      	ands	r3, r1
 800cfac:	4927      	ldr	r1, [pc, #156]	@ (800d04c <_strtod_l+0x59c>)
 800cfae:	428b      	cmp	r3, r1
 800cfb0:	4682      	mov	sl, r0
 800cfb2:	d898      	bhi.n	800cee6 <_strtod_l+0x436>
 800cfb4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cfb8:	428b      	cmp	r3, r1
 800cfba:	bf86      	itte	hi
 800cfbc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d050 <_strtod_l+0x5a0>
 800cfc0:	f04f 3aff 	movhi.w	sl, #4294967295
 800cfc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cfc8:	2300      	movs	r3, #0
 800cfca:	9308      	str	r3, [sp, #32]
 800cfcc:	e07a      	b.n	800d0c4 <_strtod_l+0x614>
 800cfce:	07e2      	lsls	r2, r4, #31
 800cfd0:	d505      	bpl.n	800cfde <_strtod_l+0x52e>
 800cfd2:	9b08      	ldr	r3, [sp, #32]
 800cfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd8:	f7f3 fb16 	bl	8000608 <__aeabi_dmul>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	9a08      	ldr	r2, [sp, #32]
 800cfe0:	3208      	adds	r2, #8
 800cfe2:	3601      	adds	r6, #1
 800cfe4:	1064      	asrs	r4, r4, #1
 800cfe6:	9208      	str	r2, [sp, #32]
 800cfe8:	e7cd      	b.n	800cf86 <_strtod_l+0x4d6>
 800cfea:	d0ed      	beq.n	800cfc8 <_strtod_l+0x518>
 800cfec:	4264      	negs	r4, r4
 800cfee:	f014 020f 	ands.w	r2, r4, #15
 800cff2:	d00a      	beq.n	800d00a <_strtod_l+0x55a>
 800cff4:	4b12      	ldr	r3, [pc, #72]	@ (800d040 <_strtod_l+0x590>)
 800cff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cffa:	4650      	mov	r0, sl
 800cffc:	4659      	mov	r1, fp
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	f7f3 fc2b 	bl	800085c <__aeabi_ddiv>
 800d006:	4682      	mov	sl, r0
 800d008:	468b      	mov	fp, r1
 800d00a:	1124      	asrs	r4, r4, #4
 800d00c:	d0dc      	beq.n	800cfc8 <_strtod_l+0x518>
 800d00e:	2c1f      	cmp	r4, #31
 800d010:	dd20      	ble.n	800d054 <_strtod_l+0x5a4>
 800d012:	2400      	movs	r4, #0
 800d014:	46a0      	mov	r8, r4
 800d016:	940a      	str	r4, [sp, #40]	@ 0x28
 800d018:	46a1      	mov	r9, r4
 800d01a:	9a05      	ldr	r2, [sp, #20]
 800d01c:	2322      	movs	r3, #34	@ 0x22
 800d01e:	f04f 0a00 	mov.w	sl, #0
 800d022:	f04f 0b00 	mov.w	fp, #0
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	e768      	b.n	800cefc <_strtod_l+0x44c>
 800d02a:	bf00      	nop
 800d02c:	0800e6d9 	.word	0x0800e6d9
 800d030:	0800e8ec 	.word	0x0800e8ec
 800d034:	0800e6d1 	.word	0x0800e6d1
 800d038:	0800e708 	.word	0x0800e708
 800d03c:	0800ea95 	.word	0x0800ea95
 800d040:	0800e820 	.word	0x0800e820
 800d044:	0800e7f8 	.word	0x0800e7f8
 800d048:	7ff00000 	.word	0x7ff00000
 800d04c:	7ca00000 	.word	0x7ca00000
 800d050:	7fefffff 	.word	0x7fefffff
 800d054:	f014 0310 	ands.w	r3, r4, #16
 800d058:	bf18      	it	ne
 800d05a:	236a      	movne	r3, #106	@ 0x6a
 800d05c:	4ea9      	ldr	r6, [pc, #676]	@ (800d304 <_strtod_l+0x854>)
 800d05e:	9308      	str	r3, [sp, #32]
 800d060:	4650      	mov	r0, sl
 800d062:	4659      	mov	r1, fp
 800d064:	2300      	movs	r3, #0
 800d066:	07e2      	lsls	r2, r4, #31
 800d068:	d504      	bpl.n	800d074 <_strtod_l+0x5c4>
 800d06a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d06e:	f7f3 facb 	bl	8000608 <__aeabi_dmul>
 800d072:	2301      	movs	r3, #1
 800d074:	1064      	asrs	r4, r4, #1
 800d076:	f106 0608 	add.w	r6, r6, #8
 800d07a:	d1f4      	bne.n	800d066 <_strtod_l+0x5b6>
 800d07c:	b10b      	cbz	r3, 800d082 <_strtod_l+0x5d2>
 800d07e:	4682      	mov	sl, r0
 800d080:	468b      	mov	fp, r1
 800d082:	9b08      	ldr	r3, [sp, #32]
 800d084:	b1b3      	cbz	r3, 800d0b4 <_strtod_l+0x604>
 800d086:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d08a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d08e:	2b00      	cmp	r3, #0
 800d090:	4659      	mov	r1, fp
 800d092:	dd0f      	ble.n	800d0b4 <_strtod_l+0x604>
 800d094:	2b1f      	cmp	r3, #31
 800d096:	dd55      	ble.n	800d144 <_strtod_l+0x694>
 800d098:	2b34      	cmp	r3, #52	@ 0x34
 800d09a:	bfde      	ittt	le
 800d09c:	f04f 33ff 	movle.w	r3, #4294967295
 800d0a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d0a4:	4093      	lslle	r3, r2
 800d0a6:	f04f 0a00 	mov.w	sl, #0
 800d0aa:	bfcc      	ite	gt
 800d0ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d0b0:	ea03 0b01 	andle.w	fp, r3, r1
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	4650      	mov	r0, sl
 800d0ba:	4659      	mov	r1, fp
 800d0bc:	f7f3 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	d1a6      	bne.n	800d012 <_strtod_l+0x562>
 800d0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d0ca:	9805      	ldr	r0, [sp, #20]
 800d0cc:	462b      	mov	r3, r5
 800d0ce:	463a      	mov	r2, r7
 800d0d0:	f7ff f8c6 	bl	800c260 <__s2b>
 800d0d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	f43f af05 	beq.w	800cee6 <_strtod_l+0x436>
 800d0dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0de:	2a00      	cmp	r2, #0
 800d0e0:	eba9 0308 	sub.w	r3, r9, r8
 800d0e4:	bfa8      	it	ge
 800d0e6:	2300      	movge	r3, #0
 800d0e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d0ea:	2400      	movs	r4, #0
 800d0ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d0f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d0f2:	46a0      	mov	r8, r4
 800d0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f6:	9805      	ldr	r0, [sp, #20]
 800d0f8:	6859      	ldr	r1, [r3, #4]
 800d0fa:	f7ff f809 	bl	800c110 <_Balloc>
 800d0fe:	4681      	mov	r9, r0
 800d100:	2800      	cmp	r0, #0
 800d102:	f43f aef4 	beq.w	800ceee <_strtod_l+0x43e>
 800d106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d108:	691a      	ldr	r2, [r3, #16]
 800d10a:	3202      	adds	r2, #2
 800d10c:	f103 010c 	add.w	r1, r3, #12
 800d110:	0092      	lsls	r2, r2, #2
 800d112:	300c      	adds	r0, #12
 800d114:	f7fe f89b 	bl	800b24e <memcpy>
 800d118:	ec4b ab10 	vmov	d0, sl, fp
 800d11c:	9805      	ldr	r0, [sp, #20]
 800d11e:	aa1c      	add	r2, sp, #112	@ 0x70
 800d120:	a91b      	add	r1, sp, #108	@ 0x6c
 800d122:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d126:	f7ff fbd7 	bl	800c8d8 <__d2b>
 800d12a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f43f aede 	beq.w	800ceee <_strtod_l+0x43e>
 800d132:	9805      	ldr	r0, [sp, #20]
 800d134:	2101      	movs	r1, #1
 800d136:	f7ff f929 	bl	800c38c <__i2b>
 800d13a:	4680      	mov	r8, r0
 800d13c:	b948      	cbnz	r0, 800d152 <_strtod_l+0x6a2>
 800d13e:	f04f 0800 	mov.w	r8, #0
 800d142:	e6d4      	b.n	800ceee <_strtod_l+0x43e>
 800d144:	f04f 32ff 	mov.w	r2, #4294967295
 800d148:	fa02 f303 	lsl.w	r3, r2, r3
 800d14c:	ea03 0a0a 	and.w	sl, r3, sl
 800d150:	e7b0      	b.n	800d0b4 <_strtod_l+0x604>
 800d152:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d154:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d156:	2d00      	cmp	r5, #0
 800d158:	bfab      	itete	ge
 800d15a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d15c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d15e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d160:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d162:	bfac      	ite	ge
 800d164:	18ef      	addge	r7, r5, r3
 800d166:	1b5e      	sublt	r6, r3, r5
 800d168:	9b08      	ldr	r3, [sp, #32]
 800d16a:	1aed      	subs	r5, r5, r3
 800d16c:	4415      	add	r5, r2
 800d16e:	4b66      	ldr	r3, [pc, #408]	@ (800d308 <_strtod_l+0x858>)
 800d170:	3d01      	subs	r5, #1
 800d172:	429d      	cmp	r5, r3
 800d174:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d178:	da50      	bge.n	800d21c <_strtod_l+0x76c>
 800d17a:	1b5b      	subs	r3, r3, r5
 800d17c:	2b1f      	cmp	r3, #31
 800d17e:	eba2 0203 	sub.w	r2, r2, r3
 800d182:	f04f 0101 	mov.w	r1, #1
 800d186:	dc3d      	bgt.n	800d204 <_strtod_l+0x754>
 800d188:	fa01 f303 	lsl.w	r3, r1, r3
 800d18c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d18e:	2300      	movs	r3, #0
 800d190:	9310      	str	r3, [sp, #64]	@ 0x40
 800d192:	18bd      	adds	r5, r7, r2
 800d194:	9b08      	ldr	r3, [sp, #32]
 800d196:	42af      	cmp	r7, r5
 800d198:	4416      	add	r6, r2
 800d19a:	441e      	add	r6, r3
 800d19c:	463b      	mov	r3, r7
 800d19e:	bfa8      	it	ge
 800d1a0:	462b      	movge	r3, r5
 800d1a2:	42b3      	cmp	r3, r6
 800d1a4:	bfa8      	it	ge
 800d1a6:	4633      	movge	r3, r6
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	bfc2      	ittt	gt
 800d1ac:	1aed      	subgt	r5, r5, r3
 800d1ae:	1af6      	subgt	r6, r6, r3
 800d1b0:	1aff      	subgt	r7, r7, r3
 800d1b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	dd16      	ble.n	800d1e6 <_strtod_l+0x736>
 800d1b8:	4641      	mov	r1, r8
 800d1ba:	9805      	ldr	r0, [sp, #20]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f7ff f9a5 	bl	800c50c <__pow5mult>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d0ba      	beq.n	800d13e <_strtod_l+0x68e>
 800d1c8:	4601      	mov	r1, r0
 800d1ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d1cc:	9805      	ldr	r0, [sp, #20]
 800d1ce:	f7ff f8f3 	bl	800c3b8 <__multiply>
 800d1d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	f43f ae8a 	beq.w	800ceee <_strtod_l+0x43e>
 800d1da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1dc:	9805      	ldr	r0, [sp, #20]
 800d1de:	f7fe ffd7 	bl	800c190 <_Bfree>
 800d1e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1e6:	2d00      	cmp	r5, #0
 800d1e8:	dc1d      	bgt.n	800d226 <_strtod_l+0x776>
 800d1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	dd23      	ble.n	800d238 <_strtod_l+0x788>
 800d1f0:	4649      	mov	r1, r9
 800d1f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d1f4:	9805      	ldr	r0, [sp, #20]
 800d1f6:	f7ff f989 	bl	800c50c <__pow5mult>
 800d1fa:	4681      	mov	r9, r0
 800d1fc:	b9e0      	cbnz	r0, 800d238 <_strtod_l+0x788>
 800d1fe:	f04f 0900 	mov.w	r9, #0
 800d202:	e674      	b.n	800ceee <_strtod_l+0x43e>
 800d204:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d208:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d20c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d210:	35e2      	adds	r5, #226	@ 0xe2
 800d212:	fa01 f305 	lsl.w	r3, r1, r5
 800d216:	9310      	str	r3, [sp, #64]	@ 0x40
 800d218:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d21a:	e7ba      	b.n	800d192 <_strtod_l+0x6e2>
 800d21c:	2300      	movs	r3, #0
 800d21e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d220:	2301      	movs	r3, #1
 800d222:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d224:	e7b5      	b.n	800d192 <_strtod_l+0x6e2>
 800d226:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d228:	9805      	ldr	r0, [sp, #20]
 800d22a:	462a      	mov	r2, r5
 800d22c:	f7ff f9c8 	bl	800c5c0 <__lshift>
 800d230:	901a      	str	r0, [sp, #104]	@ 0x68
 800d232:	2800      	cmp	r0, #0
 800d234:	d1d9      	bne.n	800d1ea <_strtod_l+0x73a>
 800d236:	e65a      	b.n	800ceee <_strtod_l+0x43e>
 800d238:	2e00      	cmp	r6, #0
 800d23a:	dd07      	ble.n	800d24c <_strtod_l+0x79c>
 800d23c:	4649      	mov	r1, r9
 800d23e:	9805      	ldr	r0, [sp, #20]
 800d240:	4632      	mov	r2, r6
 800d242:	f7ff f9bd 	bl	800c5c0 <__lshift>
 800d246:	4681      	mov	r9, r0
 800d248:	2800      	cmp	r0, #0
 800d24a:	d0d8      	beq.n	800d1fe <_strtod_l+0x74e>
 800d24c:	2f00      	cmp	r7, #0
 800d24e:	dd08      	ble.n	800d262 <_strtod_l+0x7b2>
 800d250:	4641      	mov	r1, r8
 800d252:	9805      	ldr	r0, [sp, #20]
 800d254:	463a      	mov	r2, r7
 800d256:	f7ff f9b3 	bl	800c5c0 <__lshift>
 800d25a:	4680      	mov	r8, r0
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f43f ae46 	beq.w	800ceee <_strtod_l+0x43e>
 800d262:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d264:	9805      	ldr	r0, [sp, #20]
 800d266:	464a      	mov	r2, r9
 800d268:	f7ff fa32 	bl	800c6d0 <__mdiff>
 800d26c:	4604      	mov	r4, r0
 800d26e:	2800      	cmp	r0, #0
 800d270:	f43f ae3d 	beq.w	800ceee <_strtod_l+0x43e>
 800d274:	68c3      	ldr	r3, [r0, #12]
 800d276:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d278:	2300      	movs	r3, #0
 800d27a:	60c3      	str	r3, [r0, #12]
 800d27c:	4641      	mov	r1, r8
 800d27e:	f7ff fa0b 	bl	800c698 <__mcmp>
 800d282:	2800      	cmp	r0, #0
 800d284:	da46      	bge.n	800d314 <_strtod_l+0x864>
 800d286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d288:	ea53 030a 	orrs.w	r3, r3, sl
 800d28c:	d16c      	bne.n	800d368 <_strtod_l+0x8b8>
 800d28e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d292:	2b00      	cmp	r3, #0
 800d294:	d168      	bne.n	800d368 <_strtod_l+0x8b8>
 800d296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d29a:	0d1b      	lsrs	r3, r3, #20
 800d29c:	051b      	lsls	r3, r3, #20
 800d29e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2a2:	d961      	bls.n	800d368 <_strtod_l+0x8b8>
 800d2a4:	6963      	ldr	r3, [r4, #20]
 800d2a6:	b913      	cbnz	r3, 800d2ae <_strtod_l+0x7fe>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	dd5c      	ble.n	800d368 <_strtod_l+0x8b8>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	f7ff f984 	bl	800c5c0 <__lshift>
 800d2b8:	4641      	mov	r1, r8
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	f7ff f9ec 	bl	800c698 <__mcmp>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	dd51      	ble.n	800d368 <_strtod_l+0x8b8>
 800d2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2c8:	9a08      	ldr	r2, [sp, #32]
 800d2ca:	0d1b      	lsrs	r3, r3, #20
 800d2cc:	051b      	lsls	r3, r3, #20
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	d06b      	beq.n	800d3aa <_strtod_l+0x8fa>
 800d2d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2d6:	d868      	bhi.n	800d3aa <_strtod_l+0x8fa>
 800d2d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d2dc:	f67f ae9d 	bls.w	800d01a <_strtod_l+0x56a>
 800d2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d30c <_strtod_l+0x85c>)
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	4659      	mov	r1, fp
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f7f3 f98e 	bl	8000608 <__aeabi_dmul>
 800d2ec:	4b08      	ldr	r3, [pc, #32]	@ (800d310 <_strtod_l+0x860>)
 800d2ee:	400b      	ands	r3, r1
 800d2f0:	4682      	mov	sl, r0
 800d2f2:	468b      	mov	fp, r1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f47f ae05 	bne.w	800cf04 <_strtod_l+0x454>
 800d2fa:	9a05      	ldr	r2, [sp, #20]
 800d2fc:	2322      	movs	r3, #34	@ 0x22
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	e600      	b.n	800cf04 <_strtod_l+0x454>
 800d302:	bf00      	nop
 800d304:	0800e918 	.word	0x0800e918
 800d308:	fffffc02 	.word	0xfffffc02
 800d30c:	39500000 	.word	0x39500000
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d318:	d165      	bne.n	800d3e6 <_strtod_l+0x936>
 800d31a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d31c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d320:	b35a      	cbz	r2, 800d37a <_strtod_l+0x8ca>
 800d322:	4a9f      	ldr	r2, [pc, #636]	@ (800d5a0 <_strtod_l+0xaf0>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d12b      	bne.n	800d380 <_strtod_l+0x8d0>
 800d328:	9b08      	ldr	r3, [sp, #32]
 800d32a:	4651      	mov	r1, sl
 800d32c:	b303      	cbz	r3, 800d370 <_strtod_l+0x8c0>
 800d32e:	4b9d      	ldr	r3, [pc, #628]	@ (800d5a4 <_strtod_l+0xaf4>)
 800d330:	465a      	mov	r2, fp
 800d332:	4013      	ands	r3, r2
 800d334:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d338:	f04f 32ff 	mov.w	r2, #4294967295
 800d33c:	d81b      	bhi.n	800d376 <_strtod_l+0x8c6>
 800d33e:	0d1b      	lsrs	r3, r3, #20
 800d340:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d344:	fa02 f303 	lsl.w	r3, r2, r3
 800d348:	4299      	cmp	r1, r3
 800d34a:	d119      	bne.n	800d380 <_strtod_l+0x8d0>
 800d34c:	4b96      	ldr	r3, [pc, #600]	@ (800d5a8 <_strtod_l+0xaf8>)
 800d34e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d350:	429a      	cmp	r2, r3
 800d352:	d102      	bne.n	800d35a <_strtod_l+0x8aa>
 800d354:	3101      	adds	r1, #1
 800d356:	f43f adca 	beq.w	800ceee <_strtod_l+0x43e>
 800d35a:	4b92      	ldr	r3, [pc, #584]	@ (800d5a4 <_strtod_l+0xaf4>)
 800d35c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d35e:	401a      	ands	r2, r3
 800d360:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d364:	f04f 0a00 	mov.w	sl, #0
 800d368:	9b08      	ldr	r3, [sp, #32]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1b8      	bne.n	800d2e0 <_strtod_l+0x830>
 800d36e:	e5c9      	b.n	800cf04 <_strtod_l+0x454>
 800d370:	f04f 33ff 	mov.w	r3, #4294967295
 800d374:	e7e8      	b.n	800d348 <_strtod_l+0x898>
 800d376:	4613      	mov	r3, r2
 800d378:	e7e6      	b.n	800d348 <_strtod_l+0x898>
 800d37a:	ea53 030a 	orrs.w	r3, r3, sl
 800d37e:	d0a1      	beq.n	800d2c4 <_strtod_l+0x814>
 800d380:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d382:	b1db      	cbz	r3, 800d3bc <_strtod_l+0x90c>
 800d384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d386:	4213      	tst	r3, r2
 800d388:	d0ee      	beq.n	800d368 <_strtod_l+0x8b8>
 800d38a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d38c:	9a08      	ldr	r2, [sp, #32]
 800d38e:	4650      	mov	r0, sl
 800d390:	4659      	mov	r1, fp
 800d392:	b1bb      	cbz	r3, 800d3c4 <_strtod_l+0x914>
 800d394:	f7ff fb6e 	bl	800ca74 <sulp>
 800d398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d39c:	ec53 2b10 	vmov	r2, r3, d0
 800d3a0:	f7f2 ff7c 	bl	800029c <__adddf3>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	468b      	mov	fp, r1
 800d3a8:	e7de      	b.n	800d368 <_strtod_l+0x8b8>
 800d3aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d3ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3b6:	f04f 3aff 	mov.w	sl, #4294967295
 800d3ba:	e7d5      	b.n	800d368 <_strtod_l+0x8b8>
 800d3bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d3be:	ea13 0f0a 	tst.w	r3, sl
 800d3c2:	e7e1      	b.n	800d388 <_strtod_l+0x8d8>
 800d3c4:	f7ff fb56 	bl	800ca74 <sulp>
 800d3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3cc:	ec53 2b10 	vmov	r2, r3, d0
 800d3d0:	f7f2 ff62 	bl	8000298 <__aeabi_dsub>
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	4682      	mov	sl, r0
 800d3da:	468b      	mov	fp, r1
 800d3dc:	f7f3 fb7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d0c1      	beq.n	800d368 <_strtod_l+0x8b8>
 800d3e4:	e619      	b.n	800d01a <_strtod_l+0x56a>
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f7ff facd 	bl	800c988 <__ratio>
 800d3ee:	ec57 6b10 	vmov	r6, r7, d0
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f3 fb80 	bl	8000b00 <__aeabi_dcmple>
 800d400:	2800      	cmp	r0, #0
 800d402:	d06f      	beq.n	800d4e4 <_strtod_l+0xa34>
 800d404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d17a      	bne.n	800d500 <_strtod_l+0xa50>
 800d40a:	f1ba 0f00 	cmp.w	sl, #0
 800d40e:	d158      	bne.n	800d4c2 <_strtod_l+0xa12>
 800d410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d416:	2b00      	cmp	r3, #0
 800d418:	d15a      	bne.n	800d4d0 <_strtod_l+0xa20>
 800d41a:	4b64      	ldr	r3, [pc, #400]	@ (800d5ac <_strtod_l+0xafc>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	4630      	mov	r0, r6
 800d420:	4639      	mov	r1, r7
 800d422:	f7f3 fb63 	bl	8000aec <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	d159      	bne.n	800d4de <_strtod_l+0xa2e>
 800d42a:	4630      	mov	r0, r6
 800d42c:	4639      	mov	r1, r7
 800d42e:	4b60      	ldr	r3, [pc, #384]	@ (800d5b0 <_strtod_l+0xb00>)
 800d430:	2200      	movs	r2, #0
 800d432:	f7f3 f8e9 	bl	8000608 <__aeabi_dmul>
 800d436:	4606      	mov	r6, r0
 800d438:	460f      	mov	r7, r1
 800d43a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d43e:	9606      	str	r6, [sp, #24]
 800d440:	9307      	str	r3, [sp, #28]
 800d442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d446:	4d57      	ldr	r5, [pc, #348]	@ (800d5a4 <_strtod_l+0xaf4>)
 800d448:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d44e:	401d      	ands	r5, r3
 800d450:	4b58      	ldr	r3, [pc, #352]	@ (800d5b4 <_strtod_l+0xb04>)
 800d452:	429d      	cmp	r5, r3
 800d454:	f040 80b2 	bne.w	800d5bc <_strtod_l+0xb0c>
 800d458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d45a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d45e:	ec4b ab10 	vmov	d0, sl, fp
 800d462:	f7ff f9c9 	bl	800c7f8 <__ulp>
 800d466:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d46a:	ec51 0b10 	vmov	r0, r1, d0
 800d46e:	f7f3 f8cb 	bl	8000608 <__aeabi_dmul>
 800d472:	4652      	mov	r2, sl
 800d474:	465b      	mov	r3, fp
 800d476:	f7f2 ff11 	bl	800029c <__adddf3>
 800d47a:	460b      	mov	r3, r1
 800d47c:	4949      	ldr	r1, [pc, #292]	@ (800d5a4 <_strtod_l+0xaf4>)
 800d47e:	4a4e      	ldr	r2, [pc, #312]	@ (800d5b8 <_strtod_l+0xb08>)
 800d480:	4019      	ands	r1, r3
 800d482:	4291      	cmp	r1, r2
 800d484:	4682      	mov	sl, r0
 800d486:	d942      	bls.n	800d50e <_strtod_l+0xa5e>
 800d488:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d48a:	4b47      	ldr	r3, [pc, #284]	@ (800d5a8 <_strtod_l+0xaf8>)
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d103      	bne.n	800d498 <_strtod_l+0x9e8>
 800d490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d492:	3301      	adds	r3, #1
 800d494:	f43f ad2b 	beq.w	800ceee <_strtod_l+0x43e>
 800d498:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d5a8 <_strtod_l+0xaf8>
 800d49c:	f04f 3aff 	mov.w	sl, #4294967295
 800d4a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4a2:	9805      	ldr	r0, [sp, #20]
 800d4a4:	f7fe fe74 	bl	800c190 <_Bfree>
 800d4a8:	9805      	ldr	r0, [sp, #20]
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	f7fe fe70 	bl	800c190 <_Bfree>
 800d4b0:	9805      	ldr	r0, [sp, #20]
 800d4b2:	4641      	mov	r1, r8
 800d4b4:	f7fe fe6c 	bl	800c190 <_Bfree>
 800d4b8:	9805      	ldr	r0, [sp, #20]
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	f7fe fe68 	bl	800c190 <_Bfree>
 800d4c0:	e618      	b.n	800d0f4 <_strtod_l+0x644>
 800d4c2:	f1ba 0f01 	cmp.w	sl, #1
 800d4c6:	d103      	bne.n	800d4d0 <_strtod_l+0xa20>
 800d4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f43f ada5 	beq.w	800d01a <_strtod_l+0x56a>
 800d4d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d580 <_strtod_l+0xad0>
 800d4d4:	4f35      	ldr	r7, [pc, #212]	@ (800d5ac <_strtod_l+0xafc>)
 800d4d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d4da:	2600      	movs	r6, #0
 800d4dc:	e7b1      	b.n	800d442 <_strtod_l+0x992>
 800d4de:	4f34      	ldr	r7, [pc, #208]	@ (800d5b0 <_strtod_l+0xb00>)
 800d4e0:	2600      	movs	r6, #0
 800d4e2:	e7aa      	b.n	800d43a <_strtod_l+0x98a>
 800d4e4:	4b32      	ldr	r3, [pc, #200]	@ (800d5b0 <_strtod_l+0xb00>)
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f7f3 f88c 	bl	8000608 <__aeabi_dmul>
 800d4f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4f2:	4606      	mov	r6, r0
 800d4f4:	460f      	mov	r7, r1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d09f      	beq.n	800d43a <_strtod_l+0x98a>
 800d4fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d4fe:	e7a0      	b.n	800d442 <_strtod_l+0x992>
 800d500:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d588 <_strtod_l+0xad8>
 800d504:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d508:	ec57 6b17 	vmov	r6, r7, d7
 800d50c:	e799      	b.n	800d442 <_strtod_l+0x992>
 800d50e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1c1      	bne.n	800d4a0 <_strtod_l+0x9f0>
 800d51c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d520:	0d1b      	lsrs	r3, r3, #20
 800d522:	051b      	lsls	r3, r3, #20
 800d524:	429d      	cmp	r5, r3
 800d526:	d1bb      	bne.n	800d4a0 <_strtod_l+0x9f0>
 800d528:	4630      	mov	r0, r6
 800d52a:	4639      	mov	r1, r7
 800d52c:	f7f3 fbcc 	bl	8000cc8 <__aeabi_d2lz>
 800d530:	f7f3 f83c 	bl	80005ac <__aeabi_l2d>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4630      	mov	r0, r6
 800d53a:	4639      	mov	r1, r7
 800d53c:	f7f2 feac 	bl	8000298 <__aeabi_dsub>
 800d540:	460b      	mov	r3, r1
 800d542:	4602      	mov	r2, r0
 800d544:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d548:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d54e:	ea46 060a 	orr.w	r6, r6, sl
 800d552:	431e      	orrs	r6, r3
 800d554:	d06f      	beq.n	800d636 <_strtod_l+0xb86>
 800d556:	a30e      	add	r3, pc, #56	@ (adr r3, 800d590 <_strtod_l+0xae0>)
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	f7f3 fac6 	bl	8000aec <__aeabi_dcmplt>
 800d560:	2800      	cmp	r0, #0
 800d562:	f47f accf 	bne.w	800cf04 <_strtod_l+0x454>
 800d566:	a30c      	add	r3, pc, #48	@ (adr r3, 800d598 <_strtod_l+0xae8>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d570:	f7f3 fada 	bl	8000b28 <__aeabi_dcmpgt>
 800d574:	2800      	cmp	r0, #0
 800d576:	d093      	beq.n	800d4a0 <_strtod_l+0x9f0>
 800d578:	e4c4      	b.n	800cf04 <_strtod_l+0x454>
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w
 800d580:	00000000 	.word	0x00000000
 800d584:	bff00000 	.word	0xbff00000
 800d588:	00000000 	.word	0x00000000
 800d58c:	3ff00000 	.word	0x3ff00000
 800d590:	94a03595 	.word	0x94a03595
 800d594:	3fdfffff 	.word	0x3fdfffff
 800d598:	35afe535 	.word	0x35afe535
 800d59c:	3fe00000 	.word	0x3fe00000
 800d5a0:	000fffff 	.word	0x000fffff
 800d5a4:	7ff00000 	.word	0x7ff00000
 800d5a8:	7fefffff 	.word	0x7fefffff
 800d5ac:	3ff00000 	.word	0x3ff00000
 800d5b0:	3fe00000 	.word	0x3fe00000
 800d5b4:	7fe00000 	.word	0x7fe00000
 800d5b8:	7c9fffff 	.word	0x7c9fffff
 800d5bc:	9b08      	ldr	r3, [sp, #32]
 800d5be:	b323      	cbz	r3, 800d60a <_strtod_l+0xb5a>
 800d5c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d5c4:	d821      	bhi.n	800d60a <_strtod_l+0xb5a>
 800d5c6:	a328      	add	r3, pc, #160	@ (adr r3, 800d668 <_strtod_l+0xbb8>)
 800d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	f7f3 fa96 	bl	8000b00 <__aeabi_dcmple>
 800d5d4:	b1a0      	cbz	r0, 800d600 <_strtod_l+0xb50>
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7f3 faed 	bl	8000bb8 <__aeabi_d2uiz>
 800d5de:	2801      	cmp	r0, #1
 800d5e0:	bf38      	it	cc
 800d5e2:	2001      	movcc	r0, #1
 800d5e4:	f7f2 ff96 	bl	8000514 <__aeabi_ui2d>
 800d5e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5ea:	4606      	mov	r6, r0
 800d5ec:	460f      	mov	r7, r1
 800d5ee:	b9fb      	cbnz	r3, 800d630 <_strtod_l+0xb80>
 800d5f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d5f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d5f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d5f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d5fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d600:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d602:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d606:	1b5b      	subs	r3, r3, r5
 800d608:	9311      	str	r3, [sp, #68]	@ 0x44
 800d60a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d60e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d612:	f7ff f8f1 	bl	800c7f8 <__ulp>
 800d616:	4650      	mov	r0, sl
 800d618:	ec53 2b10 	vmov	r2, r3, d0
 800d61c:	4659      	mov	r1, fp
 800d61e:	f7f2 fff3 	bl	8000608 <__aeabi_dmul>
 800d622:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d626:	f7f2 fe39 	bl	800029c <__adddf3>
 800d62a:	4682      	mov	sl, r0
 800d62c:	468b      	mov	fp, r1
 800d62e:	e770      	b.n	800d512 <_strtod_l+0xa62>
 800d630:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d634:	e7e0      	b.n	800d5f8 <_strtod_l+0xb48>
 800d636:	a30e      	add	r3, pc, #56	@ (adr r3, 800d670 <_strtod_l+0xbc0>)
 800d638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63c:	f7f3 fa56 	bl	8000aec <__aeabi_dcmplt>
 800d640:	e798      	b.n	800d574 <_strtod_l+0xac4>
 800d642:	2300      	movs	r3, #0
 800d644:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d646:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d648:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d64a:	6013      	str	r3, [r2, #0]
 800d64c:	f7ff ba6d 	b.w	800cb2a <_strtod_l+0x7a>
 800d650:	2a65      	cmp	r2, #101	@ 0x65
 800d652:	f43f ab66 	beq.w	800cd22 <_strtod_l+0x272>
 800d656:	2a45      	cmp	r2, #69	@ 0x45
 800d658:	f43f ab63 	beq.w	800cd22 <_strtod_l+0x272>
 800d65c:	2301      	movs	r3, #1
 800d65e:	f7ff bb9e 	b.w	800cd9e <_strtod_l+0x2ee>
 800d662:	bf00      	nop
 800d664:	f3af 8000 	nop.w
 800d668:	ffc00000 	.word	0xffc00000
 800d66c:	41dfffff 	.word	0x41dfffff
 800d670:	94a03595 	.word	0x94a03595
 800d674:	3fcfffff 	.word	0x3fcfffff

0800d678 <_strtod_r>:
 800d678:	4b01      	ldr	r3, [pc, #4]	@ (800d680 <_strtod_r+0x8>)
 800d67a:	f7ff ba19 	b.w	800cab0 <_strtod_l>
 800d67e:	bf00      	nop
 800d680:	20000328 	.word	0x20000328

0800d684 <_strtol_l.constprop.0>:
 800d684:	2b24      	cmp	r3, #36	@ 0x24
 800d686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d68a:	4686      	mov	lr, r0
 800d68c:	4690      	mov	r8, r2
 800d68e:	d801      	bhi.n	800d694 <_strtol_l.constprop.0+0x10>
 800d690:	2b01      	cmp	r3, #1
 800d692:	d106      	bne.n	800d6a2 <_strtol_l.constprop.0+0x1e>
 800d694:	f7fd fda6 	bl	800b1e4 <__errno>
 800d698:	2316      	movs	r3, #22
 800d69a:	6003      	str	r3, [r0, #0]
 800d69c:	2000      	movs	r0, #0
 800d69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a2:	4834      	ldr	r0, [pc, #208]	@ (800d774 <_strtol_l.constprop.0+0xf0>)
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6ac:	5d06      	ldrb	r6, [r0, r4]
 800d6ae:	f016 0608 	ands.w	r6, r6, #8
 800d6b2:	d1f8      	bne.n	800d6a6 <_strtol_l.constprop.0+0x22>
 800d6b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d6b6:	d12d      	bne.n	800d714 <_strtol_l.constprop.0+0x90>
 800d6b8:	782c      	ldrb	r4, [r5, #0]
 800d6ba:	2601      	movs	r6, #1
 800d6bc:	1c95      	adds	r5, r2, #2
 800d6be:	f033 0210 	bics.w	r2, r3, #16
 800d6c2:	d109      	bne.n	800d6d8 <_strtol_l.constprop.0+0x54>
 800d6c4:	2c30      	cmp	r4, #48	@ 0x30
 800d6c6:	d12a      	bne.n	800d71e <_strtol_l.constprop.0+0x9a>
 800d6c8:	782a      	ldrb	r2, [r5, #0]
 800d6ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d6ce:	2a58      	cmp	r2, #88	@ 0x58
 800d6d0:	d125      	bne.n	800d71e <_strtol_l.constprop.0+0x9a>
 800d6d2:	786c      	ldrb	r4, [r5, #1]
 800d6d4:	2310      	movs	r3, #16
 800d6d6:	3502      	adds	r5, #2
 800d6d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d6dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	fbbc f9f3 	udiv	r9, ip, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d6ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d6f0:	2f09      	cmp	r7, #9
 800d6f2:	d81b      	bhi.n	800d72c <_strtol_l.constprop.0+0xa8>
 800d6f4:	463c      	mov	r4, r7
 800d6f6:	42a3      	cmp	r3, r4
 800d6f8:	dd27      	ble.n	800d74a <_strtol_l.constprop.0+0xc6>
 800d6fa:	1c57      	adds	r7, r2, #1
 800d6fc:	d007      	beq.n	800d70e <_strtol_l.constprop.0+0x8a>
 800d6fe:	4581      	cmp	r9, r0
 800d700:	d320      	bcc.n	800d744 <_strtol_l.constprop.0+0xc0>
 800d702:	d101      	bne.n	800d708 <_strtol_l.constprop.0+0x84>
 800d704:	45a2      	cmp	sl, r4
 800d706:	db1d      	blt.n	800d744 <_strtol_l.constprop.0+0xc0>
 800d708:	fb00 4003 	mla	r0, r0, r3, r4
 800d70c:	2201      	movs	r2, #1
 800d70e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d712:	e7eb      	b.n	800d6ec <_strtol_l.constprop.0+0x68>
 800d714:	2c2b      	cmp	r4, #43	@ 0x2b
 800d716:	bf04      	itt	eq
 800d718:	782c      	ldrbeq	r4, [r5, #0]
 800d71a:	1c95      	addeq	r5, r2, #2
 800d71c:	e7cf      	b.n	800d6be <_strtol_l.constprop.0+0x3a>
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1da      	bne.n	800d6d8 <_strtol_l.constprop.0+0x54>
 800d722:	2c30      	cmp	r4, #48	@ 0x30
 800d724:	bf0c      	ite	eq
 800d726:	2308      	moveq	r3, #8
 800d728:	230a      	movne	r3, #10
 800d72a:	e7d5      	b.n	800d6d8 <_strtol_l.constprop.0+0x54>
 800d72c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d730:	2f19      	cmp	r7, #25
 800d732:	d801      	bhi.n	800d738 <_strtol_l.constprop.0+0xb4>
 800d734:	3c37      	subs	r4, #55	@ 0x37
 800d736:	e7de      	b.n	800d6f6 <_strtol_l.constprop.0+0x72>
 800d738:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d73c:	2f19      	cmp	r7, #25
 800d73e:	d804      	bhi.n	800d74a <_strtol_l.constprop.0+0xc6>
 800d740:	3c57      	subs	r4, #87	@ 0x57
 800d742:	e7d8      	b.n	800d6f6 <_strtol_l.constprop.0+0x72>
 800d744:	f04f 32ff 	mov.w	r2, #4294967295
 800d748:	e7e1      	b.n	800d70e <_strtol_l.constprop.0+0x8a>
 800d74a:	1c53      	adds	r3, r2, #1
 800d74c:	d108      	bne.n	800d760 <_strtol_l.constprop.0+0xdc>
 800d74e:	2322      	movs	r3, #34	@ 0x22
 800d750:	f8ce 3000 	str.w	r3, [lr]
 800d754:	4660      	mov	r0, ip
 800d756:	f1b8 0f00 	cmp.w	r8, #0
 800d75a:	d0a0      	beq.n	800d69e <_strtol_l.constprop.0+0x1a>
 800d75c:	1e69      	subs	r1, r5, #1
 800d75e:	e006      	b.n	800d76e <_strtol_l.constprop.0+0xea>
 800d760:	b106      	cbz	r6, 800d764 <_strtol_l.constprop.0+0xe0>
 800d762:	4240      	negs	r0, r0
 800d764:	f1b8 0f00 	cmp.w	r8, #0
 800d768:	d099      	beq.n	800d69e <_strtol_l.constprop.0+0x1a>
 800d76a:	2a00      	cmp	r2, #0
 800d76c:	d1f6      	bne.n	800d75c <_strtol_l.constprop.0+0xd8>
 800d76e:	f8c8 1000 	str.w	r1, [r8]
 800d772:	e794      	b.n	800d69e <_strtol_l.constprop.0+0x1a>
 800d774:	0800e941 	.word	0x0800e941

0800d778 <_strtol_r>:
 800d778:	f7ff bf84 	b.w	800d684 <_strtol_l.constprop.0>

0800d77c <__ssputs_r>:
 800d77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d780:	688e      	ldr	r6, [r1, #8]
 800d782:	461f      	mov	r7, r3
 800d784:	42be      	cmp	r6, r7
 800d786:	680b      	ldr	r3, [r1, #0]
 800d788:	4682      	mov	sl, r0
 800d78a:	460c      	mov	r4, r1
 800d78c:	4690      	mov	r8, r2
 800d78e:	d82d      	bhi.n	800d7ec <__ssputs_r+0x70>
 800d790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d794:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d798:	d026      	beq.n	800d7e8 <__ssputs_r+0x6c>
 800d79a:	6965      	ldr	r5, [r4, #20]
 800d79c:	6909      	ldr	r1, [r1, #16]
 800d79e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7a2:	eba3 0901 	sub.w	r9, r3, r1
 800d7a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7aa:	1c7b      	adds	r3, r7, #1
 800d7ac:	444b      	add	r3, r9
 800d7ae:	106d      	asrs	r5, r5, #1
 800d7b0:	429d      	cmp	r5, r3
 800d7b2:	bf38      	it	cc
 800d7b4:	461d      	movcc	r5, r3
 800d7b6:	0553      	lsls	r3, r2, #21
 800d7b8:	d527      	bpl.n	800d80a <__ssputs_r+0x8e>
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7fe fc1c 	bl	800bff8 <_malloc_r>
 800d7c0:	4606      	mov	r6, r0
 800d7c2:	b360      	cbz	r0, 800d81e <__ssputs_r+0xa2>
 800d7c4:	6921      	ldr	r1, [r4, #16]
 800d7c6:	464a      	mov	r2, r9
 800d7c8:	f7fd fd41 	bl	800b24e <memcpy>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7d6:	81a3      	strh	r3, [r4, #12]
 800d7d8:	6126      	str	r6, [r4, #16]
 800d7da:	6165      	str	r5, [r4, #20]
 800d7dc:	444e      	add	r6, r9
 800d7de:	eba5 0509 	sub.w	r5, r5, r9
 800d7e2:	6026      	str	r6, [r4, #0]
 800d7e4:	60a5      	str	r5, [r4, #8]
 800d7e6:	463e      	mov	r6, r7
 800d7e8:	42be      	cmp	r6, r7
 800d7ea:	d900      	bls.n	800d7ee <__ssputs_r+0x72>
 800d7ec:	463e      	mov	r6, r7
 800d7ee:	6820      	ldr	r0, [r4, #0]
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	f000 fabe 	bl	800dd74 <memmove>
 800d7f8:	68a3      	ldr	r3, [r4, #8]
 800d7fa:	1b9b      	subs	r3, r3, r6
 800d7fc:	60a3      	str	r3, [r4, #8]
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	4433      	add	r3, r6
 800d802:	6023      	str	r3, [r4, #0]
 800d804:	2000      	movs	r0, #0
 800d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80a:	462a      	mov	r2, r5
 800d80c:	f000 fe95 	bl	800e53a <_realloc_r>
 800d810:	4606      	mov	r6, r0
 800d812:	2800      	cmp	r0, #0
 800d814:	d1e0      	bne.n	800d7d8 <__ssputs_r+0x5c>
 800d816:	6921      	ldr	r1, [r4, #16]
 800d818:	4650      	mov	r0, sl
 800d81a:	f7fe fb79 	bl	800bf10 <_free_r>
 800d81e:	230c      	movs	r3, #12
 800d820:	f8ca 3000 	str.w	r3, [sl]
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	f04f 30ff 	mov.w	r0, #4294967295
 800d830:	e7e9      	b.n	800d806 <__ssputs_r+0x8a>
	...

0800d834 <_svfiprintf_r>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	4698      	mov	r8, r3
 800d83a:	898b      	ldrh	r3, [r1, #12]
 800d83c:	061b      	lsls	r3, r3, #24
 800d83e:	b09d      	sub	sp, #116	@ 0x74
 800d840:	4607      	mov	r7, r0
 800d842:	460d      	mov	r5, r1
 800d844:	4614      	mov	r4, r2
 800d846:	d510      	bpl.n	800d86a <_svfiprintf_r+0x36>
 800d848:	690b      	ldr	r3, [r1, #16]
 800d84a:	b973      	cbnz	r3, 800d86a <_svfiprintf_r+0x36>
 800d84c:	2140      	movs	r1, #64	@ 0x40
 800d84e:	f7fe fbd3 	bl	800bff8 <_malloc_r>
 800d852:	6028      	str	r0, [r5, #0]
 800d854:	6128      	str	r0, [r5, #16]
 800d856:	b930      	cbnz	r0, 800d866 <_svfiprintf_r+0x32>
 800d858:	230c      	movs	r3, #12
 800d85a:	603b      	str	r3, [r7, #0]
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295
 800d860:	b01d      	add	sp, #116	@ 0x74
 800d862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d866:	2340      	movs	r3, #64	@ 0x40
 800d868:	616b      	str	r3, [r5, #20]
 800d86a:	2300      	movs	r3, #0
 800d86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d86e:	2320      	movs	r3, #32
 800d870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d874:	f8cd 800c 	str.w	r8, [sp, #12]
 800d878:	2330      	movs	r3, #48	@ 0x30
 800d87a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800da18 <_svfiprintf_r+0x1e4>
 800d87e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d882:	f04f 0901 	mov.w	r9, #1
 800d886:	4623      	mov	r3, r4
 800d888:	469a      	mov	sl, r3
 800d88a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d88e:	b10a      	cbz	r2, 800d894 <_svfiprintf_r+0x60>
 800d890:	2a25      	cmp	r2, #37	@ 0x25
 800d892:	d1f9      	bne.n	800d888 <_svfiprintf_r+0x54>
 800d894:	ebba 0b04 	subs.w	fp, sl, r4
 800d898:	d00b      	beq.n	800d8b2 <_svfiprintf_r+0x7e>
 800d89a:	465b      	mov	r3, fp
 800d89c:	4622      	mov	r2, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	4638      	mov	r0, r7
 800d8a2:	f7ff ff6b 	bl	800d77c <__ssputs_r>
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f000 80a7 	beq.w	800d9fa <_svfiprintf_r+0x1c6>
 800d8ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ae:	445a      	add	r2, fp
 800d8b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 809f 	beq.w	800d9fa <_svfiprintf_r+0x1c6>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c6:	f10a 0a01 	add.w	sl, sl, #1
 800d8ca:	9304      	str	r3, [sp, #16]
 800d8cc:	9307      	str	r3, [sp, #28]
 800d8ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d8d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d8d4:	4654      	mov	r4, sl
 800d8d6:	2205      	movs	r2, #5
 800d8d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8dc:	484e      	ldr	r0, [pc, #312]	@ (800da18 <_svfiprintf_r+0x1e4>)
 800d8de:	f7f2 fc7f 	bl	80001e0 <memchr>
 800d8e2:	9a04      	ldr	r2, [sp, #16]
 800d8e4:	b9d8      	cbnz	r0, 800d91e <_svfiprintf_r+0xea>
 800d8e6:	06d0      	lsls	r0, r2, #27
 800d8e8:	bf44      	itt	mi
 800d8ea:	2320      	movmi	r3, #32
 800d8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8f0:	0711      	lsls	r1, r2, #28
 800d8f2:	bf44      	itt	mi
 800d8f4:	232b      	movmi	r3, #43	@ 0x2b
 800d8f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d8fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d900:	d015      	beq.n	800d92e <_svfiprintf_r+0xfa>
 800d902:	9a07      	ldr	r2, [sp, #28]
 800d904:	4654      	mov	r4, sl
 800d906:	2000      	movs	r0, #0
 800d908:	f04f 0c0a 	mov.w	ip, #10
 800d90c:	4621      	mov	r1, r4
 800d90e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d912:	3b30      	subs	r3, #48	@ 0x30
 800d914:	2b09      	cmp	r3, #9
 800d916:	d94b      	bls.n	800d9b0 <_svfiprintf_r+0x17c>
 800d918:	b1b0      	cbz	r0, 800d948 <_svfiprintf_r+0x114>
 800d91a:	9207      	str	r2, [sp, #28]
 800d91c:	e014      	b.n	800d948 <_svfiprintf_r+0x114>
 800d91e:	eba0 0308 	sub.w	r3, r0, r8
 800d922:	fa09 f303 	lsl.w	r3, r9, r3
 800d926:	4313      	orrs	r3, r2
 800d928:	9304      	str	r3, [sp, #16]
 800d92a:	46a2      	mov	sl, r4
 800d92c:	e7d2      	b.n	800d8d4 <_svfiprintf_r+0xa0>
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	1d19      	adds	r1, r3, #4
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	9103      	str	r1, [sp, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	bfbb      	ittet	lt
 800d93a:	425b      	neglt	r3, r3
 800d93c:	f042 0202 	orrlt.w	r2, r2, #2
 800d940:	9307      	strge	r3, [sp, #28]
 800d942:	9307      	strlt	r3, [sp, #28]
 800d944:	bfb8      	it	lt
 800d946:	9204      	strlt	r2, [sp, #16]
 800d948:	7823      	ldrb	r3, [r4, #0]
 800d94a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d94c:	d10a      	bne.n	800d964 <_svfiprintf_r+0x130>
 800d94e:	7863      	ldrb	r3, [r4, #1]
 800d950:	2b2a      	cmp	r3, #42	@ 0x2a
 800d952:	d132      	bne.n	800d9ba <_svfiprintf_r+0x186>
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	1d1a      	adds	r2, r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	9203      	str	r2, [sp, #12]
 800d95c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d960:	3402      	adds	r4, #2
 800d962:	9305      	str	r3, [sp, #20]
 800d964:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800da28 <_svfiprintf_r+0x1f4>
 800d968:	7821      	ldrb	r1, [r4, #0]
 800d96a:	2203      	movs	r2, #3
 800d96c:	4650      	mov	r0, sl
 800d96e:	f7f2 fc37 	bl	80001e0 <memchr>
 800d972:	b138      	cbz	r0, 800d984 <_svfiprintf_r+0x150>
 800d974:	9b04      	ldr	r3, [sp, #16]
 800d976:	eba0 000a 	sub.w	r0, r0, sl
 800d97a:	2240      	movs	r2, #64	@ 0x40
 800d97c:	4082      	lsls	r2, r0
 800d97e:	4313      	orrs	r3, r2
 800d980:	3401      	adds	r4, #1
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d988:	4824      	ldr	r0, [pc, #144]	@ (800da1c <_svfiprintf_r+0x1e8>)
 800d98a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d98e:	2206      	movs	r2, #6
 800d990:	f7f2 fc26 	bl	80001e0 <memchr>
 800d994:	2800      	cmp	r0, #0
 800d996:	d036      	beq.n	800da06 <_svfiprintf_r+0x1d2>
 800d998:	4b21      	ldr	r3, [pc, #132]	@ (800da20 <_svfiprintf_r+0x1ec>)
 800d99a:	bb1b      	cbnz	r3, 800d9e4 <_svfiprintf_r+0x1b0>
 800d99c:	9b03      	ldr	r3, [sp, #12]
 800d99e:	3307      	adds	r3, #7
 800d9a0:	f023 0307 	bic.w	r3, r3, #7
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	9303      	str	r3, [sp, #12]
 800d9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9aa:	4433      	add	r3, r6
 800d9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ae:	e76a      	b.n	800d886 <_svfiprintf_r+0x52>
 800d9b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9b4:	460c      	mov	r4, r1
 800d9b6:	2001      	movs	r0, #1
 800d9b8:	e7a8      	b.n	800d90c <_svfiprintf_r+0xd8>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	3401      	adds	r4, #1
 800d9be:	9305      	str	r3, [sp, #20]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	f04f 0c0a 	mov.w	ip, #10
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9cc:	3a30      	subs	r2, #48	@ 0x30
 800d9ce:	2a09      	cmp	r2, #9
 800d9d0:	d903      	bls.n	800d9da <_svfiprintf_r+0x1a6>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0c6      	beq.n	800d964 <_svfiprintf_r+0x130>
 800d9d6:	9105      	str	r1, [sp, #20]
 800d9d8:	e7c4      	b.n	800d964 <_svfiprintf_r+0x130>
 800d9da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9de:	4604      	mov	r4, r0
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e7f0      	b.n	800d9c6 <_svfiprintf_r+0x192>
 800d9e4:	ab03      	add	r3, sp, #12
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	462a      	mov	r2, r5
 800d9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800da24 <_svfiprintf_r+0x1f0>)
 800d9ec:	a904      	add	r1, sp, #16
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f7fc faf0 	bl	8009fd4 <_printf_float>
 800d9f4:	1c42      	adds	r2, r0, #1
 800d9f6:	4606      	mov	r6, r0
 800d9f8:	d1d6      	bne.n	800d9a8 <_svfiprintf_r+0x174>
 800d9fa:	89ab      	ldrh	r3, [r5, #12]
 800d9fc:	065b      	lsls	r3, r3, #25
 800d9fe:	f53f af2d 	bmi.w	800d85c <_svfiprintf_r+0x28>
 800da02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da04:	e72c      	b.n	800d860 <_svfiprintf_r+0x2c>
 800da06:	ab03      	add	r3, sp, #12
 800da08:	9300      	str	r3, [sp, #0]
 800da0a:	462a      	mov	r2, r5
 800da0c:	4b05      	ldr	r3, [pc, #20]	@ (800da24 <_svfiprintf_r+0x1f0>)
 800da0e:	a904      	add	r1, sp, #16
 800da10:	4638      	mov	r0, r7
 800da12:	f7fc fd77 	bl	800a504 <_printf_i>
 800da16:	e7ed      	b.n	800d9f4 <_svfiprintf_r+0x1c0>
 800da18:	0800ea41 	.word	0x0800ea41
 800da1c:	0800ea4b 	.word	0x0800ea4b
 800da20:	08009fd5 	.word	0x08009fd5
 800da24:	0800d77d 	.word	0x0800d77d
 800da28:	0800ea47 	.word	0x0800ea47

0800da2c <__sfputc_r>:
 800da2c:	6893      	ldr	r3, [r2, #8]
 800da2e:	3b01      	subs	r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	b410      	push	{r4}
 800da34:	6093      	str	r3, [r2, #8]
 800da36:	da08      	bge.n	800da4a <__sfputc_r+0x1e>
 800da38:	6994      	ldr	r4, [r2, #24]
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	db01      	blt.n	800da42 <__sfputc_r+0x16>
 800da3e:	290a      	cmp	r1, #10
 800da40:	d103      	bne.n	800da4a <__sfputc_r+0x1e>
 800da42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da46:	f7fd bae6 	b.w	800b016 <__swbuf_r>
 800da4a:	6813      	ldr	r3, [r2, #0]
 800da4c:	1c58      	adds	r0, r3, #1
 800da4e:	6010      	str	r0, [r2, #0]
 800da50:	7019      	strb	r1, [r3, #0]
 800da52:	4608      	mov	r0, r1
 800da54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da58:	4770      	bx	lr

0800da5a <__sfputs_r>:
 800da5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5c:	4606      	mov	r6, r0
 800da5e:	460f      	mov	r7, r1
 800da60:	4614      	mov	r4, r2
 800da62:	18d5      	adds	r5, r2, r3
 800da64:	42ac      	cmp	r4, r5
 800da66:	d101      	bne.n	800da6c <__sfputs_r+0x12>
 800da68:	2000      	movs	r0, #0
 800da6a:	e007      	b.n	800da7c <__sfputs_r+0x22>
 800da6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da70:	463a      	mov	r2, r7
 800da72:	4630      	mov	r0, r6
 800da74:	f7ff ffda 	bl	800da2c <__sfputc_r>
 800da78:	1c43      	adds	r3, r0, #1
 800da7a:	d1f3      	bne.n	800da64 <__sfputs_r+0xa>
 800da7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da80 <_vfiprintf_r>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	460d      	mov	r5, r1
 800da86:	b09d      	sub	sp, #116	@ 0x74
 800da88:	4614      	mov	r4, r2
 800da8a:	4698      	mov	r8, r3
 800da8c:	4606      	mov	r6, r0
 800da8e:	b118      	cbz	r0, 800da98 <_vfiprintf_r+0x18>
 800da90:	6a03      	ldr	r3, [r0, #32]
 800da92:	b90b      	cbnz	r3, 800da98 <_vfiprintf_r+0x18>
 800da94:	f7fd f9b6 	bl	800ae04 <__sinit>
 800da98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da9a:	07d9      	lsls	r1, r3, #31
 800da9c:	d405      	bmi.n	800daaa <_vfiprintf_r+0x2a>
 800da9e:	89ab      	ldrh	r3, [r5, #12]
 800daa0:	059a      	lsls	r2, r3, #22
 800daa2:	d402      	bmi.n	800daaa <_vfiprintf_r+0x2a>
 800daa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daa6:	f7fd fbc8 	bl	800b23a <__retarget_lock_acquire_recursive>
 800daaa:	89ab      	ldrh	r3, [r5, #12]
 800daac:	071b      	lsls	r3, r3, #28
 800daae:	d501      	bpl.n	800dab4 <_vfiprintf_r+0x34>
 800dab0:	692b      	ldr	r3, [r5, #16]
 800dab2:	b99b      	cbnz	r3, 800dadc <_vfiprintf_r+0x5c>
 800dab4:	4629      	mov	r1, r5
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7fd faec 	bl	800b094 <__swsetup_r>
 800dabc:	b170      	cbz	r0, 800dadc <_vfiprintf_r+0x5c>
 800dabe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dac0:	07dc      	lsls	r4, r3, #31
 800dac2:	d504      	bpl.n	800dace <_vfiprintf_r+0x4e>
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	b01d      	add	sp, #116	@ 0x74
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	0598      	lsls	r0, r3, #22
 800dad2:	d4f7      	bmi.n	800dac4 <_vfiprintf_r+0x44>
 800dad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dad6:	f7fd fbb1 	bl	800b23c <__retarget_lock_release_recursive>
 800dada:	e7f3      	b.n	800dac4 <_vfiprintf_r+0x44>
 800dadc:	2300      	movs	r3, #0
 800dade:	9309      	str	r3, [sp, #36]	@ 0x24
 800dae0:	2320      	movs	r3, #32
 800dae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dae6:	f8cd 800c 	str.w	r8, [sp, #12]
 800daea:	2330      	movs	r3, #48	@ 0x30
 800daec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc9c <_vfiprintf_r+0x21c>
 800daf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800daf4:	f04f 0901 	mov.w	r9, #1
 800daf8:	4623      	mov	r3, r4
 800dafa:	469a      	mov	sl, r3
 800dafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db00:	b10a      	cbz	r2, 800db06 <_vfiprintf_r+0x86>
 800db02:	2a25      	cmp	r2, #37	@ 0x25
 800db04:	d1f9      	bne.n	800dafa <_vfiprintf_r+0x7a>
 800db06:	ebba 0b04 	subs.w	fp, sl, r4
 800db0a:	d00b      	beq.n	800db24 <_vfiprintf_r+0xa4>
 800db0c:	465b      	mov	r3, fp
 800db0e:	4622      	mov	r2, r4
 800db10:	4629      	mov	r1, r5
 800db12:	4630      	mov	r0, r6
 800db14:	f7ff ffa1 	bl	800da5a <__sfputs_r>
 800db18:	3001      	adds	r0, #1
 800db1a:	f000 80a7 	beq.w	800dc6c <_vfiprintf_r+0x1ec>
 800db1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db20:	445a      	add	r2, fp
 800db22:	9209      	str	r2, [sp, #36]	@ 0x24
 800db24:	f89a 3000 	ldrb.w	r3, [sl]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 809f 	beq.w	800dc6c <_vfiprintf_r+0x1ec>
 800db2e:	2300      	movs	r3, #0
 800db30:	f04f 32ff 	mov.w	r2, #4294967295
 800db34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db38:	f10a 0a01 	add.w	sl, sl, #1
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	9307      	str	r3, [sp, #28]
 800db40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db44:	931a      	str	r3, [sp, #104]	@ 0x68
 800db46:	4654      	mov	r4, sl
 800db48:	2205      	movs	r2, #5
 800db4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4e:	4853      	ldr	r0, [pc, #332]	@ (800dc9c <_vfiprintf_r+0x21c>)
 800db50:	f7f2 fb46 	bl	80001e0 <memchr>
 800db54:	9a04      	ldr	r2, [sp, #16]
 800db56:	b9d8      	cbnz	r0, 800db90 <_vfiprintf_r+0x110>
 800db58:	06d1      	lsls	r1, r2, #27
 800db5a:	bf44      	itt	mi
 800db5c:	2320      	movmi	r3, #32
 800db5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db62:	0713      	lsls	r3, r2, #28
 800db64:	bf44      	itt	mi
 800db66:	232b      	movmi	r3, #43	@ 0x2b
 800db68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db6c:	f89a 3000 	ldrb.w	r3, [sl]
 800db70:	2b2a      	cmp	r3, #42	@ 0x2a
 800db72:	d015      	beq.n	800dba0 <_vfiprintf_r+0x120>
 800db74:	9a07      	ldr	r2, [sp, #28]
 800db76:	4654      	mov	r4, sl
 800db78:	2000      	movs	r0, #0
 800db7a:	f04f 0c0a 	mov.w	ip, #10
 800db7e:	4621      	mov	r1, r4
 800db80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db84:	3b30      	subs	r3, #48	@ 0x30
 800db86:	2b09      	cmp	r3, #9
 800db88:	d94b      	bls.n	800dc22 <_vfiprintf_r+0x1a2>
 800db8a:	b1b0      	cbz	r0, 800dbba <_vfiprintf_r+0x13a>
 800db8c:	9207      	str	r2, [sp, #28]
 800db8e:	e014      	b.n	800dbba <_vfiprintf_r+0x13a>
 800db90:	eba0 0308 	sub.w	r3, r0, r8
 800db94:	fa09 f303 	lsl.w	r3, r9, r3
 800db98:	4313      	orrs	r3, r2
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	46a2      	mov	sl, r4
 800db9e:	e7d2      	b.n	800db46 <_vfiprintf_r+0xc6>
 800dba0:	9b03      	ldr	r3, [sp, #12]
 800dba2:	1d19      	adds	r1, r3, #4
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	9103      	str	r1, [sp, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	bfbb      	ittet	lt
 800dbac:	425b      	neglt	r3, r3
 800dbae:	f042 0202 	orrlt.w	r2, r2, #2
 800dbb2:	9307      	strge	r3, [sp, #28]
 800dbb4:	9307      	strlt	r3, [sp, #28]
 800dbb6:	bfb8      	it	lt
 800dbb8:	9204      	strlt	r2, [sp, #16]
 800dbba:	7823      	ldrb	r3, [r4, #0]
 800dbbc:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbbe:	d10a      	bne.n	800dbd6 <_vfiprintf_r+0x156>
 800dbc0:	7863      	ldrb	r3, [r4, #1]
 800dbc2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc4:	d132      	bne.n	800dc2c <_vfiprintf_r+0x1ac>
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	1d1a      	adds	r2, r3, #4
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	9203      	str	r2, [sp, #12]
 800dbce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbd2:	3402      	adds	r4, #2
 800dbd4:	9305      	str	r3, [sp, #20]
 800dbd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dcac <_vfiprintf_r+0x22c>
 800dbda:	7821      	ldrb	r1, [r4, #0]
 800dbdc:	2203      	movs	r2, #3
 800dbde:	4650      	mov	r0, sl
 800dbe0:	f7f2 fafe 	bl	80001e0 <memchr>
 800dbe4:	b138      	cbz	r0, 800dbf6 <_vfiprintf_r+0x176>
 800dbe6:	9b04      	ldr	r3, [sp, #16]
 800dbe8:	eba0 000a 	sub.w	r0, r0, sl
 800dbec:	2240      	movs	r2, #64	@ 0x40
 800dbee:	4082      	lsls	r2, r0
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	3401      	adds	r4, #1
 800dbf4:	9304      	str	r3, [sp, #16]
 800dbf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbfa:	4829      	ldr	r0, [pc, #164]	@ (800dca0 <_vfiprintf_r+0x220>)
 800dbfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc00:	2206      	movs	r2, #6
 800dc02:	f7f2 faed 	bl	80001e0 <memchr>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d03f      	beq.n	800dc8a <_vfiprintf_r+0x20a>
 800dc0a:	4b26      	ldr	r3, [pc, #152]	@ (800dca4 <_vfiprintf_r+0x224>)
 800dc0c:	bb1b      	cbnz	r3, 800dc56 <_vfiprintf_r+0x1d6>
 800dc0e:	9b03      	ldr	r3, [sp, #12]
 800dc10:	3307      	adds	r3, #7
 800dc12:	f023 0307 	bic.w	r3, r3, #7
 800dc16:	3308      	adds	r3, #8
 800dc18:	9303      	str	r3, [sp, #12]
 800dc1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc1c:	443b      	add	r3, r7
 800dc1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc20:	e76a      	b.n	800daf8 <_vfiprintf_r+0x78>
 800dc22:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc26:	460c      	mov	r4, r1
 800dc28:	2001      	movs	r0, #1
 800dc2a:	e7a8      	b.n	800db7e <_vfiprintf_r+0xfe>
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	3401      	adds	r4, #1
 800dc30:	9305      	str	r3, [sp, #20]
 800dc32:	4619      	mov	r1, r3
 800dc34:	f04f 0c0a 	mov.w	ip, #10
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc3e:	3a30      	subs	r2, #48	@ 0x30
 800dc40:	2a09      	cmp	r2, #9
 800dc42:	d903      	bls.n	800dc4c <_vfiprintf_r+0x1cc>
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d0c6      	beq.n	800dbd6 <_vfiprintf_r+0x156>
 800dc48:	9105      	str	r1, [sp, #20]
 800dc4a:	e7c4      	b.n	800dbd6 <_vfiprintf_r+0x156>
 800dc4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc50:	4604      	mov	r4, r0
 800dc52:	2301      	movs	r3, #1
 800dc54:	e7f0      	b.n	800dc38 <_vfiprintf_r+0x1b8>
 800dc56:	ab03      	add	r3, sp, #12
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	462a      	mov	r2, r5
 800dc5c:	4b12      	ldr	r3, [pc, #72]	@ (800dca8 <_vfiprintf_r+0x228>)
 800dc5e:	a904      	add	r1, sp, #16
 800dc60:	4630      	mov	r0, r6
 800dc62:	f7fc f9b7 	bl	8009fd4 <_printf_float>
 800dc66:	4607      	mov	r7, r0
 800dc68:	1c78      	adds	r0, r7, #1
 800dc6a:	d1d6      	bne.n	800dc1a <_vfiprintf_r+0x19a>
 800dc6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc6e:	07d9      	lsls	r1, r3, #31
 800dc70:	d405      	bmi.n	800dc7e <_vfiprintf_r+0x1fe>
 800dc72:	89ab      	ldrh	r3, [r5, #12]
 800dc74:	059a      	lsls	r2, r3, #22
 800dc76:	d402      	bmi.n	800dc7e <_vfiprintf_r+0x1fe>
 800dc78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc7a:	f7fd fadf 	bl	800b23c <__retarget_lock_release_recursive>
 800dc7e:	89ab      	ldrh	r3, [r5, #12]
 800dc80:	065b      	lsls	r3, r3, #25
 800dc82:	f53f af1f 	bmi.w	800dac4 <_vfiprintf_r+0x44>
 800dc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc88:	e71e      	b.n	800dac8 <_vfiprintf_r+0x48>
 800dc8a:	ab03      	add	r3, sp, #12
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	462a      	mov	r2, r5
 800dc90:	4b05      	ldr	r3, [pc, #20]	@ (800dca8 <_vfiprintf_r+0x228>)
 800dc92:	a904      	add	r1, sp, #16
 800dc94:	4630      	mov	r0, r6
 800dc96:	f7fc fc35 	bl	800a504 <_printf_i>
 800dc9a:	e7e4      	b.n	800dc66 <_vfiprintf_r+0x1e6>
 800dc9c:	0800ea41 	.word	0x0800ea41
 800dca0:	0800ea4b 	.word	0x0800ea4b
 800dca4:	08009fd5 	.word	0x08009fd5
 800dca8:	0800da5b 	.word	0x0800da5b
 800dcac:	0800ea47 	.word	0x0800ea47

0800dcb0 <__swhatbuf_r>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb8:	2900      	cmp	r1, #0
 800dcba:	b096      	sub	sp, #88	@ 0x58
 800dcbc:	4615      	mov	r5, r2
 800dcbe:	461e      	mov	r6, r3
 800dcc0:	da0d      	bge.n	800dcde <__swhatbuf_r+0x2e>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dcc8:	f04f 0100 	mov.w	r1, #0
 800dccc:	bf14      	ite	ne
 800dcce:	2340      	movne	r3, #64	@ 0x40
 800dcd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	6031      	str	r1, [r6, #0]
 800dcd8:	602b      	str	r3, [r5, #0]
 800dcda:	b016      	add	sp, #88	@ 0x58
 800dcdc:	bd70      	pop	{r4, r5, r6, pc}
 800dcde:	466a      	mov	r2, sp
 800dce0:	f000 f874 	bl	800ddcc <_fstat_r>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	dbec      	blt.n	800dcc2 <__swhatbuf_r+0x12>
 800dce8:	9901      	ldr	r1, [sp, #4]
 800dcea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dcee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dcf2:	4259      	negs	r1, r3
 800dcf4:	4159      	adcs	r1, r3
 800dcf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcfa:	e7eb      	b.n	800dcd4 <__swhatbuf_r+0x24>

0800dcfc <__smakebuf_r>:
 800dcfc:	898b      	ldrh	r3, [r1, #12]
 800dcfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd00:	079d      	lsls	r5, r3, #30
 800dd02:	4606      	mov	r6, r0
 800dd04:	460c      	mov	r4, r1
 800dd06:	d507      	bpl.n	800dd18 <__smakebuf_r+0x1c>
 800dd08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	2301      	movs	r3, #1
 800dd12:	6163      	str	r3, [r4, #20]
 800dd14:	b003      	add	sp, #12
 800dd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd18:	ab01      	add	r3, sp, #4
 800dd1a:	466a      	mov	r2, sp
 800dd1c:	f7ff ffc8 	bl	800dcb0 <__swhatbuf_r>
 800dd20:	9f00      	ldr	r7, [sp, #0]
 800dd22:	4605      	mov	r5, r0
 800dd24:	4639      	mov	r1, r7
 800dd26:	4630      	mov	r0, r6
 800dd28:	f7fe f966 	bl	800bff8 <_malloc_r>
 800dd2c:	b948      	cbnz	r0, 800dd42 <__smakebuf_r+0x46>
 800dd2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd32:	059a      	lsls	r2, r3, #22
 800dd34:	d4ee      	bmi.n	800dd14 <__smakebuf_r+0x18>
 800dd36:	f023 0303 	bic.w	r3, r3, #3
 800dd3a:	f043 0302 	orr.w	r3, r3, #2
 800dd3e:	81a3      	strh	r3, [r4, #12]
 800dd40:	e7e2      	b.n	800dd08 <__smakebuf_r+0xc>
 800dd42:	89a3      	ldrh	r3, [r4, #12]
 800dd44:	6020      	str	r0, [r4, #0]
 800dd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd4a:	81a3      	strh	r3, [r4, #12]
 800dd4c:	9b01      	ldr	r3, [sp, #4]
 800dd4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dd52:	b15b      	cbz	r3, 800dd6c <__smakebuf_r+0x70>
 800dd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f000 f849 	bl	800ddf0 <_isatty_r>
 800dd5e:	b128      	cbz	r0, 800dd6c <__smakebuf_r+0x70>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	f023 0303 	bic.w	r3, r3, #3
 800dd66:	f043 0301 	orr.w	r3, r3, #1
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	89a3      	ldrh	r3, [r4, #12]
 800dd6e:	431d      	orrs	r5, r3
 800dd70:	81a5      	strh	r5, [r4, #12]
 800dd72:	e7cf      	b.n	800dd14 <__smakebuf_r+0x18>

0800dd74 <memmove>:
 800dd74:	4288      	cmp	r0, r1
 800dd76:	b510      	push	{r4, lr}
 800dd78:	eb01 0402 	add.w	r4, r1, r2
 800dd7c:	d902      	bls.n	800dd84 <memmove+0x10>
 800dd7e:	4284      	cmp	r4, r0
 800dd80:	4623      	mov	r3, r4
 800dd82:	d807      	bhi.n	800dd94 <memmove+0x20>
 800dd84:	1e43      	subs	r3, r0, #1
 800dd86:	42a1      	cmp	r1, r4
 800dd88:	d008      	beq.n	800dd9c <memmove+0x28>
 800dd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd92:	e7f8      	b.n	800dd86 <memmove+0x12>
 800dd94:	4402      	add	r2, r0
 800dd96:	4601      	mov	r1, r0
 800dd98:	428a      	cmp	r2, r1
 800dd9a:	d100      	bne.n	800dd9e <memmove+0x2a>
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dda6:	e7f7      	b.n	800dd98 <memmove+0x24>

0800dda8 <strncmp>:
 800dda8:	b510      	push	{r4, lr}
 800ddaa:	b16a      	cbz	r2, 800ddc8 <strncmp+0x20>
 800ddac:	3901      	subs	r1, #1
 800ddae:	1884      	adds	r4, r0, r2
 800ddb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d103      	bne.n	800ddc4 <strncmp+0x1c>
 800ddbc:	42a0      	cmp	r0, r4
 800ddbe:	d001      	beq.n	800ddc4 <strncmp+0x1c>
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	d1f5      	bne.n	800ddb0 <strncmp+0x8>
 800ddc4:	1ad0      	subs	r0, r2, r3
 800ddc6:	bd10      	pop	{r4, pc}
 800ddc8:	4610      	mov	r0, r2
 800ddca:	e7fc      	b.n	800ddc6 <strncmp+0x1e>

0800ddcc <_fstat_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d07      	ldr	r5, [pc, #28]	@ (800ddec <_fstat_r+0x20>)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	602b      	str	r3, [r5, #0]
 800ddda:	f7f3 ff1b 	bl	8001c14 <_fstat>
 800ddde:	1c43      	adds	r3, r0, #1
 800dde0:	d102      	bne.n	800dde8 <_fstat_r+0x1c>
 800dde2:	682b      	ldr	r3, [r5, #0]
 800dde4:	b103      	cbz	r3, 800dde8 <_fstat_r+0x1c>
 800dde6:	6023      	str	r3, [r4, #0]
 800dde8:	bd38      	pop	{r3, r4, r5, pc}
 800ddea:	bf00      	nop
 800ddec:	20000fb8 	.word	0x20000fb8

0800ddf0 <_isatty_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d06      	ldr	r5, [pc, #24]	@ (800de0c <_isatty_r+0x1c>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	f7f3 ff1a 	bl	8001c34 <_isatty>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_isatty_r+0x1a>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_isatty_r+0x1a>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20000fb8 	.word	0x20000fb8

0800de10 <_sbrk_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d06      	ldr	r5, [pc, #24]	@ (800de2c <_sbrk_r+0x1c>)
 800de14:	2300      	movs	r3, #0
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	602b      	str	r3, [r5, #0]
 800de1c:	f7f3 ff22 	bl	8001c64 <_sbrk>
 800de20:	1c43      	adds	r3, r0, #1
 800de22:	d102      	bne.n	800de2a <_sbrk_r+0x1a>
 800de24:	682b      	ldr	r3, [r5, #0]
 800de26:	b103      	cbz	r3, 800de2a <_sbrk_r+0x1a>
 800de28:	6023      	str	r3, [r4, #0]
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	20000fb8 	.word	0x20000fb8

0800de30 <nan>:
 800de30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de38 <nan+0x8>
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	00000000 	.word	0x00000000
 800de3c:	7ff80000 	.word	0x7ff80000

0800de40 <__assert_func>:
 800de40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de42:	4614      	mov	r4, r2
 800de44:	461a      	mov	r2, r3
 800de46:	4b09      	ldr	r3, [pc, #36]	@ (800de6c <__assert_func+0x2c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4605      	mov	r5, r0
 800de4c:	68d8      	ldr	r0, [r3, #12]
 800de4e:	b954      	cbnz	r4, 800de66 <__assert_func+0x26>
 800de50:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <__assert_func+0x30>)
 800de52:	461c      	mov	r4, r3
 800de54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de58:	9100      	str	r1, [sp, #0]
 800de5a:	462b      	mov	r3, r5
 800de5c:	4905      	ldr	r1, [pc, #20]	@ (800de74 <__assert_func+0x34>)
 800de5e:	f000 fba7 	bl	800e5b0 <fiprintf>
 800de62:	f000 fbb7 	bl	800e5d4 <abort>
 800de66:	4b04      	ldr	r3, [pc, #16]	@ (800de78 <__assert_func+0x38>)
 800de68:	e7f4      	b.n	800de54 <__assert_func+0x14>
 800de6a:	bf00      	nop
 800de6c:	200002d8 	.word	0x200002d8
 800de70:	0800ea95 	.word	0x0800ea95
 800de74:	0800ea67 	.word	0x0800ea67
 800de78:	0800ea5a 	.word	0x0800ea5a

0800de7c <_calloc_r>:
 800de7c:	b570      	push	{r4, r5, r6, lr}
 800de7e:	fba1 5402 	umull	r5, r4, r1, r2
 800de82:	b93c      	cbnz	r4, 800de94 <_calloc_r+0x18>
 800de84:	4629      	mov	r1, r5
 800de86:	f7fe f8b7 	bl	800bff8 <_malloc_r>
 800de8a:	4606      	mov	r6, r0
 800de8c:	b928      	cbnz	r0, 800de9a <_calloc_r+0x1e>
 800de8e:	2600      	movs	r6, #0
 800de90:	4630      	mov	r0, r6
 800de92:	bd70      	pop	{r4, r5, r6, pc}
 800de94:	220c      	movs	r2, #12
 800de96:	6002      	str	r2, [r0, #0]
 800de98:	e7f9      	b.n	800de8e <_calloc_r+0x12>
 800de9a:	462a      	mov	r2, r5
 800de9c:	4621      	mov	r1, r4
 800de9e:	f7fd f94f 	bl	800b140 <memset>
 800dea2:	e7f5      	b.n	800de90 <_calloc_r+0x14>

0800dea4 <rshift>:
 800dea4:	6903      	ldr	r3, [r0, #16]
 800dea6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800deaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800deae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800deb2:	f100 0414 	add.w	r4, r0, #20
 800deb6:	dd45      	ble.n	800df44 <rshift+0xa0>
 800deb8:	f011 011f 	ands.w	r1, r1, #31
 800debc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dec0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dec4:	d10c      	bne.n	800dee0 <rshift+0x3c>
 800dec6:	f100 0710 	add.w	r7, r0, #16
 800deca:	4629      	mov	r1, r5
 800decc:	42b1      	cmp	r1, r6
 800dece:	d334      	bcc.n	800df3a <rshift+0x96>
 800ded0:	1a9b      	subs	r3, r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	1eea      	subs	r2, r5, #3
 800ded6:	4296      	cmp	r6, r2
 800ded8:	bf38      	it	cc
 800deda:	2300      	movcc	r3, #0
 800dedc:	4423      	add	r3, r4
 800dede:	e015      	b.n	800df0c <rshift+0x68>
 800dee0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dee4:	f1c1 0820 	rsb	r8, r1, #32
 800dee8:	40cf      	lsrs	r7, r1
 800deea:	f105 0e04 	add.w	lr, r5, #4
 800deee:	46a1      	mov	r9, r4
 800def0:	4576      	cmp	r6, lr
 800def2:	46f4      	mov	ip, lr
 800def4:	d815      	bhi.n	800df22 <rshift+0x7e>
 800def6:	1a9a      	subs	r2, r3, r2
 800def8:	0092      	lsls	r2, r2, #2
 800defa:	3a04      	subs	r2, #4
 800defc:	3501      	adds	r5, #1
 800defe:	42ae      	cmp	r6, r5
 800df00:	bf38      	it	cc
 800df02:	2200      	movcc	r2, #0
 800df04:	18a3      	adds	r3, r4, r2
 800df06:	50a7      	str	r7, [r4, r2]
 800df08:	b107      	cbz	r7, 800df0c <rshift+0x68>
 800df0a:	3304      	adds	r3, #4
 800df0c:	1b1a      	subs	r2, r3, r4
 800df0e:	42a3      	cmp	r3, r4
 800df10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df14:	bf08      	it	eq
 800df16:	2300      	moveq	r3, #0
 800df18:	6102      	str	r2, [r0, #16]
 800df1a:	bf08      	it	eq
 800df1c:	6143      	streq	r3, [r0, #20]
 800df1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df22:	f8dc c000 	ldr.w	ip, [ip]
 800df26:	fa0c fc08 	lsl.w	ip, ip, r8
 800df2a:	ea4c 0707 	orr.w	r7, ip, r7
 800df2e:	f849 7b04 	str.w	r7, [r9], #4
 800df32:	f85e 7b04 	ldr.w	r7, [lr], #4
 800df36:	40cf      	lsrs	r7, r1
 800df38:	e7da      	b.n	800def0 <rshift+0x4c>
 800df3a:	f851 cb04 	ldr.w	ip, [r1], #4
 800df3e:	f847 cf04 	str.w	ip, [r7, #4]!
 800df42:	e7c3      	b.n	800decc <rshift+0x28>
 800df44:	4623      	mov	r3, r4
 800df46:	e7e1      	b.n	800df0c <rshift+0x68>

0800df48 <__hexdig_fun>:
 800df48:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800df4c:	2b09      	cmp	r3, #9
 800df4e:	d802      	bhi.n	800df56 <__hexdig_fun+0xe>
 800df50:	3820      	subs	r0, #32
 800df52:	b2c0      	uxtb	r0, r0
 800df54:	4770      	bx	lr
 800df56:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800df5a:	2b05      	cmp	r3, #5
 800df5c:	d801      	bhi.n	800df62 <__hexdig_fun+0x1a>
 800df5e:	3847      	subs	r0, #71	@ 0x47
 800df60:	e7f7      	b.n	800df52 <__hexdig_fun+0xa>
 800df62:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800df66:	2b05      	cmp	r3, #5
 800df68:	d801      	bhi.n	800df6e <__hexdig_fun+0x26>
 800df6a:	3827      	subs	r0, #39	@ 0x27
 800df6c:	e7f1      	b.n	800df52 <__hexdig_fun+0xa>
 800df6e:	2000      	movs	r0, #0
 800df70:	4770      	bx	lr
	...

0800df74 <__gethex>:
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	b085      	sub	sp, #20
 800df7a:	468a      	mov	sl, r1
 800df7c:	9302      	str	r3, [sp, #8]
 800df7e:	680b      	ldr	r3, [r1, #0]
 800df80:	9001      	str	r0, [sp, #4]
 800df82:	4690      	mov	r8, r2
 800df84:	1c9c      	adds	r4, r3, #2
 800df86:	46a1      	mov	r9, r4
 800df88:	f814 0b01 	ldrb.w	r0, [r4], #1
 800df8c:	2830      	cmp	r0, #48	@ 0x30
 800df8e:	d0fa      	beq.n	800df86 <__gethex+0x12>
 800df90:	eba9 0303 	sub.w	r3, r9, r3
 800df94:	f1a3 0b02 	sub.w	fp, r3, #2
 800df98:	f7ff ffd6 	bl	800df48 <__hexdig_fun>
 800df9c:	4605      	mov	r5, r0
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d168      	bne.n	800e074 <__gethex+0x100>
 800dfa2:	49a0      	ldr	r1, [pc, #640]	@ (800e224 <__gethex+0x2b0>)
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	4648      	mov	r0, r9
 800dfa8:	f7ff fefe 	bl	800dda8 <strncmp>
 800dfac:	4607      	mov	r7, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d167      	bne.n	800e082 <__gethex+0x10e>
 800dfb2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dfb6:	4626      	mov	r6, r4
 800dfb8:	f7ff ffc6 	bl	800df48 <__hexdig_fun>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d062      	beq.n	800e086 <__gethex+0x112>
 800dfc0:	4623      	mov	r3, r4
 800dfc2:	7818      	ldrb	r0, [r3, #0]
 800dfc4:	2830      	cmp	r0, #48	@ 0x30
 800dfc6:	4699      	mov	r9, r3
 800dfc8:	f103 0301 	add.w	r3, r3, #1
 800dfcc:	d0f9      	beq.n	800dfc2 <__gethex+0x4e>
 800dfce:	f7ff ffbb 	bl	800df48 <__hexdig_fun>
 800dfd2:	fab0 f580 	clz	r5, r0
 800dfd6:	096d      	lsrs	r5, r5, #5
 800dfd8:	f04f 0b01 	mov.w	fp, #1
 800dfdc:	464a      	mov	r2, r9
 800dfde:	4616      	mov	r6, r2
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	7830      	ldrb	r0, [r6, #0]
 800dfe4:	f7ff ffb0 	bl	800df48 <__hexdig_fun>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d1f8      	bne.n	800dfde <__gethex+0x6a>
 800dfec:	498d      	ldr	r1, [pc, #564]	@ (800e224 <__gethex+0x2b0>)
 800dfee:	2201      	movs	r2, #1
 800dff0:	4630      	mov	r0, r6
 800dff2:	f7ff fed9 	bl	800dda8 <strncmp>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d13f      	bne.n	800e07a <__gethex+0x106>
 800dffa:	b944      	cbnz	r4, 800e00e <__gethex+0x9a>
 800dffc:	1c74      	adds	r4, r6, #1
 800dffe:	4622      	mov	r2, r4
 800e000:	4616      	mov	r6, r2
 800e002:	3201      	adds	r2, #1
 800e004:	7830      	ldrb	r0, [r6, #0]
 800e006:	f7ff ff9f 	bl	800df48 <__hexdig_fun>
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d1f8      	bne.n	800e000 <__gethex+0x8c>
 800e00e:	1ba4      	subs	r4, r4, r6
 800e010:	00a7      	lsls	r7, r4, #2
 800e012:	7833      	ldrb	r3, [r6, #0]
 800e014:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e018:	2b50      	cmp	r3, #80	@ 0x50
 800e01a:	d13e      	bne.n	800e09a <__gethex+0x126>
 800e01c:	7873      	ldrb	r3, [r6, #1]
 800e01e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e020:	d033      	beq.n	800e08a <__gethex+0x116>
 800e022:	2b2d      	cmp	r3, #45	@ 0x2d
 800e024:	d034      	beq.n	800e090 <__gethex+0x11c>
 800e026:	1c71      	adds	r1, r6, #1
 800e028:	2400      	movs	r4, #0
 800e02a:	7808      	ldrb	r0, [r1, #0]
 800e02c:	f7ff ff8c 	bl	800df48 <__hexdig_fun>
 800e030:	1e43      	subs	r3, r0, #1
 800e032:	b2db      	uxtb	r3, r3
 800e034:	2b18      	cmp	r3, #24
 800e036:	d830      	bhi.n	800e09a <__gethex+0x126>
 800e038:	f1a0 0210 	sub.w	r2, r0, #16
 800e03c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e040:	f7ff ff82 	bl	800df48 <__hexdig_fun>
 800e044:	f100 3cff 	add.w	ip, r0, #4294967295
 800e048:	fa5f fc8c 	uxtb.w	ip, ip
 800e04c:	f1bc 0f18 	cmp.w	ip, #24
 800e050:	f04f 030a 	mov.w	r3, #10
 800e054:	d91e      	bls.n	800e094 <__gethex+0x120>
 800e056:	b104      	cbz	r4, 800e05a <__gethex+0xe6>
 800e058:	4252      	negs	r2, r2
 800e05a:	4417      	add	r7, r2
 800e05c:	f8ca 1000 	str.w	r1, [sl]
 800e060:	b1ed      	cbz	r5, 800e09e <__gethex+0x12a>
 800e062:	f1bb 0f00 	cmp.w	fp, #0
 800e066:	bf0c      	ite	eq
 800e068:	2506      	moveq	r5, #6
 800e06a:	2500      	movne	r5, #0
 800e06c:	4628      	mov	r0, r5
 800e06e:	b005      	add	sp, #20
 800e070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e074:	2500      	movs	r5, #0
 800e076:	462c      	mov	r4, r5
 800e078:	e7b0      	b.n	800dfdc <__gethex+0x68>
 800e07a:	2c00      	cmp	r4, #0
 800e07c:	d1c7      	bne.n	800e00e <__gethex+0x9a>
 800e07e:	4627      	mov	r7, r4
 800e080:	e7c7      	b.n	800e012 <__gethex+0x9e>
 800e082:	464e      	mov	r6, r9
 800e084:	462f      	mov	r7, r5
 800e086:	2501      	movs	r5, #1
 800e088:	e7c3      	b.n	800e012 <__gethex+0x9e>
 800e08a:	2400      	movs	r4, #0
 800e08c:	1cb1      	adds	r1, r6, #2
 800e08e:	e7cc      	b.n	800e02a <__gethex+0xb6>
 800e090:	2401      	movs	r4, #1
 800e092:	e7fb      	b.n	800e08c <__gethex+0x118>
 800e094:	fb03 0002 	mla	r0, r3, r2, r0
 800e098:	e7ce      	b.n	800e038 <__gethex+0xc4>
 800e09a:	4631      	mov	r1, r6
 800e09c:	e7de      	b.n	800e05c <__gethex+0xe8>
 800e09e:	eba6 0309 	sub.w	r3, r6, r9
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	4629      	mov	r1, r5
 800e0a6:	2b07      	cmp	r3, #7
 800e0a8:	dc0a      	bgt.n	800e0c0 <__gethex+0x14c>
 800e0aa:	9801      	ldr	r0, [sp, #4]
 800e0ac:	f7fe f830 	bl	800c110 <_Balloc>
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	b940      	cbnz	r0, 800e0c6 <__gethex+0x152>
 800e0b4:	4b5c      	ldr	r3, [pc, #368]	@ (800e228 <__gethex+0x2b4>)
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	21e4      	movs	r1, #228	@ 0xe4
 800e0ba:	485c      	ldr	r0, [pc, #368]	@ (800e22c <__gethex+0x2b8>)
 800e0bc:	f7ff fec0 	bl	800de40 <__assert_func>
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	105b      	asrs	r3, r3, #1
 800e0c4:	e7ef      	b.n	800e0a6 <__gethex+0x132>
 800e0c6:	f100 0a14 	add.w	sl, r0, #20
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	4655      	mov	r5, sl
 800e0ce:	469b      	mov	fp, r3
 800e0d0:	45b1      	cmp	r9, r6
 800e0d2:	d337      	bcc.n	800e144 <__gethex+0x1d0>
 800e0d4:	f845 bb04 	str.w	fp, [r5], #4
 800e0d8:	eba5 050a 	sub.w	r5, r5, sl
 800e0dc:	10ad      	asrs	r5, r5, #2
 800e0de:	6125      	str	r5, [r4, #16]
 800e0e0:	4658      	mov	r0, fp
 800e0e2:	f7fe f907 	bl	800c2f4 <__hi0bits>
 800e0e6:	016d      	lsls	r5, r5, #5
 800e0e8:	f8d8 6000 	ldr.w	r6, [r8]
 800e0ec:	1a2d      	subs	r5, r5, r0
 800e0ee:	42b5      	cmp	r5, r6
 800e0f0:	dd54      	ble.n	800e19c <__gethex+0x228>
 800e0f2:	1bad      	subs	r5, r5, r6
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f7fe fc9b 	bl	800ca32 <__any_on>
 800e0fc:	4681      	mov	r9, r0
 800e0fe:	b178      	cbz	r0, 800e120 <__gethex+0x1ac>
 800e100:	1e6b      	subs	r3, r5, #1
 800e102:	1159      	asrs	r1, r3, #5
 800e104:	f003 021f 	and.w	r2, r3, #31
 800e108:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e10c:	f04f 0901 	mov.w	r9, #1
 800e110:	fa09 f202 	lsl.w	r2, r9, r2
 800e114:	420a      	tst	r2, r1
 800e116:	d003      	beq.n	800e120 <__gethex+0x1ac>
 800e118:	454b      	cmp	r3, r9
 800e11a:	dc36      	bgt.n	800e18a <__gethex+0x216>
 800e11c:	f04f 0902 	mov.w	r9, #2
 800e120:	4629      	mov	r1, r5
 800e122:	4620      	mov	r0, r4
 800e124:	f7ff febe 	bl	800dea4 <rshift>
 800e128:	442f      	add	r7, r5
 800e12a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e12e:	42bb      	cmp	r3, r7
 800e130:	da42      	bge.n	800e1b8 <__gethex+0x244>
 800e132:	9801      	ldr	r0, [sp, #4]
 800e134:	4621      	mov	r1, r4
 800e136:	f7fe f82b 	bl	800c190 <_Bfree>
 800e13a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e13c:	2300      	movs	r3, #0
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	25a3      	movs	r5, #163	@ 0xa3
 800e142:	e793      	b.n	800e06c <__gethex+0xf8>
 800e144:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e148:	2a2e      	cmp	r2, #46	@ 0x2e
 800e14a:	d012      	beq.n	800e172 <__gethex+0x1fe>
 800e14c:	2b20      	cmp	r3, #32
 800e14e:	d104      	bne.n	800e15a <__gethex+0x1e6>
 800e150:	f845 bb04 	str.w	fp, [r5], #4
 800e154:	f04f 0b00 	mov.w	fp, #0
 800e158:	465b      	mov	r3, fp
 800e15a:	7830      	ldrb	r0, [r6, #0]
 800e15c:	9303      	str	r3, [sp, #12]
 800e15e:	f7ff fef3 	bl	800df48 <__hexdig_fun>
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	f000 000f 	and.w	r0, r0, #15
 800e168:	4098      	lsls	r0, r3
 800e16a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e16e:	3304      	adds	r3, #4
 800e170:	e7ae      	b.n	800e0d0 <__gethex+0x15c>
 800e172:	45b1      	cmp	r9, r6
 800e174:	d8ea      	bhi.n	800e14c <__gethex+0x1d8>
 800e176:	492b      	ldr	r1, [pc, #172]	@ (800e224 <__gethex+0x2b0>)
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	2201      	movs	r2, #1
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7ff fe13 	bl	800dda8 <strncmp>
 800e182:	9b03      	ldr	r3, [sp, #12]
 800e184:	2800      	cmp	r0, #0
 800e186:	d1e1      	bne.n	800e14c <__gethex+0x1d8>
 800e188:	e7a2      	b.n	800e0d0 <__gethex+0x15c>
 800e18a:	1ea9      	subs	r1, r5, #2
 800e18c:	4620      	mov	r0, r4
 800e18e:	f7fe fc50 	bl	800ca32 <__any_on>
 800e192:	2800      	cmp	r0, #0
 800e194:	d0c2      	beq.n	800e11c <__gethex+0x1a8>
 800e196:	f04f 0903 	mov.w	r9, #3
 800e19a:	e7c1      	b.n	800e120 <__gethex+0x1ac>
 800e19c:	da09      	bge.n	800e1b2 <__gethex+0x23e>
 800e19e:	1b75      	subs	r5, r6, r5
 800e1a0:	4621      	mov	r1, r4
 800e1a2:	9801      	ldr	r0, [sp, #4]
 800e1a4:	462a      	mov	r2, r5
 800e1a6:	f7fe fa0b 	bl	800c5c0 <__lshift>
 800e1aa:	1b7f      	subs	r7, r7, r5
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	f100 0a14 	add.w	sl, r0, #20
 800e1b2:	f04f 0900 	mov.w	r9, #0
 800e1b6:	e7b8      	b.n	800e12a <__gethex+0x1b6>
 800e1b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e1bc:	42bd      	cmp	r5, r7
 800e1be:	dd6f      	ble.n	800e2a0 <__gethex+0x32c>
 800e1c0:	1bed      	subs	r5, r5, r7
 800e1c2:	42ae      	cmp	r6, r5
 800e1c4:	dc34      	bgt.n	800e230 <__gethex+0x2bc>
 800e1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d022      	beq.n	800e214 <__gethex+0x2a0>
 800e1ce:	2b03      	cmp	r3, #3
 800e1d0:	d024      	beq.n	800e21c <__gethex+0x2a8>
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d115      	bne.n	800e202 <__gethex+0x28e>
 800e1d6:	42ae      	cmp	r6, r5
 800e1d8:	d113      	bne.n	800e202 <__gethex+0x28e>
 800e1da:	2e01      	cmp	r6, #1
 800e1dc:	d10b      	bne.n	800e1f6 <__gethex+0x282>
 800e1de:	9a02      	ldr	r2, [sp, #8]
 800e1e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e1e4:	6013      	str	r3, [r2, #0]
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	6123      	str	r3, [r4, #16]
 800e1ea:	f8ca 3000 	str.w	r3, [sl]
 800e1ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1f0:	2562      	movs	r5, #98	@ 0x62
 800e1f2:	601c      	str	r4, [r3, #0]
 800e1f4:	e73a      	b.n	800e06c <__gethex+0xf8>
 800e1f6:	1e71      	subs	r1, r6, #1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	f7fe fc1a 	bl	800ca32 <__any_on>
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d1ed      	bne.n	800e1de <__gethex+0x26a>
 800e202:	9801      	ldr	r0, [sp, #4]
 800e204:	4621      	mov	r1, r4
 800e206:	f7fd ffc3 	bl	800c190 <_Bfree>
 800e20a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e20c:	2300      	movs	r3, #0
 800e20e:	6013      	str	r3, [r2, #0]
 800e210:	2550      	movs	r5, #80	@ 0x50
 800e212:	e72b      	b.n	800e06c <__gethex+0xf8>
 800e214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1f3      	bne.n	800e202 <__gethex+0x28e>
 800e21a:	e7e0      	b.n	800e1de <__gethex+0x26a>
 800e21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1dd      	bne.n	800e1de <__gethex+0x26a>
 800e222:	e7ee      	b.n	800e202 <__gethex+0x28e>
 800e224:	0800e8e8 	.word	0x0800e8e8
 800e228:	0800e781 	.word	0x0800e781
 800e22c:	0800ea96 	.word	0x0800ea96
 800e230:	1e6f      	subs	r7, r5, #1
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	d130      	bne.n	800e29a <__gethex+0x326>
 800e238:	b127      	cbz	r7, 800e244 <__gethex+0x2d0>
 800e23a:	4639      	mov	r1, r7
 800e23c:	4620      	mov	r0, r4
 800e23e:	f7fe fbf8 	bl	800ca32 <__any_on>
 800e242:	4681      	mov	r9, r0
 800e244:	117a      	asrs	r2, r7, #5
 800e246:	2301      	movs	r3, #1
 800e248:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e24c:	f007 071f 	and.w	r7, r7, #31
 800e250:	40bb      	lsls	r3, r7
 800e252:	4213      	tst	r3, r2
 800e254:	4629      	mov	r1, r5
 800e256:	4620      	mov	r0, r4
 800e258:	bf18      	it	ne
 800e25a:	f049 0902 	orrne.w	r9, r9, #2
 800e25e:	f7ff fe21 	bl	800dea4 <rshift>
 800e262:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e266:	1b76      	subs	r6, r6, r5
 800e268:	2502      	movs	r5, #2
 800e26a:	f1b9 0f00 	cmp.w	r9, #0
 800e26e:	d047      	beq.n	800e300 <__gethex+0x38c>
 800e270:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e274:	2b02      	cmp	r3, #2
 800e276:	d015      	beq.n	800e2a4 <__gethex+0x330>
 800e278:	2b03      	cmp	r3, #3
 800e27a:	d017      	beq.n	800e2ac <__gethex+0x338>
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d109      	bne.n	800e294 <__gethex+0x320>
 800e280:	f019 0f02 	tst.w	r9, #2
 800e284:	d006      	beq.n	800e294 <__gethex+0x320>
 800e286:	f8da 3000 	ldr.w	r3, [sl]
 800e28a:	ea49 0903 	orr.w	r9, r9, r3
 800e28e:	f019 0f01 	tst.w	r9, #1
 800e292:	d10e      	bne.n	800e2b2 <__gethex+0x33e>
 800e294:	f045 0510 	orr.w	r5, r5, #16
 800e298:	e032      	b.n	800e300 <__gethex+0x38c>
 800e29a:	f04f 0901 	mov.w	r9, #1
 800e29e:	e7d1      	b.n	800e244 <__gethex+0x2d0>
 800e2a0:	2501      	movs	r5, #1
 800e2a2:	e7e2      	b.n	800e26a <__gethex+0x2f6>
 800e2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2a6:	f1c3 0301 	rsb	r3, r3, #1
 800e2aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0f0      	beq.n	800e294 <__gethex+0x320>
 800e2b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e2b6:	f104 0314 	add.w	r3, r4, #20
 800e2ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e2be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e2c2:	f04f 0c00 	mov.w	ip, #0
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e2d0:	d01b      	beq.n	800e30a <__gethex+0x396>
 800e2d2:	3201      	adds	r2, #1
 800e2d4:	6002      	str	r2, [r0, #0]
 800e2d6:	2d02      	cmp	r5, #2
 800e2d8:	f104 0314 	add.w	r3, r4, #20
 800e2dc:	d13c      	bne.n	800e358 <__gethex+0x3e4>
 800e2de:	f8d8 2000 	ldr.w	r2, [r8]
 800e2e2:	3a01      	subs	r2, #1
 800e2e4:	42b2      	cmp	r2, r6
 800e2e6:	d109      	bne.n	800e2fc <__gethex+0x388>
 800e2e8:	1171      	asrs	r1, r6, #5
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2f0:	f006 061f 	and.w	r6, r6, #31
 800e2f4:	fa02 f606 	lsl.w	r6, r2, r6
 800e2f8:	421e      	tst	r6, r3
 800e2fa:	d13a      	bne.n	800e372 <__gethex+0x3fe>
 800e2fc:	f045 0520 	orr.w	r5, r5, #32
 800e300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e302:	601c      	str	r4, [r3, #0]
 800e304:	9b02      	ldr	r3, [sp, #8]
 800e306:	601f      	str	r7, [r3, #0]
 800e308:	e6b0      	b.n	800e06c <__gethex+0xf8>
 800e30a:	4299      	cmp	r1, r3
 800e30c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e310:	d8d9      	bhi.n	800e2c6 <__gethex+0x352>
 800e312:	68a3      	ldr	r3, [r4, #8]
 800e314:	459b      	cmp	fp, r3
 800e316:	db17      	blt.n	800e348 <__gethex+0x3d4>
 800e318:	6861      	ldr	r1, [r4, #4]
 800e31a:	9801      	ldr	r0, [sp, #4]
 800e31c:	3101      	adds	r1, #1
 800e31e:	f7fd fef7 	bl	800c110 <_Balloc>
 800e322:	4681      	mov	r9, r0
 800e324:	b918      	cbnz	r0, 800e32e <__gethex+0x3ba>
 800e326:	4b1a      	ldr	r3, [pc, #104]	@ (800e390 <__gethex+0x41c>)
 800e328:	4602      	mov	r2, r0
 800e32a:	2184      	movs	r1, #132	@ 0x84
 800e32c:	e6c5      	b.n	800e0ba <__gethex+0x146>
 800e32e:	6922      	ldr	r2, [r4, #16]
 800e330:	3202      	adds	r2, #2
 800e332:	f104 010c 	add.w	r1, r4, #12
 800e336:	0092      	lsls	r2, r2, #2
 800e338:	300c      	adds	r0, #12
 800e33a:	f7fc ff88 	bl	800b24e <memcpy>
 800e33e:	4621      	mov	r1, r4
 800e340:	9801      	ldr	r0, [sp, #4]
 800e342:	f7fd ff25 	bl	800c190 <_Bfree>
 800e346:	464c      	mov	r4, r9
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e350:	6122      	str	r2, [r4, #16]
 800e352:	2201      	movs	r2, #1
 800e354:	615a      	str	r2, [r3, #20]
 800e356:	e7be      	b.n	800e2d6 <__gethex+0x362>
 800e358:	6922      	ldr	r2, [r4, #16]
 800e35a:	455a      	cmp	r2, fp
 800e35c:	dd0b      	ble.n	800e376 <__gethex+0x402>
 800e35e:	2101      	movs	r1, #1
 800e360:	4620      	mov	r0, r4
 800e362:	f7ff fd9f 	bl	800dea4 <rshift>
 800e366:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e36a:	3701      	adds	r7, #1
 800e36c:	42bb      	cmp	r3, r7
 800e36e:	f6ff aee0 	blt.w	800e132 <__gethex+0x1be>
 800e372:	2501      	movs	r5, #1
 800e374:	e7c2      	b.n	800e2fc <__gethex+0x388>
 800e376:	f016 061f 	ands.w	r6, r6, #31
 800e37a:	d0fa      	beq.n	800e372 <__gethex+0x3fe>
 800e37c:	4453      	add	r3, sl
 800e37e:	f1c6 0620 	rsb	r6, r6, #32
 800e382:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e386:	f7fd ffb5 	bl	800c2f4 <__hi0bits>
 800e38a:	42b0      	cmp	r0, r6
 800e38c:	dbe7      	blt.n	800e35e <__gethex+0x3ea>
 800e38e:	e7f0      	b.n	800e372 <__gethex+0x3fe>
 800e390:	0800e781 	.word	0x0800e781

0800e394 <L_shift>:
 800e394:	f1c2 0208 	rsb	r2, r2, #8
 800e398:	0092      	lsls	r2, r2, #2
 800e39a:	b570      	push	{r4, r5, r6, lr}
 800e39c:	f1c2 0620 	rsb	r6, r2, #32
 800e3a0:	6843      	ldr	r3, [r0, #4]
 800e3a2:	6804      	ldr	r4, [r0, #0]
 800e3a4:	fa03 f506 	lsl.w	r5, r3, r6
 800e3a8:	432c      	orrs	r4, r5
 800e3aa:	40d3      	lsrs	r3, r2
 800e3ac:	6004      	str	r4, [r0, #0]
 800e3ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3b2:	4288      	cmp	r0, r1
 800e3b4:	d3f4      	bcc.n	800e3a0 <L_shift+0xc>
 800e3b6:	bd70      	pop	{r4, r5, r6, pc}

0800e3b8 <__match>:
 800e3b8:	b530      	push	{r4, r5, lr}
 800e3ba:	6803      	ldr	r3, [r0, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3c2:	b914      	cbnz	r4, 800e3ca <__match+0x12>
 800e3c4:	6003      	str	r3, [r0, #0]
 800e3c6:	2001      	movs	r0, #1
 800e3c8:	bd30      	pop	{r4, r5, pc}
 800e3ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e3d2:	2d19      	cmp	r5, #25
 800e3d4:	bf98      	it	ls
 800e3d6:	3220      	addls	r2, #32
 800e3d8:	42a2      	cmp	r2, r4
 800e3da:	d0f0      	beq.n	800e3be <__match+0x6>
 800e3dc:	2000      	movs	r0, #0
 800e3de:	e7f3      	b.n	800e3c8 <__match+0x10>

0800e3e0 <__hexnan>:
 800e3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e4:	680b      	ldr	r3, [r1, #0]
 800e3e6:	6801      	ldr	r1, [r0, #0]
 800e3e8:	115e      	asrs	r6, r3, #5
 800e3ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e3ee:	f013 031f 	ands.w	r3, r3, #31
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	bf18      	it	ne
 800e3f6:	3604      	addne	r6, #4
 800e3f8:	2500      	movs	r5, #0
 800e3fa:	1f37      	subs	r7, r6, #4
 800e3fc:	4682      	mov	sl, r0
 800e3fe:	4690      	mov	r8, r2
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	f846 5c04 	str.w	r5, [r6, #-4]
 800e406:	46b9      	mov	r9, r7
 800e408:	463c      	mov	r4, r7
 800e40a:	9502      	str	r5, [sp, #8]
 800e40c:	46ab      	mov	fp, r5
 800e40e:	784a      	ldrb	r2, [r1, #1]
 800e410:	1c4b      	adds	r3, r1, #1
 800e412:	9303      	str	r3, [sp, #12]
 800e414:	b342      	cbz	r2, 800e468 <__hexnan+0x88>
 800e416:	4610      	mov	r0, r2
 800e418:	9105      	str	r1, [sp, #20]
 800e41a:	9204      	str	r2, [sp, #16]
 800e41c:	f7ff fd94 	bl	800df48 <__hexdig_fun>
 800e420:	2800      	cmp	r0, #0
 800e422:	d151      	bne.n	800e4c8 <__hexnan+0xe8>
 800e424:	9a04      	ldr	r2, [sp, #16]
 800e426:	9905      	ldr	r1, [sp, #20]
 800e428:	2a20      	cmp	r2, #32
 800e42a:	d818      	bhi.n	800e45e <__hexnan+0x7e>
 800e42c:	9b02      	ldr	r3, [sp, #8]
 800e42e:	459b      	cmp	fp, r3
 800e430:	dd13      	ble.n	800e45a <__hexnan+0x7a>
 800e432:	454c      	cmp	r4, r9
 800e434:	d206      	bcs.n	800e444 <__hexnan+0x64>
 800e436:	2d07      	cmp	r5, #7
 800e438:	dc04      	bgt.n	800e444 <__hexnan+0x64>
 800e43a:	462a      	mov	r2, r5
 800e43c:	4649      	mov	r1, r9
 800e43e:	4620      	mov	r0, r4
 800e440:	f7ff ffa8 	bl	800e394 <L_shift>
 800e444:	4544      	cmp	r4, r8
 800e446:	d952      	bls.n	800e4ee <__hexnan+0x10e>
 800e448:	2300      	movs	r3, #0
 800e44a:	f1a4 0904 	sub.w	r9, r4, #4
 800e44e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e452:	f8cd b008 	str.w	fp, [sp, #8]
 800e456:	464c      	mov	r4, r9
 800e458:	461d      	mov	r5, r3
 800e45a:	9903      	ldr	r1, [sp, #12]
 800e45c:	e7d7      	b.n	800e40e <__hexnan+0x2e>
 800e45e:	2a29      	cmp	r2, #41	@ 0x29
 800e460:	d157      	bne.n	800e512 <__hexnan+0x132>
 800e462:	3102      	adds	r1, #2
 800e464:	f8ca 1000 	str.w	r1, [sl]
 800e468:	f1bb 0f00 	cmp.w	fp, #0
 800e46c:	d051      	beq.n	800e512 <__hexnan+0x132>
 800e46e:	454c      	cmp	r4, r9
 800e470:	d206      	bcs.n	800e480 <__hexnan+0xa0>
 800e472:	2d07      	cmp	r5, #7
 800e474:	dc04      	bgt.n	800e480 <__hexnan+0xa0>
 800e476:	462a      	mov	r2, r5
 800e478:	4649      	mov	r1, r9
 800e47a:	4620      	mov	r0, r4
 800e47c:	f7ff ff8a 	bl	800e394 <L_shift>
 800e480:	4544      	cmp	r4, r8
 800e482:	d936      	bls.n	800e4f2 <__hexnan+0x112>
 800e484:	f1a8 0204 	sub.w	r2, r8, #4
 800e488:	4623      	mov	r3, r4
 800e48a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e48e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e492:	429f      	cmp	r7, r3
 800e494:	d2f9      	bcs.n	800e48a <__hexnan+0xaa>
 800e496:	1b3b      	subs	r3, r7, r4
 800e498:	f023 0303 	bic.w	r3, r3, #3
 800e49c:	3304      	adds	r3, #4
 800e49e:	3401      	adds	r4, #1
 800e4a0:	3e03      	subs	r6, #3
 800e4a2:	42b4      	cmp	r4, r6
 800e4a4:	bf88      	it	hi
 800e4a6:	2304      	movhi	r3, #4
 800e4a8:	4443      	add	r3, r8
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f843 2b04 	str.w	r2, [r3], #4
 800e4b0:	429f      	cmp	r7, r3
 800e4b2:	d2fb      	bcs.n	800e4ac <__hexnan+0xcc>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	b91b      	cbnz	r3, 800e4c0 <__hexnan+0xe0>
 800e4b8:	4547      	cmp	r7, r8
 800e4ba:	d128      	bne.n	800e50e <__hexnan+0x12e>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	603b      	str	r3, [r7, #0]
 800e4c0:	2005      	movs	r0, #5
 800e4c2:	b007      	add	sp, #28
 800e4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	2d08      	cmp	r5, #8
 800e4cc:	f10b 0b01 	add.w	fp, fp, #1
 800e4d0:	dd06      	ble.n	800e4e0 <__hexnan+0x100>
 800e4d2:	4544      	cmp	r4, r8
 800e4d4:	d9c1      	bls.n	800e45a <__hexnan+0x7a>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4dc:	2501      	movs	r5, #1
 800e4de:	3c04      	subs	r4, #4
 800e4e0:	6822      	ldr	r2, [r4, #0]
 800e4e2:	f000 000f 	and.w	r0, r0, #15
 800e4e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4ea:	6020      	str	r0, [r4, #0]
 800e4ec:	e7b5      	b.n	800e45a <__hexnan+0x7a>
 800e4ee:	2508      	movs	r5, #8
 800e4f0:	e7b3      	b.n	800e45a <__hexnan+0x7a>
 800e4f2:	9b01      	ldr	r3, [sp, #4]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d0dd      	beq.n	800e4b4 <__hexnan+0xd4>
 800e4f8:	f1c3 0320 	rsb	r3, r3, #32
 800e4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e500:	40da      	lsrs	r2, r3
 800e502:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e506:	4013      	ands	r3, r2
 800e508:	f846 3c04 	str.w	r3, [r6, #-4]
 800e50c:	e7d2      	b.n	800e4b4 <__hexnan+0xd4>
 800e50e:	3f04      	subs	r7, #4
 800e510:	e7d0      	b.n	800e4b4 <__hexnan+0xd4>
 800e512:	2004      	movs	r0, #4
 800e514:	e7d5      	b.n	800e4c2 <__hexnan+0xe2>

0800e516 <__ascii_mbtowc>:
 800e516:	b082      	sub	sp, #8
 800e518:	b901      	cbnz	r1, 800e51c <__ascii_mbtowc+0x6>
 800e51a:	a901      	add	r1, sp, #4
 800e51c:	b142      	cbz	r2, 800e530 <__ascii_mbtowc+0x1a>
 800e51e:	b14b      	cbz	r3, 800e534 <__ascii_mbtowc+0x1e>
 800e520:	7813      	ldrb	r3, [r2, #0]
 800e522:	600b      	str	r3, [r1, #0]
 800e524:	7812      	ldrb	r2, [r2, #0]
 800e526:	1e10      	subs	r0, r2, #0
 800e528:	bf18      	it	ne
 800e52a:	2001      	movne	r0, #1
 800e52c:	b002      	add	sp, #8
 800e52e:	4770      	bx	lr
 800e530:	4610      	mov	r0, r2
 800e532:	e7fb      	b.n	800e52c <__ascii_mbtowc+0x16>
 800e534:	f06f 0001 	mvn.w	r0, #1
 800e538:	e7f8      	b.n	800e52c <__ascii_mbtowc+0x16>

0800e53a <_realloc_r>:
 800e53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53e:	4680      	mov	r8, r0
 800e540:	4615      	mov	r5, r2
 800e542:	460c      	mov	r4, r1
 800e544:	b921      	cbnz	r1, 800e550 <_realloc_r+0x16>
 800e546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e54a:	4611      	mov	r1, r2
 800e54c:	f7fd bd54 	b.w	800bff8 <_malloc_r>
 800e550:	b92a      	cbnz	r2, 800e55e <_realloc_r+0x24>
 800e552:	f7fd fcdd 	bl	800bf10 <_free_r>
 800e556:	2400      	movs	r4, #0
 800e558:	4620      	mov	r0, r4
 800e55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e55e:	f000 f840 	bl	800e5e2 <_malloc_usable_size_r>
 800e562:	4285      	cmp	r5, r0
 800e564:	4606      	mov	r6, r0
 800e566:	d802      	bhi.n	800e56e <_realloc_r+0x34>
 800e568:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e56c:	d8f4      	bhi.n	800e558 <_realloc_r+0x1e>
 800e56e:	4629      	mov	r1, r5
 800e570:	4640      	mov	r0, r8
 800e572:	f7fd fd41 	bl	800bff8 <_malloc_r>
 800e576:	4607      	mov	r7, r0
 800e578:	2800      	cmp	r0, #0
 800e57a:	d0ec      	beq.n	800e556 <_realloc_r+0x1c>
 800e57c:	42b5      	cmp	r5, r6
 800e57e:	462a      	mov	r2, r5
 800e580:	4621      	mov	r1, r4
 800e582:	bf28      	it	cs
 800e584:	4632      	movcs	r2, r6
 800e586:	f7fc fe62 	bl	800b24e <memcpy>
 800e58a:	4621      	mov	r1, r4
 800e58c:	4640      	mov	r0, r8
 800e58e:	f7fd fcbf 	bl	800bf10 <_free_r>
 800e592:	463c      	mov	r4, r7
 800e594:	e7e0      	b.n	800e558 <_realloc_r+0x1e>

0800e596 <__ascii_wctomb>:
 800e596:	4603      	mov	r3, r0
 800e598:	4608      	mov	r0, r1
 800e59a:	b141      	cbz	r1, 800e5ae <__ascii_wctomb+0x18>
 800e59c:	2aff      	cmp	r2, #255	@ 0xff
 800e59e:	d904      	bls.n	800e5aa <__ascii_wctomb+0x14>
 800e5a0:	228a      	movs	r2, #138	@ 0x8a
 800e5a2:	601a      	str	r2, [r3, #0]
 800e5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a8:	4770      	bx	lr
 800e5aa:	700a      	strb	r2, [r1, #0]
 800e5ac:	2001      	movs	r0, #1
 800e5ae:	4770      	bx	lr

0800e5b0 <fiprintf>:
 800e5b0:	b40e      	push	{r1, r2, r3}
 800e5b2:	b503      	push	{r0, r1, lr}
 800e5b4:	4601      	mov	r1, r0
 800e5b6:	ab03      	add	r3, sp, #12
 800e5b8:	4805      	ldr	r0, [pc, #20]	@ (800e5d0 <fiprintf+0x20>)
 800e5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5be:	6800      	ldr	r0, [r0, #0]
 800e5c0:	9301      	str	r3, [sp, #4]
 800e5c2:	f7ff fa5d 	bl	800da80 <_vfiprintf_r>
 800e5c6:	b002      	add	sp, #8
 800e5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5cc:	b003      	add	sp, #12
 800e5ce:	4770      	bx	lr
 800e5d0:	200002d8 	.word	0x200002d8

0800e5d4 <abort>:
 800e5d4:	b508      	push	{r3, lr}
 800e5d6:	2006      	movs	r0, #6
 800e5d8:	f000 f834 	bl	800e644 <raise>
 800e5dc:	2001      	movs	r0, #1
 800e5de:	f7f3 fac9 	bl	8001b74 <_exit>

0800e5e2 <_malloc_usable_size_r>:
 800e5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5e6:	1f18      	subs	r0, r3, #4
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	bfbc      	itt	lt
 800e5ec:	580b      	ldrlt	r3, [r1, r0]
 800e5ee:	18c0      	addlt	r0, r0, r3
 800e5f0:	4770      	bx	lr

0800e5f2 <_raise_r>:
 800e5f2:	291f      	cmp	r1, #31
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	460c      	mov	r4, r1
 800e5fa:	d904      	bls.n	800e606 <_raise_r+0x14>
 800e5fc:	2316      	movs	r3, #22
 800e5fe:	6003      	str	r3, [r0, #0]
 800e600:	f04f 30ff 	mov.w	r0, #4294967295
 800e604:	bd38      	pop	{r3, r4, r5, pc}
 800e606:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e608:	b112      	cbz	r2, 800e610 <_raise_r+0x1e>
 800e60a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e60e:	b94b      	cbnz	r3, 800e624 <_raise_r+0x32>
 800e610:	4628      	mov	r0, r5
 800e612:	f000 f831 	bl	800e678 <_getpid_r>
 800e616:	4622      	mov	r2, r4
 800e618:	4601      	mov	r1, r0
 800e61a:	4628      	mov	r0, r5
 800e61c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e620:	f000 b818 	b.w	800e654 <_kill_r>
 800e624:	2b01      	cmp	r3, #1
 800e626:	d00a      	beq.n	800e63e <_raise_r+0x4c>
 800e628:	1c59      	adds	r1, r3, #1
 800e62a:	d103      	bne.n	800e634 <_raise_r+0x42>
 800e62c:	2316      	movs	r3, #22
 800e62e:	6003      	str	r3, [r0, #0]
 800e630:	2001      	movs	r0, #1
 800e632:	e7e7      	b.n	800e604 <_raise_r+0x12>
 800e634:	2100      	movs	r1, #0
 800e636:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e63a:	4620      	mov	r0, r4
 800e63c:	4798      	blx	r3
 800e63e:	2000      	movs	r0, #0
 800e640:	e7e0      	b.n	800e604 <_raise_r+0x12>
	...

0800e644 <raise>:
 800e644:	4b02      	ldr	r3, [pc, #8]	@ (800e650 <raise+0xc>)
 800e646:	4601      	mov	r1, r0
 800e648:	6818      	ldr	r0, [r3, #0]
 800e64a:	f7ff bfd2 	b.w	800e5f2 <_raise_r>
 800e64e:	bf00      	nop
 800e650:	200002d8 	.word	0x200002d8

0800e654 <_kill_r>:
 800e654:	b538      	push	{r3, r4, r5, lr}
 800e656:	4d07      	ldr	r5, [pc, #28]	@ (800e674 <_kill_r+0x20>)
 800e658:	2300      	movs	r3, #0
 800e65a:	4604      	mov	r4, r0
 800e65c:	4608      	mov	r0, r1
 800e65e:	4611      	mov	r1, r2
 800e660:	602b      	str	r3, [r5, #0]
 800e662:	f7f3 fa77 	bl	8001b54 <_kill>
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	d102      	bne.n	800e670 <_kill_r+0x1c>
 800e66a:	682b      	ldr	r3, [r5, #0]
 800e66c:	b103      	cbz	r3, 800e670 <_kill_r+0x1c>
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	bd38      	pop	{r3, r4, r5, pc}
 800e672:	bf00      	nop
 800e674:	20000fb8 	.word	0x20000fb8

0800e678 <_getpid_r>:
 800e678:	f7f3 ba64 	b.w	8001b44 <_getpid>

0800e67c <_init>:
 800e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67e:	bf00      	nop
 800e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e682:	bc08      	pop	{r3}
 800e684:	469e      	mov	lr, r3
 800e686:	4770      	bx	lr

0800e688 <_fini>:
 800e688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68a:	bf00      	nop
 800e68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e68e:	bc08      	pop	{r3}
 800e690:	469e      	mov	lr, r3
 800e692:	4770      	bx	lr
