
RangeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff40  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  080100e0  080100e0  000110e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109ec  080109ec  000124a0  2**0
                  CONTENTS
  4 .ARM          00000008  080109ec  080109ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109f4  080109f4  000124a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109f4  080109f4  000119f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109f8  080109f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a0  20000000  080109fc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e78  200004a0  08010e9c  000124a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001318  08010e9c  00013318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000124a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc6e  00000000  00000000  000124d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003577  00000000  00000000  0002e13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000118f  00000000  00000000  00032d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2c4  00000000  00000000  00033eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d990  00000000  00000000  0004f17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a111  00000000  00000000  0006cb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075dc  00000000  00000000  00106c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080100c8 	.word	0x080100c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	080100c8 	.word	0x080100c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]

}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	if(htim->Instance== TIM10){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10c      	bne.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x2c>
		 //printf("Inter \n");
		 //fflush(stdout);


		read_encoder(&sys);
 800101e:	4809      	ldr	r0, [pc, #36]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001020:	f000 f992 	bl	8001348 <read_encoder>
		//HCSR04_Read();




		PID_controller_position(&sys);
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001026:	f000 fa87 	bl	8001538 <PID_controller_position>
		apply_velocity_input(&sys,sys.htim_PWM);
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800102c:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
 8001030:	4619      	mov	r1, r3
 8001032:	4804      	ldr	r0, [pc, #16]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001034:	f000 fa14 	bl	8001460 <apply_velocity_input>


	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40014400 	.word	0x40014400
 8001044:	200004c0 	.word	0x200004c0

08001048 <setupReadingTimer>:

// la lettura dal sensore lidar è effettuata ogni 20ms il loop di controllo ( usando Prescaler_lidar e ARR=55999) avviene all incirca ogni 1,3 ms

void setupReadingTimer(TIM_HandleTypeDef *htim){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]


	uint16_t ARR=55999;
 8001050:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8001054:	81fb      	strh	r3, [r7, #14]


	__HAL_TIM_SET_PRESCALER(htim, Prescaler_lidar);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2202      	movs	r2, #2
 800105c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001066:	89fa      	ldrh	r2, [r7, #14]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f009 f8c7 	bl	800a200 <HAL_TIM_Base_Start_IT>

	htim->Instance->EGR = TIM_EGR_UG;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <system_init>:



void system_init(system_t *sys, uint8_t dir,uint32_t ts, TIM_HandleTypeDef *htim1,TIM_HandleTypeDef *htim2,TIM_HandleTypeDef *htim3,pid_controller_t pid_pos){
 8001082:	b5b0      	push	{r4, r5, r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	460b      	mov	r3, r1
 8001090:	72fb      	strb	r3, [r7, #11]

	uint8_t i;

	for (i=0; i<5; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
 8001096:	e00c      	b.n	80010b2 <system_init+0x30>

		rbclear( (((ringbuffer_t *) sys)+i ) );
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f001 f936 	bl	8002318 <rbclear>
	for (i=0; i<5; i++){
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	3301      	adds	r3, #1
 80010b0:	75fb      	strb	r3, [r7, #23]
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d9ef      	bls.n	8001098 <system_init+0x16>
	}

	//initializing lidar sensor
  	cont_lidar_init( dir, ts);// continuous reading inizializzation
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 fd6b 	bl	8007b98 <cont_lidar_init>

  	sys->htim_encoder1=htim1;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	f8c3 27ec 	str.w	r2, [r3, #2028]	@ 0x7ec
  	sys->htim_PWM=htim2;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010ce:	f8c3 27f0 	str.w	r2, [r3, #2032]	@ 0x7f0
  	sys->htim_HCSR04=htim3;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010d6:	f8c3 27f4 	str.w	r2, [r3, #2036]	@ 0x7f4
  	sys->pid_pos=pid_pos;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f503 64ff 	add.w	r4, r3, #2040	@ 0x7f8
 80010e0:	f107 0530 	add.w	r5, r7, #48	@ 0x30
 80010e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f4:	e884 0003 	stmia.w	r4, {r0, r1}




}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}

08001100 <ball_estimation>:


// questo metodo di filtraggio dei dati anche se assicura una riduzione del rumore
//sui dati non viene utilizzato poichè rallenta troppo il loop di controllo

void ball_estimation(system_t *sys){
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

	float pos;
	float prec, succ;
	float vel=0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
	float vel_est;
	float acc=0;
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
	float acc_est;

	float pos_1,pos_2;

	uint8_t i=0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	for(i=0; i<5;i++){
 800111a:	2300      	movs	r3, #0
 800111c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001120:	e016      	b.n	8001150 <ball_estimation+0x50>

		rbget(&sys->Ball_pos,i,&pos);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001128:	f997 102b 	ldrsb.w	r1, [r7, #43]	@ 0x2b
 800112c:	f107 021c 	add.w	r2, r7, #28
 8001130:	4618      	mov	r0, r3
 8001132:	f001 f8b1 	bl	8002298 <rbget>
		prec+=pos;
 8001136:	edd7 7a07 	vldr	s15, [r7, #28]
 800113a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	for(i=0; i<5;i++){
 8001146:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800114a:	3301      	adds	r3, #1
 800114c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001150:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001154:	2b04      	cmp	r3, #4
 8001156:	d9e4      	bls.n	8001122 <ball_estimation+0x22>
	}

	prec /=5; //  mean of the last 5 values of position in the buffer
 8001158:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800115c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001164:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	rblast(&sys->Ball_pos,&pos_2);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 f85f 	bl	8002238 <rblast>
	rbget(&sys->Ball_pos, ((&sys->Ball_pos.tail)-1),&pos_1);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001186:	3b01      	subs	r3, #1
 8001188:	b25b      	sxtb	r3, r3
 800118a:	f107 0210 	add.w	r2, r7, #16
 800118e:	4619      	mov	r1, r3
 8001190:	f001 f882 	bl	8002298 <rbget>

	// Poors man Kalman filter
	pos=0.40*pos_2+(1-0.40)*prec;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9de 	bl	8000558 <__aeabi_f2d>
 800119c:	a363      	add	r3, pc, #396	@ (adr r3, 800132c <ball_estimation+0x22c>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fa31 	bl	8000608 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80011b0:	f7ff f9d2 	bl	8000558 <__aeabi_f2d>
 80011b4:	a35f      	add	r3, pc, #380	@ (adr r3, 8001334 <ball_estimation+0x234>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fa25 	bl	8000608 <__aeabi_dmul>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4620      	mov	r0, r4
 80011c4:	4629      	mov	r1, r5
 80011c6:	f7ff f869 	bl	800029c <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fd11 	bl	8000bf8 <__aeabi_d2f>
 80011d6:	4603      	mov	r3, r0
 80011d8:	61fb      	str	r3, [r7, #28]
	rbpush(&sys->Ball_pos_filtered,pos);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 80011e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 ffdd 	bl	80021a8 <rbpush>


    rblast(&sys->Ball_vel,&vel);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 80011f4:	f107 0218 	add.w	r2, r7, #24
 80011f8:	4611      	mov	r1, r2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 f81c 	bl	8002238 <rblast>

	vel_est=0.30*vel+(1-0.30)*((pos_2-pos_1)/Read_TS);
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f9a8 	bl	8000558 <__aeabi_f2d>
 8001208:	a34c      	add	r3, pc, #304	@ (adr r3, 800133c <ball_estimation+0x23c>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9fb 	bl	8000608 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	ed97 7a03 	vldr	s14, [r7, #12]
 800121e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001328 <ball_estimation+0x228>
 800122a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800122e:	ee16 0a90 	vmov	r0, s13
 8001232:	f7ff f991 	bl	8000558 <__aeabi_f2d>
 8001236:	a336      	add	r3, pc, #216	@ (adr r3, 8001310 <ball_estimation+0x210>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9e4 	bl	8000608 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f828 	bl	800029c <__adddf3>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fcd0 	bl	8000bf8 <__aeabi_d2f>
 8001258:	4603      	mov	r3, r0
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
    //vel_est=0.80*vel+(1-0.8)*((pos-pos_1)/Read_TS);
	rbpush(&sys->Ball_vel,vel_est);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8001262:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001266:	4618      	mov	r0, r3
 8001268:	f000 ff9e 	bl	80021a8 <rbpush>


	rblast(&sys->Ball_acc,&acc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001272:	f107 0214 	add.w	r2, r7, #20
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 ffdd 	bl	8002238 <rblast>

	rbget(&sys->Ball_vel, (&sys->Ball_vel.tail)-1,&vel);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f203 40bc 	addw	r0, r3, #1212	@ 0x4bc
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800128a:	3b01      	subs	r3, #1
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f107 0218 	add.w	r2, r7, #24
 8001292:	4619      	mov	r1, r3
 8001294:	f001 f800 	bl	8002298 <rbget>

	acc_est=0.80*acc+(1+0.8)*((vel_est-vel)/Read_TS);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f95c 	bl	8000558 <__aeabi_f2d>
 80012a0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001318 <ball_estimation+0x218>)
 80012a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a6:	f7ff f9af 	bl	8000608 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4614      	mov	r4, r2
 80012b0:	461d      	mov	r5, r3
 80012b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012b6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80012ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012be:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001328 <ball_estimation+0x228>
 80012c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012c6:	ee16 0a90 	vmov	r0, s13
 80012ca:	f7ff f945 	bl	8000558 <__aeabi_f2d>
 80012ce:	a314      	add	r3, pc, #80	@ (adr r3, 8001320 <ball_estimation+0x220>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	f7ff f998 	bl	8000608 <__aeabi_dmul>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ffdc 	bl	800029c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fc84 	bl	8000bf8 <__aeabi_d2f>
 80012f0:	4603      	mov	r3, r0
 80012f2:	623b      	str	r3, [r7, #32]

	rbpush(&sys->Ball_acc, acc_est);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80012fa:	ed97 0a08 	vldr	s0, [r7, #32]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 ff52 	bl	80021a8 <rbpush>



}
 8001304:	bf00      	nop
 8001306:	3730      	adds	r7, #48	@ 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}
 800130c:	f3af 8000 	nop.w
 8001310:	66666666 	.word	0x66666666
 8001314:	3fe66666 	.word	0x3fe66666
 8001318:	9999999a 	.word	0x9999999a
 800131c:	3fe99999 	.word	0x3fe99999
 8001320:	cccccccd 	.word	0xcccccccd
 8001324:	3ffccccc 	.word	0x3ffccccc
 8001328:	42dc0000 	.word	0x42dc0000
 800132c:	9999999a 	.word	0x9999999a
 8001330:	3fd99999 	.word	0x3fd99999
 8001334:	33333333 	.word	0x33333333
 8001338:	3fe33333 	.word	0x3fe33333
 800133c:	33333333 	.word	0x33333333
 8001340:	3fd33333 	.word	0x3fd33333
 8001344:	00000000 	.word	0x00000000

08001348 <read_encoder>:


void read_encoder(system_t *sys){
 8001348:	b5b0      	push	{r4, r5, r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

	uint16_t counter ;
	TIM_HandleTypeDef *htim1;
	float displacement;

	htim1=sys->htim_encoder1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8d3 37ec 	ldr.w	r3, [r3, #2028]	@ 0x7ec
 8001356:	60fb      	str	r3, [r7, #12]

	 counter = (htim1->Instance->CNT);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	82fb      	strh	r3, [r7, #22]
	    if(counter >= htim1->Instance->ARR){
 8001360:	8afa      	ldrh	r2, [r7, #22]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	429a      	cmp	r2, r3
 800136a:	d309      	bcc.n	8001380 <read_encoder+0x38>
	        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	82fb      	strh	r3, [r7, #22]
	        htim1->Instance->CNT = counter; /* correct cnt value */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	8afa      	ldrh	r2, [r7, #22]
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
	    }


	    displacement = (float) (2*M_PI*counter/(htim1->Instance->ARR)-offset_encoder);
 8001380:	8afb      	ldrh	r3, [r7, #22]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8d6 	bl	8000534 <__aeabi_i2d>
 8001388:	a32f      	add	r3, pc, #188	@ (adr r3, 8001448 <read_encoder+0x100>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f93b 	bl	8000608 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4614      	mov	r4, r2
 8001398:	461d      	mov	r5, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8b7 	bl	8000514 <__aeabi_ui2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff fa55 	bl	800085c <__aeabi_ddiv>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4614      	mov	r4, r2
 80013b8:	461d      	mov	r5, r3
 80013ba:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <read_encoder+0x110>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8ca 	bl	8000558 <__aeabi_f2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4620      	mov	r0, r4
 80013ca:	4629      	mov	r1, r5
 80013cc:	f7fe ff64 	bl	8000298 <__aeabi_dsub>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	f7ff fc0e 	bl	8000bf8 <__aeabi_d2f>
 80013dc:	4603      	mov	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

	    if(displacement > 2*M_PI){
 80013e0:	6938      	ldr	r0, [r7, #16]
 80013e2:	f7ff f8b9 	bl	8000558 <__aeabi_f2d>
 80013e6:	a318      	add	r3, pc, #96	@ (adr r3, 8001448 <read_encoder+0x100>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff fb9c 	bl	8000b28 <__aeabi_dcmpgt>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <read_encoder+0xb2>
	       	displacement = 2*M_PI; /* clamping */
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <read_encoder+0x114>)
 80013f8:	613b      	str	r3, [r7, #16]
	   	}

	    if(displacement > M_PI){
 80013fa:	6938      	ldr	r0, [r7, #16]
 80013fc:	f7ff f8ac 	bl	8000558 <__aeabi_f2d>
 8001400:	a313      	add	r3, pc, #76	@ (adr r3, 8001450 <read_encoder+0x108>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff fb8f 	bl	8000b28 <__aeabi_dcmpgt>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00f      	beq.n	8001430 <read_encoder+0xe8>
			displacement = displacement - (2*M_PI); // redefining the domain between -PI and +PI
 8001410:	6938      	ldr	r0, [r7, #16]
 8001412:	f7ff f8a1 	bl	8000558 <__aeabi_f2d>
 8001416:	a30c      	add	r3, pc, #48	@ (adr r3, 8001448 <read_encoder+0x100>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7fe ff3c 	bl	8000298 <__aeabi_dsub>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbe6 	bl	8000bf8 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	613b      	str	r3, [r7, #16]
		}

	    rbpush(&sys->q0,displacement);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	ed97 0a04 	vldr	s0, [r7, #16]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 feb6 	bl	80021a8 <rbpush>


}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	f3af 8000 	nop.w
 8001448:	54442d18 	.word	0x54442d18
 800144c:	401921fb 	.word	0x401921fb
 8001450:	54442d18 	.word	0x54442d18
 8001454:	400921fb 	.word	0x400921fb
 8001458:	20000cf0 	.word	0x20000cf0
 800145c:	40c90fdb 	.word	0x40c90fdb

08001460 <apply_velocity_input>:



void apply_velocity_input(system_t *sys,TIM_HandleTypeDef *htim1){
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	b088      	sub	sp, #32
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
    uint32_t f;
    int32_t stepdir;
    uint32_t steps, ARR, CCR;
    uint16_t prescaler1;

    float u=sys->last_pid_out;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61fb      	str	r3, [r7, #28]


   prescaler1= (uint16_t) 5000;//30000;//12000 ;//8400;
 8001476:	f241 3388 	movw	r3, #5000	@ 0x1388
 800147a:	837b      	strh	r3, [r7, #26]
   f=HAL_RCC_GetPCLK1Freq()*2;
 800147c:	f008 fe48 	bl	800a110 <HAL_RCC_GetPCLK1Freq>
 8001480:	4603      	mov	r3, r0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	617b      	str	r3, [r7, #20]
   //ARR= fabs(u_ref) < 0.01 ? 0:(uint32_t)(RESOLUTION*f/(fabs(u_ref)*16*prescaler1));/// modificato 0.01
   ARR= (uint32_t)(RESOLUTION*f/(fabs(u)*16*prescaler1));
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff f844 	bl	8000514 <__aeabi_ui2d>
 800148c:	a327      	add	r3, pc, #156	@ (adr r3, 800152c <apply_velocity_input+0xcc>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8b9 	bl	8000608 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	edd7 7a07 	vldr	s15, [r7, #28]
 80014a2:	eef0 7ae7 	vabs.f32	s15, s15
 80014a6:	ee17 0a90 	vmov	r0, s15
 80014aa:	f7ff f855 	bl	8000558 <__aeabi_f2d>
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <apply_velocity_input+0xc8>)
 80014b4:	f7ff f8a8 	bl	8000608 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4690      	mov	r8, r2
 80014be:	4699      	mov	r9, r3
 80014c0:	8b7b      	ldrh	r3, [r7, #26]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f836 	bl	8000534 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4640      	mov	r0, r8
 80014ce:	4649      	mov	r1, r9
 80014d0:	f7ff f89a 	bl	8000608 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7ff f9be 	bl	800085c <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb66 	bl	8000bb8 <__aeabi_d2uiz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]
   CCR= ARR /2;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
   __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	8b7a      	ldrh	r2, [r7, #26]
 80014fc:	629a      	str	r2, [r3, #40]	@ 0x28
   __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	60da      	str	r2, [r3, #12]
   __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	635a      	str	r2, [r3, #52]	@ 0x34
   htim1->Instance->EGR = TIM_EGR_UG;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	615a      	str	r2, [r3, #20]


    return;
 800151c:	bf00      	nop

}
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001526:	bf00      	nop
 8001528:	40300000 	.word	0x40300000
 800152c:	ae261898 	.word	0xae261898
 8001530:	3fa015be 	.word	0x3fa015be
 8001534:	00000000 	.word	0x00000000

08001538 <PID_controller_position>:




void PID_controller_position(system_t *sys){
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

	  int8_t dir;
	  pid_controller_t *pid_pos;
	  pid_pos=&sys->pid_pos;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f503 63ff 	add.w	r3, r3, #2040	@ 0x7f8
 8001546:	623b      	str	r3, [r7, #32]

	float set_point1,lidar_measure,encoder_measure,alpha, u0,tc0,u_star;


    // definizione del set point
	set_point1=100.00;
 8001548:	4b49      	ldr	r3, [pc, #292]	@ (8001670 <PID_controller_position+0x138>)
 800154a:	61fb      	str	r3, [r7, #28]


	rblast(&sys->q0,&encoder_measure);// rappresenta l'angolo theta
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f107 020c 	add.w	r2, r7, #12
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fe6f 	bl	8002238 <rblast>
	//rblast(&sys->Ball_pos_filtered,&lidar_measure);// rappresenta la posizione  filtrata
	rblast(&sys->Ball_pos,&lidar_measure);// rappresenta la posizione acquisita dal sensore
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fe66 	bl	8002238 <rblast>


	PID_update(pid_pos,set_point1, lidar_measure,T_CONTROL);
 800156c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001570:	ed9f 1a40 	vldr	s2, [pc, #256]	@ 8001674 <PID_controller_position+0x13c>
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	ed97 0a07 	vldr	s0, [r7, #28]
 800157c:	6a38      	ldr	r0, [r7, #32]
 800157e:	f000 fd2b 	bl	8001fd8 <PID_update>


	u0=pid_pos->out; // uscita del PID
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001586:	61bb      	str	r3, [r7, #24]
	//printf(" PID_OUT %f\n",u0);
	// fflush(stdout);



    if(u0>0){
 8001588:	edd7 7a06 	vldr	s15, [r7, #24]
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	dd05      	ble.n	80015a2 <PID_controller_position+0x6a>

    	HAL_GPIO_WritePin( DirStepper_GPIO_Port, DirStepper_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	4837      	ldr	r0, [pc, #220]	@ (8001678 <PID_controller_position+0x140>)
 800159c:	f007 f91c 	bl	80087d8 <HAL_GPIO_WritePin>
 80015a0:	e004      	b.n	80015ac <PID_controller_position+0x74>


    }else{

    	HAL_GPIO_WritePin( DirStepper_GPIO_Port, DirStepper_Pin, GPIO_PIN_RESET);//invertito
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	4834      	ldr	r0, [pc, #208]	@ (8001678 <PID_controller_position+0x140>)
 80015a8:	f007 f916 	bl	80087d8 <HAL_GPIO_WritePin>

    }


    u_star=u0;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	617b      	str	r3, [r7, #20]




    if (fabs(u0-encoder_measure)<0.01){
 80015b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	eef0 7ae7 	vabs.f32	s15, s15
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe ffc8 	bl	8000558 <__aeabi_f2d>
 80015c8:	a325      	add	r3, pc, #148	@ (adr r3, 8001660 <PID_controller_position+0x128>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff fa8d 	bl	8000aec <__aeabi_dcmplt>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <PID_controller_position+0xa6>
    	tc0= 1000000;
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <PID_controller_position+0x144>)
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
 80015dc:	e026      	b.n	800162c <PID_controller_position+0xf4>
    }else{
    //tc0 = sqrtf(2*M_PI*fabs(u0-encoder_measure)/0.9); // 0.9 è l'accellerazione massima
      tc0 = sqrtf(2*M_PI*fabs(u0-encoder_measure)/1.25);
 80015de:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	eef0 7ae7 	vabs.f32	s15, s15
 80015ee:	ee17 0a90 	vmov	r0, s15
 80015f2:	f7fe ffb1 	bl	8000558 <__aeabi_f2d>
 80015f6:	a31c      	add	r3, pc, #112	@ (adr r3, 8001668 <PID_controller_position+0x130>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f804 	bl	8000608 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <PID_controller_position+0x148>)
 800160e:	f7ff f925 	bl	800085c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff faed 	bl	8000bf8 <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
 8001620:	ee00 3a10 	vmov	s0, r3
 8001624:	f00e fd2e 	bl	8010084 <sqrtf>
 8001628:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    }

    u0=(fabs(u0-encoder_measure))/tc0;
 800162c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001630:	ed97 7a06 	vldr	s14, [r7, #24]
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	eef0 6ae7 	vabs.f32	s13, s15
 800163c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001644:	edc7 7a06 	vstr	s15, [r7, #24]

    //--mostrare uscita cicloidale
    disp1=u0;
 8001648:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <PID_controller_position+0x14c>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]
    sys->last_pid_out=u0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 63fd 	add.w	r3, r3, #2024	@ 0x7e8
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]
    //uscita pid diretta senza traiettoria cicloidale

    //disp1=u_star;
    //sys->last_pid_out=u_star;

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	47ae147b 	.word	0x47ae147b
 8001664:	3f847ae1 	.word	0x3f847ae1
 8001668:	54442d18 	.word	0x54442d18
 800166c:	401921fb 	.word	0x401921fb
 8001670:	42c80000 	.word	0x42c80000
 8001674:	3cac0831 	.word	0x3cac0831
 8001678:	40020800 	.word	0x40020800
 800167c:	49742400 	.word	0x49742400
 8001680:	3ff40000 	.word	0x3ff40000
 8001684:	20000efc 	.word	0x20000efc

08001688 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001690:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001694:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80016a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016b0:	e000      	b.n	80016b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f9      	beq.n	80016b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016be:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b09e      	sub	sp, #120	@ 0x78
 80016dc:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 80016de:	f006 fd4f 	bl	8008180 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e2:	f000 f8fb 	bl	80018dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e6:	f000 fae1 	bl	8001cac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ea:	f000 fab5 	bl	8001c58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ee:	f000 f95f 	bl	80019b0 <MX_I2C1_Init>
  MX_TIM10_Init();
 80016f2:	f000 fa8d 	bl	8001c10 <MX_TIM10_Init>
  MX_TIM3_Init();
 80016f6:	f000 fa37 	bl	8001b68 <MX_TIM3_Init>
  MX_TIM2_Init();
 80016fa:	f000 f9dd 	bl	8001ab8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80016fe:	f000 f985 	bl	8001a0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 // lidar_init(dir_s1);

  system_init( &sys , DIR_S,Read_TS, &htim3,&htim2,&htim1, pid_pos);
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <main+0x19c>)
 8001704:	ac02      	add	r4, sp, #8
 8001706:	461d      	mov	r5, r3
 8001708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800170c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800170e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001714:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001718:	e884 0003 	stmia.w	r4, {r0, r1}
 800171c:	4b56      	ldr	r3, [pc, #344]	@ (8001878 <main+0x1a0>)
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	4b56      	ldr	r3, [pc, #344]	@ (800187c <main+0x1a4>)
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b56      	ldr	r3, [pc, #344]	@ (8001880 <main+0x1a8>)
 8001726:	226e      	movs	r2, #110	@ 0x6e
 8001728:	2152      	movs	r1, #82	@ 0x52
 800172a:	4856      	ldr	r0, [pc, #344]	@ (8001884 <main+0x1ac>)
 800172c:	f7ff fca9 	bl	8001082 <system_init>
  //HAL_TIM_Base_Start_IT(&htim1); // Start the encoder reading timer
  HAL_TIM_Base_Start_IT(&htim3);
 8001730:	4853      	ldr	r0, [pc, #332]	@ (8001880 <main+0x1a8>)
 8001732:	f008 fd65 	bl	800a200 <HAL_TIM_Base_Start_IT>
  setupReadingTimer(&htim10); // Start the  encoder sampling timer
 8001736:	4854      	ldr	r0, [pc, #336]	@ (8001888 <main+0x1b0>)
 8001738:	f7ff fc86 	bl	8001048 <setupReadingTimer>

  /* start PWM */
    if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK){
 800173c:	2100      	movs	r1, #0
 800173e:	484f      	ldr	r0, [pc, #316]	@ (800187c <main+0x1a4>)
 8001740:	f008 fe10 	bl	800a364 <HAL_TIM_PWM_Start>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <main+0x76>
        HardFault_Handler();
 800174a:	f000 ffef 	bl	800272c <HardFault_Handler>
    }
  HAL_Delay(100);
 800174e:	2064      	movs	r0, #100	@ 0x64
 8001750:	f006 fd88 	bl	8008264 <HAL_Delay>
  startMeasurement();
 8001754:	f006 fac4 	bl	8007ce0 <startMeasurement>




  pid_controller_t pid_pos;
  PID_init(&sys.pid_pos,KP,KI,KD,TAU,1);
 8001758:	4b4c      	ldr	r3, [pc, #304]	@ (800188c <main+0x1b4>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	4b4c      	ldr	r3, [pc, #304]	@ (8001890 <main+0x1b8>)
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	4b4b      	ldr	r3, [pc, #300]	@ (8001894 <main+0x1bc>)
 8001766:	edd3 6a00 	vldr	s13, [r3]
 800176a:	4b4b      	ldr	r3, [pc, #300]	@ (8001898 <main+0x1c0>)
 800176c:	ed93 6a00 	vldr	s12, [r3]
 8001770:	2101      	movs	r1, #1
 8001772:	eef0 1a46 	vmov.f32	s3, s12
 8001776:	eeb0 1a66 	vmov.f32	s2, s13
 800177a:	eef0 0a47 	vmov.f32	s1, s14
 800177e:	eeb0 0a67 	vmov.f32	s0, s15
 8001782:	4846      	ldr	r0, [pc, #280]	@ (800189c <main+0x1c4>)
 8001784:	f000 fbc6 	bl	8001f14 <PID_init>

  set_limit(&sys.pid_pos,-400,400,-60,60); //50
 8001788:	eddf 1a45 	vldr	s3, [pc, #276]	@ 80018a0 <main+0x1c8>
 800178c:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 80018a4 <main+0x1cc>
 8001790:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80018a8 <main+0x1d0>
 8001794:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80018ac <main+0x1d4>
 8001798:	4840      	ldr	r0, [pc, #256]	@ (800189c <main+0x1c4>)
 800179a:	f000 fbfe 	bl	8001f9a <set_limit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  set_parameters(&sys.pid_pos, KP, KI, KD, TAU);
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <main+0x1b4>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001890 <main+0x1b8>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <main+0x1bc>)
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <main+0x1c0>)
 80017b2:	ed93 6a00 	vldr	s12, [r3]
 80017b6:	eef0 1a46 	vmov.f32	s3, s12
 80017ba:	eeb0 1a66 	vmov.f32	s2, s13
 80017be:	eef0 0a47 	vmov.f32	s1, s14
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	4835      	ldr	r0, [pc, #212]	@ (800189c <main+0x1c4>)
 80017c8:	f000 fcce 	bl	8002168 <set_parameters>

      ready=0;
 80017cc:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <main+0x1d8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]


	  millimeter =getRangeData();
 80017d2:	f006 fa91 	bl	8007cf8 <getRangeData>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <main+0x1dc>)
 80017dc:	801a      	strh	r2, [r3, #0]
      distance=(float) millimeter;
 80017de:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <main+0x1dc>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ea:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <main+0x1e0>)
 80017ec:	edc3 7a00 	vstr	s15, [r3]
	 printf(" DISTNCE %f\n",distance);
 80017f0:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <main+0x1e0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe feaf 	bl	8000558 <__aeabi_f2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	482f      	ldr	r0, [pc, #188]	@ (80018bc <main+0x1e4>)
 8001800:	f00b ff3a 	bl	800d678 <iprintf>
	 fflush(stdout);
 8001804:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <main+0x1e8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4618      	mov	r0, r3
 800180c:	f00a ffba 	bl	800c784 <fflush>


	 if(!isFirstReading==0){
 8001810:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <main+0x1ec>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <main+0x170>
		 rblast(&sys.Ball_pos,&lastreading);
 8001818:	492b      	ldr	r1, [pc, #172]	@ (80018c8 <main+0x1f0>)
 800181a:	482c      	ldr	r0, [pc, #176]	@ (80018cc <main+0x1f4>)
 800181c:	f000 fd0c 	bl	8002238 <rblast>
		 if(!(lastreading==distance)){
 8001820:	4b29      	ldr	r3, [pc, #164]	@ (80018c8 <main+0x1f0>)
 8001822:	ed93 7a00 	vldr	s14, [r3]
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <main+0x1e0>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d00b      	beq.n	800184e <main+0x176>
			 rbpush(&sys.Ball_pos, distance); // questo metodo non funziona perche satura la velocità ad un valore fisso
 8001836:	4b20      	ldr	r3, [pc, #128]	@ (80018b8 <main+0x1e0>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eeb0 0a67 	vmov.f32	s0, s15
 8001840:	4822      	ldr	r0, [pc, #136]	@ (80018cc <main+0x1f4>)
 8001842:	f000 fcb1 	bl	80021a8 <rbpush>
 8001846:	e002      	b.n	800184e <main+0x176>
		 }

	 }else{
		 isFirstReading=1;// evita d'inserire nel buffer il primo valore che proviene dal sensore poich è sempre errato
 8001848:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <main+0x1ec>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]

	 }
     ball_estimation(&sys);
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <main+0x1ac>)
 8001850:	f7ff fc56 	bl	8001100 <ball_estimation>


     // display purpose
     rblast(&sys.Ball_pos_filtered,&filteredpos);
 8001854:	491e      	ldr	r1, [pc, #120]	@ (80018d0 <main+0x1f8>)
 8001856:	481f      	ldr	r0, [pc, #124]	@ (80018d4 <main+0x1fc>)
 8001858:	f000 fcee 	bl	8002238 <rblast>

     filteredpos=filteredpos;
 800185c:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <main+0x1f8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1b      	ldr	r2, [pc, #108]	@ (80018d0 <main+0x1f8>)
 8001862:	6013      	str	r3, [r2, #0]

     error=sys.pid_pos.prev_err;
 8001864:	4b07      	ldr	r3, [pc, #28]	@ (8001884 <main+0x1ac>)
 8001866:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <main+0x200>)
 800186e:	6013      	str	r3, [r2, #0]
  {
 8001870:	e795      	b.n	800179e <main+0xc6>
 8001872:	bf00      	nop
 8001874:	20000eb4 	.word	0x20000eb4
 8001878:	20000d4c 	.word	0x20000d4c
 800187c:	20000d94 	.word	0x20000d94
 8001880:	20000ddc 	.word	0x20000ddc
 8001884:	200004c0 	.word	0x200004c0
 8001888:	20000e24 	.word	0x20000e24
 800188c:	20000000 	.word	0x20000000
 8001890:	20000f14 	.word	0x20000f14
 8001894:	20000004 	.word	0x20000004
 8001898:	20000008 	.word	0x20000008
 800189c:	20000cb8 	.word	0x20000cb8
 80018a0:	42700000 	.word	0x42700000
 80018a4:	c2700000 	.word	0xc2700000
 80018a8:	43c80000 	.word	0x43c80000
 80018ac:	c3c80000 	.word	0xc3c80000
 80018b0:	200004bc 	.word	0x200004bc
 80018b4:	20000eec 	.word	0x20000eec
 80018b8:	20000cf4 	.word	0x20000cf4
 80018bc:	080100e0 	.word	0x080100e0
 80018c0:	20000450 	.word	0x20000450
 80018c4:	20000ef4 	.word	0x20000ef4
 80018c8:	20000ef8 	.word	0x20000ef8
 80018cc:	20000654 	.word	0x20000654
 80018d0:	20000ef0 	.word	0x20000ef0
 80018d4:	200007e8 	.word	0x200007e8
 80018d8:	20000f00 	.word	0x20000f00

080018dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b094      	sub	sp, #80	@ 0x50
 80018e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	2230      	movs	r2, #48	@ 0x30
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00b fee8 	bl	800d6c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <SystemClock_Config+0xcc>)
 800190a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800190e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <SystemClock_Config+0xd0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a21      	ldr	r2, [pc, #132]	@ (80019ac <SystemClock_Config+0xd0>)
 8001926:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193c:	2301      	movs	r3, #1
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001940:	2310      	movs	r3, #16
 8001942:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001944:	2302      	movs	r3, #2
 8001946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800194c:	2310      	movs	r3, #16
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001950:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001956:	2304      	movs	r3, #4
 8001958:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800195a:	2304      	movs	r3, #4
 800195c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4618      	mov	r0, r3
 8001964:	f007 ff64 	bl	8009830 <HAL_RCC_OscConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800196e:	f000 facb 	bl	8001f08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001972:	230f      	movs	r3, #15
 8001974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001976:	2302      	movs	r3, #2
 8001978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800197e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f008 f9c6 	bl	8009d20 <HAL_RCC_ClockConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800199a:	f000 fab5 	bl	8001f08 <Error_Handler>
  }
}
 800199e:	bf00      	nop
 80019a0:	3750      	adds	r7, #80	@ 0x50
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000

080019b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b4:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019b6:	4a13      	ldr	r2, [pc, #76]	@ (8001a04 <MX_I2C1_Init+0x54>)
 80019b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019bc:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <MX_I2C1_Init+0x58>)
 80019be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019da:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	@ (8001a00 <MX_I2C1_Init+0x50>)
 80019ee:	f006 ff25 	bl	800883c <HAL_I2C_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f8:	f000 fa86 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000cf8 	.word	0x20000cf8
 8001a04:	40005400 	.word	0x40005400
 8001a08:	000186a0 	.word	0x000186a0

08001a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a2a:	4a22      	ldr	r2, [pc, #136]	@ (8001ab4 <MX_TIM1_Init+0xa8>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a30:	2247      	movs	r2, #71	@ 0x47
 8001a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a48:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a54:	4816      	ldr	r0, [pc, #88]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a56:	f008 fd35 	bl	800a4c4 <HAL_TIM_IC_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a60:	f000 fa52 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a74:	f009 fc28 	bl	800b2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a7e:	f000 fa43 	bl	8001f08 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_TIM1_Init+0xa4>)
 8001a9a:	f008 fef8 	bl	800a88e <HAL_TIM_IC_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001aa4:	f000 fa30 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000d4c 	.word	0x20000d4c
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ada:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b02:	4818      	ldr	r0, [pc, #96]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001b04:	f008 fbde 	bl	800a2c4 <HAL_TIM_PWM_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b0e:	f000 f9fb 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001b22:	f009 fbd1 	bl	800b2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b2c:	f000 f9ec 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	@ 0x60
 8001b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2200      	movs	r2, #0
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001b48:	f008 ff3e 	bl	800a9c8 <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b52:	f000 f9d9 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <MX_TIM2_Init+0xac>)
 8001b58:	f000 fd64 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000d94 	.word	0x20000d94

08001b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	@ 0x30
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00b fda2 	bl	800d6c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001b86:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <MX_TIM3_Init+0xa4>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001b98:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001b9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001baa:	2303      	movs	r3, #3
 8001bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001bd6:	f008 fcc4 	bl	800a562 <HAL_TIM_Encoder_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001be0:	f000 f992 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_TIM3_Init+0xa0>)
 8001bf2:	f009 fb69 	bl	800b2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bfc:	f000 f984 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	@ 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000ddc 	.word	0x20000ddc
 8001c0c:	40000400 	.word	0x40000400

08001c10 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c16:	4a0f      	ldr	r2, [pc, #60]	@ (8001c54 <MX_TIM10_Init+0x44>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_TIM10_Init+0x40>)
 8001c3c:	f008 fa90 	bl	800a160 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c46:	f000 f95f 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000e24 	.word	0x20000e24
 8001c54:	40014400 	.word	0x40014400

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ca8 <MX_USART2_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c90:	f009 fb9c 	bl	800b3cc <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f000 f935 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000e6c 	.word	0x20000e6c
 8001ca8:	40004400 	.word	0x40004400

08001cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a42      	ldr	r2, [pc, #264]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b35      	ldr	r3, [pc, #212]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a34      	ldr	r2, [pc, #208]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <MX_GPIO_Init+0x128>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|DirStepper_Pin, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2103      	movs	r1, #3
 8001d36:	4828      	ldr	r0, [pc, #160]	@ (8001dd8 <MX_GPIO_Init+0x12c>)
 8001d38:	f006 fd4e 	bl	80087d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trigger_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8001d42:	4826      	ldr	r0, [pc, #152]	@ (8001ddc <MX_GPIO_Init+0x130>)
 8001d44:	f006 fd48 	bl	80087d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481e      	ldr	r0, [pc, #120]	@ (8001dd8 <MX_GPIO_Init+0x12c>)
 8001d60:	f006 fbb6 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d64:	2301      	movs	r3, #1
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4817      	ldr	r0, [pc, #92]	@ (8001dd8 <MX_GPIO_Init+0x12c>)
 8001d7c:	f006 fba8 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DirStepper_Pin */
  GPIO_InitStruct.Pin = DirStepper_Pin;
 8001d80:	2302      	movs	r3, #2
 8001d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DirStepper_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4810      	ldr	r0, [pc, #64]	@ (8001dd8 <MX_GPIO_Init+0x12c>)
 8001d98:	f006 fb9a 	bl	80084d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trigger_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trigger_Pin;
 8001d9c:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <MX_GPIO_Init+0x130>)
 8001db6:	f006 fb8b 	bl	80084d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2028      	movs	r0, #40	@ 0x28
 8001dc0:	f006 fb4f 	bl	8008462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dc4:	2028      	movs	r0, #40	@ 0x28
 8001dc6:	f006 fb68 	bl	800849a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	@ 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fc4c 	bl	8001688 <ITM_SendChar>
    return ch;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7f1b      	ldrb	r3, [r3, #28]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d16e      	bne.n	8001eea <HAL_TIM_IC_CaptureCallback+0xee>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001e0c:	4b39      	ldr	r3, [pc, #228]	@ (8001ef4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d11a      	bne.n	8001e4a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001e14:	2100      	movs	r1, #0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f008 fe98 	bl	800ab4c <HAL_TIM_ReadCapturedValue>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a36      	ldr	r2, [pc, #216]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001e20:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001e22:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001e24:	2201      	movs	r2, #1
 8001e26:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 020a 	bic.w	r2, r2, #10
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0202 	orr.w	r2, r2, #2
 8001e46:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
			//__HAL_TIM_DISABLE_IT(htim, TIM_CHANNEL_1);
		}
	}
}
 8001e48:	e04f      	b.n	8001eea <HAL_TIM_IC_CaptureCallback+0xee>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d14b      	bne.n	8001eea <HAL_TIM_IC_CaptureCallback+0xee>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001e52:	2100      	movs	r1, #0
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f008 fe79 	bl	800ab4c <HAL_TIM_ReadCapturedValue>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x100>)
 8001e5e:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 8001e68:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x100>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d90c      	bls.n	8001e8e <HAL_TIM_IC_CaptureCallback+0x92>
				Difference = IC_Val2-IC_Val1;
 8001e74:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x100>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001e88:	edc3 7a00 	vstr	s15, [r3]
 8001e8c:	e014      	b.n	8001eb8 <HAL_TIM_IC_CaptureCallback+0xbc>
			else if (IC_Val1 > IC_Val2)
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b1a      	ldr	r3, [pc, #104]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x100>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d90e      	bls.n	8001eb8 <HAL_TIM_IC_CaptureCallback+0xbc>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_TIM_IC_CaptureCallback+0x100>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001ea8:	33ff      	adds	r3, #255	@ 0xff
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_TIM_IC_CaptureCallback+0x104>)
 8001eb4:	edc3 7a00 	vstr	s15, [r3]
			Is_First_Captured = 0; // set it back to false
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6a1a      	ldr	r2, [r3, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 020a 	bic.w	r2, r2, #10
 8001ecc:	621a      	str	r2, [r3, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a12      	ldr	r2, [r2, #32]
 8001ed8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0202 	bic.w	r2, r2, #2
 8001ee8:	60da      	str	r2, [r3, #12]
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000f10 	.word	0x20000f10
 8001ef8:	20000f04 	.word	0x20000f04
 8001efc:	20000f08 	.word	0x20000f08
 8001f00:	20000f0c 	.word	0x20000f0c
 8001f04:	20000d4c 	.word	0x20000d4c

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <Error_Handler+0x8>

08001f14 <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float KI, float KD, float tau,int Controller_type){
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6178      	str	r0, [r7, #20]
 8001f1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f20:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f24:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f28:	edc7 1a01 	vstr	s3, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]


	pid->type=Controller_type;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
	pid->Ki=KI;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	609a      	str	r2, [r3, #8]
	pid->Kd=KD;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	60da      	str	r2, [r3, #12]
	pid->tau=tau;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	@ 0x34


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->lim_out_max=0.f;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->lim_integ_min=0.f;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->lim_integ_max=0.f;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30




	return 0;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	371c      	adds	r7, #28
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8001f9a:	b480      	push	{r7}
 8001f9c:	b087      	sub	sp, #28
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6178      	str	r0, [r7, #20]
 8001fa2:	ed87 0a04 	vstr	s0, [r7, #16]
 8001fa6:	edc7 0a03 	vstr	s1, [r7, #12]
 8001faa:	ed87 1a02 	vstr	s2, [r7, #8]
 8001fae:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->lim_out_max=lim_out_max;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->lim_integ_min=lim_integ_min;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->lim_integ_max=lim_integ_max;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	631a      	str	r2, [r3, #48]	@ 0x30


	return 0;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	371c      	adds	r7, #28
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <PID_update>:





int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fe4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fe8:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]


    /* calculate the error*/
	error=set_point-measure;
 8001ffe:	ed97 7a02 	vldr	s14, [r7, #8]
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200a:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edd3 7a01 	vldr	s15, [r3, #4]
 8002014:	ed97 7a06 	vldr	s14, [r7, #24]
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/

	pid->integrator=pid->integrator+0.5f*pid->Ki*T_C*(error-pid->prev_err);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	ed93 7a07 	vldr	s14, [r3, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	edd3 7a02 	vldr	s15, [r3, #8]
 800202c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002030:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002034:	edd7 7a00 	vldr	s15, [r7]
 8002038:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002042:	ed97 6a06 	vldr	s12, [r7, #24]
 8002046:	ee76 7a67 	vsub.f32	s15, s12, s15
 800204a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800204e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	edc3 7a07 	vstr	s15, [r3, #28]



	/* derivative contribute*/

	pid->derivative=-(2.0f*pid->Kd*(measure-pid->prev_meas) +(2.0f*pid->tau - T_C)*pid->derivative)/(2.0f*pid->tau + T_C);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	edd3 7a03 	vldr	s15, [r3, #12]
 800205e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	edd3 7a06 	vldr	s15, [r3, #24]
 8002068:	edd7 6a01 	vldr	s13, [r7, #4]
 800206c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	edd3 7a04 	vldr	s15, [r3, #16]
 800207a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800207e:	edd7 7a00 	vldr	s15, [r7]
 8002082:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	edd3 7a08 	vldr	s15, [r3, #32]
 800208c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	eef1 6a67 	vneg.f32	s13, s15
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	edd3 7a04 	vldr	s15, [r3, #16]
 800209e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020a2:	edd7 7a00 	vldr	s15, [r7]
 80020a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	edc3 7a08 	vstr	s15, [r3, #32]
	//pid->derivative=pid->Kd*(measure-pid->prev_meas);

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80020c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c8:	dd04      	ble.n	80020d4 <PID_update+0xfc>

		pid->integrator=pid->lim_integ_max;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	61da      	str	r2, [r3, #28]
 80020d2:	e00e      	b.n	80020f2 <PID_update+0x11a>

	}else if(pid->integrator < pid->lim_integ_min)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	ed93 7a07 	vldr	s14, [r3, #28]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80020e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d503      	bpl.n	80020f2 <PID_update+0x11a>
	{
		pid->integrator=pid->lim_integ_min;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	61da      	str	r2, [r3, #28]
	}

   pid->out= proportional + pid->integrator + pid->derivative;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80020f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edd3 7a08 	vldr	s15, [r3, #32]
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

   if (pid->out > pid->lim_out_max) {
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800211c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002124:	dd04      	ble.n	8002130 <PID_update+0x158>

         pid->out = pid->lim_out_max;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	635a      	str	r2, [r3, #52]	@ 0x34
 800212e:	e00e      	b.n	800214e <PID_update+0x176>

     } else if (pid->out < pid->lim_out_min) {
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800213c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	d503      	bpl.n	800214e <PID_update+0x176>

         pid->out = pid->lim_out_min;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34

     }


	pid->prev_err=error;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	615a      	str	r2, [r3, #20]
    pid->prev_meas=measure;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]

		return 0;
 800215a:	2300      	movs	r3, #0


	}
 800215c:	4618      	mov	r0, r3
 800215e:	3724      	adds	r7, #36	@ 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <set_parameters>:

int set_parameters(pid_controller_t *pid, float Kp, float Ki, float Kd, float tau){
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6178      	str	r0, [r7, #20]
 8002170:	ed87 0a04 	vstr	s0, [r7, #16]
 8002174:	edc7 0a03 	vstr	s1, [r7, #12]
 8002178:	ed87 1a02 	vstr	s2, [r7, #8]
 800217c:	edc7 1a01 	vstr	s3, [r7, #4]


	    pid->Kp= Kp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	605a      	str	r2, [r3, #4]
		pid->Ki=Ki;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	609a      	str	r2, [r3, #8]
		pid->Kd=Kd;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	60da      	str	r2, [r3, #12]
		pid->tau=tau;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	611a      	str	r2, [r3, #16]

return 0;
 8002198:	2300      	movs	r3, #0

}
 800219a:	4618      	mov	r0, r3
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4a17      	ldr	r2, [pc, #92]	@ (8002234 <rbpush+0x8c>)
 80021d6:	fba2 1203 	umull	r1, r2, r2, r3
 80021da:	0952      	lsrs	r2, r2, #5
 80021dc:	2164      	movs	r1, #100	@ 0x64
 80021de:	fb01 f202 	mul.w	r2, r1, r2
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d113      	bne.n	800221a <rbpush+0x72>
        /* overwriting data: also move head forward */
        buffer->head++;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	785b      	ldrb	r3, [r3, #1]
 80021f6:	3301      	adds	r3, #1
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	785b      	ldrb	r3, [r3, #1]
 8002202:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <rbpush+0x8c>)
 8002204:	fba2 1203 	umull	r1, r2, r2, r3
 8002208:	0952      	lsrs	r2, r2, #5
 800220a:	2164      	movs	r1, #100	@ 0x64
 800220c:	fb01 f202 	mul.w	r2, r1, r2
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	b2da      	uxtb	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	705a      	strb	r2, [r3, #1]
 8002218:	e005      	b.n	8002226 <rbpush+0x7e>
    }else{
        buffer->length++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	789b      	ldrb	r3, [r3, #2]
 800221e:	3301      	adds	r3, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	51eb851f 	.word	0x51eb851f

08002238 <rblast>:
- rbelement_t \*data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 800225c:	2300      	movs	r3, #0
 800225e:	e015      	b.n	800228c <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3b01      	subs	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	da03      	bge.n	800227a <rblast+0x42>
        index += RBUF_SZ;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3364      	adds	r3, #100	@ 0x64
 8002276:	b2db      	uxtb	r3, r3
 8002278:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	3304      	adds	r3, #4
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	601a      	str	r2, [r3, #0]
    return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	460b      	mov	r3, r1
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 80022a6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	db05      	blt.n	80022ba <rbget+0x22>
 80022ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	7892      	ldrb	r2, [r2, #2]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	db0a      	blt.n	80022d0 <rbget+0x38>
        /* out of bounds */
        *data =  buffer->buffer[buffer->head];
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	785b      	ldrb	r3, [r3, #1]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	3304      	adds	r3, #4
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
        return 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e01a      	b.n	8002306 <rbget+0x6e>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	461a      	mov	r2, r3
 80022d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80022da:	4413      	add	r3, r2
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <rbget+0x7c>)
 80022de:	fb82 1203 	smull	r1, r2, r2, r3
 80022e2:	1151      	asrs	r1, r2, #5
 80022e4:	17da      	asrs	r2, r3, #31
 80022e6:	1a8a      	subs	r2, r1, r2
 80022e8:	2164      	movs	r1, #100	@ 0x64
 80022ea:	fb01 f202 	mul.w	r2, r1, r2
 80022ee:	1a9a      	subs	r2, r3, r2
 80022f0:	4613      	mov	r3, r2
 80022f2:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	3304      	adds	r3, #4
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
    return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	51eb851f 	.word	0x51eb851f

08002318 <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e00a      	b.n	8002340 <rbclear+0x28>
        buffer->buffer[i] = 0;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	3304      	adds	r3, #4
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	3301      	adds	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b63      	cmp	r3, #99	@ 0x63
 8002344:	d9f1      	bls.n	800232a <rbclear+0x12>
    }
    buffer->length = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_MspInit+0x4c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a0f      	ldr	r2, [pc, #60]	@ (80023b0 <HAL_MspInit+0x4c>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <HAL_MspInit+0x4c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_MspInit+0x4c>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	4a08      	ldr	r2, [pc, #32]	@ (80023b0 <HAL_MspInit+0x4c>)
 8002390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002394:	6413      	str	r3, [r2, #64]	@ 0x40
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_MspInit+0x4c>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023a2:	2007      	movs	r0, #7
 80023a4:	f006 f852 	bl	800844c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a19      	ldr	r2, [pc, #100]	@ (8002438 <HAL_I2C_MspInit+0x84>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d12b      	bne.n	800242e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b18      	ldr	r3, [pc, #96]	@ (800243c <HAL_I2C_MspInit+0x88>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <HAL_I2C_MspInit+0x88>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <HAL_I2C_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023f2:	23c0      	movs	r3, #192	@ 0xc0
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023f6:	2312      	movs	r3, #18
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002402:	2304      	movs	r3, #4
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	4619      	mov	r1, r3
 800240c:	480c      	ldr	r0, [pc, #48]	@ (8002440 <HAL_I2C_MspInit+0x8c>)
 800240e:	f006 f85f 	bl	80084d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_I2C_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_I2C_MspInit+0x88>)
 800241c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_I2C_MspInit+0x88>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3728      	adds	r7, #40	@ 0x28
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40005400 	.word	0x40005400
 800243c:	40023800 	.word	0x40023800
 8002440:	40020400 	.word	0x40020400

08002444 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a21      	ldr	r2, [pc, #132]	@ (80024e8 <HAL_TIM_IC_MspInit+0xa4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d13c      	bne.n	80024e0 <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a18      	ldr	r2, [pc, #96]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_TIM_IC_MspInit+0xa8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 800249e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	480d      	ldr	r0, [pc, #52]	@ (80024f0 <HAL_TIM_IC_MspInit+0xac>)
 80024bc:	f006 f808 	bl	80084d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2019      	movs	r0, #25
 80024c6:	f005 ffcc 	bl	8008462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024ca:	2019      	movs	r0, #25
 80024cc:	f005 ffe5 	bl	800849a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	201b      	movs	r0, #27
 80024d6:	f005 ffc4 	bl	8008462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024da:	201b      	movs	r0, #27
 80024dc:	f005 ffdd 	bl	800849a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	@ 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40020000 	.word	0x40020000

080024f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002504:	d10d      	bne.n	8002522 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_TIM_PWM_MspInit+0x3c>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_TIM_PWM_MspInit+0x3c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6413      	str	r3, [r2, #64]	@ 0x40
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_TIM_PWM_MspInit+0x3c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40023800 	.word	0x40023800

08002534 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	@ 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d133      	bne.n	80025be <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a1b      	ldr	r2, [pc, #108]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_TIM_Encoder_MspInit+0x98>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800258e:	23c0      	movs	r3, #192	@ 0xc0
 8002590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800259e:	2302      	movs	r3, #2
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	4809      	ldr	r0, [pc, #36]	@ (80025d0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80025aa:	f005 ff91 	bl	80084d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	201d      	movs	r0, #29
 80025b4:	f005 ff55 	bl	8008462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025b8:	201d      	movs	r0, #29
 80025ba:	f005 ff6e 	bl	800849a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3728      	adds	r7, #40	@ 0x28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020000 	.word	0x40020000

080025d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0e      	ldr	r2, [pc, #56]	@ (800261c <HAL_TIM_Base_MspInit+0x48>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d115      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_TIM_Base_MspInit+0x4c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <HAL_TIM_Base_MspInit+0x4c>)
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_TIM_Base_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	2019      	movs	r0, #25
 8002608:	f005 ff2b 	bl	8008462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800260c:	2019      	movs	r0, #25
 800260e:	f005 ff44 	bl	800849a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40014400 	.word	0x40014400
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002644:	d11e      	bne.n	8002684 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_TIM_MspPostInit+0x68>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <HAL_TIM_MspPostInit+0x68>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	6313      	str	r3, [r2, #48]	@ 0x30
 8002656:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <HAL_TIM_MspPostInit+0x68>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002674:	2301      	movs	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	4619      	mov	r1, r3
 800267e:	4804      	ldr	r0, [pc, #16]	@ (8002690 <HAL_TIM_MspPostInit+0x6c>)
 8002680:	f005 ff26 	bl	80084d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002684:	bf00      	nop
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000

08002694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	@ 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_UART_MspInit+0x84>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12b      	bne.n	800270e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	4b18      	ldr	r3, [pc, #96]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a17      	ldr	r2, [pc, #92]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_UART_MspInit+0x88>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ee:	230c      	movs	r3, #12
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026fe:	2307      	movs	r3, #7
 8002700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	4619      	mov	r1, r3
 8002708:	4805      	ldr	r0, [pc, #20]	@ (8002720 <HAL_UART_MspInit+0x8c>)
 800270a:	f005 fee1 	bl	80084d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800270e:	bf00      	nop
 8002710:	3728      	adds	r7, #40	@ 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40004400 	.word	0x40004400
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <NMI_Handler+0x4>

0800272c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <HardFault_Handler+0x4>

08002734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <MemManage_Handler+0x4>

0800273c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002740:	bf00      	nop
 8002742:	e7fd      	b.n	8002740 <BusFault_Handler+0x4>

08002744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <UsageFault_Handler+0x4>

0800274c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800277a:	f005 fd53 	bl	8008224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002788:	4803      	ldr	r0, [pc, #12]	@ (8002798 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800278a:	f007 ff90 	bl	800a6ae <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800278e:	4803      	ldr	r0, [pc, #12]	@ (800279c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002790:	f007 ff8d 	bl	800a6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000d4c 	.word	0x20000d4c
 800279c:	20000e24 	.word	0x20000e24

080027a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <TIM1_CC_IRQHandler+0x10>)
 80027a6:	f007 ff82 	bl	800a6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000d4c 	.word	0x20000d4c

080027b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <TIM3_IRQHandler+0x10>)
 80027ba:	f007 ff78 	bl	800a6ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000ddc 	.word	0x20000ddc

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027d0:	f006 f81c 	bl	800880c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return 1;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_kill>:

int _kill(int pid, int sig)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027f2:	f00a ff71 	bl	800d6d8 <__errno>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2216      	movs	r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
  return -1;
 80027fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <_exit>:

void _exit (int status)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002810:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ffe7 	bl	80027e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800281a:	bf00      	nop
 800281c:	e7fd      	b.n	800281a <_exit+0x12>

0800281e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e00a      	b.n	8002846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002830:	f3af 8000 	nop.w
 8002834:	4601      	mov	r1, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	60ba      	str	r2, [r7, #8]
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	429a      	cmp	r2, r3
 800284c:	dbf0      	blt.n	8002830 <_read+0x12>
  }

  return len;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	e009      	b.n	800287e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	60ba      	str	r2, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fab4 	bl	8001de0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	3301      	adds	r3, #1
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	dbf1      	blt.n	800286a <_write+0x12>
  }
  return len;
 8002886:	687b      	ldr	r3, [r7, #4]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_close>:

int _close(int file)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028b8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <_isatty>:

int _isatty(int file)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d0:	2301      	movs	r3, #1
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f00a fed6 	bl	800d6d8 <__errno>
 800292c:	4603      	mov	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	@ (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4413      	add	r3, r2
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <_sbrk+0x64>)
 8002948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20020000 	.word	0x20020000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000f18 	.word	0x20000f18
 8002960:	20001318 	.word	0x20001318

08002964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800298c:	f7ff ffea 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002992:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002994:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029a8:	4c0a      	ldr	r4, [pc, #40]	@ (80029d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f00a fe95 	bl	800d6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7fe fe8d 	bl	80016d8 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 80029cc:	080109fc 	.word	0x080109fc
  ldr r2, =_sbss
 80029d0:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 80029d4:	20001318 	.word	0x20001318

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>

080029da <VL53L0X_GetPalErrorString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	6039      	str	r1, [r7, #0]
 80029e4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fecf 	bl	8007794 <VL53L0X_get_pal_error_string>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80029fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002a14:	6839      	ldr	r1, [r7, #0]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f001 fd9d 	bl	8004556 <VL53L0X_get_offset_calibration_data_micro_meter>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0a4      	sub	sp, #144	@ 0x90
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002a3a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d107      	bne.n	8002a52 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2188      	movs	r1, #136	@ 0x88
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f005 fa3a 	bl	8007ec0 <VL53L0X_WrByte>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a60:	f8a3 217e 	strh.w	r2, [r3, #382]	@ 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4aae      	ldr	r2, [pc, #696]	@ (8002d20 <VL53L0X_DataInit+0x2f4>)
 8002a68:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fadf 	bl	800303c <VL53L0X_GetDeviceParameters>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 8002a84:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d130      	bne.n	8002aee <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8002a90:	2300      	movs	r3, #0
 8002a92:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8002a94:	2300      	movs	r3, #0
 8002a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8002a98:	f04f 6396 	mov.w	r3, #78643200	@ 0x4b00000
 8002a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8002a9e:	f24b 3333 	movw	r3, #45875	@ 0xb333
 8002aa2:	653b      	str	r3, [r7, #80]	@ 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8002aa4:	4b9f      	ldr	r3, [pc, #636]	@ (8002d24 <VL53L0X_DataInit+0x2f8>)
 8002aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8002aa8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aac:	657b      	str	r3, [r7, #84]	@ 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8002aae:	f04f 7361 	mov.w	r3, #58982400	@ 0x3840000
 8002ab2:	673b      	str	r3, [r7, #112]	@ 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8002ab4:	4b9c      	ldr	r3, [pc, #624]	@ (8002d28 <VL53L0X_DataInit+0x2fc>)
 8002ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8002ab8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d2c <VL53L0X_DataInit+0x300>)
 8002aba:	677b      	str	r3, [r7, #116]	@ 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8002abc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d30 <VL53L0X_DataInit+0x304>)
 8002abe:	65fb      	str	r3, [r7, #92]	@ 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8002ac0:	4b9c      	ldr	r3, [pc, #624]	@ (8002d34 <VL53L0X_DataInit+0x308>)
 8002ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8002ac4:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8002ac8:	663b      	str	r3, [r7, #96]	@ 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 8002aca:	f04f 73fa 	mov.w	r3, #32768000	@ 0x1f40000
 8002ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8002ad0:	f44f 2370 	mov.w	r3, #983040	@ 0xf0000
 8002ad4:	667b      	str	r3, [r7, #100]	@ 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8002ad6:	f04f 73c8 	mov.w	r3, #26214400	@ 0x1900000
 8002ada:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3308      	adds	r3, #8
 8002ae2:	f107 0110 	add.w	r1, r7, #16
 8002ae6:	2278      	movs	r2, #120	@ 0x78
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f00a fe22 	bl	800d732 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2264      	movs	r2, #100	@ 0x64
 8002af2:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8002afc:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b06:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8002b10:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	2180      	movs	r1, #128	@ 0x80
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f005 f9cd 	bl	8007ec0 <VL53L0X_WrByte>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b34:	2201      	movs	r2, #1
 8002b36:	21ff      	movs	r1, #255	@ 0xff
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f005 f9c1 	bl	8007ec0 <VL53L0X_WrByte>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f005 f9b5 	bl	8007ec0 <VL53L0X_WrByte>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002b64:	f107 030f 	add.w	r3, r7, #15
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2191      	movs	r1, #145	@ 0x91
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 fa5b 	bl	8008028 <VL53L0X_RdByte>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f005 f997 	bl	8007ec0 <VL53L0X_WrByte>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	21ff      	movs	r1, #255	@ 0xff
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f005 f98b 	bl	8007ec0 <VL53L0X_WrByte>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 f97f 	bl	8007ec0 <VL53L0X_WrByte>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bd6:	e017      	b.n	8002c08 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8002bd8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d118      	bne.n	8002c12 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	2201      	movs	r2, #1
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fd8a 	bl	8003704 <VL53L0X_SetLimitCheckEnable>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c02:	3301      	adds	r3, #1
 8002c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c0c:	2b05      	cmp	r3, #5
 8002c0e:	dde3      	ble.n	8002bd8 <VL53L0X_DataInit+0x1ac>
 8002c10:	e000      	b.n	8002c14 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8002c12:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002c14:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2102      	movs	r1, #2
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fd6f 	bl	8003704 <VL53L0X_SetLimitCheckEnable>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c2c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d107      	bne.n	8002c44 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c34:	2200      	movs	r2, #0
 8002c36:	2103      	movs	r1, #3
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fd63 	bl	8003704 <VL53L0X_SetLimitCheckEnable>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c44:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2104      	movs	r1, #4
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fd57 	bl	8003704 <VL53L0X_SetLimitCheckEnable>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c5c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c64:	2200      	movs	r2, #0
 8002c66:	2105      	movs	r1, #5
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fd4b 	bl	8003704 <VL53L0X_SetLimitCheckEnable>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c74:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d108      	bne.n	8002c8e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c7c:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8002c80:	2100      	movs	r1, #0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fdee 	bl	8003864 <VL53L0X_SetLimitCheckValue>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c8e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d108      	bne.n	8002ca8 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fde1 	bl	8003864 <VL53L0X_SetLimitCheckValue>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ca8:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002cb0:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fdd4 	bl	8003864 <VL53L0X_SetLimitCheckValue>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cc2:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2103      	movs	r1, #3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fdc8 	bl	8003864 <VL53L0X_SetLimitCheckValue>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cda:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	22ff      	movs	r2, #255	@ 0xff
 8002ce6:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002cea:	22ff      	movs	r2, #255	@ 0xff
 8002cec:	2101      	movs	r1, #1
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f005 f8e6 	bl	8007ec0 <VL53L0X_WrByte>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002d02:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d103      	bne.n	8002d12 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8002d12:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3790      	adds	r7, #144	@ 0x90
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	000970a4 	.word	0x000970a4
 8002d24:	044c0000 	.word	0x044c0000
 8002d28:	0003cccc 	.word	0x0003cccc
 8002d2c:	02ee0000 	.word	0x02ee0000
 8002d30:	00074ccc 	.word	0x00074ccc
 8002d34:	02260000 	.word	0x02260000

08002d38 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b0ac      	sub	sp, #176	@ 0xb0
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002d46:	f107 031c 	add.w	r3, r7, #28
 8002d4a:	2278      	movs	r2, #120	@ 0x78
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f00a fcb6 	bl	800d6c0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	uint32_t count = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	uint8_t isApertureSpads = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002d76:	2101      	movs	r1, #1
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f002 fb42 	bl	8005402 <VL53L0X_get_info_from_device>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 8002d8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8002d94:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002d98:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d80f      	bhi.n	8002dc0 <VL53L0X_StaticInit+0x88>
 8002da0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d103      	bne.n	8002db0 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8002da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d807      	bhi.n	8002dc0 <VL53L0X_StaticInit+0x88>
 8002db0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10f      	bne.n	8002dd8 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8002db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d90b      	bls.n	8002dd8 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002dc0:	f107 0218 	add.w	r2, r7, #24
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f001 fdbe 	bl	800494c <VL53L0X_perform_ref_spad_management>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002dd6:	e00a      	b.n	8002dee <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002dd8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f001 ffbe 	bl	8004d64 <VL53L0X_set_reference_spads>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002dee:	4b92      	ldr	r3, [pc, #584]	@ (8003038 <VL53L0X_StaticInit+0x300>)
 8002df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8002df4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8002e02:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002e06:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002e14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e18:	e002      	b.n	8002e20 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002e1a:	4b87      	ldr	r3, [pc, #540]	@ (8003038 <VL53L0X_StaticInit+0x300>)
 8002e1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002e20:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8002e28:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f003 fe7d 	bl	8006b2c <VL53L0X_load_tuning_settings>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e38:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2304      	movs	r3, #4
 8002e46:	2200      	movs	r2, #0
 8002e48:	2100      	movs	r1, #0
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f001 f9b6 	bl	80041bc <VL53L0X_SetGpioConfig>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e56:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d121      	bne.n	8002ea2 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	21ff      	movs	r1, #255	@ 0xff
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f005 f82c 	bl	8007ec0 <VL53L0X_WrByte>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e6e:	f107 031a 	add.w	r3, r7, #26
 8002e72:	461a      	mov	r2, r3
 8002e74:	2184      	movs	r1, #132	@ 0x84
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f005 f900 	bl	800807c <VL53L0X_RdWord>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	21ff      	movs	r1, #255	@ 0xff
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f005 f816 	bl	8007ec0 <VL53L0X_WrByte>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ea2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <VL53L0X_StaticInit+0x17c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002eaa:	8b7b      	ldrh	r3, [r7, #26]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002eb4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8ba 	bl	800303c <VL53L0X_GetDeviceParameters>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8002ece:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d110      	bne.n	8002ef8 <VL53L0X_StaticInit+0x1c0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002ed6:	f107 0319 	add.w	r3, r7, #25
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f9a2 	bl	8003226 <VL53L0X_GetFractionEnable>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8002ee8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <VL53L0X_StaticInit+0x1c0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002ef0:	7e7a      	ldrb	r2, [r7, #25]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f883 215d 	strb.w	r2, [r3, #349]	@ 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002ef8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <VL53L0X_StaticInit+0x1d8>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3308      	adds	r3, #8
 8002f04:	f107 011c 	add.w	r1, r7, #28
 8002f08:	2278      	movs	r2, #120	@ 0x78
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00a fc11 	bl	800d732 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f10:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <VL53L0X_StaticInit+0x204>
		Status = VL53L0X_RdByte(Dev,
 8002f18:	f107 0319 	add.w	r3, r7, #25
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2101      	movs	r1, #1
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f005 f881 	bl	8008028 <VL53L0X_RdByte>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002f2c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <VL53L0X_StaticInit+0x204>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002f34:	7e7a      	ldrb	r2, [r7, #25]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002f3c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <VL53L0X_StaticInit+0x21c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f9e1 	bl	8003310 <VL53L0X_SetSequenceStepEnable>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002f54:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d107      	bne.n	8002f6c <VL53L0X_StaticInit+0x234>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2102      	movs	r1, #2
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f9d5 	bl	8003310 <VL53L0X_SetSequenceStepEnable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002f6c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <VL53L0X_StaticInit+0x244>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f7c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <VL53L0X_StaticInit+0x260>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002f84:	f107 0313 	add.w	r3, r7, #19
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9a7 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f98:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <VL53L0X_StaticInit+0x270>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fa0:	7cfa      	ldrb	r2, [r7, #19]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fa8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <VL53L0X_StaticInit+0x28c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002fb0:	f107 0313 	add.w	r3, r7, #19
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f991 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fc4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <VL53L0X_StaticInit+0x29c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fcc:	7cfa      	ldrb	r2, [r7, #19]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fd4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <VL53L0X_StaticInit+0x2b8>
		Status = get_sequence_step_timeout(
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2103      	movs	r1, #3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f002 ff8d 	bl	8005f04 <get_sequence_step_timeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ff0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d103      	bne.n	8003000 <VL53L0X_StaticInit+0x2c8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8003000:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <VL53L0X_StaticInit+0x2e4>
		Status = get_sequence_step_timeout(
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	461a      	mov	r2, r3
 800300e:	2104      	movs	r1, #4
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f002 ff77 	bl	8005f04 <get_sequence_step_timeout>
 8003016:	4603      	mov	r3, r0
 8003018:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800301c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <VL53L0X_StaticInit+0x2f4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800302c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
}
 8003030:	4618      	mov	r0, r3
 8003032:	37a8      	adds	r7, #168	@ 0xa8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000010 	.word	0x20000010

0800303c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f8d6 	bl	8003200 <VL53L0X_GetDeviceMode>
 8003054:	4603      	mov	r3, r0
 8003056:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fad0 	bl	800360c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800307e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d107      	bne.n	8003096 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	3310      	adds	r3, #16
 800308a:	4619      	mov	r1, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fb06 	bl	800369e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d107      	bne.n	80030ae <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fcae 	bl	8002a06 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80030aa:	4603      	mov	r3, r0
 80030ac:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d134      	bne.n	8003120 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	e02a      	b.n	8003112 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80030bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12a      	bne.n	800311a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	b299      	uxth	r1, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3308      	adds	r3, #8
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	461a      	mov	r2, r3
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fc26 	bl	8003928 <VL53L0X_GetLimitCheckValue>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80030e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d117      	bne.n	800311e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	b299      	uxth	r1, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	3318      	adds	r3, #24
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	461a      	mov	r2, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fb8d 	bl	800381c <VL53L0X_GetLimitCheckEnable>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	4313      	orrs	r3, r2
 800310a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	3301      	adds	r3, #1
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b05      	cmp	r3, #5
 8003116:	ddd1      	ble.n	80030bc <VL53L0X_GetDeviceParameters+0x80>
 8003118:	e002      	b.n	8003120 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800311e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3374      	adds	r3, #116	@ 0x74
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fc88 	bl	8003a44 <VL53L0X_GetWrapAroundCheckEnable>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f89f 	bl	800328a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800314c:	4603      	mov	r3, r0
 800314e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d120      	bne.n	800319a <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	e01a      	b.n	8003194 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3310      	adds	r3, #16
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 800316a:	6839      	ldr	r1, [r7, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	330e      	adds	r3, #14
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3316      	adds	r3, #22
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8003182:	6839      	ldr	r1, [r7, #0]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3314      	adds	r3, #20
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3301      	adds	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b06      	cmp	r3, #6
 8003198:	dde1      	ble.n	800315e <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800319a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	2b15      	cmp	r3, #21
 80031bc:	bf8c      	ite	hi
 80031be:	2201      	movhi	r2, #1
 80031c0:	2200      	movls	r2, #0
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	2a00      	cmp	r2, #0
 80031c6:	d10f      	bne.n	80031e8 <VL53L0X_SetDeviceMode+0x40>
 80031c8:	4a0c      	ldr	r2, [pc, #48]	@ (80031fc <VL53L0X_SetDeviceMode+0x54>)
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	721a      	strb	r2, [r3, #8]
		break;
 80031e6:	e001      	b.n	80031ec <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80031e8:	23f8      	movs	r3, #248	@ 0xf8
 80031ea:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80031ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	0030000b 	.word	0x0030000b

08003200 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7a1a      	ldrb	r2, [r3, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	2109      	movs	r1, #9
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f004 fef5 	bl	8008028 <VL53L0X_RdByte>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f003 fad5 	bl	8006824 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800327a:	4603      	mov	r3, r0
 800327c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f003 fb95 	bl	80069ca <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80032a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
 80032bc:	4613      	mov	r3, r2
 80032be:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f002 ffec 	bl	80062a8 <VL53L0X_set_vcsel_pulse_period>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80032d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	460b      	mov	r3, r1
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4619      	mov	r1, r3
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f003 fa5c 	bl	80067b6 <VL53L0X_get_vcsel_pulse_period>
 80032fe:	4603      	mov	r3, r0
 8003300:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003302:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003320:	2300      	movs	r3, #0
 8003322:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800332c:	f107 030f 	add.w	r3, r7, #15
 8003330:	461a      	mov	r2, r3
 8003332:	2101      	movs	r1, #1
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f004 fe77 	bl	8008028 <VL53L0X_RdByte>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8003342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d159      	bne.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 800334a:	78bb      	ldrb	r3, [r7, #2]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d12b      	bne.n	80033a8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b04      	cmp	r3, #4
 8003354:	d825      	bhi.n	80033a2 <VL53L0X_SetSequenceStepEnable+0x92>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003371 	.word	0x08003371
 8003360:	0800337b 	.word	0x0800337b
 8003364:	08003385 	.word	0x08003385
 8003368:	0800338f 	.word	0x0800338f
 800336c:	08003399 	.word	0x08003399
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003370:	7dbb      	ldrb	r3, [r7, #22]
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	75bb      	strb	r3, [r7, #22]
				break;
 8003378:	e041      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800337a:	7dbb      	ldrb	r3, [r7, #22]
 800337c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003380:	75bb      	strb	r3, [r7, #22]
				break;
 8003382:	e03c      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003384:	7dbb      	ldrb	r3, [r7, #22]
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	75bb      	strb	r3, [r7, #22]
				break;
 800338c:	e037      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800338e:	7dbb      	ldrb	r3, [r7, #22]
 8003390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003394:	75bb      	strb	r3, [r7, #22]
				break;
 8003396:	e032      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003398:	7dbb      	ldrb	r3, [r7, #22]
 800339a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800339e:	75bb      	strb	r3, [r7, #22]
				break;
 80033a0:	e02d      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80033a2:	23fc      	movs	r3, #252	@ 0xfc
 80033a4:	75fb      	strb	r3, [r7, #23]
 80033a6:	e02a      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d825      	bhi.n	80033fa <VL53L0X_SetSequenceStepEnable+0xea>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033d3 	.word	0x080033d3
 80033bc:	080033dd 	.word	0x080033dd
 80033c0:	080033e7 	.word	0x080033e7
 80033c4:	080033f1 	.word	0x080033f1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80033c8:	7dbb      	ldrb	r3, [r7, #22]
 80033ca:	f023 0310 	bic.w	r3, r3, #16
 80033ce:	75bb      	strb	r3, [r7, #22]
				break;
 80033d0:	e015      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80033d2:	7dbb      	ldrb	r3, [r7, #22]
 80033d4:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80033d8:	75bb      	strb	r3, [r7, #22]
				break;
 80033da:	e010      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80033dc:	7dbb      	ldrb	r3, [r7, #22]
 80033de:	f023 0304 	bic.w	r3, r3, #4
 80033e2:	75bb      	strb	r3, [r7, #22]
				break;
 80033e4:	e00b      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80033e6:	7dbb      	ldrb	r3, [r7, #22]
 80033e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ec:	75bb      	strb	r3, [r7, #22]
				break;
 80033ee:	e006      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80033f0:	7dbb      	ldrb	r3, [r7, #22]
 80033f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033f6:	75bb      	strb	r3, [r7, #22]
				break;
 80033f8:	e001      	b.n	80033fe <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80033fa:	23fc      	movs	r3, #252	@ 0xfc
 80033fc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	7dba      	ldrb	r2, [r7, #22]
 8003402:	429a      	cmp	r2, r3
 8003404:	d01e      	beq.n	8003444 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d107      	bne.n	800341e <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800340e:	7dbb      	ldrb	r3, [r7, #22]
 8003410:	461a      	mov	r2, r3
 8003412:	2101      	movs	r1, #1
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f004 fd53 	bl	8007ec0 <VL53L0X_WrByte>
 800341a:	4603      	mov	r3, r0
 800341c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800341e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7dba      	ldrb	r2, [r7, #22]
 800342a:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800342e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800343c:	6939      	ldr	r1, [r7, #16]
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff10 	bl	8003264 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
 800345e:	4613      	mov	r3, r2
 8003460:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003462:	2300      	movs	r3, #0
 8003464:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d836      	bhi.n	80034e0 <sequence_step_enabled+0x90>
 8003472:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <sequence_step_enabled+0x28>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	0800348d 	.word	0x0800348d
 800347c:	0800349f 	.word	0x0800349f
 8003480:	080034b1 	.word	0x080034b1
 8003484:	080034c3 	.word	0x080034c3
 8003488:	080034d5 	.word	0x080034d5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800348c:	7abb      	ldrb	r3, [r7, #10]
 800348e:	111b      	asrs	r3, r3, #4
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	701a      	strb	r2, [r3, #0]
		break;
 800349c:	e022      	b.n	80034e4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800349e:	7abb      	ldrb	r3, [r7, #10]
 80034a0:	10db      	asrs	r3, r3, #3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	701a      	strb	r2, [r3, #0]
		break;
 80034ae:	e019      	b.n	80034e4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80034b0:	7abb      	ldrb	r3, [r7, #10]
 80034b2:	109b      	asrs	r3, r3, #2
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	701a      	strb	r2, [r3, #0]
		break;
 80034c0:	e010      	b.n	80034e4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80034c2:	7abb      	ldrb	r3, [r7, #10]
 80034c4:	119b      	asrs	r3, r3, #6
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	701a      	strb	r2, [r3, #0]
		break;
 80034d2:	e007      	b.n	80034e4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80034d4:	7abb      	ldrb	r3, [r7, #10]
 80034d6:	09db      	lsrs	r3, r3, #7
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	701a      	strb	r2, [r3, #0]
		break;
 80034de:	e001      	b.n	80034e4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80034e0:	23fc      	movs	r3, #252	@ 0xfc
 80034e2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003506:	f107 030e 	add.w	r3, r7, #14
 800350a:	461a      	mov	r2, r3
 800350c:	2101      	movs	r1, #1
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f004 fd8a 	bl	8008028 <VL53L0X_RdByte>
 8003514:	4603      	mov	r3, r0
 8003516:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d107      	bne.n	8003530 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003520:	7bba      	ldrb	r2, [r7, #14]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2100      	movs	r1, #0
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff92 	bl	8003450 <sequence_step_enabled>
 800352c:	4603      	mov	r3, r0
 800352e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d108      	bne.n	800354a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003538:	7bba      	ldrb	r2, [r7, #14]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	3302      	adds	r3, #2
 800353e:	2101      	movs	r1, #1
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff85 	bl	8003450 <sequence_step_enabled>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800354a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d108      	bne.n	8003564 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003552:	7bba      	ldrb	r2, [r7, #14]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	2102      	movs	r1, #2
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff78 	bl	8003450 <sequence_step_enabled>
 8003560:	4603      	mov	r3, r0
 8003562:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d108      	bne.n	800357e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800356c:	7bba      	ldrb	r2, [r7, #14]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	3303      	adds	r3, #3
 8003572:	2103      	movs	r1, #3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ff6b 	bl	8003450 <sequence_step_enabled>
 800357a:	4603      	mov	r3, r0
 800357c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003586:	7bba      	ldrb	r2, [r7, #14]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	3304      	adds	r3, #4
 800358c:	2104      	movs	r1, #4
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff5e 	bl	8003450 <sequence_step_enabled>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003598:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80035b2:	f107 030e 	add.w	r3, r7, #14
 80035b6:	461a      	mov	r2, r3
 80035b8:	21f8      	movs	r1, #248	@ 0xf8
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f004 fd5e 	bl	800807c <VL53L0X_RdWord>
 80035c0:	4603      	mov	r3, r0
 80035c2:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80035c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d112      	bne.n	80035f2 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e001      	b.n	80035e4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	2104      	movs	r1, #4
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f004 fcb7 	bl	8007f5c <VL53L0X_WrDWord>
 80035ee:	4603      	mov	r3, r0
 80035f0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80035f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	461a      	mov	r2, r3
 8003620:	21f8      	movs	r1, #248	@ 0xf8
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f004 fd2a 	bl	800807c <VL53L0X_RdWord>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800362c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	461a      	mov	r2, r3
 800363a:	2104      	movs	r1, #4
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f004 fd53 	bl	80080e8 <VL53L0X_RdDWord>
 8003642:	4603      	mov	r3, r0
 8003644:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10c      	bne.n	8003668 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800364e:	89bb      	ldrh	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	89ba      	ldrh	r2, [r7, #12]
 8003658:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7d1b      	ldrb	r3, [r3, #20]
 8003686:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	7bba      	ldrb	r2, [r7, #14]
 800368c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80036ac:	f107 030e 	add.w	r3, r7, #14
 80036b0:	461a      	mov	r2, r3
 80036b2:	2120      	movs	r1, #32
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f004 fce1 	bl	800807c <VL53L0X_RdWord>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80036be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d118      	bne.n	80036f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80036c6:	89fb      	ldrh	r3, [r7, #14]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	751a      	strb	r2, [r3, #20]
 80036de:	e00b      	b.n	80036f8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
 8003710:	4613      	mov	r3, r2
 8003712:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003720:	2300      	movs	r3, #0
 8003722:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003724:	887b      	ldrh	r3, [r7, #2]
 8003726:	2b05      	cmp	r3, #5
 8003728:	d902      	bls.n	8003730 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800372a:	23fc      	movs	r3, #252	@ 0xfc
 800372c:	75fb      	strb	r3, [r7, #23]
 800372e:	e05b      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	73bb      	strb	r3, [r7, #14]
 8003742:	e00a      	b.n	800375a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	330a      	adds	r3, #10
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	2b05      	cmp	r3, #5
 800375e:	d841      	bhi.n	80037e4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003760:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <VL53L0X_SetLimitCheckEnable+0x64>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	08003781 	.word	0x08003781
 800376c:	0800378b 	.word	0x0800378b
 8003770:	080037a1 	.word	0x080037a1
 8003774:	080037ab 	.word	0x080037ab
 8003778:	080037b5 	.word	0x080037b5
 800377c:	080037cd 	.word	0x080037cd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7bfa      	ldrb	r2, [r7, #15]
 8003784:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003788:	e02e      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800378e:	b29b      	uxth	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	2144      	movs	r1, #68	@ 0x44
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f004 fbb7 	bl	8007f08 <VL53L0X_WrWord>
 800379a:	4603      	mov	r3, r0
 800379c:	75fb      	strb	r3, [r7, #23]

			break;
 800379e:	e023      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80037a8:	e01e      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7bfa      	ldrb	r2, [r7, #15]
 80037ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80037b2:	e019      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80037ba:	7b7b      	ldrb	r3, [r7, #13]
 80037bc:	22fe      	movs	r2, #254	@ 0xfe
 80037be:	2160      	movs	r1, #96	@ 0x60
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f004 fbfd 	bl	8007fc0 <VL53L0X_UpdateByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80037ca:	e00d      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80037d2:	7b7b      	ldrb	r3, [r7, #13]
 80037d4:	22ef      	movs	r2, #239	@ 0xef
 80037d6:	2160      	movs	r1, #96	@ 0x60
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f004 fbf1 	bl	8007fc0 <VL53L0X_UpdateByte>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80037e2:	e001      	b.n	80037e8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80037e4:	23fc      	movs	r3, #252	@ 0xfc
 80037e6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2020 	strb.w	r2, [r3, #32]
 8003802:	e005      	b.n	8003810 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003810:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	460b      	mov	r3, r1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	2b05      	cmp	r3, #5
 8003832:	d905      	bls.n	8003840 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003834:	23fc      	movs	r3, #252	@ 0xfc
 8003836:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e008      	b.n	8003852 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	7dba      	ldrb	r2, [r7, #22]
 8003850:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	460b      	mov	r3, r1
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003880:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003882:	7dbb      	ldrb	r3, [r7, #22]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003888:	897b      	ldrh	r3, [r7, #10]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	330a      	adds	r3, #10
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	e040      	b.n	800391a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003898:	897b      	ldrh	r3, [r7, #10]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d830      	bhi.n	8003900 <VL53L0X_SetLimitCheckValue+0x9c>
 800389e:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <VL53L0X_SetLimitCheckValue+0x40>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038bd 	.word	0x080038bd
 80038a8:	080038c5 	.word	0x080038c5
 80038ac:	080038db 	.word	0x080038db
 80038b0:	080038e3 	.word	0x080038e3
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80038c2:	e01f      	b.n	8003904 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	2144      	movs	r1, #68	@ 0x44
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f004 fb1a 	bl	8007f08 <VL53L0X_WrWord>
 80038d4:	4603      	mov	r3, r0
 80038d6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80038d8:	e014      	b.n	8003904 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80038e0:	e010      	b.n	8003904 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	@ 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80038e8:	e00c      	b.n	8003904 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	2164      	movs	r1, #100	@ 0x64
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f004 fb07 	bl	8007f08 <VL53L0X_WrWord>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80038fe:	e001      	b.n	8003904 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003900:	23fc      	movs	r3, #252	@ 0xfc
 8003902:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	330a      	adds	r3, #10
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800391a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop

08003928 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	460b      	mov	r3, r1
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003936:	2300      	movs	r3, #0
 8003938:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d847      	bhi.n	80039d4 <VL53L0X_GetLimitCheckValue+0xac>
 8003944:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <VL53L0X_GetLimitCheckValue+0x24>)
 8003946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394a:	bf00      	nop
 800394c:	08003965 	.word	0x08003965
 8003950:	08003971 	.word	0x08003971
 8003954:	08003997 	.word	0x08003997
 8003958:	080039a3 	.word	0x080039a3
 800395c:	080039af 	.word	0x080039af
 8003960:	080039af 	.word	0x080039af

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800396a:	2300      	movs	r3, #0
 800396c:	77bb      	strb	r3, [r7, #30]
		break;
 800396e:	e033      	b.n	80039d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003970:	f107 0316 	add.w	r3, r7, #22
 8003974:	461a      	mov	r2, r3
 8003976:	2144      	movs	r1, #68	@ 0x44
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f004 fb7f 	bl	800807c <VL53L0X_RdWord>
 800397e:	4603      	mov	r3, r0
 8003980:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003982:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800398a:	8afb      	ldrh	r3, [r7, #22]
 800398c:	025b      	lsls	r3, r3, #9
 800398e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003990:	2301      	movs	r3, #1
 8003992:	77bb      	strb	r3, [r7, #30]
		break;
 8003994:	e020      	b.n	80039d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	77bb      	strb	r3, [r7, #30]
		break;
 80039a0:	e01a      	b.n	80039d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	77bb      	strb	r3, [r7, #30]
		break;
 80039ac:	e014      	b.n	80039d8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80039ae:	f107 0316 	add.w	r3, r7, #22
 80039b2:	461a      	mov	r2, r3
 80039b4:	2164      	movs	r1, #100	@ 0x64
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f004 fb60 	bl	800807c <VL53L0X_RdWord>
 80039bc:	4603      	mov	r3, r0
 80039be:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80039c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	025b      	lsls	r3, r3, #9
 80039cc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	77bb      	strb	r3, [r7, #30]
		break;
 80039d2:	e001      	b.n	80039d8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039d4:	23fc      	movs	r3, #252	@ 0xfc
 80039d6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d12a      	bne.n	8003a36 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80039e0:	7fbb      	ldrb	r3, [r7, #30]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d124      	bne.n	8003a30 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d110      	bne.n	8003a0e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80039ec:	897b      	ldrh	r3, [r7, #10]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	330a      	adds	r3, #10
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4413      	add	r3, r2
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2020 	strb.w	r2, [r3, #32]
 8003a0c:	e013      	b.n	8003a36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	330a      	adds	r3, #10
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]
 8003a2e:	e002      	b.n	8003a36 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a36:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003a52:	f107 030e 	add.w	r3, r7, #14
 8003a56:	461a      	mov	r2, r3
 8003a58:	2101      	movs	r1, #1
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f004 fae4 	bl	8008028 <VL53L0X_RdByte>
 8003a60:	4603      	mov	r3, r0
 8003a62:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10e      	bne.n	8003a8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003a6c:	7bba      	ldrb	r2, [r7, #14]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		if (data & (0x01 << 7))
 8003a74:	7bbb      	ldrb	r3, [r7, #14]
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	da03      	bge.n	8003a84 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
 8003a82:	e002      	b.n	8003a8a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003ab4:	f107 030e 	add.w	r3, r7, #14
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fba0 	bl	8003200 <VL53L0X_GetDeviceMode>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8003ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d107      	bne.n	8003adc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003acc:	7bbb      	ldrb	r3, [r7, #14]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d104      	bne.n	8003adc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f924 	bl	8003d20 <VL53L0X_StartMeasurement>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f001 fbbf 	bl	8005268 <VL53L0X_measurement_poll_for_completion>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2203      	movs	r2, #3
 8003b00:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8003b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003b20:	2301      	movs	r3, #1
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68b9      	ldr	r1, [r7, #8]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f001 fb61 	bl	80051ee <VL53L0X_perform_ref_calibration>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003b52:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8003b54:	7dbb      	ldrb	r3, [r7, #22]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	f000 8093 	beq.w	8003c82 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	f300 80d6 	bgt.w	8003d0e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d002      	beq.n	8003b6c <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d047      	beq.n	8003bfa <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8003b6a:	e0d0      	b.n	8003d0e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	f107 0210 	add.w	r2, r7, #16
 8003b74:	2101      	movs	r1, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fc42 	bl	8004400 <VL53L0X_GetInterruptThresholds>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003b86:	f240 80bd 	bls.w	8003d04 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8003b8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80b8 	bne.w	8003d04 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003b94:	78fb      	ldrb	r3, [r7, #3]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003b9a:	4960      	ldr	r1, [pc, #384]	@ (8003d1c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f002 ffc5 	bl	8006b2c <VL53L0X_load_tuning_settings>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003ba6:	e0ad      	b.n	8003d04 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003ba8:	2204      	movs	r2, #4
 8003baa:	21ff      	movs	r1, #255	@ 0xff
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f004 f987 	bl	8007ec0 <VL53L0X_WrByte>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2170      	movs	r1, #112	@ 0x70
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f004 f97d 	bl	8007ec0 <VL53L0X_WrByte>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461a      	mov	r2, r3
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	21ff      	movs	r1, #255	@ 0xff
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f004 f973 	bl	8007ec0 <VL53L0X_WrByte>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	@ 0x80
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f004 f969 	bl	8007ec0 <VL53L0X_WrByte>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	75fb      	strb	r3, [r7, #23]
		break;
 8003bf8:	e084      	b.n	8003d04 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	f107 0210 	add.w	r2, r7, #16
 8003c02:	2101      	movs	r1, #1
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fbfb 	bl	8004400 <VL53L0X_GetInterruptThresholds>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d079      	beq.n	8003d08 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8003c14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d175      	bne.n	8003d08 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003c22:	493e      	ldr	r1, [pc, #248]	@ (8003d1c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f002 ff81 	bl	8006b2c <VL53L0X_load_tuning_settings>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003c2e:	e06b      	b.n	8003d08 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003c30:	2204      	movs	r2, #4
 8003c32:	21ff      	movs	r1, #255	@ 0xff
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f004 f943 	bl	8007ec0 <VL53L0X_WrByte>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003c44:	2200      	movs	r2, #0
 8003c46:	2170      	movs	r1, #112	@ 0x70
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f004 f939 	bl	8007ec0 <VL53L0X_WrByte>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	461a      	mov	r2, r3
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	21ff      	movs	r1, #255	@ 0xff
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f004 f92f 	bl	8007ec0 <VL53L0X_WrByte>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2180      	movs	r1, #128	@ 0x80
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f004 f925 	bl	8007ec0 <VL53L0X_WrByte>
 8003c76:	4603      	mov	r3, r0
 8003c78:	461a      	mov	r2, r3
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	75fb      	strb	r3, [r7, #23]
		break;
 8003c80:	e042      	b.n	8003d08 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003c82:	f107 030c 	add.w	r3, r7, #12
 8003c86:	f107 0210 	add.w	r2, r7, #16
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fbb7 	bl	8004400 <VL53L0X_GetInterruptThresholds>
 8003c92:	4603      	mov	r3, r0
 8003c94:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8003c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d136      	bne.n	8003d0c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d006      	beq.n	8003cb2 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003ca4:	491d      	ldr	r1, [pc, #116]	@ (8003d1c <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f002 ff40 	bl	8006b2c <VL53L0X_load_tuning_settings>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003cb0:	e02c      	b.n	8003d0c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003cb2:	2204      	movs	r2, #4
 8003cb4:	21ff      	movs	r1, #255	@ 0xff
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f004 f902 	bl	8007ec0 <VL53L0X_WrByte>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2170      	movs	r1, #112	@ 0x70
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f004 f8f8 	bl	8007ec0 <VL53L0X_WrByte>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	21ff      	movs	r1, #255	@ 0xff
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f004 f8ee 	bl	8007ec0 <VL53L0X_WrByte>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	7dfb      	ldrb	r3, [r7, #23]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	@ 0x80
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f004 f8e4 	bl	8007ec0 <VL53L0X_WrByte>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	75fb      	strb	r3, [r7, #23]
		break;
 8003d02:	e003      	b.n	8003d0c <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8003d04:	bf00      	nop
 8003d06:	e002      	b.n	8003d0e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8003d0c:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000104 	.word	0x20000104

08003d20 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003d30:	f107 030e 	add.w	r3, r7, #14
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fa62 	bl	8003200 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f004 f8bd 	bl	8007ec0 <VL53L0X_WrByte>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	21ff      	movs	r1, #255	@ 0xff
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f004 f8b6 	bl	8007ec0 <VL53L0X_WrByte>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f004 f8af 	bl	8007ec0 <VL53L0X_WrByte>
 8003d62:	4603      	mov	r3, r0
 8003d64:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2191      	movs	r1, #145	@ 0x91
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f004 f8a5 	bl	8007ec0 <VL53L0X_WrByte>
 8003d76:	4603      	mov	r3, r0
 8003d78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f004 f89e 	bl	8007ec0 <VL53L0X_WrByte>
 8003d84:	4603      	mov	r3, r0
 8003d86:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	21ff      	movs	r1, #255	@ 0xff
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f004 f897 	bl	8007ec0 <VL53L0X_WrByte>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2180      	movs	r1, #128	@ 0x80
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f004 f890 	bl	8007ec0 <VL53L0X_WrByte>
 8003da0:	4603      	mov	r3, r0
 8003da2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003da4:	7bbb      	ldrb	r3, [r7, #14]
 8003da6:	2b03      	cmp	r3, #3
 8003da8:	d054      	beq.n	8003e54 <VL53L0X_StartMeasurement+0x134>
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	dc6c      	bgt.n	8003e88 <VL53L0X_StartMeasurement+0x168>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <VL53L0X_StartMeasurement+0x98>
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d034      	beq.n	8003e20 <VL53L0X_StartMeasurement+0x100>
 8003db6:	e067      	b.n	8003e88 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003db8:	2201      	movs	r2, #1
 8003dba:	2100      	movs	r1, #0
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f004 f87f 	bl	8007ec0 <VL53L0X_WrByte>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d15d      	bne.n	8003e8e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d008      	beq.n	8003dee <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003ddc:	f107 030d 	add.w	r3, r7, #13
 8003de0:	461a      	mov	r2, r3
 8003de2:	2100      	movs	r1, #0
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f004 f91f 	bl	8008028 <VL53L0X_RdByte>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3301      	adds	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003df4:	7b7a      	ldrb	r2, [r7, #13]
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d107      	bne.n	8003e12 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003e10:	d3e1      	bcc.n	8003dd6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003e18:	d339      	bcc.n	8003e8e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003e1a:	23f9      	movs	r3, #249	@ 0xf9
 8003e1c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003e1e:	e036      	b.n	8003e8e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e28:	2101      	movs	r1, #1
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fe86 	bl	8003b3c <VL53L0X_CheckAndLoadInterruptSettings>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e34:	2202      	movs	r2, #2
 8003e36:	2100      	movs	r1, #0
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f004 f841 	bl	8007ec0 <VL53L0X_WrByte>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d123      	bne.n	8003e92 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
		}
		break;
 8003e52:	e01e      	b.n	8003e92 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d105      	bne.n	8003e68 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff fe6c 	bl	8003b3c <VL53L0X_CheckAndLoadInterruptSettings>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e68:	2204      	movs	r2, #4
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f004 f827 	bl	8007ec0 <VL53L0X_WrByte>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2204      	movs	r2, #4
 8003e82:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
		}
		break;
 8003e86:	e006      	b.n	8003e96 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003e88:	23f8      	movs	r3, #248	@ 0xf8
 8003e8a:	75fb      	strb	r3, [r7, #23]
 8003e8c:	e004      	b.n	8003e98 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e96:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003eb8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003eba:	7bbb      	ldrb	r3, [r7, #14]
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d112      	bne.n	8003ee6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb0e 	bl	80044e8 <VL53L0X_GetInterruptMaskStatus>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d103      	bne.n	8003ede <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e01c      	b.n	8003f18 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e018      	b.n	8003f18 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003ee6:	f107 030d 	add.w	r3, r7, #13
 8003eea:	461a      	mov	r2, r3
 8003eec:	2114      	movs	r1, #20
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f004 f89a 	bl	8008028 <VL53L0X_RdByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10b      	bne.n	8003f18 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003f00:	7b7b      	ldrb	r3, [r7, #13]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e002      	b.n	8003f18 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003f24:	b5b0      	push	{r4, r5, r7, lr}
 8003f26:	b096      	sub	sp, #88	@ 0x58
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003f34:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003f38:	230c      	movs	r3, #12
 8003f3a:	2114      	movs	r1, #20
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f003 ff93 	bl	8007e68 <VL53L0X_ReadMulti>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003f48:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 80c8 	bne.w	80040e2 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8003f5e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003f76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003f82:	4413      	add	r3, r2
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	025b      	lsls	r3, r3, #9
 8003f88:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f8e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8003f90:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003fa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003fa6:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003fac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003fb8:	4413      	add	r3, r2
 8003fba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003fc4:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8b3 317e 	ldrh.w	r3, [r3, #382]	@ 0x17e
 8003fd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 315d 	ldrb.w	r3, [r3, #349]	@ 0x15d
 8003fdc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003fe0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fe6:	d046      	beq.n	8004076 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003fe8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fea:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003ff6:	4a58      	ldr	r2, [pc, #352]	@ (8004158 <VL53L0X_GetRangingMeasurementData+0x234>)
 8003ff8:	fb82 1203 	smull	r1, r2, r2, r3
 8003ffc:	1192      	asrs	r2, r2, #6
 8003ffe:	17db      	asrs	r3, r3, #31
 8004000:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004002:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7d1b      	ldrb	r3, [r3, #20]
 8004010:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02c      	beq.n	8004076 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800401c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800401e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800402a:	429a      	cmp	r2, r3
 800402c:	d10d      	bne.n	800404a <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800402e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8004036:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800403a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800403e:	e016      	b.n	800406e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8004040:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004044:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004048:	e011      	b.n	800406e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800404a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800404e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004050:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004054:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004056:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800405a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800405e:	121b      	asrs	r3, r3, #8
 8004060:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004064:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800406a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800406e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004072:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004076:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800407e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004082:	089b      	lsrs	r3, r3, #2
 8004084:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800408a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800408e:	b2db      	uxtb	r3, r3
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	75da      	strb	r2, [r3, #23]
 8004098:	e006      	b.n	80040a8 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80040a0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80040a8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80040ac:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80040b0:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	4613      	mov	r3, r2
 80040bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f003 f986 	bl	80073d0 <VL53L0X_get_pal_range_status>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80040d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80040da:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d12f      	bne.n	800414a <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f107 040c 	add.w	r4, r7, #12
 80040f0:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 80040f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004104:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004112:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004118:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800411e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004124:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800412a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8004130:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 800413a:	f107 050c 	add.w	r5, r7, #12
 800413e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800414a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800414e:	4618      	mov	r0, r3
 8004150:	3750      	adds	r7, #80	@ 0x50
 8004152:	46bd      	mov	sp, r7
 8004154:	bdb0      	pop	{r4, r5, r7, pc}
 8004156:	bf00      	nop
 8004158:	10624dd3 	.word	0x10624dd3

0800415c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800416a:	2100      	movs	r1, #0
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff f81b 	bl	80031a8 <VL53L0X_SetDeviceMode>
 8004172:	4603      	mov	r3, r0
 8004174:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff fc92 	bl	8003aa8 <VL53L0X_PerformSingleMeasurement>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fec6 	bl	8003f24 <VL53L0X_GetRangingMeasurementData>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800419c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80041a4:	2100      	movs	r1, #0
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f95e 	bl	8004468 <VL53L0X_ClearInterruptMask>
 80041ac:	4603      	mov	r3, r0
 80041ae:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80041b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	70fb      	strb	r3, [r7, #3]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70bb      	strb	r3, [r7, #2]
 80041d2:	4613      	mov	r3, r2
 80041d4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80041e0:	23f6      	movs	r3, #246	@ 0xf6
 80041e2:	73fb      	strb	r3, [r7, #15]
 80041e4:	e105      	b.n	80043f2 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80041e6:	78bb      	ldrb	r3, [r7, #2]
 80041e8:	2b14      	cmp	r3, #20
 80041ea:	d110      	bne.n	800420e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80041ec:	7e3b      	ldrb	r3, [r7, #24]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80041f2:	2310      	movs	r3, #16
 80041f4:	73bb      	strb	r3, [r7, #14]
 80041f6:	e001      	b.n	80041fc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80041fc:	7bbb      	ldrb	r3, [r7, #14]
 80041fe:	461a      	mov	r2, r3
 8004200:	2184      	movs	r1, #132	@ 0x84
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f003 fe5c 	bl	8007ec0 <VL53L0X_WrByte>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e0f1      	b.n	80043f2 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800420e:	78bb      	ldrb	r3, [r7, #2]
 8004210:	2b15      	cmp	r3, #21
 8004212:	f040 8097 	bne.w	8004344 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004216:	2201      	movs	r2, #1
 8004218:	21ff      	movs	r1, #255	@ 0xff
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f003 fe50 	bl	8007ec0 <VL53L0X_WrByte>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	4313      	orrs	r3, r2
 8004228:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800422a:	2200      	movs	r2, #0
 800422c:	2100      	movs	r1, #0
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f003 fe46 	bl	8007ec0 <VL53L0X_WrByte>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	4313      	orrs	r3, r2
 800423c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800423e:	2200      	movs	r2, #0
 8004240:	21ff      	movs	r1, #255	@ 0xff
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f003 fe3c 	bl	8007ec0 <VL53L0X_WrByte>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	4313      	orrs	r3, r2
 8004250:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004252:	2201      	movs	r2, #1
 8004254:	2180      	movs	r1, #128	@ 0x80
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f003 fe32 	bl	8007ec0 <VL53L0X_WrByte>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4313      	orrs	r3, r2
 8004264:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004266:	2202      	movs	r2, #2
 8004268:	2185      	movs	r1, #133	@ 0x85
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f003 fe28 	bl	8007ec0 <VL53L0X_WrByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4313      	orrs	r3, r2
 8004278:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800427a:	2204      	movs	r2, #4
 800427c:	21ff      	movs	r1, #255	@ 0xff
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f003 fe1e 	bl	8007ec0 <VL53L0X_WrByte>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	4313      	orrs	r3, r2
 800428c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800428e:	2200      	movs	r2, #0
 8004290:	21cd      	movs	r1, #205	@ 0xcd
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f003 fe14 	bl	8007ec0 <VL53L0X_WrByte>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4313      	orrs	r3, r2
 80042a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80042a2:	2211      	movs	r2, #17
 80042a4:	21cc      	movs	r1, #204	@ 0xcc
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f003 fe0a 	bl	8007ec0 <VL53L0X_WrByte>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80042b6:	2207      	movs	r2, #7
 80042b8:	21ff      	movs	r1, #255	@ 0xff
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f003 fe00 	bl	8007ec0 <VL53L0X_WrByte>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80042ca:	2200      	movs	r2, #0
 80042cc:	21be      	movs	r1, #190	@ 0xbe
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f003 fdf6 	bl	8007ec0 <VL53L0X_WrByte>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4313      	orrs	r3, r2
 80042dc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80042de:	2206      	movs	r2, #6
 80042e0:	21ff      	movs	r1, #255	@ 0xff
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f003 fdec 	bl	8007ec0 <VL53L0X_WrByte>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80042f2:	2209      	movs	r2, #9
 80042f4:	21cc      	movs	r1, #204	@ 0xcc
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f003 fde2 	bl	8007ec0 <VL53L0X_WrByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4313      	orrs	r3, r2
 8004304:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004306:	2200      	movs	r2, #0
 8004308:	21ff      	movs	r1, #255	@ 0xff
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f003 fdd8 	bl	8007ec0 <VL53L0X_WrByte>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	4313      	orrs	r3, r2
 8004318:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800431a:	2201      	movs	r2, #1
 800431c:	21ff      	movs	r1, #255	@ 0xff
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f003 fdce 	bl	8007ec0 <VL53L0X_WrByte>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	4313      	orrs	r3, r2
 800432c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800432e:	2200      	movs	r2, #0
 8004330:	2100      	movs	r1, #0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f003 fdc4 	bl	8007ec0 <VL53L0X_WrByte>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	4313      	orrs	r3, r2
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	e056      	b.n	80043f2 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d120      	bne.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800434c:	787b      	ldrb	r3, [r7, #1]
 800434e:	2b04      	cmp	r3, #4
 8004350:	d81b      	bhi.n	800438a <VL53L0X_SetGpioConfig+0x1ce>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <VL53L0X_SetGpioConfig+0x19c>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	0800436d 	.word	0x0800436d
 800435c:	08004373 	.word	0x08004373
 8004360:	08004379 	.word	0x08004379
 8004364:	0800437f 	.word	0x0800437f
 8004368:	08004385 	.word	0x08004385
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800436c:	2300      	movs	r3, #0
 800436e:	73bb      	strb	r3, [r7, #14]
				break;
 8004370:	e00d      	b.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004372:	2301      	movs	r3, #1
 8004374:	73bb      	strb	r3, [r7, #14]
				break;
 8004376:	e00a      	b.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004378:	2302      	movs	r3, #2
 800437a:	73bb      	strb	r3, [r7, #14]
				break;
 800437c:	e007      	b.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800437e:	2303      	movs	r3, #3
 8004380:	73bb      	strb	r3, [r7, #14]
				break;
 8004382:	e004      	b.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004384:	2304      	movs	r3, #4
 8004386:	73bb      	strb	r3, [r7, #14]
				break;
 8004388:	e001      	b.n	800438e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800438a:	23f5      	movs	r3, #245	@ 0xf5
 800438c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004396:	7bbb      	ldrb	r3, [r7, #14]
 8004398:	461a      	mov	r2, r3
 800439a:	210a      	movs	r1, #10
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f003 fd8f 	bl	8007ec0 <VL53L0X_WrByte>
 80043a2:	4603      	mov	r3, r0
 80043a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80043a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10f      	bne.n	80043ce <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80043ae:	7e3b      	ldrb	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73bb      	strb	r3, [r7, #14]
 80043b8:	e001      	b.n	80043be <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80043ba:	2310      	movs	r3, #16
 80043bc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80043be:	7bbb      	ldrb	r3, [r7, #14]
 80043c0:	22ef      	movs	r2, #239	@ 0xef
 80043c2:	2184      	movs	r1, #132	@ 0x84
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f003 fdfb 	bl	8007fc0 <VL53L0X_UpdateByte>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	787a      	ldrb	r2, [r7, #1]
 80043da:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80043de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d105      	bne.n	80043f2 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80043e6:	2100      	movs	r1, #0
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f83d 	bl	8004468 <VL53L0X_ClearInterruptMask>
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop

08004400 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	607a      	str	r2, [r7, #4]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	460b      	mov	r3, r1
 800440e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	461a      	mov	r2, r3
 800441a:	210e      	movs	r1, #14
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f003 fe2d 	bl	800807c <VL53L0X_RdWord>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004426:	8abb      	ldrh	r3, [r7, #20]
 8004428:	045a      	lsls	r2, r3, #17
 800442a:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <VL53L0X_GetInterruptThresholds+0x64>)
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10e      	bne.n	8004458 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800443a:	f107 0314 	add.w	r3, r7, #20
 800443e:	461a      	mov	r2, r3
 8004440:	210c      	movs	r1, #12
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f003 fe1a 	bl	800807c <VL53L0X_RdWord>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800444c:	8abb      	ldrh	r3, [r7, #20]
 800444e:	045a      	lsls	r2, r3, #17
 8004450:	4b04      	ldr	r3, [pc, #16]	@ (8004464 <VL53L0X_GetInterruptThresholds+0x64>)
 8004452:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004458:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	1ffe0000 	.word	0x1ffe0000

08004468 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800447a:	2201      	movs	r2, #1
 800447c:	210b      	movs	r1, #11
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f003 fd1e 	bl	8007ec0 <VL53L0X_WrByte>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004488:	2200      	movs	r2, #0
 800448a:	210b      	movs	r1, #11
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f003 fd17 	bl	8007ec0 <VL53L0X_WrByte>
 8004492:	4603      	mov	r3, r0
 8004494:	461a      	mov	r2, r3
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	4313      	orrs	r3, r2
 800449a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800449c:	f107 030d 	add.w	r3, r7, #13
 80044a0:	461a      	mov	r2, r3
 80044a2:	2113      	movs	r1, #19
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f003 fdbf 	bl	8008028 <VL53L0X_RdByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	3301      	adds	r3, #1
 80044b8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80044ba:	7b7b      	ldrb	r3, [r7, #13]
 80044bc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d006      	beq.n	80044d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80044c4:	7bbb      	ldrb	r3, [r7, #14]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d803      	bhi.n	80044d2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80044ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0d3      	beq.n	800447a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80044d2:	7bbb      	ldrb	r3, [r7, #14]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80044d8:	23f4      	movs	r3, #244	@ 0xf4
 80044da:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80044dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044f2:	2300      	movs	r3, #0
 80044f4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 80044f6:	f107 030e 	add.w	r3, r7, #14
 80044fa:	461a      	mov	r2, r3
 80044fc:	2113      	movs	r1, #19
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f003 fd92 	bl	8008028 <VL53L0X_RdByte>
 8004504:	4603      	mov	r3, r0
 8004506:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8004508:	7bbb      	ldrb	r3, [r7, #14]
 800450a:	f003 0207 	and.w	r2, r3, #7
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004512:	7bbb      	ldrb	r3, [r7, #14]
 8004514:	f003 0318 	and.w	r3, r3, #24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800451c:	23fa      	movs	r3, #250	@ 0xfa
 800451e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fa03 	bl	800494c <VL53L0X_perform_ref_spad_management>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800454a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b084      	sub	sp, #16
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004564:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004568:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800456a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800456e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004570:	f107 0308 	add.w	r3, r7, #8
 8004574:	461a      	mov	r2, r3
 8004576:	2128      	movs	r1, #40	@ 0x28
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f003 fd7f 	bl	800807c <VL53L0X_RdWord>
 800457e:	4603      	mov	r3, r0
 8004580:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8004582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11e      	bne.n	80045c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800458a:	893b      	ldrh	r3, [r7, #8]
 800458c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004590:	b29b      	uxth	r3, r3
 8004592:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	461a      	mov	r2, r3
 8004598:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800459c:	429a      	cmp	r2, r3
 800459e:	dd0b      	ble.n	80045b8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80045a0:	893a      	ldrh	r2, [r7, #8]
 80045a2:	897b      	ldrh	r3, [r7, #10]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	461a      	mov	r2, r3
					* 250;
 80045ac:	23fa      	movs	r3, #250	@ 0xfa
 80045ae:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e007      	b.n	80045c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80045b8:	893b      	ldrh	r3, [r7, #8]
 80045ba:	b21b      	sxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	23fa      	movs	r3, #250	@ 0xfa
 80045c0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80045c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b08b      	sub	sp, #44	@ 0x2c
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80045e2:	2308      	movs	r3, #8
 80045e4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80045f0:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	fbb3 f2f2 	udiv	r2, r3, r2
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	fb01 f202 	mul.w	r2, r1, r2
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
 8004612:	e030      	b.n	8004676 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	4413      	add	r3, r2
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	429a      	cmp	r2, r3
 8004628:	d11e      	bne.n	8004668 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800462a:	7ffa      	ldrb	r2, [r7, #31]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	fa42 f303 	asr.w	r3, r2, r3
 8004632:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004638:	e016      	b.n	8004668 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00b      	beq.n	800465c <get_next_good_spad+0x88>
				success = 1;
 8004644:	2301      	movs	r3, #1
 8004646:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	fb03 f202 	mul.w	r2, r3, r2
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	4413      	add	r3, r2
 8004654:	461a      	mov	r2, r3
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	601a      	str	r2, [r3, #0]
				break;
 800465a:	e009      	b.n	8004670 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800465c:	7ffb      	ldrb	r3, [r7, #31]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	3301      	adds	r3, #1
 8004666:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004668:	6a3a      	ldr	r2, [r7, #32]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	429a      	cmp	r2, r3
 800466e:	d3e4      	bcc.n	800463a <get_next_good_spad+0x66>
				coarseIndex++) {
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	3301      	adds	r3, #1
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	d202      	bcs.n	8004684 <get_next_good_spad+0xb0>
 800467e:	7fbb      	ldrb	r3, [r7, #30]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0c7      	beq.n	8004614 <get_next_good_spad+0x40>
		}
	}
}
 8004684:	bf00      	nop
 8004686:	372c      	adds	r7, #44	@ 0x2c
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80046a2:	4a07      	ldr	r2, [pc, #28]	@ (80046c0 <is_aperture+0x30>)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <is_aperture+0x22>
		isAperture = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	200002bc 	.word	0x200002bc

080046c4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80046d4:	2308      	movs	r3, #8
 80046d6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ea:	69b9      	ldr	r1, [r7, #24]
 80046ec:	fb01 f202 	mul.w	r2, r1, r2
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80046fc:	23ce      	movs	r3, #206	@ 0xce
 80046fe:	77fb      	strb	r3, [r7, #31]
 8004700:	e010      	b.n	8004724 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4413      	add	r3, r2
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b25a      	sxtb	r2, r3
 800470c:	2101      	movs	r1, #1
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	b25b      	sxtb	r3, r3
 8004716:	4313      	orrs	r3, r2
 8004718:	b259      	sxtb	r1, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	b2ca      	uxtb	r2, r1
 8004722:	701a      	strb	r2, [r3, #0]

	return status;
 8004724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3724      	adds	r7, #36	@ 0x24
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800473e:	2306      	movs	r3, #6
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	21b0      	movs	r1, #176	@ 0xb0
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f003 fb5f 	bl	8007e08 <VL53L0X_WriteMulti>
 800474a:	4603      	mov	r3, r0
 800474c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800474e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004764:	2306      	movs	r3, #6
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	21b0      	movs	r1, #176	@ 0xb0
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f003 fb7c 	bl	8007e68 <VL53L0X_ReadMulti>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	@ 0x30
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	460b      	mov	r3, r1
 800478e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004790:	2300      	movs	r3, #0
 8004792:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004798:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800479a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800479e:	2300      	movs	r3, #0
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a2:	e02b      	b.n	80047fc <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80047a4:	f107 031c 	add.w	r3, r7, #28
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff11 	bl	80045d4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b8:	d103      	bne.n	80047c2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80047ba:	23ce      	movs	r3, #206	@ 0xce
 80047bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80047c0:	e020      	b.n	8004804 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c8:	4413      	add	r3, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff60 	bl	8004690 <is_aperture>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d003      	beq.n	80047e2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80047da:	23ce      	movs	r3, #206	@ 0xce
 80047dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80047e0:	e010      	b.n	8004804 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80047e6:	6a3a      	ldr	r2, [r7, #32]
 80047e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047ea:	6838      	ldr	r0, [r7, #0]
 80047ec:	f7ff ff6a 	bl	80046c4 <enable_spad_bit>
		currentSpad++;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	3301      	adds	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	3301      	adds	r3, #1
 80047fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004800:	429a      	cmp	r2, r3
 8004802:	d3cf      	bcc.n	80047a4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004806:	6a3a      	ldr	r2, [r7, #32]
 8004808:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800480a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f7ff ff8d 	bl	8004734 <set_ref_spad_map>
 800481a:	4603      	mov	r3, r0
 800481c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004820:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004824:	2b00      	cmp	r3, #0
 8004826:	d121      	bne.n	800486c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	4619      	mov	r1, r3
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff ff93 	bl	800475a <get_ref_spad_map>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800483e:	e011      	b.n	8004864 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004844:	4413      	add	r3, r2
 8004846:	781a      	ldrb	r2, [r3, #0]
 8004848:	f107 0114 	add.w	r1, r7, #20
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	440b      	add	r3, r1
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d003      	beq.n	800485e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004856:	23ce      	movs	r3, #206	@ 0xce
 8004858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800485c:	e006      	b.n	800486c <enable_ref_spads+0xec>
			}
			i++;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	3301      	adds	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8004864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	429a      	cmp	r2, r3
 800486a:	d3e9      	bcc.n	8004840 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800486c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004870:	4618      	mov	r0, r3
 8004872:	3730      	adds	r7, #48	@ 0x30
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	@ 0x28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8004894:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004898:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80048a0:	22c0      	movs	r2, #192	@ 0xc0
 80048a2:	2101      	movs	r1, #1
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f003 fb0b 	bl	8007ec0 <VL53L0X_WrByte>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80048b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80048b8:	f107 0308 	add.w	r3, r7, #8
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff fc4c 	bl	800415c <VL53L0X_PerformSingleRangingMeasurement>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80048ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80048d2:	2201      	movs	r2, #1
 80048d4:	21ff      	movs	r1, #255	@ 0xff
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f003 faf2 	bl	8007ec0 <VL53L0X_WrByte>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 80048e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d107      	bne.n	80048fa <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	21b6      	movs	r1, #182	@ 0xb6
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f003 fbc4 	bl	800807c <VL53L0X_RdWord>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80048fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d107      	bne.n	8004912 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004902:	2200      	movs	r2, #0
 8004904:	21ff      	movs	r1, #255	@ 0xff
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f003 fada 	bl	8007ec0 <VL53L0X_WrByte>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004912:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004916:	2b00      	cmp	r3, #0
 8004918:	d112      	bne.n	8004940 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800491a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800491e:	461a      	mov	r2, r3
 8004920:	2101      	movs	r1, #1
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f003 facc 	bl	8007ec0 <VL53L0X_WrByte>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800492e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800493c:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
	}

	return status;
 8004940:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004944:	4618      	mov	r0, r3
 8004946:	3728      	adds	r7, #40	@ 0x28
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b09d      	sub	sp, #116	@ 0x74
 8004950:	af06      	add	r7, sp, #24
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800495e:	23b4      	movs	r3, #180	@ 0xb4
 8004960:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8004964:	2303      	movs	r3, #3
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8004968:	232c      	movs	r3, #44	@ 0x2c
 800496a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004978:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800497c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8004986:	2306      	movs	r3, #6
 8004988:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 80049b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049b6:	e009      	b.n	80049cc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049bc:	4413      	add	r3, r2
 80049be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80049c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c8:	3301      	adds	r3, #1
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3f1      	bcc.n	80049b8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80049d4:	2201      	movs	r2, #1
 80049d6:	21ff      	movs	r1, #255	@ 0xff
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f003 fa71 	bl	8007ec0 <VL53L0X_WrByte>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80049e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80049ec:	2200      	movs	r2, #0
 80049ee:	214f      	movs	r1, #79	@ 0x4f
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f003 fa65 	bl	8007ec0 <VL53L0X_WrByte>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80049fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d107      	bne.n	8004a14 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004a04:	222c      	movs	r2, #44	@ 0x2c
 8004a06:	214e      	movs	r1, #78	@ 0x4e
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f003 fa59 	bl	8007ec0 <VL53L0X_WrByte>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004a14:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	21ff      	movs	r1, #255	@ 0xff
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f003 fa4d 	bl	8007ec0 <VL53L0X_WrByte>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004a34:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004a38:	461a      	mov	r2, r3
 8004a3a:	21b6      	movs	r1, #182	@ 0xb6
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f003 fa3f 	bl	8007ec0 <VL53L0X_WrByte>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d107      	bne.n	8004a60 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004a50:	2200      	movs	r2, #0
 8004a52:	2180      	movs	r1, #128	@ 0x80
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f003 fa33 	bl	8007ec0 <VL53L0X_WrByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004a60:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004a68:	f107 0210 	add.w	r2, r7, #16
 8004a6c:	f107 0111 	add.w	r1, r7, #17
 8004a70:	2300      	movs	r3, #0
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fbbb 	bl	80051ee <VL53L0X_perform_ref_calibration>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8004a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a94:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
		Status = enable_ref_spads(Dev,
 8004aa2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004aa6:	f107 0218 	add.w	r2, r7, #24
 8004aaa:	9204      	str	r2, [sp, #16]
 8004aac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004aae:	9203      	str	r2, [sp, #12]
 8004ab0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ab2:	9202      	str	r2, [sp, #8]
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4623      	mov	r3, r4
 8004abc:	4602      	mov	r2, r0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff fe5e 	bl	8004780 <enable_ref_spads>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004aca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d174      	bne.n	8004bbc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004ad6:	f107 0312 	add.w	r3, r7, #18
 8004ada:	4619      	mov	r1, r3
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff fecb 	bl	8004878 <perform_ref_signal_measurement>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004ae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d161      	bne.n	8004bb4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004af0:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004af2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d25d      	bcs.n	8004bb4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 8004af8:	2300      	movs	r3, #0
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004afc:	e009      	b.n	8004b12 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0e:	3301      	adds	r3, #1
 8004b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3f1      	bcc.n	8004afe <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b1a:	e002      	b.n	8004b22 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b1e:	3301      	adds	r3, #1
 8004b20:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b22:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8004b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b28:	4413      	add	r3, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fdb0 	bl	8004690 <is_aperture>
 8004b30:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <VL53L0X_perform_ref_spad_management+0x1f2>
 8004b36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d3ee      	bcc.n	8004b1c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8004b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b44:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
			Status = enable_ref_spads(Dev,
 8004b52:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004b56:	f107 0218 	add.w	r2, r7, #24
 8004b5a:	9204      	str	r2, [sp, #16]
 8004b5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b5e:	9203      	str	r2, [sp, #12]
 8004b60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b62:	9202      	str	r2, [sp, #8]
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fe06 	bl	8004780 <enable_ref_spads>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004b7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11b      	bne.n	8004bba <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004b86:	f107 0312 	add.w	r3, r7, #18
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff fe73 	bl	8004878 <perform_ref_signal_measurement>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004b98:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10c      	bne.n	8004bba <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004ba2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d208      	bcs.n	8004bba <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004bb2:	e002      	b.n	8004bba <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bb8:	e000      	b.n	8004bbc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004bba:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004bbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 80af 	bne.w	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004bc6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004bc8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f240 80aa 	bls.w	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 8004be0:	f107 031c 	add.w	r3, r7, #28
 8004be4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be6:	4618      	mov	r0, r3
 8004be8:	f008 fda3 	bl	800d732 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004bec:	8a7b      	ldrh	r3, [r7, #18]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bfb8      	it	lt
 8004bf8:	425b      	neglt	r3, r3
 8004bfa:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8004c02:	e086      	b.n	8004d12 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
			get_next_good_spad(
 8004c0a:	f107 0314 	add.w	r3, r7, #20
 8004c0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c12:	f7ff fcdf 	bl	80045d4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d103      	bne.n	8004c26 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004c1e:	23ce      	movs	r3, #206	@ 0xce
 8004c20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8004c24:	e07e      	b.n	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004c26:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fd2e 	bl	8004690 <is_aperture>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8004c44:	e06e      	b.n	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c48:	3301      	adds	r3, #1
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
			Status = enable_spad_bit(
 8004c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fd32 	bl	80046c4 <enable_spad_bit>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004c66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c70:	3301      	adds	r3, #1
 8004c72:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
				Status = set_ref_spad_map(Dev,
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f7ff fd59 	bl	8004734 <set_ref_spad_map>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004c88:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d146      	bne.n	8004d1e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004c90:	f107 0312 	add.w	r3, r7, #18
 8004c94:	4619      	mov	r1, r3
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f7ff fdee 	bl	8004878 <perform_ref_signal_measurement>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004ca2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d13b      	bne.n	8004d22 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004caa:	8a7b      	ldrh	r3, [r7, #18]
 8004cac:	461a      	mov	r2, r3
 8004cae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	425b      	neglt	r3, r3
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004cba:	8a7b      	ldrh	r3, [r7, #18]
 8004cbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d21c      	bcs.n	8004cfc <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d914      	bls.n	8004cf4 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8004cca:	f107 031c 	add.w	r3, r7, #28
 8004cce:	4619      	mov	r1, r3
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fd2f 	bl	8004734 <set_ref_spad_map>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
					memcpy(
 8004ce2:	f107 011c 	add.w	r1, r7, #28
 8004ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f008 fd22 	bl	800d732 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e00a      	b.n	8004d12 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
				memcpy(lastSpadArray,
 8004d06:	f107 031c 	add.w	r3, r7, #28
 8004d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f008 fd10 	bl	800d732 <memcpy>
		while (!complete) {
 8004d12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f43f af74 	beq.w	8004c04 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004d1c:	e002      	b.n	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d22:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d115      	bne.n	8004d58 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d30:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004d38:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004d58:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	375c      	adds	r7, #92	@ 0x5c
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b093      	sub	sp, #76	@ 0x4c
 8004d68:	af06      	add	r7, sp, #24
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8004d7c:	23b4      	movs	r3, #180	@ 0xb4
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8004d82:	2306      	movs	r3, #6
 8004d84:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004d86:	232c      	movs	r3, #44	@ 0x2c
 8004d88:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	21ff      	movs	r1, #255	@ 0xff
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f003 f896 	bl	8007ec0 <VL53L0X_WrByte>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004d9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d107      	bne.n	8004db2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004da2:	2200      	movs	r2, #0
 8004da4:	214f      	movs	r1, #79	@ 0x4f
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f003 f88a 	bl	8007ec0 <VL53L0X_WrByte>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004db2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004dba:	222c      	movs	r2, #44	@ 0x2c
 8004dbc:	214e      	movs	r1, #78	@ 0x4e
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f003 f87e 	bl	8007ec0 <VL53L0X_WrByte>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004dca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d107      	bne.n	8004de2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	21ff      	movs	r1, #255	@ 0xff
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f003 f872 	bl	8007ec0 <VL53L0X_WrByte>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004dea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dee:	461a      	mov	r2, r3
 8004df0:	21b6      	movs	r1, #182	@ 0xb6
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f003 f864 	bl	8007ec0 <VL53L0X_WrByte>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e009      	b.n	8004e18 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	3301      	adds	r3, #1
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d3f1      	bcc.n	8004e04 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d011      	beq.n	8004e4a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e26:	e002      	b.n	8004e2e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e2e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	4413      	add	r3, r2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fc2a 	bl	8004690 <is_aperture>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <VL53L0X_set_reference_spads+0xe6>
 8004e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d3ee      	bcc.n	8004e28 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
	Status = enable_ref_spads(Dev,
 8004e56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e5a:	79f9      	ldrb	r1, [r7, #7]
 8004e5c:	f107 0214 	add.w	r2, r7, #20
 8004e60:	9204      	str	r2, [sp, #16]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	9203      	str	r2, [sp, #12]
 8004e66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e68:	9202      	str	r2, [sp, #8]
 8004e6a:	9301      	str	r3, [sp, #4]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	4623      	mov	r3, r4
 8004e72:	4602      	mov	r2, r0
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7ff fc83 	bl	8004780 <enable_ref_spads>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004e80:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10c      	bne.n	8004ea2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	79fa      	ldrb	r2, [r7, #7]
 8004e9e:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3734      	adds	r7, #52	@ 0x34
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}

08004eae <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f002 fff4 	bl	8007ec0 <VL53L0X_WrByte>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d104      	bne.n	8004eee <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f9bf 	bl	8005268 <VL53L0X_measurement_poll_for_completion>
 8004eea:	4603      	mov	r3, r0
 8004eec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fab5 	bl	8004468 <VL53L0X_ClearInterruptMask>
 8004efe:	4603      	mov	r3, r0
 8004f00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f002 ffd6 	bl	8007ec0 <VL53L0X_WrByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	461a      	mov	r2, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	70fb      	strb	r3, [r7, #3]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70bb      	strb	r3, [r7, #2]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f46:	2201      	movs	r2, #1
 8004f48:	21ff      	movs	r1, #255	@ 0xff
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f002 ffb8 	bl	8007ec0 <VL53L0X_WrByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f002 ffae 	bl	8007ec0 <VL53L0X_WrByte>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f6e:	2200      	movs	r2, #0
 8004f70:	21ff      	movs	r1, #255	@ 0xff
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f002 ffa4 	bl	8007ec0 <VL53L0X_WrByte>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004f88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	21cb      	movs	r1, #203	@ 0xcb
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f003 f847 	bl	8008028 <VL53L0X_RdByte>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004fa4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d02a      	beq.n	8005002 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004fac:	f107 030e 	add.w	r3, r7, #14
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	21ee      	movs	r1, #238	@ 0xee
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f003 f837 	bl	8008028 <VL53L0X_RdByte>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e01d      	b.n	8005002 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004fc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004fce:	78bb      	ldrb	r3, [r7, #2]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	21cb      	movs	r1, #203	@ 0xcb
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 ff73 	bl	8007ec0 <VL53L0X_WrByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004fe4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004fec:	787b      	ldrb	r3, [r7, #1]
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	21ee      	movs	r1, #238	@ 0xee
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 ffe4 	bl	8007fc0 <VL53L0X_UpdateByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005002:	2201      	movs	r2, #1
 8005004:	21ff      	movs	r1, #255	@ 0xff
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 ff5a 	bl	8007ec0 <VL53L0X_WrByte>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	4313      	orrs	r3, r2
 8005014:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005016:	2201      	movs	r2, #1
 8005018:	2100      	movs	r1, #0
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f002 ff50 	bl	8007ec0 <VL53L0X_WrByte>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	4313      	orrs	r3, r2
 8005028:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800502a:	2200      	movs	r2, #0
 800502c:	21ff      	movs	r1, #255	@ 0xff
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f002 ff46 	bl	8007ec0 <VL53L0X_WrByte>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	4313      	orrs	r3, r2
 800503c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800503e:	7bbb      	ldrb	r3, [r7, #14]
 8005040:	f023 0310 	bic.w	r3, r3, #16
 8005044:	b2da      	uxtb	r2, r3
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	701a      	strb	r2, [r3, #0]

	return Status;
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b08a      	sub	sp, #40	@ 0x28
 800505a:	af04      	add	r7, sp, #16
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	4611      	mov	r1, r2
 8005062:	461a      	mov	r2, r3
 8005064:	460b      	mov	r3, r1
 8005066:	71fb      	strb	r3, [r7, #7]
 8005068:	4613      	mov	r3, r2
 800506a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005080:	79bb      	ldrb	r3, [r7, #6]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800508c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800508e:	2201      	movs	r2, #1
 8005090:	2101      	movs	r1, #1
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f002 ff14 	bl	8007ec0 <VL53L0X_WrByte>
 8005098:	4603      	mov	r3, r0
 800509a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800509c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d105      	bne.n	80050b0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80050a4:	2140      	movs	r1, #64	@ 0x40
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff01 	bl	8004eae <VL53L0X_perform_single_ref_calibration>
 80050ac:	4603      	mov	r3, r0
 80050ae:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80050b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <VL53L0X_perform_vhv_calibration+0x8e>
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d112      	bne.n	80050e4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80050be:	7d39      	ldrb	r1, [r7, #20]
 80050c0:	7d7a      	ldrb	r2, [r7, #21]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	2301      	movs	r3, #1
 80050c8:	9302      	str	r3, [sp, #8]
 80050ca:	f107 0313 	add.w	r3, r7, #19
 80050ce:	9301      	str	r3, [sp, #4]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	460b      	mov	r3, r1
 80050d6:	2101      	movs	r1, #1
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7ff ff23 	bl	8004f24 <VL53L0X_ref_calibration_io>
 80050de:	4603      	mov	r3, r0
 80050e0:	75fb      	strb	r3, [r7, #23]
 80050e2:	e002      	b.n	80050ea <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80050ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d112      	bne.n	8005118 <VL53L0X_perform_vhv_calibration+0xc2>
 80050f2:	79bb      	ldrb	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00f      	beq.n	8005118 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050f8:	7dbb      	ldrb	r3, [r7, #22]
 80050fa:	461a      	mov	r2, r3
 80050fc:	2101      	movs	r1, #1
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f002 fede 	bl	8007ec0 <VL53L0X_WrByte>
 8005104:	4603      	mov	r3, r0
 8005106:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	7dba      	ldrb	r2, [r7, #22]
 8005114:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 8005118:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	@ 0x28
 8005128:	af04      	add	r7, sp, #16
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4611      	mov	r1, r2
 8005130:	461a      	mov	r2, r3
 8005132:	460b      	mov	r3, r1
 8005134:	71fb      	strb	r3, [r7, #7]
 8005136:	4613      	mov	r3, r2
 8005138:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005142:	2300      	movs	r3, #0
 8005144:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800514a:	79bb      	ldrb	r3, [r7, #6]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8005156:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005158:	2202      	movs	r2, #2
 800515a:	2101      	movs	r1, #1
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f002 feaf 	bl	8007ec0 <VL53L0X_WrByte>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d105      	bne.n	800517a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800516e:	2100      	movs	r1, #0
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fe9c 	bl	8004eae <VL53L0X_perform_single_ref_calibration>
 8005176:	4603      	mov	r3, r0
 8005178:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800517a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d115      	bne.n	80051ae <VL53L0X_perform_phase_calibration+0x8a>
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d112      	bne.n	80051ae <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005188:	7d39      	ldrb	r1, [r7, #20]
 800518a:	7d7a      	ldrb	r2, [r7, #21]
 800518c:	2301      	movs	r3, #1
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	2300      	movs	r3, #0
 8005192:	9302      	str	r3, [sp, #8]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f107 0313 	add.w	r3, r7, #19
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	460b      	mov	r3, r1
 80051a0:	2101      	movs	r1, #1
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff febe 	bl	8004f24 <VL53L0X_ref_calibration_io>
 80051a8:	4603      	mov	r3, r0
 80051aa:	75fb      	strb	r3, [r7, #23]
 80051ac:	e002      	b.n	80051b4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80051b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d112      	bne.n	80051e2 <VL53L0X_perform_phase_calibration+0xbe>
 80051bc:	79bb      	ldrb	r3, [r7, #6]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00f      	beq.n	80051e2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80051c2:	7dbb      	ldrb	r3, [r7, #22]
 80051c4:	461a      	mov	r2, r3
 80051c6:	2101      	movs	r1, #1
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f002 fe79 	bl	8007ec0 <VL53L0X_WrByte>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80051d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d103      	bne.n	80051e2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	7dba      	ldrb	r2, [r7, #22]
 80051de:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 80051e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 800520a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	2300      	movs	r3, #0
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ff1f 	bl	8005056 <VL53L0X_perform_vhv_calibration>
 8005218:	4603      	mov	r3, r0
 800521a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800521c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005224:	78fa      	ldrb	r2, [r7, #3]
 8005226:	2300      	movs	r3, #0
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff7a 	bl	8005124 <VL53L0X_perform_phase_calibration>
 8005230:	4603      	mov	r3, r0
 8005232:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800523c:	7dbb      	ldrb	r3, [r7, #22]
 800523e:	461a      	mov	r2, r3
 8005240:	2101      	movs	r1, #1
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f002 fe3c 	bl	8007ec0 <VL53L0X_WrByte>
 8005248:	4603      	mov	r3, r0
 800524a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800524c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	7dba      	ldrb	r2, [r7, #22]
 8005258:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 800525c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005270:	2300      	movs	r3, #0
 8005272:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005274:	2300      	movs	r3, #0
 8005276:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800527c:	f107 030f 	add.w	r3, r7, #15
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fe fe0e 	bl	8003ea4 <VL53L0X_GetMeasurementDataReady>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800528c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d110      	bne.n	80052b6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d00f      	beq.n	80052ba <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3301      	adds	r3, #1
 800529e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80052a6:	d302      	bcc.n	80052ae <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80052a8:	23f9      	movs	r3, #249	@ 0xf9
 80052aa:	75fb      	strb	r3, [r7, #23]
			break;
 80052ac:	e006      	b.n	80052bc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 ff56 	bl	8008160 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80052b4:	e7e2      	b.n	800527c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80052ba:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80052bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	3301      	adds	r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	4603      	mov	r3, r0
 80052f6:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005324:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005326:	e002      	b.n	800532e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f8      	bhi.n	8005328 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005336:	e017      	b.n	8005368 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d30b      	bcc.n	800535c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4413      	add	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	e002      	b.n	8005362 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	089b      	lsrs	r3, r3, #2
 8005366:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e4      	bne.n	8005338 <VL53L0X_isqrt+0x24>
	}

	return res;
 800536e:	68fb      	ldr	r3, [r7, #12]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005388:	2200      	movs	r2, #0
 800538a:	2183      	movs	r1, #131	@ 0x83
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f002 fd97 	bl	8007ec0 <VL53L0X_WrByte>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	7dfb      	ldrb	r3, [r7, #23]
 8005398:	4313      	orrs	r3, r2
 800539a:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 800539c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11e      	bne.n	80053e2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80053a8:	f107 030f 	add.w	r3, r7, #15
 80053ac:	461a      	mov	r2, r3
 80053ae:	2183      	movs	r1, #131	@ 0x83
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f002 fe39 	bl	8008028 <VL53L0X_RdByte>
 80053b6:	4603      	mov	r3, r0
 80053b8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10a      	bne.n	80053d6 <VL53L0X_device_read_strobe+0x5a>
 80053c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	3301      	adds	r3, #1
 80053cc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80053d4:	d3e8      	bcc.n	80053a8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80053dc:	d301      	bcc.n	80053e2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80053de:	23f9      	movs	r3, #249	@ 0xf9
 80053e0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80053e2:	2201      	movs	r2, #1
 80053e4:	2183      	movs	r1, #131	@ 0x83
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f002 fd6a 	bl	8007ec0 <VL53L0X_WrByte>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	7dfb      	ldrb	r3, [r7, #23]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80053f6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b098      	sub	sp, #96	@ 0x60
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005432:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005436:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800544a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800544e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005452:	2b07      	cmp	r3, #7
 8005454:	f000 8408 	beq.w	8005c68 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005458:	2201      	movs	r2, #1
 800545a:	2180      	movs	r1, #128	@ 0x80
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f002 fd2f 	bl	8007ec0 <VL53L0X_WrByte>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800546a:	4313      	orrs	r3, r2
 800546c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005470:	2201      	movs	r2, #1
 8005472:	21ff      	movs	r1, #255	@ 0xff
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f002 fd23 	bl	8007ec0 <VL53L0X_WrByte>
 800547a:	4603      	mov	r3, r0
 800547c:	461a      	mov	r2, r3
 800547e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005482:	4313      	orrs	r3, r2
 8005484:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f002 fd17 	bl	8007ec0 <VL53L0X_WrByte>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800549a:	4313      	orrs	r3, r2
 800549c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80054a0:	2206      	movs	r2, #6
 80054a2:	21ff      	movs	r1, #255	@ 0xff
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f002 fd0b 	bl	8007ec0 <VL53L0X_WrByte>
 80054aa:	4603      	mov	r3, r0
 80054ac:	461a      	mov	r2, r3
 80054ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80054b8:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80054bc:	461a      	mov	r2, r3
 80054be:	2183      	movs	r1, #131	@ 0x83
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f002 fdb1 	bl	8008028 <VL53L0X_RdByte>
 80054c6:	4603      	mov	r3, r0
 80054c8:	461a      	mov	r2, r3
 80054ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80054d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	2183      	movs	r1, #131	@ 0x83
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f002 fcec 	bl	8007ec0 <VL53L0X_WrByte>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80054f6:	2207      	movs	r2, #7
 80054f8:	21ff      	movs	r1, #255	@ 0xff
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f002 fce0 	bl	8007ec0 <VL53L0X_WrByte>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005508:	4313      	orrs	r3, r2
 800550a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800550e:	2201      	movs	r2, #1
 8005510:	2181      	movs	r1, #129	@ 0x81
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f002 fcd4 	bl	8007ec0 <VL53L0X_WrByte>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005520:	4313      	orrs	r3, r2
 8005522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f002 fe1a 	bl	8008160 <VL53L0X_PollingDelay>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005534:	4313      	orrs	r3, r2
 8005536:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800553a:	2201      	movs	r2, #1
 800553c:	2180      	movs	r1, #128	@ 0x80
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f002 fcbe 	bl	8007ec0 <VL53L0X_WrByte>
 8005544:	4603      	mov	r3, r0
 8005546:	461a      	mov	r2, r3
 8005548:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800554c:	4313      	orrs	r3, r2
 800554e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 8098 	beq.w	800568e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800555e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005562:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 8091 	bne.w	800568e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800556c:	226b      	movs	r2, #107	@ 0x6b
 800556e:	2194      	movs	r1, #148	@ 0x94
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f002 fca5 	bl	8007ec0 <VL53L0X_WrByte>
 8005576:	4603      	mov	r3, r0
 8005578:	461a      	mov	r2, r3
 800557a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800557e:	4313      	orrs	r3, r2
 8005580:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff fef9 	bl	800537c <VL53L0X_device_read_strobe>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005592:	4313      	orrs	r3, r2
 8005594:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005598:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800559c:	461a      	mov	r2, r3
 800559e:	2190      	movs	r1, #144	@ 0x90
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f002 fda1 	bl	80080e8 <VL53L0X_RdDWord>
 80055a6:	4603      	mov	r3, r0
 80055a8:	461a      	mov	r2, r3
 80055aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ae:	4313      	orrs	r3, r2
 80055b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055be:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	0bdb      	lsrs	r3, r3, #15
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80055d0:	2224      	movs	r2, #36	@ 0x24
 80055d2:	2194      	movs	r1, #148	@ 0x94
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f002 fc73 	bl	8007ec0 <VL53L0X_WrByte>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fec7 	bl	800537c <VL53L0X_device_read_strobe>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461a      	mov	r2, r3
 80055f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005600:	461a      	mov	r2, r3
 8005602:	2190      	movs	r1, #144	@ 0x90
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 fd6f 	bl	80080e8 <VL53L0X_RdDWord>
 800560a:	4603      	mov	r3, r0
 800560c:	461a      	mov	r2, r3
 800560e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005612:	4313      	orrs	r3, r2
 8005614:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	0e1b      	lsrs	r3, r3, #24
 800561c:	b2db      	uxtb	r3, r3
 800561e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b2db      	uxtb	r3, r3
 8005626:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b2db      	uxtb	r3, r3
 800562e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	b2db      	uxtb	r3, r3
 8005634:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005636:	2225      	movs	r2, #37	@ 0x25
 8005638:	2194      	movs	r1, #148	@ 0x94
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f002 fc40 	bl	8007ec0 <VL53L0X_WrByte>
 8005640:	4603      	mov	r3, r0
 8005642:	461a      	mov	r2, r3
 8005644:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005648:	4313      	orrs	r3, r2
 800564a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff fe94 	bl	800537c <VL53L0X_device_read_strobe>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800565c:	4313      	orrs	r3, r2
 800565e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005662:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005666:	461a      	mov	r2, r3
 8005668:	2190      	movs	r1, #144	@ 0x90
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f002 fd3c 	bl	80080e8 <VL53L0X_RdDWord>
 8005670:	4603      	mov	r3, r0
 8005672:	461a      	mov	r2, r3
 8005674:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005678:	4313      	orrs	r3, r2
 800567a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	b2db      	uxtb	r3, r3
 8005684:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005688:	0c1b      	lsrs	r3, r3, #16
 800568a:	b2db      	uxtb	r3, r3
 800568c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8189 	beq.w	80059ac <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800569a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800569e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 8182 	bne.w	80059ac <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80056a8:	2202      	movs	r2, #2
 80056aa:	2194      	movs	r1, #148	@ 0x94
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f002 fc07 	bl	8007ec0 <VL53L0X_WrByte>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff fe5b 	bl	800537c <VL53L0X_device_read_strobe>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80056d4:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80056d8:	461a      	mov	r2, r3
 80056da:	2190      	movs	r1, #144	@ 0x90
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f002 fca3 	bl	8008028 <VL53L0X_RdByte>
 80056e2:	4603      	mov	r3, r0
 80056e4:	461a      	mov	r2, r3
 80056e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80056f0:	227b      	movs	r2, #123	@ 0x7b
 80056f2:	2194      	movs	r1, #148	@ 0x94
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f002 fbe3 	bl	8007ec0 <VL53L0X_WrByte>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005702:	4313      	orrs	r3, r2
 8005704:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7ff fe37 	bl	800537c <VL53L0X_device_read_strobe>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005716:	4313      	orrs	r3, r2
 8005718:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800571c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8005720:	461a      	mov	r2, r3
 8005722:	2190      	movs	r1, #144	@ 0x90
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f002 fc7f 	bl	8008028 <VL53L0X_RdByte>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005732:	4313      	orrs	r3, r2
 8005734:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005738:	2277      	movs	r2, #119	@ 0x77
 800573a:	2194      	movs	r1, #148	@ 0x94
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f002 fbbf 	bl	8007ec0 <VL53L0X_WrByte>
 8005742:	4603      	mov	r3, r0
 8005744:	461a      	mov	r2, r3
 8005746:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800574a:	4313      	orrs	r3, r2
 800574c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff fe13 	bl	800537c <VL53L0X_device_read_strobe>
 8005756:	4603      	mov	r3, r0
 8005758:	461a      	mov	r2, r3
 800575a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800575e:	4313      	orrs	r3, r2
 8005760:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005764:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005768:	461a      	mov	r2, r3
 800576a:	2190      	movs	r1, #144	@ 0x90
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f002 fcbb 	bl	80080e8 <VL53L0X_RdDWord>
 8005772:	4603      	mov	r3, r0
 8005774:	461a      	mov	r2, r3
 8005776:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800577a:	4313      	orrs	r3, r2
 800577c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005782:	0e5b      	lsrs	r3, r3, #25
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800578a:	b2db      	uxtb	r3, r3
 800578c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	0c9b      	lsrs	r3, r3, #18
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005798:	b2db      	uxtb	r3, r3
 800579a:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	0adb      	lsrs	r3, r3, #11
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80057ca:	2278      	movs	r2, #120	@ 0x78
 80057cc:	2194      	movs	r1, #148	@ 0x94
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f002 fb76 	bl	8007ec0 <VL53L0X_WrByte>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057dc:	4313      	orrs	r3, r2
 80057de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fdca 	bl	800537c <VL53L0X_device_read_strobe>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057fa:	461a      	mov	r2, r3
 80057fc:	2190      	movs	r1, #144	@ 0x90
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 fc72 	bl	80080e8 <VL53L0X_RdDWord>
 8005804:	4603      	mov	r3, r0
 8005806:	461a      	mov	r2, r3
 8005808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800580c:	4313      	orrs	r3, r2
 800580e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	0f5b      	lsrs	r3, r3, #29
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800581e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005822:	4413      	add	r3, r2
 8005824:	b2db      	uxtb	r3, r3
 8005826:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582a:	0d9b      	lsrs	r3, r3, #22
 800582c:	b2db      	uxtb	r3, r3
 800582e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005832:	b2db      	uxtb	r3, r3
 8005834:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	0bdb      	lsrs	r3, r3, #15
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005840:	b2db      	uxtb	r3, r3
 8005842:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584e:	b2db      	uxtb	r3, r3
 8005850:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800585c:	b2db      	uxtb	r3, r3
 800585e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	b2db      	uxtb	r3, r3
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005872:	2279      	movs	r2, #121	@ 0x79
 8005874:	2194      	movs	r1, #148	@ 0x94
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f002 fb22 	bl	8007ec0 <VL53L0X_WrByte>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005884:	4313      	orrs	r3, r2
 8005886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fd76 	bl	800537c <VL53L0X_device_read_strobe>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005898:	4313      	orrs	r3, r2
 800589a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800589e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80058a2:	461a      	mov	r2, r3
 80058a4:	2190      	movs	r1, #144	@ 0x90
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f002 fc1e 	bl	80080e8 <VL53L0X_RdDWord>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	0e9b      	lsrs	r3, r3, #26
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80058c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058ca:	4413      	add	r3, r2
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	0cdb      	lsrs	r3, r3, #19
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	0b1b      	lsrs	r3, r3, #12
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800590c:	227a      	movs	r2, #122	@ 0x7a
 800590e:	2194      	movs	r1, #148	@ 0x94
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f002 fad5 	bl	8007ec0 <VL53L0X_WrByte>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800591e:	4313      	orrs	r3, r2
 8005920:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fd29 	bl	800537c <VL53L0X_device_read_strobe>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005932:	4313      	orrs	r3, r2
 8005934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005938:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800593c:	461a      	mov	r2, r3
 800593e:	2190      	movs	r1, #144	@ 0x90
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f002 fbd1 	bl	80080e8 <VL53L0X_RdDWord>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800594e:	4313      	orrs	r3, r2
 8005950:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	0f9b      	lsrs	r3, r3, #30
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005964:	4413      	add	r3, r2
 8005966:	b2db      	uxtb	r3, r3
 8005968:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	0ddb      	lsrs	r3, r3, #23
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005982:	b2db      	uxtb	r3, r3
 8005984:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	0a5b      	lsrs	r3, r3, #9
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 80f1 	beq.w	8005b9a <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80059bc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f040 80ea 	bne.w	8005b9a <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80059c6:	227b      	movs	r2, #123	@ 0x7b
 80059c8:	2194      	movs	r1, #148	@ 0x94
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f002 fa78 	bl	8007ec0 <VL53L0X_WrByte>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059d8:	4313      	orrs	r3, r2
 80059da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff fccc 	bl	800537c <VL53L0X_device_read_strobe>
 80059e4:	4603      	mov	r3, r0
 80059e6:	461a      	mov	r2, r3
 80059e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80059f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059f6:	461a      	mov	r2, r3
 80059f8:	2190      	movs	r1, #144	@ 0x90
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f002 fb74 	bl	80080e8 <VL53L0X_RdDWord>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005a0e:	227c      	movs	r2, #124	@ 0x7c
 8005a10:	2194      	movs	r1, #148	@ 0x94
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f002 fa54 	bl	8007ec0 <VL53L0X_WrByte>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fca8 	bl	800537c <VL53L0X_device_read_strobe>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a3e:	461a      	mov	r2, r3
 8005a40:	2190      	movs	r1, #144	@ 0x90
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f002 fb50 	bl	80080e8 <VL53L0X_RdDWord>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005a56:	2273      	movs	r2, #115	@ 0x73
 8005a58:	2194      	movs	r1, #148	@ 0x94
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f002 fa30 	bl	8007ec0 <VL53L0X_WrByte>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fc84 	bl	800537c <VL53L0X_device_read_strobe>
 8005a74:	4603      	mov	r3, r0
 8005a76:	461a      	mov	r2, r3
 8005a78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a86:	461a      	mov	r2, r3
 8005a88:	2190      	movs	r1, #144	@ 0x90
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 fb2c 	bl	80080e8 <VL53L0X_RdDWord>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005aa6:	2274      	movs	r2, #116	@ 0x74
 8005aa8:	2194      	movs	r1, #148	@ 0x94
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f002 fa08 	bl	8007ec0 <VL53L0X_WrByte>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fc5c 	bl	800537c <VL53L0X_device_read_strobe>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ad2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2190      	movs	r1, #144	@ 0x90
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f002 fb04 	bl	80080e8 <VL53L0X_RdDWord>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005af2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005af4:	4313      	orrs	r3, r2
 8005af6:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005af8:	2275      	movs	r2, #117	@ 0x75
 8005afa:	2194      	movs	r1, #148	@ 0x94
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 f9df 	bl	8007ec0 <VL53L0X_WrByte>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fc33 	bl	800537c <VL53L0X_device_read_strobe>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b24:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2190      	movs	r1, #144	@ 0x90
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f002 fadb 	bl	80080e8 <VL53L0X_RdDWord>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005b48:	2276      	movs	r2, #118	@ 0x76
 8005b4a:	2194      	movs	r1, #148	@ 0x94
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f002 f9b7 	bl	8007ec0 <VL53L0X_WrByte>
 8005b52:	4603      	mov	r3, r0
 8005b54:	461a      	mov	r2, r3
 8005b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fc0b 	bl	800537c <VL53L0X_device_read_strobe>
 8005b66:	4603      	mov	r3, r0
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b78:	461a      	mov	r2, r3
 8005b7a:	2190      	movs	r1, #144	@ 0x90
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f002 fab3 	bl	80080e8 <VL53L0X_RdDWord>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b92:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005b94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b96:	4313      	orrs	r3, r2
 8005b98:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2181      	movs	r1, #129	@ 0x81
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f002 f98e 	bl	8007ec0 <VL53L0X_WrByte>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005bb2:	2206      	movs	r2, #6
 8005bb4:	21ff      	movs	r1, #255	@ 0xff
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f002 f982 	bl	8007ec0 <VL53L0X_WrByte>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005bca:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2183      	movs	r1, #131	@ 0x83
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f002 fa28 	bl	8008028 <VL53L0X_RdByte>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005be6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2183      	movs	r1, #131	@ 0x83
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f002 f963 	bl	8007ec0 <VL53L0X_WrByte>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c08:	2201      	movs	r2, #1
 8005c0a:	21ff      	movs	r1, #255	@ 0xff
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f002 f957 	bl	8007ec0 <VL53L0X_WrByte>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c20:	2201      	movs	r2, #1
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f002 f94b 	bl	8007ec0 <VL53L0X_WrByte>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	21ff      	movs	r1, #255	@ 0xff
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f002 f93f 	bl	8007ec0 <VL53L0X_WrByte>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c50:	2200      	movs	r2, #0
 8005c52:	2180      	movs	r1, #128	@ 0x80
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f002 f933 	bl	8007ec0 <VL53L0X_WrByte>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005c68:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 8090 	bne.w	8005d92 <VL53L0X_get_info_from_device+0x990>
 8005c72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c76:	2b07      	cmp	r3, #7
 8005c78:	f000 808b 	beq.w	8005d92 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d024      	beq.n	8005cd0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005c86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c8a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d11e      	bne.n	8005cd0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8005c98:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8005ca2:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005caa:	e00e      	b.n	8005cca <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005cac:	f107 0208 	add.w	r2, r7, #8
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb2:	4413      	add	r3, r2
 8005cb4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	dded      	ble.n	8005cac <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d019      	beq.n	8005d0e <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005cda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cde:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d113      	bne.n	8005d0e <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ce6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cf0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f203 131f 	addw	r3, r3, #287	@ 0x11f
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005d02:	f107 0310 	add.w	r3, r7, #16
 8005d06:	4619      	mov	r1, r3
 8005d08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d0a:	f007 fd20 	bl	800d74e <strcpy>

		}

		if (((option & 4) == 4) &&
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d030      	beq.n	8005d7a <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005d18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005d1c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d12a      	bne.n	8005d7a <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d36:	025b      	lsls	r3, r3, #9
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d011      	beq.n	8005d72 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8005d4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	64bb      	str	r3, [r7, #72]	@ 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005d56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d5c:	fb02 f303 	mul.w	r3, r2, r3
 8005d60:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8005d62:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
				OffsetMicroMeters *= -1;
 8005d66:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005d6a:	425b      	negs	r3, r3
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8005d72:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005d7a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005d88:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d92:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3760      	adds	r7, #96	@ 0x60
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8005daa:	f240 6277 	movw	r2, #1655	@ 0x677
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005db6:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005dba:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	fb02 f303 	mul.w	r3, r2, r3
 8005dca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d015      	beq.n	8005e20 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005dfa:	e005      	b.n	8005e08 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005e02:	89fb      	ldrh	r3, [r7, #14]
 8005e04:	3301      	adds	r3, #1
 8005e06:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2bff      	cmp	r3, #255	@ 0xff
 8005e0c:	d8f6      	bhi.n	8005dfc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005e0e:	89fb      	ldrh	r3, [r7, #14]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005e1c:	4413      	add	r3, r2
 8005e1e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005e20:	8afb      	ldrh	r3, [r7, #22]

}
 8005e22:	4618      	mov	r0, r3
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	4603      	mov	r3, r0
 8005e36:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005e40:	88fa      	ldrh	r2, [r7, #6]
 8005e42:	0a12      	lsrs	r2, r2, #8
 8005e44:	b292      	uxth	r2, r2
 8005e46:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e48:	3301      	adds	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005e6e:	79fb      	ldrb	r3, [r7, #7]
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff ff93 	bl	8005d9e <VL53L0X_calc_macro_period_ps>
 8005e78:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005e80:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <VL53L0X_calc_timeout_mclks+0x50>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	099b      	lsrs	r3, r3, #6
 8005e88:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e90:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
	timeout_period_mclks =
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea0:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8005ea2:	69fb      	ldr	r3, [r7, #28]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3720      	adds	r7, #32
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	10624dd3 	.word	0x10624dd3

08005eb0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff ff68 	bl	8005d9e <VL53L0X_calc_macro_period_ps>
 8005ece:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8005f00 <VL53L0X_calc_timeout_us+0x50>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	fb02 f303 	mul.w	r3, r2, r3
 8005ee8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8005eec:	4a04      	ldr	r2, [pc, #16]	@ (8005f00 <VL53L0X_calc_timeout_us+0x50>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	099b      	lsrs	r3, r3, #6
 8005ef4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005ef6:	697b      	ldr	r3, [r7, #20]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	10624dd3 	.word	0x10624dd3

08005f04 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	@ 0x30
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f2a:	7afb      	ldrb	r3, [r7, #11]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <get_sequence_step_timeout+0x38>
 8005f30:	7afb      	ldrb	r3, [r7, #11]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d002      	beq.n	8005f3c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d127      	bne.n	8005f8c <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f3c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f40:	461a      	mov	r2, r3
 8005f42:	2100      	movs	r1, #0
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f7fd f9cb 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005f50:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005f58:	f107 0320 	add.w	r3, r7, #32
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2146      	movs	r1, #70	@ 0x46
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f002 f861 	bl	8008028 <VL53L0X_RdByte>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005f6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff ff5c 	bl	8005e2e <VL53L0X_decode_timeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005f7a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005f7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f80:	4619      	mov	r1, r3
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff ff94 	bl	8005eb0 <VL53L0X_calc_timeout_us>
 8005f88:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005f8a:	e092      	b.n	80060b2 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005f8c:	7afb      	ldrb	r3, [r7, #11]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d135      	bne.n	8005ffe <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f92:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f96:	461a      	mov	r2, r3
 8005f98:	2100      	movs	r1, #0
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7fd f9a0 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005fa6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f040 8081 	bne.w	80060b2 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005fb0:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7fd f991 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8005fcc:	f107 031e 	add.w	r3, r7, #30
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	2151      	movs	r1, #81	@ 0x51
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f002 f851 	bl	800807c <VL53L0X_RdWord>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005fe0:	8bfb      	ldrh	r3, [r7, #30]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff ff23 	bl	8005e2e <VL53L0X_decode_timeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005fec:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005ff0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff ff5b 	bl	8005eb0 <VL53L0X_calc_timeout_us>
 8005ffa:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005ffc:	e059      	b.n	80060b2 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	2b04      	cmp	r3, #4
 8006002:	d156      	bne.n	80060b2 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	4619      	mov	r1, r3
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7fd fa72 	bl	80034f4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006010:	2300      	movs	r3, #0
 8006012:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006014:	7dfb      	ldrb	r3, [r7, #23]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01d      	beq.n	8006056 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800601a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800601e:	461a      	mov	r2, r3
 8006020:	2100      	movs	r1, #0
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7fd f95c 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8006028:	4603      	mov	r3, r0
 800602a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800602e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8006036:	f107 031e 	add.w	r3, r7, #30
 800603a:	461a      	mov	r2, r3
 800603c:	2151      	movs	r1, #81	@ 0x51
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f002 f81c 	bl	800807c <VL53L0X_RdWord>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800604a:	8bfb      	ldrh	r3, [r7, #30]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff feee 	bl	8005e2e <VL53L0X_decode_timeout>
 8006052:	4603      	mov	r3, r0
 8006054:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006056:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800605e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8006062:	461a      	mov	r2, r3
 8006064:	2101      	movs	r1, #1
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7fd f93a 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006072:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10f      	bne.n	800609a <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800607a:	f107 031c 	add.w	r3, r7, #28
 800607e:	461a      	mov	r2, r3
 8006080:	2171      	movs	r1, #113	@ 0x71
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f001 fffa 	bl	800807c <VL53L0X_RdWord>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800608e:	8bbb      	ldrh	r3, [r7, #28]
 8006090:	4618      	mov	r0, r3
 8006092:	f7ff fecc 	bl	8005e2e <VL53L0X_decode_timeout>
 8006096:	4603      	mov	r3, r0
 8006098:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800609a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800609c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80060a2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80060a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060a8:	4619      	mov	r1, r3
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff ff00 	bl	8005eb0 <VL53L0X_calc_timeout_us>
 80060b0:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b6:	601a      	str	r2, [r3, #0]

	return Status;
 80060b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3730      	adds	r7, #48	@ 0x30
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	@ 0x28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	460b      	mov	r3, r1
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <set_sequence_step_timeout+0x26>
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d002      	beq.n	80060ea <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80060e4:	7afb      	ldrb	r3, [r7, #11]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d138      	bne.n	800615c <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060ea:	f107 031b 	add.w	r3, r7, #27
 80060ee:	461a      	mov	r2, r3
 80060f0:	2100      	movs	r1, #0
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7fd f8f4 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80060fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006102:	2b00      	cmp	r3, #0
 8006104:	d11a      	bne.n	800613c <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8006106:	7efb      	ldrb	r3, [r7, #27]
 8006108:	461a      	mov	r2, r3
 800610a:	6879      	ldr	r1, [r7, #4]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7ff fea5 	bl	8005e5c <VL53L0X_calc_timeout_mclks>
 8006112:	4603      	mov	r3, r0
 8006114:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8006116:	8bbb      	ldrh	r3, [r7, #28]
 8006118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611c:	d903      	bls.n	8006126 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800611e:	23ff      	movs	r3, #255	@ 0xff
 8006120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006124:	e004      	b.n	8006130 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006126:	8bbb      	ldrh	r3, [r7, #28]
 8006128:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800612a:	3b01      	subs	r3, #1
 800612c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006130:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800613c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006140:	2b00      	cmp	r3, #0
 8006142:	f040 80ab 	bne.w	800629c <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006146:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800614a:	461a      	mov	r2, r3
 800614c:	2146      	movs	r1, #70	@ 0x46
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f001 feb6 	bl	8007ec0 <VL53L0X_WrByte>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800615a:	e09f      	b.n	800629c <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d135      	bne.n	80061ce <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8006162:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11b      	bne.n	80061a2 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800616a:	f107 031b 	add.w	r3, r7, #27
 800616e:	461a      	mov	r2, r3
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7fd f8b4 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800617e:	7efb      	ldrb	r3, [r7, #27]
 8006180:	461a      	mov	r2, r3
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fe69 	bl	8005e5c <VL53L0X_calc_timeout_mclks>
 800618a:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800618c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800618e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006190:	4618      	mov	r0, r3
 8006192:	f7ff fe22 	bl	8005dda <VL53L0X_encode_timeout>
 8006196:	4603      	mov	r3, r0
 8006198:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800619a:	8b3a      	ldrh	r2, [r7, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80061a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d108      	bne.n	80061bc <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80061aa:	8b3b      	ldrh	r3, [r7, #24]
 80061ac:	461a      	mov	r2, r3
 80061ae:	2151      	movs	r1, #81	@ 0x51
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f001 fea9 	bl	8007f08 <VL53L0X_WrWord>
 80061b6:	4603      	mov	r3, r0
 80061b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80061bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d16b      	bne.n	800629c <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 80061cc:	e066      	b.n	800629c <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d160      	bne.n	8006296 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80061d4:	f107 0310 	add.w	r3, r7, #16
 80061d8:	4619      	mov	r1, r3
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f7fd f98a 	bl	80034f4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80061e4:	7cfb      	ldrb	r3, [r7, #19]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d01d      	beq.n	8006226 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80061ea:	f107 031b 	add.w	r3, r7, #27
 80061ee:	461a      	mov	r2, r3
 80061f0:	2100      	movs	r1, #0
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7fd f874 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 80061f8:	4603      	mov	r3, r0
 80061fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 80061fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8006206:	f107 0318 	add.w	r3, r7, #24
 800620a:	461a      	mov	r2, r3
 800620c:	2151      	movs	r1, #81	@ 0x51
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f001 ff34 	bl	800807c <VL53L0X_RdWord>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800621a:	8b3b      	ldrh	r3, [r7, #24]
 800621c:	4618      	mov	r0, r3
 800621e:	f7ff fe06 	bl	8005e2e <VL53L0X_decode_timeout>
 8006222:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006224:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006226:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800622e:	f107 031b 	add.w	r3, r7, #27
 8006232:	461a      	mov	r2, r3
 8006234:	2101      	movs	r1, #1
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f7fd f852 	bl	80032e0 <VL53L0X_GetVcselPulsePeriod>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006242:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006246:	2b00      	cmp	r3, #0
 8006248:	d128      	bne.n	800629c <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800624a:	7efb      	ldrb	r3, [r7, #27]
 800624c:	461a      	mov	r2, r3
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fe03 	bl	8005e5c <VL53L0X_calc_timeout_mclks>
 8006256:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	4413      	add	r3, r2
 800625e:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006260:	6a38      	ldr	r0, [r7, #32]
 8006262:	f7ff fdba 	bl	8005dda <VL53L0X_encode_timeout>
 8006266:	4603      	mov	r3, r0
 8006268:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800626a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8006272:	8bfb      	ldrh	r3, [r7, #30]
 8006274:	461a      	mov	r2, r3
 8006276:	2171      	movs	r1, #113	@ 0x71
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 fe45 	bl	8007f08 <VL53L0X_WrWord>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006284:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006294:	e002      	b.n	800629c <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006296:	23fc      	movs	r3, #252	@ 0xfc
 8006298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800629c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3728      	adds	r7, #40	@ 0x28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
 80062b4:	4613      	mov	r3, r2
 80062b6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80062be:	230c      	movs	r3, #12
 80062c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80062c4:	2312      	movs	r3, #18
 80062c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80062ca:	2308      	movs	r3, #8
 80062cc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80062d0:	230e      	movs	r3, #14
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80062da:	78bb      	ldrb	r3, [r7, #2]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062e6:	23fc      	movs	r3, #252	@ 0xfc
 80062e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062ec:	e020      	b.n	8006330 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <VL53L0X_set_vcsel_pulse_period+0x68>
 80062f4:	78ba      	ldrb	r2, [r7, #2]
 80062f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d304      	bcc.n	8006308 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80062fe:	78ba      	ldrb	r2, [r7, #2]
 8006300:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006304:	429a      	cmp	r2, r3
 8006306:	d903      	bls.n	8006310 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006308:	23fc      	movs	r3, #252	@ 0xfc
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800630e:	e00f      	b.n	8006330 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10c      	bne.n	8006330 <VL53L0X_set_vcsel_pulse_period+0x88>
 8006316:	78ba      	ldrb	r2, [r7, #2]
 8006318:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800631c:	429a      	cmp	r2, r3
 800631e:	d304      	bcc.n	800632a <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8006320:	78ba      	ldrb	r2, [r7, #2]
 8006322:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006326:	429a      	cmp	r2, r3
 8006328:	d902      	bls.n	8006330 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800632a:	23fc      	movs	r3, #252	@ 0xfc
 800632c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8006330:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006338:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800633c:	e237      	b.n	80067ae <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d150      	bne.n	80063e6 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006344:	78bb      	ldrb	r3, [r7, #2]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d110      	bne.n	800636c <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800634a:	2218      	movs	r2, #24
 800634c:	2157      	movs	r1, #87	@ 0x57
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fdb6 	bl	8007ec0 <VL53L0X_WrByte>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800635a:	2208      	movs	r2, #8
 800635c:	2156      	movs	r1, #86	@ 0x56
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fdae 	bl	8007ec0 <VL53L0X_WrByte>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800636a:	e17f      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800636c:	78bb      	ldrb	r3, [r7, #2]
 800636e:	2b0e      	cmp	r3, #14
 8006370:	d110      	bne.n	8006394 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8006372:	2230      	movs	r2, #48	@ 0x30
 8006374:	2157      	movs	r1, #87	@ 0x57
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fda2 	bl	8007ec0 <VL53L0X_WrByte>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8006382:	2208      	movs	r2, #8
 8006384:	2156      	movs	r1, #86	@ 0x56
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 fd9a 	bl	8007ec0 <VL53L0X_WrByte>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006392:	e16b      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006394:	78bb      	ldrb	r3, [r7, #2]
 8006396:	2b10      	cmp	r3, #16
 8006398:	d110      	bne.n	80063bc <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800639a:	2240      	movs	r2, #64	@ 0x40
 800639c:	2157      	movs	r1, #87	@ 0x57
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fd8e 	bl	8007ec0 <VL53L0X_WrByte>
 80063a4:	4603      	mov	r3, r0
 80063a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80063aa:	2208      	movs	r2, #8
 80063ac:	2156      	movs	r1, #86	@ 0x56
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fd86 	bl	8007ec0 <VL53L0X_WrByte>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063ba:	e157      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80063bc:	78bb      	ldrb	r3, [r7, #2]
 80063be:	2b12      	cmp	r3, #18
 80063c0:	f040 8154 	bne.w	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80063c4:	2250      	movs	r2, #80	@ 0x50
 80063c6:	2157      	movs	r1, #87	@ 0x57
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 fd79 	bl	8007ec0 <VL53L0X_WrByte>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80063d4:	2208      	movs	r2, #8
 80063d6:	2156      	movs	r1, #86	@ 0x56
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 fd71 	bl	8007ec0 <VL53L0X_WrByte>
 80063de:	4603      	mov	r3, r0
 80063e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063e4:	e142      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	f040 813f 	bne.w	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80063ee:	78bb      	ldrb	r3, [r7, #2]
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d14c      	bne.n	800648e <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80063f4:	2210      	movs	r2, #16
 80063f6:	2148      	movs	r1, #72	@ 0x48
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fd61 	bl	8007ec0 <VL53L0X_WrByte>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8006404:	2208      	movs	r2, #8
 8006406:	2147      	movs	r1, #71	@ 0x47
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 fd59 	bl	8007ec0 <VL53L0X_WrByte>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006414:	2202      	movs	r2, #2
 8006416:	2132      	movs	r1, #50	@ 0x32
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 fd51 	bl	8007ec0 <VL53L0X_WrByte>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006426:	4313      	orrs	r3, r2
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800642c:	220c      	movs	r2, #12
 800642e:	2130      	movs	r1, #48	@ 0x30
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fd45 	bl	8007ec0 <VL53L0X_WrByte>
 8006436:	4603      	mov	r3, r0
 8006438:	461a      	mov	r2, r3
 800643a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643e:	4313      	orrs	r3, r2
 8006440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006444:	2201      	movs	r2, #1
 8006446:	21ff      	movs	r1, #255	@ 0xff
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f001 fd39 	bl	8007ec0 <VL53L0X_WrByte>
 800644e:	4603      	mov	r3, r0
 8006450:	461a      	mov	r2, r3
 8006452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006456:	4313      	orrs	r3, r2
 8006458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800645c:	2230      	movs	r2, #48	@ 0x30
 800645e:	2130      	movs	r1, #48	@ 0x30
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fd2d 	bl	8007ec0 <VL53L0X_WrByte>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800646e:	4313      	orrs	r3, r2
 8006470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006474:	2200      	movs	r2, #0
 8006476:	21ff      	movs	r1, #255	@ 0xff
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fd21 	bl	8007ec0 <VL53L0X_WrByte>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006486:	4313      	orrs	r3, r2
 8006488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800648c:	e0ee      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800648e:	78bb      	ldrb	r3, [r7, #2]
 8006490:	2b0a      	cmp	r3, #10
 8006492:	d14c      	bne.n	800652e <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006494:	2228      	movs	r2, #40	@ 0x28
 8006496:	2148      	movs	r1, #72	@ 0x48
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fd11 	bl	8007ec0 <VL53L0X_WrByte>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80064a4:	2208      	movs	r2, #8
 80064a6:	2147      	movs	r1, #71	@ 0x47
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fd09 	bl	8007ec0 <VL53L0X_WrByte>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80064b4:	2203      	movs	r2, #3
 80064b6:	2132      	movs	r1, #50	@ 0x32
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fd01 	bl	8007ec0 <VL53L0X_WrByte>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80064cc:	2209      	movs	r2, #9
 80064ce:	2130      	movs	r1, #48	@ 0x30
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fcf5 	bl	8007ec0 <VL53L0X_WrByte>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064de:	4313      	orrs	r3, r2
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80064e4:	2201      	movs	r2, #1
 80064e6:	21ff      	movs	r1, #255	@ 0xff
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f001 fce9 	bl	8007ec0 <VL53L0X_WrByte>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80064fc:	2220      	movs	r2, #32
 80064fe:	2130      	movs	r1, #48	@ 0x30
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fcdd 	bl	8007ec0 <VL53L0X_WrByte>
 8006506:	4603      	mov	r3, r0
 8006508:	461a      	mov	r2, r3
 800650a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800650e:	4313      	orrs	r3, r2
 8006510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006514:	2200      	movs	r2, #0
 8006516:	21ff      	movs	r1, #255	@ 0xff
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f001 fcd1 	bl	8007ec0 <VL53L0X_WrByte>
 800651e:	4603      	mov	r3, r0
 8006520:	461a      	mov	r2, r3
 8006522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006526:	4313      	orrs	r3, r2
 8006528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800652c:	e09e      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800652e:	78bb      	ldrb	r3, [r7, #2]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	d14c      	bne.n	80065ce <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006534:	2238      	movs	r2, #56	@ 0x38
 8006536:	2148      	movs	r1, #72	@ 0x48
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fcc1 	bl	8007ec0 <VL53L0X_WrByte>
 800653e:	4603      	mov	r3, r0
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006544:	2208      	movs	r2, #8
 8006546:	2147      	movs	r1, #71	@ 0x47
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fcb9 	bl	8007ec0 <VL53L0X_WrByte>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006554:	2203      	movs	r2, #3
 8006556:	2132      	movs	r1, #50	@ 0x32
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fcb1 	bl	8007ec0 <VL53L0X_WrByte>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006566:	4313      	orrs	r3, r2
 8006568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800656c:	2208      	movs	r2, #8
 800656e:	2130      	movs	r1, #48	@ 0x30
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fca5 	bl	8007ec0 <VL53L0X_WrByte>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657e:	4313      	orrs	r3, r2
 8006580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006584:	2201      	movs	r2, #1
 8006586:	21ff      	movs	r1, #255	@ 0xff
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f001 fc99 	bl	8007ec0 <VL53L0X_WrByte>
 800658e:	4603      	mov	r3, r0
 8006590:	461a      	mov	r2, r3
 8006592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006596:	4313      	orrs	r3, r2
 8006598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800659c:	2220      	movs	r2, #32
 800659e:	2130      	movs	r1, #48	@ 0x30
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fc8d 	bl	8007ec0 <VL53L0X_WrByte>
 80065a6:	4603      	mov	r3, r0
 80065a8:	461a      	mov	r2, r3
 80065aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80065b4:	2200      	movs	r2, #0
 80065b6:	21ff      	movs	r1, #255	@ 0xff
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 fc81 	bl	8007ec0 <VL53L0X_WrByte>
 80065be:	4603      	mov	r3, r0
 80065c0:	461a      	mov	r2, r3
 80065c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065cc:	e04e      	b.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80065ce:	78bb      	ldrb	r3, [r7, #2]
 80065d0:	2b0e      	cmp	r3, #14
 80065d2:	d14b      	bne.n	800666c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80065d4:	2248      	movs	r2, #72	@ 0x48
 80065d6:	2148      	movs	r1, #72	@ 0x48
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fc71 	bl	8007ec0 <VL53L0X_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80065e4:	2208      	movs	r2, #8
 80065e6:	2147      	movs	r1, #71	@ 0x47
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 fc69 	bl	8007ec0 <VL53L0X_WrByte>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80065f4:	2203      	movs	r2, #3
 80065f6:	2132      	movs	r1, #50	@ 0x32
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fc61 	bl	8007ec0 <VL53L0X_WrByte>
 80065fe:	4603      	mov	r3, r0
 8006600:	461a      	mov	r2, r3
 8006602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006606:	4313      	orrs	r3, r2
 8006608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800660c:	2207      	movs	r2, #7
 800660e:	2130      	movs	r1, #48	@ 0x30
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fc55 	bl	8007ec0 <VL53L0X_WrByte>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800661e:	4313      	orrs	r3, r2
 8006620:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006624:	2201      	movs	r2, #1
 8006626:	21ff      	movs	r1, #255	@ 0xff
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fc49 	bl	8007ec0 <VL53L0X_WrByte>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006636:	4313      	orrs	r3, r2
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800663c:	2220      	movs	r2, #32
 800663e:	2130      	movs	r1, #48	@ 0x30
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fc3d 	bl	8007ec0 <VL53L0X_WrByte>
 8006646:	4603      	mov	r3, r0
 8006648:	461a      	mov	r2, r3
 800664a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800664e:	4313      	orrs	r3, r2
 8006650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006654:	2200      	movs	r2, #0
 8006656:	21ff      	movs	r1, #255	@ 0xff
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fc31 	bl	8007ec0 <VL53L0X_WrByte>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006666:	4313      	orrs	r3, r2
 8006668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800666c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006670:	2b00      	cmp	r3, #0
 8006672:	d17e      	bne.n	8006772 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006674:	78bb      	ldrb	r3, [r7, #2]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe fe39 	bl	80052ee <VL53L0X_encode_vcsel_period>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006688:	2b01      	cmp	r3, #1
 800668a:	d045      	beq.n	8006718 <VL53L0X_set_vcsel_pulse_period+0x470>
 800668c:	e06e      	b.n	800676c <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800668e:	f107 0314 	add.w	r3, r7, #20
 8006692:	461a      	mov	r2, r3
 8006694:	2103      	movs	r1, #3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fc34 	bl	8005f04 <get_sequence_step_timeout>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80066a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	461a      	mov	r2, r3
 80066b0:	2102      	movs	r1, #2
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fc26 	bl	8005f04 <get_sequence_step_timeout>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80066be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80066c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80066ca:	461a      	mov	r2, r3
 80066cc:	2150      	movs	r1, #80	@ 0x50
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 fbf6 	bl	8007ec0 <VL53L0X_WrByte>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80066da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	461a      	mov	r2, r3
 80066e6:	2103      	movs	r1, #3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff fceb 	bl	80060c4 <set_sequence_step_timeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80066f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d108      	bne.n	800670e <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	461a      	mov	r2, r3
 8006700:	2102      	movs	r1, #2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fcde 	bl	80060c4 <set_sequence_step_timeout>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	78ba      	ldrb	r2, [r7, #2]
 8006712:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006716:	e02c      	b.n	8006772 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006718:	f107 0318 	add.w	r3, r7, #24
 800671c:	461a      	mov	r2, r3
 800671e:	2104      	movs	r1, #4
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fbef 	bl	8005f04 <get_sequence_step_timeout>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800672c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006734:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006738:	461a      	mov	r2, r3
 800673a:	2170      	movs	r1, #112	@ 0x70
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f001 fbbf 	bl	8007ec0 <VL53L0X_WrByte>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006748:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800674c:	2b00      	cmp	r3, #0
 800674e:	d108      	bne.n	8006762 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	461a      	mov	r2, r3
 8006754:	2104      	movs	r1, #4
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fcb4 	bl	80060c4 <set_sequence_step_timeout>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	78ba      	ldrb	r2, [r7, #2]
 8006766:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800676a:	e002      	b.n	8006772 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800676c:	23fc      	movs	r3, #252	@ 0xfc
 800676e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006772:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006780:	69f9      	ldr	r1, [r7, #28]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7fc fd6e 	bl	8003264 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800678e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8006796:	f107 010f 	add.w	r1, r7, #15
 800679a:	2301      	movs	r3, #1
 800679c:	2200      	movs	r2, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fe fcc0 	bl	8005124 <VL53L0X_perform_phase_calibration>
 80067a4:	4603      	mov	r3, r0
 80067a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80067aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3728      	adds	r7, #40	@ 0x28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	460b      	mov	r3, r1
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80067c8:	7afb      	ldrb	r3, [r7, #11]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d00a      	beq.n	80067e8 <VL53L0X_get_vcsel_pulse_period+0x32>
 80067d2:	e013      	b.n	80067fc <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80067d4:	f107 0316 	add.w	r3, r7, #22
 80067d8:	461a      	mov	r2, r3
 80067da:	2150      	movs	r1, #80	@ 0x50
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 fc23 	bl	8008028 <VL53L0X_RdByte>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80067e6:	e00b      	b.n	8006800 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80067e8:	f107 0316 	add.w	r3, r7, #22
 80067ec:	461a      	mov	r2, r3
 80067ee:	2170      	movs	r1, #112	@ 0x70
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 fc19 	bl	8008028 <VL53L0X_RdByte>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80067fa:	e001      	b.n	8006800 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067fc:	23fc      	movs	r3, #252	@ 0xfc
 80067fe:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d107      	bne.n	8006818 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006808:	7dbb      	ldrb	r3, [r7, #22]
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fd5c 	bl	80052c8 <VL53L0X_decode_vcsel_period>
 8006810:	4603      	mov	r3, r0
 8006812:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	701a      	strb	r2, [r3, #0]

	return Status;
 8006818:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b090      	sub	sp, #64	@ 0x40
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800682e:	2300      	movs	r3, #0
 8006830:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006834:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006838:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800683a:	f240 7376 	movw	r3, #1910	@ 0x776
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8006840:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006844:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006846:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800684c:	f240 234e 	movw	r3, #590	@ 0x24e
 8006850:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8006852:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8006856:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006858:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800685c:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800685e:	f240 2326 	movw	r3, #550	@ 0x226
 8006862:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006864:	2300      	movs	r3, #0
 8006866:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800686c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	63bb      	str	r3, [r7, #56]	@ 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006878:	f107 0310 	add.w	r3, r7, #16
 800687c:	4619      	mov	r1, r3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc fe38 	bl	80034f4 <VL53L0X_GetSequenceStepEnables>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 800688a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d15b      	bne.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8006892:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8006894:	2b00      	cmp	r3, #0
 8006896:	d105      	bne.n	80068a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006898:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800689e:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d052      	beq.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	461a      	mov	r2, r3
 80068aa:	2102      	movs	r1, #2
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff fb29 	bl	8005f04 <get_sequence_step_timeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 80068b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 80068c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068c4:	e07d      	b.n	80069c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80068c6:	7c3b      	ldrb	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00f      	beq.n	80068ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80068cc:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80068ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068d0:	4413      	add	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	429a      	cmp	r2, r3
 80068da:	d204      	bcs.n	80068e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80068dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068e4:	e002      	b.n	80068ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068e6:	23fc      	movs	r3, #252	@ 0xfc
 80068e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80068ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 80068f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068f8:	e063      	b.n	80069c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80068fa:	7cbb      	ldrb	r3, [r7, #18]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	4413      	add	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	429a      	cmp	r2, r3
 8006910:	d204      	bcs.n	800691c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	63bb      	str	r3, [r7, #56]	@ 0x38
 800691a:	e016      	b.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800691c:	23fc      	movs	r3, #252	@ 0xfc
 800691e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006922:	e012      	b.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006924:	7c7b      	ldrb	r3, [r7, #17]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00f      	beq.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800692e:	4413      	add	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	429a      	cmp	r2, r3
 8006938:	d204      	bcs.n	8006944 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800693a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006942:	e002      	b.n	800694a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006944:	23fc      	movs	r3, #252	@ 0xfc
 8006946:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800694a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8006952:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006956:	e034      	b.n	80069c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006958:	7cfb      	ldrb	r3, [r7, #19]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d019      	beq.n	8006992 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	461a      	mov	r2, r3
 8006964:	2103      	movs	r1, #3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff facc 	bl	8005f04 <get_sequence_step_timeout>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	4413      	add	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697e:	429a      	cmp	r2, r3
 8006980:	d204      	bcs.n	800698c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006982:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800698a:	e002      	b.n	8006992 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800698c:	23fc      	movs	r3, #252	@ 0xfc
 800698e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006992:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006996:	2b00      	cmp	r3, #0
 8006998:	d111      	bne.n	80069be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800699a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00e      	beq.n	80069be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 80069a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	63bb      	str	r3, [r7, #56]	@ 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80069a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069aa:	2104      	movs	r1, #4
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fb89 	bl	80060c4 <set_sequence_step_timeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80069be:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3740      	adds	r7, #64	@ 0x40
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b090      	sub	sp, #64	@ 0x40
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069d4:	2300      	movs	r3, #0
 80069d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80069da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80069de:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80069e0:	f240 7376 	movw	r3, #1910	@ 0x776
 80069e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80069e6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80069ec:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80069f0:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80069f2:	f240 234e 	movw	r3, #590	@ 0x24e
 80069f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80069f8:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80069fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80069fe:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006a02:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006a04:	f240 2326 	movw	r3, #550	@ 0x226
 8006a08:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	441a      	add	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006a18:	f107 0318 	add.w	r3, r7, #24
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fc fd68 	bl	80034f4 <VL53L0X_GetSequenceStepEnables>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006a2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006a32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a36:	e075      	b.n	8006b24 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006a38:	7e3b      	ldrb	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006a3e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006a44:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d030      	beq.n	8006aac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006a4a:	f107 0310 	add.w	r3, r7, #16
 8006a4e:	461a      	mov	r2, r3
 8006a50:	2102      	movs	r1, #2
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fa56 	bl	8005f04 <get_sequence_step_timeout>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d122      	bne.n	8006aac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006a66:	7e3b      	ldrb	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d007      	beq.n	8006a7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006a70:	6939      	ldr	r1, [r7, #16]
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a76:	441a      	add	r2, r3
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006a7c:	7ebb      	ldrb	r3, [r7, #26]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006a86:	6939      	ldr	r1, [r7, #16]
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	440b      	add	r3, r1
 8006a8c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a8e:	441a      	add	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	e00a      	b.n	8006aac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006a96:	7e7b      	ldrb	r3, [r7, #25]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006aa0:	6939      	ldr	r1, [r7, #16]
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006aa6:	441a      	add	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d114      	bne.n	8006ade <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006ab4:	7efb      	ldrb	r3, [r7, #27]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d011      	beq.n	8006ade <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006aba:	f107 030c 	add.w	r3, r7, #12
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2103      	movs	r1, #3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fa1e 	bl	8005f04 <get_sequence_step_timeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006ad8:	441a      	add	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ade:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d114      	bne.n	8006b10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006ae6:	7f3b      	ldrb	r3, [r7, #28]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d011      	beq.n	8006b10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	461a      	mov	r2, r3
 8006af2:	2104      	movs	r1, #4
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fa05 	bl	8005f04 <get_sequence_step_timeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b0a:	441a      	add	r2, r3
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b10:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b20:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3740      	adds	r7, #64	@ 0x40
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b3e:	e0c6      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006b50:	7cfb      	ldrb	r3, [r7, #19]
 8006b52:	2bff      	cmp	r3, #255	@ 0xff
 8006b54:	f040 808d 	bne.w	8006c72 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	747b      	strb	r3, [r7, #17]
			Index++;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3301      	adds	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006b68:	7c7b      	ldrb	r3, [r7, #17]
 8006b6a:	2b03      	cmp	r3, #3
 8006b6c:	d87e      	bhi.n	8006c6c <VL53L0X_load_tuning_settings+0x140>
 8006b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b74 <VL53L0X_load_tuning_settings+0x48>)
 8006b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b74:	08006b85 	.word	0x08006b85
 8006b78:	08006bbf 	.word	0x08006bbf
 8006b7c:	08006bf9 	.word	0x08006bf9
 8006b80:	08006c33 	.word	0x08006c33
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4413      	add	r3, r2
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	743b      	strb	r3, [r7, #16]
				Index++;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	3301      	adds	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ba4:	7c3b      	ldrb	r3, [r7, #16]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	021b      	lsls	r3, r3, #8
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	89ba      	ldrh	r2, [r7, #12]
 8006bb8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
				break;
 8006bbc:	e087      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	743b      	strb	r3, [r7, #16]
				Index++;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bde:	7c3b      	ldrb	r3, [r7, #16]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	89ba      	ldrh	r2, [r7, #12]
 8006bf2:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
					Temp16);
				break;
 8006bf6:	e06a      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	3301      	adds	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	3301      	adds	r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c18:	7c3b      	ldrb	r3, [r7, #16]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	89ba      	ldrh	r2, [r7, #12]
 8006c2c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
				break;
 8006c30:	e04d      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	4413      	add	r3, r2
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	4413      	add	r3, r2
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c52:	7c3b      	ldrb	r3, [r7, #16]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	89ba      	ldrh	r2, [r7, #12]
 8006c66:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
				break;
 8006c6a:	e030      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c6c:	23fc      	movs	r3, #252	@ 0xfc
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e02d      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006c72:	7cfb      	ldrb	r3, [r7, #19]
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d828      	bhi.n	8006cca <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	3301      	adds	r3, #1
 8006c86:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e00f      	b.n	8006cae <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	4413      	add	r3, r2
 8006c94:	7819      	ldrb	r1, [r3, #0]
 8006c96:	f107 0208 	add.w	r2, r7, #8
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	460a      	mov	r2, r1
 8006ca0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	7cfb      	ldrb	r3, [r7, #19]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	dbeb      	blt.n	8006c8e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006cb6:	7cfb      	ldrb	r3, [r7, #19]
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	7cb9      	ldrb	r1, [r7, #18]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 f8a2 	bl	8007e08 <VL53L0X_WriteMulti>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e001      	b.n	8006cce <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cca:	23fc      	movs	r3, #252	@ 0xfc
 8006ccc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <VL53L0X_load_tuning_settings+0x1b8>
 8006cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f43f af2e 	beq.w	8006b40 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3720      	adds	r7, #32
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006d06:	f107 0313 	add.w	r3, r7, #19
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7fc fcb1 	bl	8003674 <VL53L0X_GetXTalkCompensationEnable>
 8006d12:	4603      	mov	r3, r0
 8006d14:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d111      	bne.n	8006d42 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006d1e:	7cfb      	ldrb	r3, [r7, #19]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00e      	beq.n	8006d42 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	8a9b      	ldrh	r3, [r3, #20]
 8006d2e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3380      	adds	r3, #128	@ 0x80
 8006d3c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006d66:	f107 0310 	add.w	r3, r7, #16
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff ffbe 	bl	8006cf0 <VL53L0X_get_total_xtalk_rate>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d105      	bne.n	8006d8c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	441a      	add	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	601a      	str	r2, [r3, #0]

	return Status;
 8006d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8006d98:	b084      	sub	sp, #16
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	f107 0c18 	add.w	ip, r7, #24
 8006da4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8006db8:	2300      	movs	r3, #0
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e00d      	b.n	8006dda <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f107 0218 	add.w	r2, r7, #24
 8006dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d802      	bhi.n	8006dd4 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60bb      	str	r3, [r7, #8]
			break;
 8006dd2:	e006      	b.n	8006de2 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d8ed      	bhi.n	8006dbe <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8006de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d105      	bne.n	8006df6 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8006dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dec:	3b01      	subs	r3, #1
 8006dee:	60bb      	str	r3, [r7, #8]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e008      	b.n	8006e08 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d102      	bne.n	8006e02 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	e002      	b.n	8006e08 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e0c:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e12:	601a      	str	r2, [r3, #0]

	return Status;
 8006e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	b004      	add	sp, #16
 8006e24:	4770      	bx	lr

08006e26 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8006e26:	b5b0      	push	{r4, r5, r7, lr}
 8006e28:	b0ba      	sub	sp, #232	@ 0xe8
 8006e2a:	af0e      	add	r7, sp, #56	@ 0x38
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006e40:	f107 031c 	add.w	r3, r7, #28
 8006e44:	4619      	mov	r1, r3
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7fc f8f8 	bl	800303c <VL53L0X_GetDeviceParameters>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8006e52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d803      	bhi.n	8006e62 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e60:	e07c      	b.n	8006f5c <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8006e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
	} else if (ambRateMeas >=
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d304      	bcc.n	8006e74 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 8006e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e72:	e073      	b.n	8006f5c <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e7a:	f107 0318 	add.w	r3, r7, #24
 8006e7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e84:	2307      	movs	r3, #7
 8006e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e88:	466d      	mov	r5, sp
 8006e8a:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8006e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ea4:	f7ff ff78 	bl	8006d98 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d109      	bne.n	8006ec4 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	33b0      	adds	r3, #176	@ 0xb0
 8006eb8:	443b      	add	r3, r7
 8006eba:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ec2:	e04b      	b.n	8006f5c <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	330e      	adds	r3, #14
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	33b0      	adds	r3, #176	@ 0xb0
 8006ecc:	443b      	add	r3, r7
 8006ece:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	330e      	adds	r3, #14
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	33b0      	adds	r3, #176	@ 0xb0
 8006ede:	443b      	add	r3, r7
 8006ee0:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3314      	adds	r3, #20
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	33b0      	adds	r3, #176	@ 0xb0
 8006ef0:	443b      	add	r3, r7
 8006ef2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	3314      	adds	r3, #20
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	33b0      	adds	r3, #176	@ 0xb0
 8006f02:	443b      	add	r3, r7
 8006f04:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			if ((amb1 - amb0) != 0) {
 8006f0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d01d      	beq.n	8006f54 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8006f18:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8006f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f20:	1ad2      	subs	r2, r2, r3
 8006f22:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8006f26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f2a:	1acb      	subs	r3, r1, r3
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8006f36:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8006f48:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f52:	e003      	b.n	8006f5c <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8006f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8006f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f60:	0c1a      	lsrs	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006f66:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	37b0      	adds	r7, #176	@ 0xb0
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f74 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b0b0      	sub	sp, #192	@ 0xc0
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006f80:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006f84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006f88:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8006f8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8006f90:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 8006f94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006f98:	f241 235c 	movw	r3, #4700	@ 0x125c
 8006f9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006fa0:	4b98      	ldr	r3, [pc, #608]	@ (8007204 <VL53L0X_calc_sigma_estimate+0x290>)
 8006fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006fa6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006faa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006fae:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8006fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006fbe:	4b92      	ldr	r3, [pc, #584]	@ (8007208 <VL53L0X_calc_sigma_estimate+0x294>)
 8006fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fc6:	67bb      	str	r3, [r7, #120]	@ 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006fc8:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8006fcc:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8006fce:	f240 6377 	movw	r3, #1655	@ 0x677
 8006fd2:	673b      	str	r3, [r7, #112]	@ 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	66bb      	str	r3, [r7, #104]	@ 0x68

	Status = VL53L0X_get_total_signal_rate(
 8006ff0:	f107 0314 	add.w	r3, r7, #20
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fea8 	bl	8006d4e <VL53L0X_get_total_signal_rate>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007004:	f107 0318 	add.w	r3, r7, #24
 8007008:	461a      	mov	r2, r3
 800700a:	68b9      	ldr	r1, [r7, #8]
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff fe6f 	bl	8006cf0 <VL53L0X_get_total_xtalk_rate>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	667b      	str	r3, [r7, #100]	@ 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007024:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007026:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800702a:	0c1b      	lsrs	r3, r3, #16
 800702c:	667b      	str	r3, [r7, #100]	@ 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800703c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8007040:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007042:	429a      	cmp	r2, r3
 8007044:	d902      	bls.n	800704c <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007048:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800704c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d160      	bne.n	8007116 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800705a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007064:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007068:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800706c:	461a      	mov	r2, r3
 800706e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7fe fef2 	bl	8005e5c <VL53L0X_calc_timeout_mclks>
 8007078:	65f8      	str	r0, [r7, #92]	@ 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8007080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800708a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800708e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007092:	461a      	mov	r2, r3
 8007094:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7fe fedf 	bl	8005e5c <VL53L0X_calc_timeout_mclks>
 800709e:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80070a0:	2303      	movs	r3, #3
 80070a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (finalRangeVcselPCLKS == 8)
 80070a6:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d102      	bne.n	80070b4 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 80070ae:	2302      	movs	r3, #2
 80070b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80070b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070b8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80070ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	02db      	lsls	r3, r3, #11
 80070c4:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80070cc:	4a4f      	ldr	r2, [pc, #316]	@ (800720c <VL53L0X_calc_sigma_estimate+0x298>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	099b      	lsrs	r3, r3, #6
 80070d4:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 80070d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80070da:	fb02 f303 	mul.w	r3, r2, r3
 80070de:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80070e6:	4a49      	ldr	r2, [pc, #292]	@ (800720c <VL53L0X_calc_sigma_estimate+0x298>)
 80070e8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ec:	099b      	lsrs	r3, r3, #6
 80070ee:	653b      	str	r3, [r7, #80]	@ 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	3380      	adds	r3, #128	@ 0x80
 80070f4:	0a1b      	lsrs	r3, r3, #8
 80070f6:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007108:	3380      	adds	r3, #128	@ 0x80
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007116:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 800711e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007122:	e14a      	b.n	80073ba <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8007124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007130:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007138:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800713c:	e13b      	b.n	80073b6 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800713e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8007146:	2301      	movs	r3, #1
 8007148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800714c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007150:	64fb      	str	r3, [r7, #76]	@ 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007154:	041a      	lsls	r2, r3, #16
 8007156:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007160:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007168:	429a      	cmp	r2, r3
 800716a:	d903      	bls.n	8007174 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800716c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007170:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007174:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007178:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800717c:	fb02 f303 	mul.w	r3, r2, r3
 8007180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007188:	4613      	mov	r3, r2
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe f8bf 	bl	8005314 <VL53L0X_isqrt>
 8007196:	4603      	mov	r3, r0
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	891b      	ldrh	r3, [r3, #8]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	647b      	str	r3, [r7, #68]	@ 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ac:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80071ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071b2:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071b4:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80071b6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80071ba:	4a14      	ldr	r2, [pc, #80]	@ (800720c <VL53L0X_calc_sigma_estimate+0x298>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	099b      	lsrs	r3, r3, #6
 80071c2:	643b      	str	r3, [r7, #64]	@ 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80071c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80071cc:	4a0f      	ldr	r2, [pc, #60]	@ (800720c <VL53L0X_calc_sigma_estimate+0x298>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 80071d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d8:	021b      	lsls	r3, r3, #8
 80071da:	643b      	str	r3, [r7, #64]	@ 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80071dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bfb8      	it	lt
 80071e8:	425b      	neglt	r3, r3
 80071ea:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80071ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	63bb      	str	r3, [r7, #56]	@ 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	7e1b      	ldrb	r3, [r3, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 80071fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007202:	e032      	b.n	800726a <VL53L0X_calc_sigma_estimate+0x2f6>
 8007204:	028f87ae 	.word	0x028f87ae
 8007208:	0006999a 	.word	0x0006999a
 800720c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8007210:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8007224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007228:	fb02 f303 	mul.w	r3, r2, r3
 800722c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	4413      	add	r3, r2
 8007238:	0c1b      	lsrs	r3, r3, #16
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800723e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007242:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007246:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 800724a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007258:	fb03 f303 	mul.w	r3, r3, r3
 800725c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007264:	0b9b      	lsrs	r3, r3, #14
 8007266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800726a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800726e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007278:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007282:	fb03 f303 	mul.w	r3, r3, r3
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34

		sqr2 = sigmaEstimateP2;
 8007288:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800728c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800728e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007290:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729a:	fb03 f303 	mul.w	r3, r3, r3
 800729e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80072a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	4413      	add	r3, r2
 80072a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80072a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80072aa:	f7fe f833 	bl	8005314 <VL53L0X_isqrt>
 80072ae:	62b8      	str	r0, [r7, #40]	@ 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	3332      	adds	r3, #50	@ 0x32
 80072ba:	4a42      	ldr	r2, [pc, #264]	@ (80073c4 <VL53L0X_calc_sigma_estimate+0x450>)
 80072bc:	fba2 2303 	umull	r2, r3, r2, r3
 80072c0:	095a      	lsrs	r2, r3, #5
 80072c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80072cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072d0:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80072dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072e0:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80072e4:	3308      	adds	r3, #8
 80072e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80072ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072ee:	4a36      	ldr	r2, [pc, #216]	@ (80073c8 <VL53L0X_calc_sigma_estimate+0x454>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	0b5b      	lsrs	r3, r3, #13
 80072f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80072fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007302:	429a      	cmp	r2, r3
 8007304:	d903      	bls.n	800730e <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007306:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800730a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 800730e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007316:	4413      	add	r3, r2
 8007318:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800731c:	4a2b      	ldr	r2, [pc, #172]	@ (80073cc <VL53L0X_calc_sigma_estimate+0x458>)
 800731e:	fba2 2303 	umull	r2, r3, r2, r3
 8007322:	099b      	lsrs	r3, r3, #6
 8007324:	627b      	str	r3, [r7, #36]	@ 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800732a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800732e:	441a      	add	r2, r3
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	4618      	mov	r0, r3
 8007338:	f7fd ffec 	bl	8005314 <VL53L0X_isqrt>
 800733c:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800734a:	4a20      	ldr	r2, [pc, #128]	@ (80073cc <VL53L0X_calc_sigma_estimate+0x458>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007358:	fb03 f303 	mul.w	r3, r3, r3
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	fb03 f303 	mul.w	r3, r3, r3
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	4413      	add	r3, r2
 800736c:	4618      	mov	r0, r3
 800736e:	f7fd ffd1 	bl	8005314 <VL53L0X_isqrt>
 8007372:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007384:	2b00      	cmp	r3, #0
 8007386:	d009      	beq.n	800739c <VL53L0X_calc_sigma_estimate+0x428>
 8007388:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <VL53L0X_calc_sigma_estimate+0x428>
 8007390:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007394:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007398:	429a      	cmp	r2, r3
 800739a:	d903      	bls.n	80073a4 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 800739c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80073aa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	37c0      	adds	r7, #192	@ 0xc0
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	51eb851f 	.word	0x51eb851f
 80073c8:	d1b71759 	.word	0xd1b71759
 80073cc:	10624dd3 	.word	0x10624dd3

080073d0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b090      	sub	sp, #64	@ 0x40
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	461a      	mov	r2, r3
 80073dc:	460b      	mov	r3, r1
 80073de:	72fb      	strb	r3, [r7, #11]
 80073e0:	4613      	mov	r3, r2
 80073e2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007402:	2300      	movs	r3, #0
 8007404:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007408:	2300      	movs	r3, #0
 800740a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007414:	2300      	movs	r3, #0
 8007416:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	10db      	asrs	r3, r3, #3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007430:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007434:	2b00      	cmp	r3, #0
 8007436:	d017      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
 8007438:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800743c:	2b05      	cmp	r3, #5
 800743e:	d013      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007440:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007444:	2b07      	cmp	r3, #7
 8007446:	d00f      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007448:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800744c:	2b0c      	cmp	r3, #12
 800744e:	d00b      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007450:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007454:	2b0d      	cmp	r3, #13
 8007456:	d007      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007458:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800745c:	2b0e      	cmp	r3, #14
 800745e:	d003      	beq.n	8007468 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007460:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007464:	2b0f      	cmp	r3, #15
 8007466:	d103      	bne.n	8007470 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800746e:	e002      	b.n	8007476 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007470:	2300      	movs	r3, #0
 8007472:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007476:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800747e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007482:	461a      	mov	r2, r3
 8007484:	2100      	movs	r1, #0
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7fc f9c8 	bl	800381c <VL53L0X_GetLimitCheckEnable>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007492:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007496:	2b00      	cmp	r3, #0
 8007498:	d03c      	beq.n	8007514 <VL53L0X_get_pal_range_status+0x144>
 800749a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d138      	bne.n	8007514 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80074a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074a6:	461a      	mov	r2, r3
 80074a8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f7ff fd62 	bl	8006f74 <VL53L0X_calc_sigma_estimate>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 80074b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 80074be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f107 0210 	add.w	r2, r7, #16
 80074c6:	4619      	mov	r1, r3
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff fcac 	bl	8006e26 <VL53L0X_calc_dmax>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80074d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80074e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d113      	bne.n	8007514 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80074ec:	f107 0320 	add.w	r3, r7, #32
 80074f0:	461a      	mov	r2, r3
 80074f2:	2100      	movs	r1, #0
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7fc fa17 	bl	8003928 <VL53L0X_GetLimitCheckValue>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8007506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007508:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800750a:	429a      	cmp	r2, r3
 800750c:	d902      	bls.n	8007514 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007514:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007518:	2b00      	cmp	r3, #0
 800751a:	d109      	bne.n	8007530 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800751c:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8007520:	461a      	mov	r2, r3
 8007522:	2102      	movs	r1, #2
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7fc f979 	bl	800381c <VL53L0X_GetLimitCheckEnable>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007530:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007534:	2b00      	cmp	r3, #0
 8007536:	d044      	beq.n	80075c2 <VL53L0X_get_pal_range_status+0x1f2>
 8007538:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800753c:	2b00      	cmp	r3, #0
 800753e:	d140      	bne.n	80075c2 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007540:	f107 031c 	add.w	r3, r7, #28
 8007544:	461a      	mov	r2, r3
 8007546:	2102      	movs	r1, #2
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f7fc f9ed 	bl	8003928 <VL53L0X_GetLimitCheckValue>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007554:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007558:	2b00      	cmp	r3, #0
 800755a:	d107      	bne.n	800756c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800755c:	2201      	movs	r2, #1
 800755e:	21ff      	movs	r1, #255	@ 0xff
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 fcad 	bl	8007ec0 <VL53L0X_WrByte>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800756c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8007574:	f107 0316 	add.w	r3, r7, #22
 8007578:	461a      	mov	r2, r3
 800757a:	21b6      	movs	r1, #182	@ 0xb6
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fd7d 	bl	800807c <VL53L0X_RdWord>
 8007582:	4603      	mov	r3, r0
 8007584:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007588:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007590:	2200      	movs	r2, #0
 8007592:	21ff      	movs	r1, #255	@ 0xff
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fc93 	bl	8007ec0 <VL53L0X_WrByte>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80075a0:	8afb      	ldrh	r3, [r7, #22]
 80075a2:	025b      	lsls	r3, r3, #9
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075aa:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

		if ((SignalRefClipValue > 0) &&
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 80075b4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 80075b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d902      	bls.n	80075c2 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80075ce:	461a      	mov	r2, r3
 80075d0:	2103      	movs	r1, #3
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f7fc f922 	bl	800381c <VL53L0X_GetLimitCheckEnable>
 80075d8:	4603      	mov	r3, r0
 80075da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80075de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d023      	beq.n	800762e <VL53L0X_get_pal_range_status+0x25e>
 80075e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d11f      	bne.n	800762e <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f8:	e005      	b.n	8007606 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	021a      	lsls	r2, r3, #8
 80075fe:	893b      	ldrh	r3, [r7, #8]
 8007600:	fbb2 f3f3 	udiv	r3, r2, r3
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007606:	f107 0318 	add.w	r3, r7, #24
 800760a:	461a      	mov	r2, r3
 800760c:	2103      	movs	r1, #3
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7fc f98a 	bl	8003928 <VL53L0X_GetLimitCheckValue>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007620:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007624:	429a      	cmp	r2, r3
 8007626:	d202      	bcs.n	800762e <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800762e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d14a      	bne.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8007636:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800763a:	2b01      	cmp	r3, #1
 800763c:	d103      	bne.n	8007646 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800763e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007640:	22ff      	movs	r2, #255	@ 0xff
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	e042      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007646:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800764a:	2b01      	cmp	r3, #1
 800764c:	d007      	beq.n	800765e <VL53L0X_get_pal_range_status+0x28e>
 800764e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007652:	2b02      	cmp	r3, #2
 8007654:	d003      	beq.n	800765e <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8007656:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800765a:	2b03      	cmp	r3, #3
 800765c:	d103      	bne.n	8007666 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800765e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007660:	2205      	movs	r2, #5
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e032      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007666:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800766a:	2b06      	cmp	r3, #6
 800766c:	d003      	beq.n	8007676 <VL53L0X_get_pal_range_status+0x2a6>
 800766e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007672:	2b09      	cmp	r3, #9
 8007674:	d103      	bne.n	800767e <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007678:	2204      	movs	r2, #4
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	e026      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800767e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007682:	2b08      	cmp	r3, #8
 8007684:	d007      	beq.n	8007696 <VL53L0X_get_pal_range_status+0x2c6>
 8007686:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800768a:	2b0a      	cmp	r3, #10
 800768c:	d003      	beq.n	8007696 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800768e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007692:	2b01      	cmp	r3, #1
 8007694:	d103      	bne.n	800769e <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007698:	2203      	movs	r2, #3
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e016      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800769e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	d003      	beq.n	80076ae <VL53L0X_get_pal_range_status+0x2de>
 80076a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d103      	bne.n	80076b6 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80076ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b0:	2202      	movs	r2, #2
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e00a      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 80076b6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d103      	bne.n	80076c6 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80076be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c0:	2201      	movs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
 80076c4:	e002      	b.n	80076cc <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80076c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80076cc:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80076d0:	461a      	mov	r2, r3
 80076d2:	2101      	movs	r1, #1
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7fc f8a1 	bl	800381c <VL53L0X_GetLimitCheckEnable>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80076e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d14f      	bne.n	8007788 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80076e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <VL53L0X_get_pal_range_status+0x328>
 80076f0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d103      	bne.n	8007700 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80076fe:	e002      	b.n	8007706 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800770c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007710:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007714:	2b04      	cmp	r3, #4
 8007716:	d003      	beq.n	8007720 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007718:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007726:	e002      	b.n	800772e <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007734:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007738:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <VL53L0X_get_pal_range_status+0x378>
 8007740:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d103      	bne.n	8007750 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800774e:	e002      	b.n	8007756 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800775c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007760:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <VL53L0X_get_pal_range_status+0x3a0>
 8007768:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800776c:	2b01      	cmp	r3, #1
 800776e:	d103      	bne.n	8007778 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007776:	e002      	b.n	800777e <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007784:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007788:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800778c:	4618      	mov	r0, r3
 800778e:	3740      	adds	r7, #64	@ 0x40
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <VL53L0X_get_pal_error_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 8007794:	b4b0      	push	{r4, r5, r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 80077a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077a8:	3363      	adds	r3, #99	@ 0x63
 80077aa:	2b63      	cmp	r3, #99	@ 0x63
 80077ac:	f200 81b9 	bhi.w	8007b22 <VL53L0X_get_pal_error_string+0x38e>
 80077b0:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <VL53L0X_get_pal_error_string+0x24>)
 80077b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b6:	bf00      	nop
 80077b8:	08007b07 	.word	0x08007b07
 80077bc:	08007b23 	.word	0x08007b23
 80077c0:	08007b23 	.word	0x08007b23
 80077c4:	08007b23 	.word	0x08007b23
 80077c8:	08007b23 	.word	0x08007b23
 80077cc:	08007b23 	.word	0x08007b23
 80077d0:	08007b23 	.word	0x08007b23
 80077d4:	08007b23 	.word	0x08007b23
 80077d8:	08007b23 	.word	0x08007b23
 80077dc:	08007b23 	.word	0x08007b23
 80077e0:	08007b23 	.word	0x08007b23
 80077e4:	08007b23 	.word	0x08007b23
 80077e8:	08007b23 	.word	0x08007b23
 80077ec:	08007b23 	.word	0x08007b23
 80077f0:	08007b23 	.word	0x08007b23
 80077f4:	08007b23 	.word	0x08007b23
 80077f8:	08007b23 	.word	0x08007b23
 80077fc:	08007b23 	.word	0x08007b23
 8007800:	08007b23 	.word	0x08007b23
 8007804:	08007b23 	.word	0x08007b23
 8007808:	08007b23 	.word	0x08007b23
 800780c:	08007b23 	.word	0x08007b23
 8007810:	08007b23 	.word	0x08007b23
 8007814:	08007b23 	.word	0x08007b23
 8007818:	08007b23 	.word	0x08007b23
 800781c:	08007b23 	.word	0x08007b23
 8007820:	08007b23 	.word	0x08007b23
 8007824:	08007b23 	.word	0x08007b23
 8007828:	08007b23 	.word	0x08007b23
 800782c:	08007b23 	.word	0x08007b23
 8007830:	08007b23 	.word	0x08007b23
 8007834:	08007b23 	.word	0x08007b23
 8007838:	08007b23 	.word	0x08007b23
 800783c:	08007b23 	.word	0x08007b23
 8007840:	08007b23 	.word	0x08007b23
 8007844:	08007b23 	.word	0x08007b23
 8007848:	08007b23 	.word	0x08007b23
 800784c:	08007b23 	.word	0x08007b23
 8007850:	08007b23 	.word	0x08007b23
 8007854:	08007b23 	.word	0x08007b23
 8007858:	08007b23 	.word	0x08007b23
 800785c:	08007b23 	.word	0x08007b23
 8007860:	08007b23 	.word	0x08007b23
 8007864:	08007b23 	.word	0x08007b23
 8007868:	08007b23 	.word	0x08007b23
 800786c:	08007b23 	.word	0x08007b23
 8007870:	08007b23 	.word	0x08007b23
 8007874:	08007b23 	.word	0x08007b23
 8007878:	08007b23 	.word	0x08007b23
 800787c:	08007ae9 	.word	0x08007ae9
 8007880:	08007b23 	.word	0x08007b23
 8007884:	08007b23 	.word	0x08007b23
 8007888:	08007b23 	.word	0x08007b23
 800788c:	08007b23 	.word	0x08007b23
 8007890:	08007b23 	.word	0x08007b23
 8007894:	08007b23 	.word	0x08007b23
 8007898:	08007b23 	.word	0x08007b23
 800789c:	08007b23 	.word	0x08007b23
 80078a0:	08007b23 	.word	0x08007b23
 80078a4:	08007ac7 	.word	0x08007ac7
 80078a8:	08007b23 	.word	0x08007b23
 80078ac:	08007b23 	.word	0x08007b23
 80078b0:	08007b23 	.word	0x08007b23
 80078b4:	08007b23 	.word	0x08007b23
 80078b8:	08007b23 	.word	0x08007b23
 80078bc:	08007b23 	.word	0x08007b23
 80078c0:	08007b23 	.word	0x08007b23
 80078c4:	08007b23 	.word	0x08007b23
 80078c8:	08007b23 	.word	0x08007b23
 80078cc:	08007aab 	.word	0x08007aab
 80078d0:	08007b23 	.word	0x08007b23
 80078d4:	08007b23 	.word	0x08007b23
 80078d8:	08007b23 	.word	0x08007b23
 80078dc:	08007b23 	.word	0x08007b23
 80078e0:	08007b23 	.word	0x08007b23
 80078e4:	08007b23 	.word	0x08007b23
 80078e8:	08007b23 	.word	0x08007b23
 80078ec:	08007b23 	.word	0x08007b23
 80078f0:	08007b23 	.word	0x08007b23
 80078f4:	08007a91 	.word	0x08007a91
 80078f8:	08007b23 	.word	0x08007b23
 80078fc:	08007b23 	.word	0x08007b23
 8007900:	08007b23 	.word	0x08007b23
 8007904:	08007b23 	.word	0x08007b23
 8007908:	08007b23 	.word	0x08007b23
 800790c:	08007b23 	.word	0x08007b23
 8007910:	08007b23 	.word	0x08007b23
 8007914:	080079dd 	.word	0x080079dd
 8007918:	08007a73 	.word	0x08007a73
 800791c:	08007a5b 	.word	0x08007a5b
 8007920:	08007a43 	.word	0x08007a43
 8007924:	08007a25 	.word	0x08007a25
 8007928:	08007a0b 	.word	0x08007a0b
 800792c:	080079f9 	.word	0x080079f9
 8007930:	080079c5 	.word	0x080079c5
 8007934:	080079a7 	.word	0x080079a7
 8007938:	08007993 	.word	0x08007993
 800793c:	0800797b 	.word	0x0800797b
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007949 	.word	0x08007949
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	4980      	ldr	r1, [pc, #512]	@ (8007b4c <VL53L0X_get_pal_error_string+0x3b8>)
 800794c:	461a      	mov	r2, r3
 800794e:	460b      	mov	r3, r1
 8007950:	cb03      	ldmia	r3!, {r0, r1}
 8007952:	6010      	str	r0, [r2, #0]
 8007954:	6051      	str	r1, [r2, #4]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800795a:	e0f0      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	4a7c      	ldr	r2, [pc, #496]	@ (8007b50 <VL53L0X_get_pal_error_string+0x3bc>)
 8007960:	461d      	mov	r5, r3
 8007962:	4614      	mov	r4, r2
 8007964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007966:	6028      	str	r0, [r5, #0]
 8007968:	6069      	str	r1, [r5, #4]
 800796a:	60aa      	str	r2, [r5, #8]
 800796c:	60eb      	str	r3, [r5, #12]
 800796e:	cc03      	ldmia	r4!, {r0, r1}
 8007970:	6128      	str	r0, [r5, #16]
 8007972:	6169      	str	r1, [r5, #20]
 8007974:	8823      	ldrh	r3, [r4, #0]
 8007976:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 8007978:	e0e1      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	4a75      	ldr	r2, [pc, #468]	@ (8007b54 <VL53L0X_get_pal_error_string+0x3c0>)
 800797e:	461d      	mov	r5, r3
 8007980:	4614      	mov	r4, r2
 8007982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007984:	6028      	str	r0, [r5, #0]
 8007986:	6069      	str	r1, [r5, #4]
 8007988:	60aa      	str	r2, [r5, #8]
 800798a:	60eb      	str	r3, [r5, #12]
 800798c:	8823      	ldrh	r3, [r4, #0]
 800798e:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 8007990:	e0d5      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	4a70      	ldr	r2, [pc, #448]	@ (8007b58 <VL53L0X_get_pal_error_string+0x3c4>)
 8007996:	461c      	mov	r4, r3
 8007998:	4615      	mov	r5, r2
 800799a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800799c:	6020      	str	r0, [r4, #0]
 800799e:	6061      	str	r1, [r4, #4]
 80079a0:	60a2      	str	r2, [r4, #8]
 80079a2:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 80079a4:	e0cb      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	4a6c      	ldr	r2, [pc, #432]	@ (8007b5c <VL53L0X_get_pal_error_string+0x3c8>)
 80079aa:	461d      	mov	r5, r3
 80079ac:	4614      	mov	r4, r2
 80079ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079b0:	6028      	str	r0, [r5, #0]
 80079b2:	6069      	str	r1, [r5, #4]
 80079b4:	60aa      	str	r2, [r5, #8]
 80079b6:	60eb      	str	r3, [r5, #12]
 80079b8:	cc03      	ldmia	r4!, {r0, r1}
 80079ba:	6128      	str	r0, [r5, #16]
 80079bc:	6169      	str	r1, [r5, #20]
 80079be:	7823      	ldrb	r3, [r4, #0]
 80079c0:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 80079c2:	e0bc      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	4a66      	ldr	r2, [pc, #408]	@ (8007b60 <VL53L0X_get_pal_error_string+0x3cc>)
 80079c8:	461d      	mov	r5, r3
 80079ca:	4614      	mov	r4, r2
 80079cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079ce:	6028      	str	r0, [r5, #0]
 80079d0:	6069      	str	r1, [r5, #4]
 80079d2:	60aa      	str	r2, [r5, #8]
 80079d4:	60eb      	str	r3, [r5, #12]
 80079d6:	6820      	ldr	r0, [r4, #0]
 80079d8:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 80079da:	e0b0      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	4a61      	ldr	r2, [pc, #388]	@ (8007b64 <VL53L0X_get_pal_error_string+0x3d0>)
 80079e0:	461d      	mov	r5, r3
 80079e2:	4614      	mov	r4, r2
 80079e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079e6:	6028      	str	r0, [r5, #0]
 80079e8:	6069      	str	r1, [r5, #4]
 80079ea:	60aa      	str	r2, [r5, #8]
 80079ec:	60eb      	str	r3, [r5, #12]
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	6128      	str	r0, [r5, #16]
 80079f2:	88a3      	ldrh	r3, [r4, #4]
 80079f4:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 80079f6:	e0a2      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	4a5b      	ldr	r2, [pc, #364]	@ (8007b68 <VL53L0X_get_pal_error_string+0x3d4>)
 80079fc:	461c      	mov	r4, r3
 80079fe:	4613      	mov	r3, r2
 8007a00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a02:	6020      	str	r0, [r4, #0]
 8007a04:	6061      	str	r1, [r4, #4]
 8007a06:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 8007a08:	e099      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	4a57      	ldr	r2, [pc, #348]	@ (8007b6c <VL53L0X_get_pal_error_string+0x3d8>)
 8007a0e:	461c      	mov	r4, r3
 8007a10:	4613      	mov	r3, r2
 8007a12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a14:	6020      	str	r0, [r4, #0]
 8007a16:	6061      	str	r1, [r4, #4]
 8007a18:	60a2      	str	r2, [r4, #8]
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	789b      	ldrb	r3, [r3, #2]
 8007a1e:	81a2      	strh	r2, [r4, #12]
 8007a20:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 8007a22:	e08c      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	4a52      	ldr	r2, [pc, #328]	@ (8007b70 <VL53L0X_get_pal_error_string+0x3dc>)
 8007a28:	461d      	mov	r5, r3
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a2e:	6028      	str	r0, [r5, #0]
 8007a30:	6069      	str	r1, [r5, #4]
 8007a32:	60aa      	str	r2, [r5, #8]
 8007a34:	60eb      	str	r3, [r5, #12]
 8007a36:	cc03      	ldmia	r4!, {r0, r1}
 8007a38:	6128      	str	r0, [r5, #16]
 8007a3a:	6169      	str	r1, [r5, #20]
 8007a3c:	7823      	ldrb	r3, [r4, #0]
 8007a3e:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 8007a40:	e07d      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	4a4b      	ldr	r2, [pc, #300]	@ (8007b74 <VL53L0X_get_pal_error_string+0x3e0>)
 8007a46:	461d      	mov	r5, r3
 8007a48:	4614      	mov	r4, r2
 8007a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a4c:	6028      	str	r0, [r5, #0]
 8007a4e:	6069      	str	r1, [r5, #4]
 8007a50:	60aa      	str	r2, [r5, #8]
 8007a52:	60eb      	str	r3, [r5, #12]
 8007a54:	7823      	ldrb	r3, [r4, #0]
 8007a56:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 8007a58:	e071      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	4a46      	ldr	r2, [pc, #280]	@ (8007b78 <VL53L0X_get_pal_error_string+0x3e4>)
 8007a5e:	461d      	mov	r5, r3
 8007a60:	4614      	mov	r4, r2
 8007a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a64:	6028      	str	r0, [r5, #0]
 8007a66:	6069      	str	r1, [r5, #4]
 8007a68:	60aa      	str	r2, [r5, #8]
 8007a6a:	60eb      	str	r3, [r5, #12]
 8007a6c:	8823      	ldrh	r3, [r4, #0]
 8007a6e:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 8007a70:	e065      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	4a41      	ldr	r2, [pc, #260]	@ (8007b7c <VL53L0X_get_pal_error_string+0x3e8>)
 8007a76:	461d      	mov	r5, r3
 8007a78:	4614      	mov	r4, r2
 8007a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a7c:	6028      	str	r0, [r5, #0]
 8007a7e:	6069      	str	r1, [r5, #4]
 8007a80:	60aa      	str	r2, [r5, #8]
 8007a82:	60eb      	str	r3, [r5, #12]
 8007a84:	cc03      	ldmia	r4!, {r0, r1}
 8007a86:	6128      	str	r0, [r5, #16]
 8007a88:	6169      	str	r1, [r5, #20]
 8007a8a:	7823      	ldrb	r3, [r4, #0]
 8007a8c:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 8007a8e:	e056      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	4a3b      	ldr	r2, [pc, #236]	@ (8007b80 <VL53L0X_get_pal_error_string+0x3ec>)
 8007a94:	461d      	mov	r5, r3
 8007a96:	4614      	mov	r4, r2
 8007a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a9a:	6028      	str	r0, [r5, #0]
 8007a9c:	6069      	str	r1, [r5, #4]
 8007a9e:	60aa      	str	r2, [r5, #8]
 8007aa0:	60eb      	str	r3, [r5, #12]
 8007aa2:	cc03      	ldmia	r4!, {r0, r1}
 8007aa4:	6128      	str	r0, [r5, #16]
 8007aa6:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 8007aa8:	e049      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	4a35      	ldr	r2, [pc, #212]	@ (8007b84 <VL53L0X_get_pal_error_string+0x3f0>)
 8007aae:	461d      	mov	r5, r3
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ab4:	6028      	str	r0, [r5, #0]
 8007ab6:	6069      	str	r1, [r5, #4]
 8007ab8:	60aa      	str	r2, [r5, #8]
 8007aba:	60eb      	str	r3, [r5, #12]
 8007abc:	6820      	ldr	r0, [r4, #0]
 8007abe:	6128      	str	r0, [r5, #16]
 8007ac0:	88a3      	ldrh	r3, [r4, #4]
 8007ac2:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 8007ac4:	e03b      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8007b88 <VL53L0X_get_pal_error_string+0x3f4>)
 8007aca:	461c      	mov	r4, r3
 8007acc:	4615      	mov	r5, r2
 8007ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ad0:	6020      	str	r0, [r4, #0]
 8007ad2:	6061      	str	r1, [r4, #4]
 8007ad4:	60a2      	str	r2, [r4, #8]
 8007ad6:	60e3      	str	r3, [r4, #12]
 8007ad8:	6828      	ldr	r0, [r5, #0]
 8007ada:	6120      	str	r0, [r4, #16]
 8007adc:	88ab      	ldrh	r3, [r5, #4]
 8007ade:	79aa      	ldrb	r2, [r5, #6]
 8007ae0:	82a3      	strh	r3, [r4, #20]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 8007ae6:	e02a      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	4a28      	ldr	r2, [pc, #160]	@ (8007b8c <VL53L0X_get_pal_error_string+0x3f8>)
 8007aec:	461d      	mov	r5, r3
 8007aee:	4614      	mov	r4, r2
 8007af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007af2:	6028      	str	r0, [r5, #0]
 8007af4:	6069      	str	r1, [r5, #4]
 8007af6:	60aa      	str	r2, [r5, #8]
 8007af8:	60eb      	str	r3, [r5, #12]
 8007afa:	cc03      	ldmia	r4!, {r0, r1}
 8007afc:	6128      	str	r0, [r5, #16]
 8007afe:	6169      	str	r1, [r5, #20]
 8007b00:	8823      	ldrh	r3, [r4, #0]
 8007b02:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 8007b04:	e01b      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	4a21      	ldr	r2, [pc, #132]	@ (8007b90 <VL53L0X_get_pal_error_string+0x3fc>)
 8007b0a:	461d      	mov	r5, r3
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b10:	6028      	str	r0, [r5, #0]
 8007b12:	6069      	str	r1, [r5, #4]
 8007b14:	60aa      	str	r2, [r5, #8]
 8007b16:	60eb      	str	r3, [r5, #12]
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	6128      	str	r0, [r5, #16]
 8007b1c:	88a3      	ldrh	r3, [r4, #4]
 8007b1e:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 8007b20:	e00d      	b.n	8007b3e <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	4a1b      	ldr	r2, [pc, #108]	@ (8007b94 <VL53L0X_get_pal_error_string+0x400>)
 8007b26:	461d      	mov	r5, r3
 8007b28:	4614      	mov	r4, r2
 8007b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b2c:	6028      	str	r0, [r5, #0]
 8007b2e:	6069      	str	r1, [r5, #4]
 8007b30:	60aa      	str	r2, [r5, #8]
 8007b32:	60eb      	str	r3, [r5, #12]
 8007b34:	8823      	ldrh	r3, [r4, #0]
 8007b36:	78a2      	ldrb	r2, [r4, #2]
 8007b38:	822b      	strh	r3, [r5, #16]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bcb0      	pop	{r4, r5, r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	080102ec 	.word	0x080102ec
 8007b50:	080102f8 	.word	0x080102f8
 8007b54:	08010314 	.word	0x08010314
 8007b58:	08010328 	.word	0x08010328
 8007b5c:	08010338 	.word	0x08010338
 8007b60:	08010354 	.word	0x08010354
 8007b64:	08010368 	.word	0x08010368
 8007b68:	08010380 	.word	0x08010380
 8007b6c:	0801038c 	.word	0x0801038c
 8007b70:	0801039c 	.word	0x0801039c
 8007b74:	080103b8 	.word	0x080103b8
 8007b78:	080103cc 	.word	0x080103cc
 8007b7c:	080103e0 	.word	0x080103e0
 8007b80:	080103fc 	.word	0x080103fc
 8007b84:	08010414 	.word	0x08010414
 8007b88:	0801042c 	.word	0x0801042c
 8007b8c:	08010444 	.word	0x08010444
 8007b90:	08010460 	.word	0x08010460
 8007b94:	08010288 	.word	0x08010288

08007b98 <cont_lidar_init>:
}

// i delay inseriti sono stati presi dal datasheet del sensore per garantire un corretto sturt-up del dispositivo

void cont_lidar_init(uint8_t dir, uint32_t ts)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]

	  Dev->I2cHandle = &hi2c1;// i2c port to be used
 8007ba8:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a47      	ldr	r2, [pc, #284]	@ (8007ccc <cont_lidar_init+0x134>)
 8007bae:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	  Dev->I2cDevAddr = dir;
 8007bb2:	4b45      	ldr	r3, [pc, #276]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	79fa      	ldrb	r2, [r7, #7]
 8007bb8:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
      Dev->comms_type=1;
 8007bbc:	4b42      	ldr	r3, [pc, #264]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
      Dev->comms_speed_khz=100;//  i2c a 400khz prima era 400  variato a 100
 8007bc6:	4b40      	ldr	r3, [pc, #256]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2264      	movs	r2, #100	@ 0x64
 8007bcc:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186



      //Status = VL53L0X_WaitDeviceBooted( Dev );
      Status = VL53L0X_DataInit( Dev );
 8007bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fa ff29 	bl	8002a2c <VL53L0X_DataInit>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_StaticInit( Dev );
 8007bde:	4b3a      	ldr	r3, [pc, #232]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fb f8a8 	bl	8002d38 <VL53L0X_StaticInit>
 8007be8:	4603      	mov	r3, r0
 8007bea:	73fb      	strb	r3, [r7, #15]


      print_pal_error(Status);
 8007bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 f8ab 	bl	8007d4c <print_pal_error>

      HAL_Delay(100);
 8007bf6:	2064      	movs	r0, #100	@ 0x64
 8007bf8:	f000 fb34 	bl	8008264 <HAL_Delay>

      Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8007bfc:	4b32      	ldr	r3, [pc, #200]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a33      	ldr	r2, [pc, #204]	@ (8007cd0 <cont_lidar_init+0x138>)
 8007c02:	4934      	ldr	r1, [pc, #208]	@ (8007cd4 <cont_lidar_init+0x13c>)
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fb ff83 	bl	8003b10 <VL53L0X_PerformRefCalibration>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(12); // delay preso dal datasheet +20%
 8007c0e:	200c      	movs	r0, #12
 8007c10:	f000 fb28 	bl	8008264 <HAL_Delay>
      Status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8007c14:	4b2c      	ldr	r3, [pc, #176]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a2f      	ldr	r2, [pc, #188]	@ (8007cd8 <cont_lidar_init+0x140>)
 8007c1a:	4930      	ldr	r1, [pc, #192]	@ (8007cdc <cont_lidar_init+0x144>)
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fc fc85 	bl	800452c <VL53L0X_PerformRefSpadManagement>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]

      HAL_Delay(48);
 8007c26:	2030      	movs	r0, #48	@ 0x30
 8007c28:	f000 fb1c 	bl	8008264 <HAL_Delay>

      print_pal_error(Status);
 8007c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f88b 	bl	8007d4c <print_pal_error>



      Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8007c36:	4b24      	ldr	r3, [pc, #144]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2103      	movs	r1, #3
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fb fab3 	bl	80031a8 <VL53L0X_SetDeviceMode>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, 25);//20
 8007c46:	4b20      	ldr	r3, [pc, #128]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2119      	movs	r1, #25
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fb fca9 	bl	80035a4 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000 ); //   33000 200000
 8007c56:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fb fb00 	bl	8003264 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]

      print_pal_error(Status);
 8007c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 f86d 	bl	8007d4c <print_pal_error>

      Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8007c72:	4b15      	ldr	r3, [pc, #84]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2212      	movs	r2, #18
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fb fb18 	bl	80032b0 <VL53L0X_SetVcselPulsePeriod>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8007c84:	4b10      	ldr	r3, [pc, #64]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	220e      	movs	r2, #14
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fb fb0f 	bl	80032b0 <VL53L0X_SetVcselPulsePeriod>
 8007c92:	4603      	mov	r3, r0
 8007c94:	73fb      	strb	r3, [r7, #15]


      print_pal_error(Status);
 8007c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f856 	bl	8007d4c <print_pal_error>


      Status= VL53L0X_StartMeasurement( Dev);
 8007ca0:	4b09      	ldr	r3, [pc, #36]	@ (8007cc8 <cont_lidar_init+0x130>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fc f83b 	bl	8003d20 <VL53L0X_StartMeasurement>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73fb      	strb	r3, [r7, #15]

      print_pal_error(Status);
 8007cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f84a 	bl	8007d4c <print_pal_error>


      HAL_Delay(100);
 8007cb8:	2064      	movs	r0, #100	@ 0x64
 8007cba:	f000 fad3 	bl	8008264 <HAL_Delay>
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	200002cc 	.word	0x200002cc
 8007ccc:	20000cf8 	.word	0x20000cf8
 8007cd0:	200010c6 	.word	0x200010c6
 8007cd4:	200010c5 	.word	0x200010c5
 8007cd8:	200010c4 	.word	0x200010c4
 8007cdc:	200010c0 	.word	0x200010c0

08007ce0 <startMeasurement>:
{
	VL53L0X_ClearInterruptMask(DIR_S,1);
}

void startMeasurement()
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
	 VL53L0X_StartMeasurement( Dev);
 8007ce4:	4b03      	ldr	r3, [pc, #12]	@ (8007cf4 <startMeasurement+0x14>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fc f819 	bl	8003d20 <VL53L0X_StartMeasurement>



}
 8007cee:	bf00      	nop
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200002cc 	.word	0x200002cc

08007cf8 <getRangeData>:
	 HAL_Delay(100);

}


uint16_t getRangeData(){
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0

	uint16_t lidarmill=0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	80fb      	strh	r3, [r7, #6]


		Dev->I2cDevAddr = DIR_S;
 8007d02:	4b10      	ldr	r3, [pc, #64]	@ (8007d44 <getRangeData+0x4c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2252      	movs	r2, #82	@ 0x52
 8007d08:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8007d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <getRangeData+0x4c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	490d      	ldr	r1, [pc, #52]	@ (8007d48 <getRangeData+0x50>)
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc f906 	bl	8003f24 <VL53L0X_GetRangingMeasurementData>
	    lidarmill=RangingData.RangeMilliMeter;
 8007d18:	4b0b      	ldr	r3, [pc, #44]	@ (8007d48 <getRangeData+0x50>)
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	80fb      	strh	r3, [r7, #6]
	   if (lidarmill>lidar_max_mm) lidarmill=lidar_max_mm;
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8007d24:	d902      	bls.n	8007d2c <getRangeData+0x34>
 8007d26:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007d2a:	80fb      	strh	r3, [r7, #6]
	    VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <getRangeData+0x4c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2104      	movs	r1, #4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fc fb98 	bl	8004468 <VL53L0X_ClearInterruptMask>

	 	return(lidarmill);
 8007d38:	88fb      	ldrh	r3, [r7, #6]


}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	200002cc 	.word	0x200002cc
 8007d48:	20000f1c 	.word	0x20000f1c

08007d4c <print_pal_error>:


void print_pal_error(VL53L0X_Error Status){
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	@ 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	4603      	mov	r3, r0
 8007d54:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 8007d56:	f107 0208 	add.w	r2, r7, #8
 8007d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fa fe3a 	bl	80029da <VL53L0X_GetPalErrorString>
    printf("API Status: %i : %s\n", Status, buf);
 8007d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6a:	f107 0208 	add.w	r2, r7, #8
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4803      	ldr	r0, [pc, #12]	@ (8007d80 <print_pal_error+0x34>)
 8007d72:	f005 fc81 	bl	800d678 <iprintf>
}
 8007d76:	bf00      	nop
 8007d78:	3728      	adds	r7, #40	@ 0x28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	08010594 	.word	0x08010594

08007d84 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3332      	adds	r3, #50	@ 0x32
 8007d94:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007da2:	4619      	mov	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	4613      	mov	r3, r2
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	f000 fe88 	bl	8008ac4 <HAL_I2C_Master_Transmit>
 8007db4:	4603      	mov	r3, r0
 8007db6:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007db8:	693b      	ldr	r3, [r7, #16]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b088      	sub	sp, #32
 8007dc6:	af02      	add	r7, sp, #8
 8007dc8:	60f8      	str	r0, [r7, #12]
 8007dca:	60b9      	str	r1, [r7, #8]
 8007dcc:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3332      	adds	r3, #50	@ 0x32
 8007dd2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	4619      	mov	r1, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	f000 ff64 	bl	8008cc0 <HAL_I2C_Master_Receive>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007dfc:	693b      	ldr	r3, [r7, #16]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	460b      	mov	r3, r1
 8007e16:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2bff      	cmp	r3, #255	@ 0xff
 8007e20:	d902      	bls.n	8007e28 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007e22:	f06f 0303 	mvn.w	r3, #3
 8007e26:	e016      	b.n	8007e56 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007e28:	4a0d      	ldr	r2, [pc, #52]	@ (8007e60 <VL53L0X_WriteMulti+0x58>)
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	480c      	ldr	r0, [pc, #48]	@ (8007e64 <VL53L0X_WriteMulti+0x5c>)
 8007e34:	f005 fc7d 	bl	800d732 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4908      	ldr	r1, [pc, #32]	@ (8007e60 <VL53L0X_WriteMulti+0x58>)
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff ff9f 	bl	8007d84 <_I2CWrite>
 8007e46:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e4e:	23ec      	movs	r3, #236	@ 0xec
 8007e50:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	200010c8 	.word	0x200010c8
 8007e64:	200010c9 	.word	0x200010c9

08007e68 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	460b      	mov	r3, r1
 8007e76:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007e7c:	f107 030b 	add.w	r3, r7, #11
 8007e80:	2201      	movs	r2, #1
 8007e82:	4619      	mov	r1, r3
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f7ff ff7d 	bl	8007d84 <_I2CWrite>
 8007e8a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e92:	23ec      	movs	r3, #236	@ 0xec
 8007e94:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007e96:	e00c      	b.n	8007eb2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7ff ff90 	bl	8007dc2 <_I2CRead>
 8007ea2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007eaa:	23ec      	movs	r3, #236	@ 0xec
 8007eac:	75fb      	strb	r3, [r7, #23]
 8007eae:	e000      	b.n	8007eb2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007eb0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8007f04 <VL53L0X_WrByte+0x44>)
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8007eda:	4a0a      	ldr	r2, [pc, #40]	@ (8007f04 <VL53L0X_WrByte+0x44>)
 8007edc:	78bb      	ldrb	r3, [r7, #2]
 8007ede:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	4908      	ldr	r1, [pc, #32]	@ (8007f04 <VL53L0X_WrByte+0x44>)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7ff ff4d 	bl	8007d84 <_I2CWrite>
 8007eea:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ef2:	23ec      	movs	r3, #236	@ 0xec
 8007ef4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200010c8 	.word	0x200010c8

08007f08 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
 8007f14:	4613      	mov	r3, r2
 8007f16:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8007f58 <VL53L0X_WrWord+0x50>)
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007f22:	883b      	ldrh	r3, [r7, #0]
 8007f24:	0a1b      	lsrs	r3, r3, #8
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f58 <VL53L0X_WrWord+0x50>)
 8007f2c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007f2e:	883b      	ldrh	r3, [r7, #0]
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	4b09      	ldr	r3, [pc, #36]	@ (8007f58 <VL53L0X_WrWord+0x50>)
 8007f34:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007f36:	2203      	movs	r2, #3
 8007f38:	4907      	ldr	r1, [pc, #28]	@ (8007f58 <VL53L0X_WrWord+0x50>)
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ff22 	bl	8007d84 <_I2CWrite>
 8007f40:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f48:	23ec      	movs	r3, #236	@ 0xec
 8007f4a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200010c8 	.word	0x200010c8

08007f5c <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	460b      	mov	r3, r1
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8007f6e:	4a13      	ldr	r2, [pc, #76]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	0e1b      	lsrs	r3, r3, #24
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b10      	ldr	r3, [pc, #64]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f7c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	0c1b      	lsrs	r3, r3, #16
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f86:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	0a1b      	lsrs	r3, r3, #8
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f90:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f98:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8007f9a:	2205      	movs	r2, #5
 8007f9c:	4907      	ldr	r1, [pc, #28]	@ (8007fbc <VL53L0X_WrDWord+0x60>)
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fef0 	bl	8007d84 <_I2CWrite>
 8007fa4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007fac:	23ec      	movs	r3, #236	@ 0xec
 8007fae:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	200010c8 	.word	0x200010c8

08007fc0 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	70fb      	strb	r3, [r7, #3]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70bb      	strb	r3, [r7, #2]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007fde:	f107 020e 	add.w	r2, r7, #14
 8007fe2:	78fb      	ldrb	r3, [r7, #3]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f81e 	bl	8008028 <VL53L0X_RdByte>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d110      	bne.n	800801a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007ff8:	7bba      	ldrb	r2, [r7, #14]
 8007ffa:	78bb      	ldrb	r3, [r7, #2]
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	787b      	ldrb	r3, [r7, #1]
 8008002:	4313      	orrs	r3, r2
 8008004:	b2db      	uxtb	r3, r3
 8008006:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008008:	7bba      	ldrb	r2, [r7, #14]
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ff56 	bl	8007ec0 <VL53L0X_WrByte>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e000      	b.n	800801c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800801a:	bf00      	nop
done:
    return Status;
 800801c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	460b      	mov	r3, r1
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800803a:	f107 030b 	add.w	r3, r7, #11
 800803e:	2201      	movs	r2, #1
 8008040:	4619      	mov	r1, r3
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fe9e 	bl	8007d84 <_I2CWrite>
 8008048:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008050:	23ec      	movs	r3, #236	@ 0xec
 8008052:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008054:	e00c      	b.n	8008070 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008056:	2201      	movs	r2, #1
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f7ff feb1 	bl	8007dc2 <_I2CRead>
 8008060:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008068:	23ec      	movs	r3, #236	@ 0xec
 800806a:	75fb      	strb	r3, [r7, #23]
 800806c:	e000      	b.n	8008070 <VL53L0X_RdByte+0x48>
    }
done:
 800806e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	460b      	mov	r3, r1
 8008086:	607a      	str	r2, [r7, #4]
 8008088:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800808a:	2300      	movs	r3, #0
 800808c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800808e:	f107 030b 	add.w	r3, r7, #11
 8008092:	2201      	movs	r2, #1
 8008094:	4619      	mov	r1, r3
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff fe74 	bl	8007d84 <_I2CWrite>
 800809c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080a4:	23ec      	movs	r3, #236	@ 0xec
 80080a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080a8:	e015      	b.n	80080d6 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80080aa:	2202      	movs	r2, #2
 80080ac:	490d      	ldr	r1, [pc, #52]	@ (80080e4 <VL53L0X_RdWord+0x68>)
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fe87 	bl	8007dc2 <_I2CRead>
 80080b4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080bc:	23ec      	movs	r3, #236	@ 0xec
 80080be:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080c0:	e009      	b.n	80080d6 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80080c2:	4b08      	ldr	r3, [pc, #32]	@ (80080e4 <VL53L0X_RdWord+0x68>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	4a06      	ldr	r2, [pc, #24]	@ (80080e4 <VL53L0X_RdWord+0x68>)
 80080cc:	7852      	ldrb	r2, [r2, #1]
 80080ce:	4413      	add	r3, r2
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80080d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200010c8 	.word	0x200010c8

080080e8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	460b      	mov	r3, r1
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80080fa:	f107 030b 	add.w	r3, r7, #11
 80080fe:	2201      	movs	r2, #1
 8008100:	4619      	mov	r1, r3
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f7ff fe3e 	bl	8007d84 <_I2CWrite>
 8008108:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008110:	23ec      	movs	r3, #236	@ 0xec
 8008112:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008114:	e01b      	b.n	800814e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008116:	2204      	movs	r2, #4
 8008118:	4910      	ldr	r1, [pc, #64]	@ (800815c <VL53L0X_RdDWord+0x74>)
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7ff fe51 	bl	8007dc2 <_I2CRead>
 8008120:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008128:	23ec      	movs	r3, #236	@ 0xec
 800812a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800812c:	e00f      	b.n	800814e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800812e:	4b0b      	ldr	r3, [pc, #44]	@ (800815c <VL53L0X_RdDWord+0x74>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	061a      	lsls	r2, r3, #24
 8008134:	4b09      	ldr	r3, [pc, #36]	@ (800815c <VL53L0X_RdDWord+0x74>)
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	041b      	lsls	r3, r3, #16
 800813a:	441a      	add	r2, r3
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <VL53L0X_RdDWord+0x74>)
 800813e:	789b      	ldrb	r3, [r3, #2]
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	4413      	add	r3, r2
 8008144:	4a05      	ldr	r2, [pc, #20]	@ (800815c <VL53L0X_RdDWord+0x74>)
 8008146:	78d2      	ldrb	r2, [r2, #3]
 8008148:	441a      	add	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800814e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	200010c8 	.word	0x200010c8

08008160 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800816c:	2002      	movs	r0, #2
 800816e:	f000 f879 	bl	8008264 <HAL_Delay>
    return status;
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <HAL_Init+0x40>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a0d      	ldr	r2, [pc, #52]	@ (80081c0 <HAL_Init+0x40>)
 800818a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800818e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <HAL_Init+0x40>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a0a      	ldr	r2, [pc, #40]	@ (80081c0 <HAL_Init+0x40>)
 8008196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800819a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800819c:	4b08      	ldr	r3, [pc, #32]	@ (80081c0 <HAL_Init+0x40>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <HAL_Init+0x40>)
 80081a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081a8:	2003      	movs	r0, #3
 80081aa:	f000 f94f 	bl	800844c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081ae:	2000      	movs	r0, #0
 80081b0:	f000 f808 	bl	80081c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081b4:	f7fa f8d6 	bl	8002364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	40023c00 	.word	0x40023c00

080081c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081cc:	4b12      	ldr	r3, [pc, #72]	@ (8008218 <HAL_InitTick+0x54>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	4b12      	ldr	r3, [pc, #72]	@ (800821c <HAL_InitTick+0x58>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	4619      	mov	r1, r3
 80081d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081da:	fbb3 f3f1 	udiv	r3, r3, r1
 80081de:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 f967 	bl	80084b6 <HAL_SYSTICK_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e00e      	b.n	8008210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b0f      	cmp	r3, #15
 80081f6:	d80a      	bhi.n	800820e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081f8:	2200      	movs	r2, #0
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008200:	f000 f92f 	bl	8008462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008204:	4a06      	ldr	r2, [pc, #24]	@ (8008220 <HAL_InitTick+0x5c>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	e000      	b.n	8008210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	2000000c 	.word	0x2000000c
 800821c:	200002d4 	.word	0x200002d4
 8008220:	200002d0 	.word	0x200002d0

08008224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008228:	4b06      	ldr	r3, [pc, #24]	@ (8008244 <HAL_IncTick+0x20>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	461a      	mov	r2, r3
 800822e:	4b06      	ldr	r3, [pc, #24]	@ (8008248 <HAL_IncTick+0x24>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4413      	add	r3, r2
 8008234:	4a04      	ldr	r2, [pc, #16]	@ (8008248 <HAL_IncTick+0x24>)
 8008236:	6013      	str	r3, [r2, #0]
}
 8008238:	bf00      	nop
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	200002d4 	.word	0x200002d4
 8008248:	200011c8 	.word	0x200011c8

0800824c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return uwTick;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <HAL_GetTick+0x14>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	200011c8 	.word	0x200011c8

08008264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800826c:	f7ff ffee 	bl	800824c <HAL_GetTick>
 8008270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800827c:	d005      	beq.n	800828a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800827e:	4b0a      	ldr	r3, [pc, #40]	@ (80082a8 <HAL_Delay+0x44>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4413      	add	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800828a:	bf00      	nop
 800828c:	f7ff ffde 	bl	800824c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	429a      	cmp	r2, r3
 800829a:	d8f7      	bhi.n	800828c <HAL_Delay+0x28>
  {
  }
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200002d4 	.word	0x200002d4

080082ac <__NVIC_SetPriorityGrouping>:
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082bc:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <__NVIC_SetPriorityGrouping+0x44>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80082c8:	4013      	ands	r3, r2
 80082ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80082d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082de:	4a04      	ldr	r2, [pc, #16]	@ (80082f0 <__NVIC_SetPriorityGrouping+0x44>)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	60d3      	str	r3, [r2, #12]
}
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <__NVIC_GetPriorityGrouping>:
{
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082f8:	4b04      	ldr	r3, [pc, #16]	@ (800830c <__NVIC_GetPriorityGrouping+0x18>)
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	0a1b      	lsrs	r3, r3, #8
 80082fe:	f003 0307 	and.w	r3, r3, #7
}
 8008302:	4618      	mov	r0, r3
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	e000ed00 	.word	0xe000ed00

08008310 <__NVIC_EnableIRQ>:
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800831a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831e:	2b00      	cmp	r3, #0
 8008320:	db0b      	blt.n	800833a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	f003 021f 	and.w	r2, r3, #31
 8008328:	4907      	ldr	r1, [pc, #28]	@ (8008348 <__NVIC_EnableIRQ+0x38>)
 800832a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	2001      	movs	r0, #1
 8008332:	fa00 f202 	lsl.w	r2, r0, r2
 8008336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	e000e100 	.word	0xe000e100

0800834c <__NVIC_SetPriority>:
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835c:	2b00      	cmp	r3, #0
 800835e:	db0a      	blt.n	8008376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	490c      	ldr	r1, [pc, #48]	@ (8008398 <__NVIC_SetPriority+0x4c>)
 8008366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800836a:	0112      	lsls	r2, r2, #4
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	440b      	add	r3, r1
 8008370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008374:	e00a      	b.n	800838c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4908      	ldr	r1, [pc, #32]	@ (800839c <__NVIC_SetPriority+0x50>)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	3b04      	subs	r3, #4
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	440b      	add	r3, r1
 800838a:	761a      	strb	r2, [r3, #24]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000e100 	.word	0xe000e100
 800839c:	e000ed00 	.word	0xe000ed00

080083a0 <NVIC_EncodePriority>:
{
 80083a0:	b480      	push	{r7}
 80083a2:	b089      	sub	sp, #36	@ 0x24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	f1c3 0307 	rsb	r3, r3, #7
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	bf28      	it	cs
 80083be:	2304      	movcs	r3, #4
 80083c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	3304      	adds	r3, #4
 80083c6:	2b06      	cmp	r3, #6
 80083c8:	d902      	bls.n	80083d0 <NVIC_EncodePriority+0x30>
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3b03      	subs	r3, #3
 80083ce:	e000      	b.n	80083d2 <NVIC_EncodePriority+0x32>
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	fa02 f303 	lsl.w	r3, r2, r3
 80083de:	43da      	mvns	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	401a      	ands	r2, r3
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	fa01 f303 	lsl.w	r3, r1, r3
 80083f2:	43d9      	mvns	r1, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083f8:	4313      	orrs	r3, r2
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3724      	adds	r7, #36	@ 0x24
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
	...

08008408 <SysTick_Config>:
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3b01      	subs	r3, #1
 8008414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008418:	d301      	bcc.n	800841e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800841a:	2301      	movs	r3, #1
 800841c:	e00f      	b.n	800843e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800841e:	4a0a      	ldr	r2, [pc, #40]	@ (8008448 <SysTick_Config+0x40>)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3b01      	subs	r3, #1
 8008424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008426:	210f      	movs	r1, #15
 8008428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800842c:	f7ff ff8e 	bl	800834c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <SysTick_Config+0x40>)
 8008432:	2200      	movs	r2, #0
 8008434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008436:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <SysTick_Config+0x40>)
 8008438:	2207      	movs	r2, #7
 800843a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	e000e010 	.word	0xe000e010

0800844c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff ff29 	bl	80082ac <__NVIC_SetPriorityGrouping>
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008462:	b580      	push	{r7, lr}
 8008464:	b086      	sub	sp, #24
 8008466:	af00      	add	r7, sp, #0
 8008468:	4603      	mov	r3, r0
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008474:	f7ff ff3e 	bl	80082f4 <__NVIC_GetPriorityGrouping>
 8008478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	6978      	ldr	r0, [r7, #20]
 8008480:	f7ff ff8e 	bl	80083a0 <NVIC_EncodePriority>
 8008484:	4602      	mov	r2, r0
 8008486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff ff5d 	bl	800834c <__NVIC_SetPriority>
}
 8008492:	bf00      	nop
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b082      	sub	sp, #8
 800849e:	af00      	add	r7, sp, #0
 80084a0:	4603      	mov	r3, r0
 80084a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff ff31 	bl	8008310 <__NVIC_EnableIRQ>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff ffa2 	bl	8008408 <SysTick_Config>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	@ 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084de:	2300      	movs	r3, #0
 80084e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e159      	b.n	80087a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084ec:	2201      	movs	r2, #1
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	4013      	ands	r3, r2
 80084fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	429a      	cmp	r2, r3
 8008506:	f040 8148 	bne.w	800879a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d005      	beq.n	8008522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800851e:	2b02      	cmp	r3, #2
 8008520:	d130      	bne.n	8008584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	2203      	movs	r2, #3
 800852e:	fa02 f303 	lsl.w	r3, r2, r3
 8008532:	43db      	mvns	r3, r3
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	4013      	ands	r3, r2
 8008538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	fa02 f303 	lsl.w	r3, r2, r3
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	4313      	orrs	r3, r2
 800854a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008558:	2201      	movs	r2, #1
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	4013      	ands	r3, r2
 8008566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	f003 0201 	and.w	r2, r3, #1
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	4313      	orrs	r3, r2
 800857c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d017      	beq.n	80085c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	2203      	movs	r2, #3
 800859c:	fa02 f303 	lsl.w	r3, r2, r3
 80085a0:	43db      	mvns	r3, r3
 80085a2:	69ba      	ldr	r2, [r7, #24]
 80085a4:	4013      	ands	r3, r2
 80085a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	689a      	ldr	r2, [r3, #8]
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	fa02 f303 	lsl.w	r3, r2, r3
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d123      	bne.n	8008614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	08da      	lsrs	r2, r3, #3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3208      	adds	r2, #8
 80085d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0307 	and.w	r3, r3, #7
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	220f      	movs	r2, #15
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	43db      	mvns	r3, r3
 80085ea:	69ba      	ldr	r2, [r7, #24]
 80085ec:	4013      	ands	r3, r2
 80085ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691a      	ldr	r2, [r3, #16]
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	4313      	orrs	r3, r2
 8008604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	08da      	lsrs	r2, r3, #3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3208      	adds	r2, #8
 800860e:	69b9      	ldr	r1, [r7, #24]
 8008610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	2203      	movs	r2, #3
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f003 0203 	and.w	r2, r3, #3
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a2 	beq.w	800879a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008656:	2300      	movs	r3, #0
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	4b57      	ldr	r3, [pc, #348]	@ (80087b8 <HAL_GPIO_Init+0x2e8>)
 800865c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865e:	4a56      	ldr	r2, [pc, #344]	@ (80087b8 <HAL_GPIO_Init+0x2e8>)
 8008660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008664:	6453      	str	r3, [r2, #68]	@ 0x44
 8008666:	4b54      	ldr	r3, [pc, #336]	@ (80087b8 <HAL_GPIO_Init+0x2e8>)
 8008668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008672:	4a52      	ldr	r2, [pc, #328]	@ (80087bc <HAL_GPIO_Init+0x2ec>)
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	089b      	lsrs	r3, r3, #2
 8008678:	3302      	adds	r3, #2
 800867a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800867e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	220f      	movs	r2, #15
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43db      	mvns	r3, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	4013      	ands	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a49      	ldr	r2, [pc, #292]	@ (80087c0 <HAL_GPIO_Init+0x2f0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d019      	beq.n	80086d2 <HAL_GPIO_Init+0x202>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a48      	ldr	r2, [pc, #288]	@ (80087c4 <HAL_GPIO_Init+0x2f4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <HAL_GPIO_Init+0x1fe>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a47      	ldr	r2, [pc, #284]	@ (80087c8 <HAL_GPIO_Init+0x2f8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00d      	beq.n	80086ca <HAL_GPIO_Init+0x1fa>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a46      	ldr	r2, [pc, #280]	@ (80087cc <HAL_GPIO_Init+0x2fc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d007      	beq.n	80086c6 <HAL_GPIO_Init+0x1f6>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a45      	ldr	r2, [pc, #276]	@ (80087d0 <HAL_GPIO_Init+0x300>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <HAL_GPIO_Init+0x1f2>
 80086be:	2304      	movs	r3, #4
 80086c0:	e008      	b.n	80086d4 <HAL_GPIO_Init+0x204>
 80086c2:	2307      	movs	r3, #7
 80086c4:	e006      	b.n	80086d4 <HAL_GPIO_Init+0x204>
 80086c6:	2303      	movs	r3, #3
 80086c8:	e004      	b.n	80086d4 <HAL_GPIO_Init+0x204>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e002      	b.n	80086d4 <HAL_GPIO_Init+0x204>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <HAL_GPIO_Init+0x204>
 80086d2:	2300      	movs	r3, #0
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	f002 0203 	and.w	r2, r2, #3
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	4093      	lsls	r3, r2
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086e4:	4935      	ldr	r1, [pc, #212]	@ (80087bc <HAL_GPIO_Init+0x2ec>)
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	089b      	lsrs	r3, r3, #2
 80086ea:	3302      	adds	r3, #2
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086f2:	4b38      	ldr	r3, [pc, #224]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	43db      	mvns	r3, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4013      	ands	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008716:	4a2f      	ldr	r2, [pc, #188]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800871c:	4b2d      	ldr	r3, [pc, #180]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	43db      	mvns	r3, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008740:	4a24      	ldr	r2, [pc, #144]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008746:	4b23      	ldr	r3, [pc, #140]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	43db      	mvns	r3, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800876a:	4a1a      	ldr	r2, [pc, #104]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008770:	4b18      	ldr	r3, [pc, #96]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	43db      	mvns	r3, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4013      	ands	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008794:	4a0f      	ldr	r2, [pc, #60]	@ (80087d4 <HAL_GPIO_Init+0x304>)
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	3301      	adds	r3, #1
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b0f      	cmp	r3, #15
 80087a4:	f67f aea2 	bls.w	80084ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	3724      	adds	r7, #36	@ 0x24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40013800 	.word	0x40013800
 80087c0:	40020000 	.word	0x40020000
 80087c4:	40020400 	.word	0x40020400
 80087c8:	40020800 	.word	0x40020800
 80087cc:	40020c00 	.word	0x40020c00
 80087d0:	40021000 	.word	0x40021000
 80087d4:	40013c00 	.word	0x40013c00

080087d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	460b      	mov	r3, r1
 80087e2:	807b      	strh	r3, [r7, #2]
 80087e4:	4613      	mov	r3, r2
 80087e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087e8:	787b      	ldrb	r3, [r7, #1]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ee:	887a      	ldrh	r2, [r7, #2]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087f4:	e003      	b.n	80087fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087f6:	887b      	ldrh	r3, [r7, #2]
 80087f8:	041a      	lsls	r2, r3, #16
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	619a      	str	r2, [r3, #24]
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
	...

0800880c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008816:	4b08      	ldr	r3, [pc, #32]	@ (8008838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008818:	695a      	ldr	r2, [r3, #20]
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	4013      	ands	r3, r2
 800881e:	2b00      	cmp	r3, #0
 8008820:	d006      	beq.n	8008830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008822:	4a05      	ldr	r2, [pc, #20]	@ (8008838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008828:	88fb      	ldrh	r3, [r7, #6]
 800882a:	4618      	mov	r0, r3
 800882c:	f7f8 fbe2 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40013c00 	.word	0x40013c00

0800883c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e12b      	b.n	8008aa6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	d106      	bne.n	8008868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7f9 fda6 	bl	80023b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2224      	movs	r2, #36	@ 0x24
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0201 	bic.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800888e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800889e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088a0:	f001 fc36 	bl	800a110 <HAL_RCC_GetPCLK1Freq>
 80088a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	4a81      	ldr	r2, [pc, #516]	@ (8008ab0 <HAL_I2C_Init+0x274>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d807      	bhi.n	80088c0 <HAL_I2C_Init+0x84>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4a80      	ldr	r2, [pc, #512]	@ (8008ab4 <HAL_I2C_Init+0x278>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bf94      	ite	ls
 80088b8:	2301      	movls	r3, #1
 80088ba:	2300      	movhi	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e006      	b.n	80088ce <HAL_I2C_Init+0x92>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a7d      	ldr	r2, [pc, #500]	@ (8008ab8 <HAL_I2C_Init+0x27c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	bf94      	ite	ls
 80088c8:	2301      	movls	r3, #1
 80088ca:	2300      	movhi	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0e7      	b.n	8008aa6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4a78      	ldr	r2, [pc, #480]	@ (8008abc <HAL_I2C_Init+0x280>)
 80088da:	fba2 2303 	umull	r2, r3, r2, r3
 80088de:	0c9b      	lsrs	r3, r3, #18
 80088e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	4a6a      	ldr	r2, [pc, #424]	@ (8008ab0 <HAL_I2C_Init+0x274>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d802      	bhi.n	8008910 <HAL_I2C_Init+0xd4>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3301      	adds	r3, #1
 800890e:	e009      	b.n	8008924 <HAL_I2C_Init+0xe8>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	4a69      	ldr	r2, [pc, #420]	@ (8008ac0 <HAL_I2C_Init+0x284>)
 800891c:	fba2 2303 	umull	r2, r3, r2, r3
 8008920:	099b      	lsrs	r3, r3, #6
 8008922:	3301      	adds	r3, #1
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6812      	ldr	r2, [r2, #0]
 8008928:	430b      	orrs	r3, r1
 800892a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008936:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	495c      	ldr	r1, [pc, #368]	@ (8008ab0 <HAL_I2C_Init+0x274>)
 8008940:	428b      	cmp	r3, r1
 8008942:	d819      	bhi.n	8008978 <HAL_I2C_Init+0x13c>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	1e59      	subs	r1, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008952:	1c59      	adds	r1, r3, #1
 8008954:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008958:	400b      	ands	r3, r1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <HAL_I2C_Init+0x138>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1e59      	subs	r1, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	fbb1 f3f3 	udiv	r3, r1, r3
 800896c:	3301      	adds	r3, #1
 800896e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008972:	e051      	b.n	8008a18 <HAL_I2C_Init+0x1dc>
 8008974:	2304      	movs	r3, #4
 8008976:	e04f      	b.n	8008a18 <HAL_I2C_Init+0x1dc>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d111      	bne.n	80089a4 <HAL_I2C_Init+0x168>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	1e58      	subs	r0, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6859      	ldr	r1, [r3, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	440b      	add	r3, r1
 800898e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008992:	3301      	adds	r3, #1
 8008994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008998:	2b00      	cmp	r3, #0
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e012      	b.n	80089ca <HAL_I2C_Init+0x18e>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	1e58      	subs	r0, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6859      	ldr	r1, [r3, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	0099      	lsls	r1, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ba:	3301      	adds	r3, #1
 80089bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <HAL_I2C_Init+0x196>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e022      	b.n	8008a18 <HAL_I2C_Init+0x1dc>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10e      	bne.n	80089f8 <HAL_I2C_Init+0x1bc>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1e58      	subs	r0, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6859      	ldr	r1, [r3, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	005b      	lsls	r3, r3, #1
 80089e6:	440b      	add	r3, r1
 80089e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ec:	3301      	adds	r3, #1
 80089ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f6:	e00f      	b.n	8008a18 <HAL_I2C_Init+0x1dc>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1e58      	subs	r0, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6859      	ldr	r1, [r3, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	0099      	lsls	r1, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	6809      	ldr	r1, [r1, #0]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	69da      	ldr	r2, [r3, #28]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008a46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6911      	ldr	r1, [r2, #16]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	68d2      	ldr	r2, [r2, #12]
 8008a52:	4311      	orrs	r1, r2
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	6812      	ldr	r2, [r2, #0]
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	000186a0 	.word	0x000186a0
 8008ab4:	001e847f 	.word	0x001e847f
 8008ab8:	003d08ff 	.word	0x003d08ff
 8008abc:	431bde83 	.word	0x431bde83
 8008ac0:	10624dd3 	.word	0x10624dd3

08008ac4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	817b      	strh	r3, [r7, #10]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ad8:	f7ff fbb8 	bl	800824c <HAL_GetTick>
 8008adc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	f040 80e0 	bne.w	8008cac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	2319      	movs	r3, #25
 8008af2:	2201      	movs	r2, #1
 8008af4:	4970      	ldr	r1, [pc, #448]	@ (8008cb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 fc64 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
 8008b04:	e0d3      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_I2C_Master_Transmit+0x50>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e0cc      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d007      	beq.n	8008b3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0201 	orr.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2221      	movs	r2, #33	@ 0x21
 8008b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2210      	movs	r2, #16
 8008b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	893a      	ldrh	r2, [r7, #8]
 8008b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a50      	ldr	r2, [pc, #320]	@ (8008cbc <HAL_I2C_Master_Transmit+0x1f8>)
 8008b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b7c:	8979      	ldrh	r1, [r7, #10]
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 face 	bl	8009124 <I2C_MasterRequestWrite>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e08d      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b92:	2300      	movs	r3, #0
 8008b94:	613b      	str	r3, [r7, #16]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	695b      	ldr	r3, [r3, #20]
 8008b9c:	613b      	str	r3, [r7, #16]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	613b      	str	r3, [r7, #16]
 8008ba6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008ba8:	e066      	b.n	8008c78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	6a39      	ldr	r1, [r7, #32]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 fd22 	bl	80095f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00d      	beq.n	8008bd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d107      	bne.n	8008bd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e06b      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bda:	781a      	ldrb	r2, [r3, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b04      	cmp	r3, #4
 8008c12:	d11b      	bne.n	8008c4c <HAL_I2C_Master_Transmit+0x188>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d017      	beq.n	8008c4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	6a39      	ldr	r1, [r7, #32]
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fd19 	bl	8009688 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00d      	beq.n	8008c78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d107      	bne.n	8008c74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e01a      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d194      	bne.n	8008baa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e000      	b.n	8008cae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cac:	2302      	movs	r3, #2
  }
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	00100002 	.word	0x00100002
 8008cbc:	ffff0000 	.word	0xffff0000

08008cc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	@ 0x30
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	460b      	mov	r3, r1
 8008cce:	817b      	strh	r3, [r7, #10]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cd4:	f7ff faba 	bl	800824c <HAL_GetTick>
 8008cd8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	f040 8217 	bne.w	8009116 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	2319      	movs	r3, #25
 8008cee:	2201      	movs	r2, #1
 8008cf0:	497c      	ldr	r1, [pc, #496]	@ (8008ee4 <HAL_I2C_Master_Receive+0x224>)
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fb66 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e20a      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_I2C_Master_Receive+0x50>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e203      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0301 	and.w	r3, r3, #1
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d007      	beq.n	8008d36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f042 0201 	orr.w	r2, r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2222      	movs	r2, #34	@ 0x22
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2210      	movs	r2, #16
 8008d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	893a      	ldrh	r2, [r7, #8]
 8008d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4a5c      	ldr	r2, [pc, #368]	@ (8008ee8 <HAL_I2C_Master_Receive+0x228>)
 8008d76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d78:	8979      	ldrh	r1, [r7, #10]
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fa52 	bl	8009228 <I2C_MasterRequestRead>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e1c4      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d113      	bne.n	8008dbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e198      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d11b      	bne.n	8008dfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695b      	ldr	r3, [r3, #20]
 8008de0:	61fb      	str	r3, [r7, #28]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e178      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d11b      	bne.n	8008e3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e26:	2300      	movs	r3, #0
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	61bb      	str	r3, [r7, #24]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	e158      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e64:	e144      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	f200 80f1 	bhi.w	8009052 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d123      	bne.n	8008ec0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fc4b 	bl	8009718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e145      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691a      	ldr	r2, [r3, #16]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008ebe:	e117      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d14e      	bne.n	8008f66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4906      	ldr	r1, [pc, #24]	@ (8008eec <HAL_I2C_Master_Receive+0x22c>)
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fa76 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d008      	beq.n	8008ef0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e11a      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
 8008ee2:	bf00      	nop
 8008ee4:	00100002 	.word	0x00100002
 8008ee8:	ffff0000 	.word	0xffff0000
 8008eec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f64:	e0c4      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	496c      	ldr	r1, [pc, #432]	@ (8009120 <HAL_I2C_Master_Receive+0x460>)
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fa27 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e0cb      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691a      	ldr	r2, [r3, #16]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9a:	b2d2      	uxtb	r2, r2
 8008f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4955      	ldr	r1, [pc, #340]	@ (8009120 <HAL_I2C_Master_Receive+0x460>)
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f9f9 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e09d      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	691a      	ldr	r2, [r3, #16]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009030:	1c5a      	adds	r2, r3, #1
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009046:	b29b      	uxth	r3, r3
 8009048:	3b01      	subs	r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009050:	e04e      	b.n	80090f0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009054:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fb5e 	bl	8009718 <I2C_WaitOnRXNEFlagUntilTimeout>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e058      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	691a      	ldr	r2, [r3, #16]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009070:	b2d2      	uxtb	r2, r2
 8009072:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	f003 0304 	and.w	r3, r3, #4
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d124      	bne.n	80090f0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d107      	bne.n	80090be <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	691a      	ldr	r2, [r3, #16]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c8:	b2d2      	uxtb	r2, r2
 80090ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090da:	3b01      	subs	r3, #1
 80090dc:	b29a      	uxth	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f aeb6 	bne.w	8008e66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	e000      	b.n	8009118 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009116:	2302      	movs	r3, #2
  }
}
 8009118:	4618      	mov	r0, r3
 800911a:	3728      	adds	r7, #40	@ 0x28
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	00010004 	.word	0x00010004

08009124 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af02      	add	r7, sp, #8
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	607a      	str	r2, [r7, #4]
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	460b      	mov	r3, r1
 8009132:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009138:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b08      	cmp	r3, #8
 800913e:	d006      	beq.n	800914e <I2C_MasterRequestWrite+0x2a>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d003      	beq.n	800914e <I2C_MasterRequestWrite+0x2a>
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800914c:	d108      	bne.n	8009160 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	e00b      	b.n	8009178 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009164:	2b12      	cmp	r3, #18
 8009166:	d107      	bne.n	8009178 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f91d 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00d      	beq.n	80091ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800919a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800919e:	d103      	bne.n	80091a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e035      	b.n	8009218 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091b4:	d108      	bne.n	80091c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091b6:	897b      	ldrh	r3, [r7, #10]
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091c4:	611a      	str	r2, [r3, #16]
 80091c6:	e01b      	b.n	8009200 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091c8:	897b      	ldrh	r3, [r7, #10]
 80091ca:	11db      	asrs	r3, r3, #7
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0306 	and.w	r3, r3, #6
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f063 030f 	orn	r3, r3, #15
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	490e      	ldr	r1, [pc, #56]	@ (8009220 <I2C_MasterRequestWrite+0xfc>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f966 	bl	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e010      	b.n	8009218 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091f6:	897b      	ldrh	r3, [r7, #10]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	4907      	ldr	r1, [pc, #28]	@ (8009224 <I2C_MasterRequestWrite+0x100>)
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f956 	bl	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	00010008 	.word	0x00010008
 8009224:	00010002 	.word	0x00010002

08009228 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af02      	add	r7, sp, #8
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	460b      	mov	r3, r1
 8009236:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800924c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2b08      	cmp	r3, #8
 8009252:	d006      	beq.n	8009262 <I2C_MasterRequestRead+0x3a>
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d003      	beq.n	8009262 <I2C_MasterRequestRead+0x3a>
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009260:	d108      	bne.n	8009274 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e00b      	b.n	800928c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009278:	2b11      	cmp	r3, #17
 800927a:	d107      	bne.n	800928c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800928a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f893 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00d      	beq.n	80092c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092b2:	d103      	bne.n	80092bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e079      	b.n	80093b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c8:	d108      	bne.n	80092dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092ca:	897b      	ldrh	r3, [r7, #10]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	f043 0301 	orr.w	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	611a      	str	r2, [r3, #16]
 80092da:	e05f      	b.n	800939c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092dc:	897b      	ldrh	r3, [r7, #10]
 80092de:	11db      	asrs	r3, r3, #7
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	f003 0306 	and.w	r3, r3, #6
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	f063 030f 	orn	r3, r3, #15
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4930      	ldr	r1, [pc, #192]	@ (80093bc <I2C_MasterRequestRead+0x194>)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f8dc 	bl	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e054      	b.n	80093b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800930a:	897b      	ldrh	r3, [r7, #10]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4929      	ldr	r1, [pc, #164]	@ (80093c0 <I2C_MasterRequestRead+0x198>)
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 f8cc 	bl	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e044      	b.n	80093b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800934e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f831 	bl	80093c4 <I2C_WaitOnFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00d      	beq.n	8009384 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009376:	d103      	bne.n	8009380 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800937e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e017      	b.n	80093b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009384:	897b      	ldrh	r3, [r7, #10]
 8009386:	11db      	asrs	r3, r3, #7
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 0306 	and.w	r3, r3, #6
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f063 030e 	orn	r3, r3, #14
 8009394:	b2da      	uxtb	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	4907      	ldr	r1, [pc, #28]	@ (80093c0 <I2C_MasterRequestRead+0x198>)
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f888 	bl	80094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3718      	adds	r7, #24
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	00010008 	.word	0x00010008
 80093c0:	00010002 	.word	0x00010002

080093c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	4613      	mov	r3, r2
 80093d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093d4:	e048      	b.n	8009468 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093dc:	d044      	beq.n	8009468 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093de:	f7fe ff35 	bl	800824c <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d302      	bcc.n	80093f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d139      	bne.n	8009468 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	0c1b      	lsrs	r3, r3, #16
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d10d      	bne.n	800941a <I2C_WaitOnFlagUntilTimeout+0x56>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	43da      	mvns	r2, r3
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4013      	ands	r3, r2
 800940a:	b29b      	uxth	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	461a      	mov	r2, r3
 8009418:	e00c      	b.n	8009434 <I2C_WaitOnFlagUntilTimeout+0x70>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	43da      	mvns	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	4013      	ands	r3, r2
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	bf0c      	ite	eq
 800942c:	2301      	moveq	r3, #1
 800942e:	2300      	movne	r3, #0
 8009430:	b2db      	uxtb	r3, r3
 8009432:	461a      	mov	r2, r3
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	429a      	cmp	r2, r3
 8009438:	d116      	bne.n	8009468 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009454:	f043 0220 	orr.w	r2, r3, #32
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e023      	b.n	80094b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b01      	cmp	r3, #1
 8009470:	d10d      	bne.n	800948e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	43da      	mvns	r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	4013      	ands	r3, r2
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	bf0c      	ite	eq
 8009484:	2301      	moveq	r3, #1
 8009486:	2300      	movne	r3, #0
 8009488:	b2db      	uxtb	r3, r3
 800948a:	461a      	mov	r2, r3
 800948c:	e00c      	b.n	80094a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	43da      	mvns	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4013      	ands	r3, r2
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	461a      	mov	r2, r3
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d093      	beq.n	80093d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
	   while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c6:	e071      	b.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094d6:	d123      	bne.n	8009520 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2220      	movs	r2, #32
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950c:	f043 0204 	orr.w	r2, r3, #4
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e067      	b.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009526:	d041      	beq.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009528:	f7fe fe90 	bl	800824c <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d302      	bcc.n	800953e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d136      	bne.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	0c1b      	lsrs	r3, r3, #16
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b01      	cmp	r3, #1
 8009546:	d10c      	bne.n	8009562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	43da      	mvns	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4013      	ands	r3, r2
 8009554:	b29b      	uxth	r3, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	bf14      	ite	ne
 800955a:	2301      	movne	r3, #1
 800955c:	2300      	moveq	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	e00b      	b.n	800957a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	43da      	mvns	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4013      	ands	r3, r2
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf14      	ite	ne
 8009574:	2301      	movne	r3, #1
 8009576:	2300      	moveq	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d016      	beq.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e021      	b.n	80095f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
	   while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	0c1b      	lsrs	r3, r3, #16
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d10c      	bne.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	43da      	mvns	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4013      	ands	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf14      	ite	ne
 80095c8:	2301      	movne	r3, #1
 80095ca:	2300      	moveq	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	e00b      	b.n	80095e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	43da      	mvns	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4013      	ands	r3, r2
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bf14      	ite	ne
 80095e2:	2301      	movne	r3, #1
 80095e4:	2300      	moveq	r3, #0
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f47f af6d 	bne.w	80094c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009604:	e034      	b.n	8009670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 f8e3 	bl	80097d2 <I2C_IsAcknowledgeFailed>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e034      	b.n	8009680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800961c:	d028      	beq.n	8009670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961e:	f7fe fe15 	bl	800824c <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	429a      	cmp	r2, r3
 800962c:	d302      	bcc.n	8009634 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11d      	bne.n	8009670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800963e:	2b80      	cmp	r3, #128	@ 0x80
 8009640:	d016      	beq.n	8009670 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965c:	f043 0220 	orr.w	r2, r3, #32
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e007      	b.n	8009680 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800967a:	2b80      	cmp	r3, #128	@ 0x80
 800967c:	d1c3      	bne.n	8009606 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009694:	e034      	b.n	8009700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 f89b 	bl	80097d2 <I2C_IsAcknowledgeFailed>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e034      	b.n	8009710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096ac:	d028      	beq.n	8009700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7fe fdcd 	bl	800824c <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d11d      	bne.n	8009700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d016      	beq.n	8009700 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ec:	f043 0220 	orr.w	r2, r3, #32
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e007      	b.n	8009710 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b04      	cmp	r3, #4
 800970c:	d1c3      	bne.n	8009696 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009724:	e049      	b.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	2b10      	cmp	r3, #16
 8009732:	d119      	bne.n	8009768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f06f 0210 	mvn.w	r2, #16
 800973c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e030      	b.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009768:	f7fe fd70 	bl	800824c <HAL_GetTick>
 800976c:	4602      	mov	r2, r0
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	429a      	cmp	r2, r3
 8009776:	d302      	bcc.n	800977e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d11d      	bne.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009788:	2b40      	cmp	r3, #64	@ 0x40
 800978a:	d016      	beq.n	80097ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2220      	movs	r2, #32
 8009796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a6:	f043 0220 	orr.w	r2, r3, #32
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e007      	b.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c4:	2b40      	cmp	r3, #64	@ 0x40
 80097c6:	d1ae      	bne.n	8009726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e8:	d11b      	bne.n	8009822 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980e:	f043 0204 	orr.w	r2, r3, #4
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e267      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0301 	and.w	r3, r3, #1
 800984a:	2b00      	cmp	r3, #0
 800984c:	d075      	beq.n	800993a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800984e:	4b88      	ldr	r3, [pc, #544]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 030c 	and.w	r3, r3, #12
 8009856:	2b04      	cmp	r3, #4
 8009858:	d00c      	beq.n	8009874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800985a:	4b85      	ldr	r3, [pc, #532]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009862:	2b08      	cmp	r3, #8
 8009864:	d112      	bne.n	800988c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009866:	4b82      	ldr	r3, [pc, #520]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800986e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009872:	d10b      	bne.n	800988c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009874:	4b7e      	ldr	r3, [pc, #504]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d05b      	beq.n	8009938 <HAL_RCC_OscConfig+0x108>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d157      	bne.n	8009938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e242      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009894:	d106      	bne.n	80098a4 <HAL_RCC_OscConfig+0x74>
 8009896:	4b76      	ldr	r3, [pc, #472]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a75      	ldr	r2, [pc, #468]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 800989c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	e01d      	b.n	80098e0 <HAL_RCC_OscConfig+0xb0>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098ac:	d10c      	bne.n	80098c8 <HAL_RCC_OscConfig+0x98>
 80098ae:	4b70      	ldr	r3, [pc, #448]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a6f      	ldr	r2, [pc, #444]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	4b6d      	ldr	r3, [pc, #436]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a6c      	ldr	r2, [pc, #432]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	e00b      	b.n	80098e0 <HAL_RCC_OscConfig+0xb0>
 80098c8:	4b69      	ldr	r3, [pc, #420]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a68      	ldr	r2, [pc, #416]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	4b66      	ldr	r3, [pc, #408]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a65      	ldr	r2, [pc, #404]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80098da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d013      	beq.n	8009910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e8:	f7fe fcb0 	bl	800824c <HAL_GetTick>
 80098ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ee:	e008      	b.n	8009902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098f0:	f7fe fcac 	bl	800824c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b64      	cmp	r3, #100	@ 0x64
 80098fc:	d901      	bls.n	8009902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e207      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009902:	4b5b      	ldr	r3, [pc, #364]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d0f0      	beq.n	80098f0 <HAL_RCC_OscConfig+0xc0>
 800990e:	e014      	b.n	800993a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009910:	f7fe fc9c 	bl	800824c <HAL_GetTick>
 8009914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009916:	e008      	b.n	800992a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009918:	f7fe fc98 	bl	800824c <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	@ 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e1f3      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800992a:	4b51      	ldr	r3, [pc, #324]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <HAL_RCC_OscConfig+0xe8>
 8009936:	e000      	b.n	800993a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d063      	beq.n	8009a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009946:	4b4a      	ldr	r3, [pc, #296]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 030c 	and.w	r3, r3, #12
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009952:	4b47      	ldr	r3, [pc, #284]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800995a:	2b08      	cmp	r3, #8
 800995c:	d11c      	bne.n	8009998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800995e:	4b44      	ldr	r3, [pc, #272]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d116      	bne.n	8009998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800996a:	4b41      	ldr	r3, [pc, #260]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d005      	beq.n	8009982 <HAL_RCC_OscConfig+0x152>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d001      	beq.n	8009982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e1c7      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009982:	4b3b      	ldr	r3, [pc, #236]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	4937      	ldr	r1, [pc, #220]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009992:	4313      	orrs	r3, r2
 8009994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009996:	e03a      	b.n	8009a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d020      	beq.n	80099e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099a0:	4b34      	ldr	r3, [pc, #208]	@ (8009a74 <HAL_RCC_OscConfig+0x244>)
 80099a2:	2201      	movs	r2, #1
 80099a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7fe fc51 	bl	800824c <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099ae:	f7fe fc4d 	bl	800824c <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e1a8      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099cc:	4b28      	ldr	r3, [pc, #160]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	4925      	ldr	r1, [pc, #148]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	600b      	str	r3, [r1, #0]
 80099e0:	e015      	b.n	8009a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099e2:	4b24      	ldr	r3, [pc, #144]	@ (8009a74 <HAL_RCC_OscConfig+0x244>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e8:	f7fe fc30 	bl	800824c <HAL_GetTick>
 80099ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ee:	e008      	b.n	8009a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099f0:	f7fe fc2c 	bl	800824c <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d901      	bls.n	8009a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e187      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a02:	4b1b      	ldr	r3, [pc, #108]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1f0      	bne.n	80099f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d036      	beq.n	8009a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a22:	4b15      	ldr	r3, [pc, #84]	@ (8009a78 <HAL_RCC_OscConfig+0x248>)
 8009a24:	2201      	movs	r2, #1
 8009a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a28:	f7fe fc10 	bl	800824c <HAL_GetTick>
 8009a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a30:	f7fe fc0c 	bl	800824c <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e167      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a42:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <HAL_RCC_OscConfig+0x240>)
 8009a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0f0      	beq.n	8009a30 <HAL_RCC_OscConfig+0x200>
 8009a4e:	e01b      	b.n	8009a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a50:	4b09      	ldr	r3, [pc, #36]	@ (8009a78 <HAL_RCC_OscConfig+0x248>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a56:	f7fe fbf9 	bl	800824c <HAL_GetTick>
 8009a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a5c:	e00e      	b.n	8009a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a5e:	f7fe fbf5 	bl	800824c <HAL_GetTick>
 8009a62:	4602      	mov	r2, r0
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d907      	bls.n	8009a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e150      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
 8009a70:	40023800 	.word	0x40023800
 8009a74:	42470000 	.word	0x42470000
 8009a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a7c:	4b88      	ldr	r3, [pc, #544]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1ea      	bne.n	8009a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0304 	and.w	r3, r3, #4
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 8097 	beq.w	8009bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a96:	2300      	movs	r3, #0
 8009a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a9a:	4b81      	ldr	r3, [pc, #516]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10f      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]
 8009aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aae:	4a7c      	ldr	r2, [pc, #496]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009abe:	60bb      	str	r3, [r7, #8]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac6:	4b77      	ldr	r3, [pc, #476]	@ (8009ca4 <HAL_RCC_OscConfig+0x474>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d118      	bne.n	8009b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ad2:	4b74      	ldr	r3, [pc, #464]	@ (8009ca4 <HAL_RCC_OscConfig+0x474>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a73      	ldr	r2, [pc, #460]	@ (8009ca4 <HAL_RCC_OscConfig+0x474>)
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ade:	f7fe fbb5 	bl	800824c <HAL_GetTick>
 8009ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ae4:	e008      	b.n	8009af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae6:	f7fe fbb1 	bl	800824c <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e10c      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009af8:	4b6a      	ldr	r3, [pc, #424]	@ (8009ca4 <HAL_RCC_OscConfig+0x474>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d106      	bne.n	8009b1a <HAL_RCC_OscConfig+0x2ea>
 8009b0c:	4b64      	ldr	r3, [pc, #400]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b10:	4a63      	ldr	r2, [pc, #396]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b12:	f043 0301 	orr.w	r3, r3, #1
 8009b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b18:	e01c      	b.n	8009b54 <HAL_RCC_OscConfig+0x324>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCC_OscConfig+0x30c>
 8009b22:	4b5f      	ldr	r3, [pc, #380]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b26:	4a5e      	ldr	r2, [pc, #376]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b28:	f043 0304 	orr.w	r3, r3, #4
 8009b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b32:	4a5b      	ldr	r2, [pc, #364]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b34:	f043 0301 	orr.w	r3, r3, #1
 8009b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b3a:	e00b      	b.n	8009b54 <HAL_RCC_OscConfig+0x324>
 8009b3c:	4b58      	ldr	r3, [pc, #352]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b40:	4a57      	ldr	r2, [pc, #348]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b48:	4b55      	ldr	r3, [pc, #340]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b4c:	4a54      	ldr	r2, [pc, #336]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b4e:	f023 0304 	bic.w	r3, r3, #4
 8009b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d015      	beq.n	8009b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b5c:	f7fe fb76 	bl	800824c <HAL_GetTick>
 8009b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b62:	e00a      	b.n	8009b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b64:	f7fe fb72 	bl	800824c <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e0cb      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b7a:	4b49      	ldr	r3, [pc, #292]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0ee      	beq.n	8009b64 <HAL_RCC_OscConfig+0x334>
 8009b86:	e014      	b.n	8009bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b88:	f7fe fb60 	bl	800824c <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b8e:	e00a      	b.n	8009ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b90:	f7fe fb5c 	bl	800824c <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e0b5      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1ee      	bne.n	8009b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d105      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bb8:	4b39      	ldr	r3, [pc, #228]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bbc:	4a38      	ldr	r2, [pc, #224]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80a1 	beq.w	8009d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bce:	4b34      	ldr	r3, [pc, #208]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 030c 	and.w	r3, r3, #12
 8009bd6:	2b08      	cmp	r3, #8
 8009bd8:	d05c      	beq.n	8009c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d141      	bne.n	8009c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009be2:	4b31      	ldr	r3, [pc, #196]	@ (8009ca8 <HAL_RCC_OscConfig+0x478>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be8:	f7fe fb30 	bl	800824c <HAL_GetTick>
 8009bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bf0:	f7fe fb2c 	bl	800824c <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e087      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c02:	4b27      	ldr	r3, [pc, #156]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69da      	ldr	r2, [r3, #28]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	431a      	orrs	r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	019b      	lsls	r3, r3, #6
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	3b01      	subs	r3, #1
 8009c28:	041b      	lsls	r3, r3, #16
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	061b      	lsls	r3, r3, #24
 8009c32:	491b      	ldr	r1, [pc, #108]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c38:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca8 <HAL_RCC_OscConfig+0x478>)
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c3e:	f7fe fb05 	bl	800824c <HAL_GetTick>
 8009c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c44:	e008      	b.n	8009c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c46:	f7fe fb01 	bl	800824c <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d901      	bls.n	8009c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e05c      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0f0      	beq.n	8009c46 <HAL_RCC_OscConfig+0x416>
 8009c64:	e054      	b.n	8009d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c66:	4b10      	ldr	r3, [pc, #64]	@ (8009ca8 <HAL_RCC_OscConfig+0x478>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c6c:	f7fe faee 	bl	800824c <HAL_GetTick>
 8009c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c72:	e008      	b.n	8009c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c74:	f7fe faea 	bl	800824c <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	d901      	bls.n	8009c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e045      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c86:	4b06      	ldr	r3, [pc, #24]	@ (8009ca0 <HAL_RCC_OscConfig+0x470>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f0      	bne.n	8009c74 <HAL_RCC_OscConfig+0x444>
 8009c92:	e03d      	b.n	8009d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d107      	bne.n	8009cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e038      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
 8009ca0:	40023800 	.word	0x40023800
 8009ca4:	40007000 	.word	0x40007000
 8009ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cac:	4b1b      	ldr	r3, [pc, #108]	@ (8009d1c <HAL_RCC_OscConfig+0x4ec>)
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d028      	beq.n	8009d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d121      	bne.n	8009d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d11a      	bne.n	8009d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009cdc:	4013      	ands	r3, r2
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d111      	bne.n	8009d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d107      	bne.n	8009d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d001      	beq.n	8009d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009d10:	2300      	movs	r3, #0
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	40023800 	.word	0x40023800

08009d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e0cc      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d34:	4b68      	ldr	r3, [pc, #416]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	683a      	ldr	r2, [r7, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d90c      	bls.n	8009d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d42:	4b65      	ldr	r3, [pc, #404]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	b2d2      	uxtb	r2, r2
 8009d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d4a:	4b63      	ldr	r3, [pc, #396]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f003 0307 	and.w	r3, r3, #7
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d001      	beq.n	8009d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e0b8      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0302 	and.w	r3, r3, #2
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d020      	beq.n	8009daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d005      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d74:	4b59      	ldr	r3, [pc, #356]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	4a58      	ldr	r2, [pc, #352]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d8c:	4b53      	ldr	r3, [pc, #332]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	4a52      	ldr	r2, [pc, #328]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d98:	4b50      	ldr	r3, [pc, #320]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	494d      	ldr	r1, [pc, #308]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009da6:	4313      	orrs	r3, r2
 8009da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d044      	beq.n	8009e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d107      	bne.n	8009dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dbe:	4b47      	ldr	r3, [pc, #284]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d119      	bne.n	8009dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e07f      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d003      	beq.n	8009dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dda:	2b03      	cmp	r3, #3
 8009ddc:	d107      	bne.n	8009dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dde:	4b3f      	ldr	r3, [pc, #252]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d109      	bne.n	8009dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e06f      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dee:	4b3b      	ldr	r3, [pc, #236]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0302 	and.w	r3, r3, #2
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e067      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009dfe:	4b37      	ldr	r3, [pc, #220]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f023 0203 	bic.w	r2, r3, #3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4934      	ldr	r1, [pc, #208]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e10:	f7fe fa1c 	bl	800824c <HAL_GetTick>
 8009e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e16:	e00a      	b.n	8009e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e18:	f7fe fa18 	bl	800824c <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e04f      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	f003 020c 	and.w	r2, r3, #12
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d1eb      	bne.n	8009e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e40:	4b25      	ldr	r3, [pc, #148]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0307 	and.w	r3, r3, #7
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d20c      	bcs.n	8009e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e4e:	4b22      	ldr	r3, [pc, #136]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e56:	4b20      	ldr	r3, [pc, #128]	@ (8009ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d001      	beq.n	8009e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e032      	b.n	8009ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f003 0304 	and.w	r3, r3, #4
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d008      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e74:	4b19      	ldr	r3, [pc, #100]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4916      	ldr	r1, [pc, #88]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d009      	beq.n	8009ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	691b      	ldr	r3, [r3, #16]
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	490e      	ldr	r1, [pc, #56]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ea6:	f000 f821 	bl	8009eec <HAL_RCC_GetSysClockFreq>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b0b      	ldr	r3, [pc, #44]	@ (8009edc <HAL_RCC_ClockConfig+0x1bc>)
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	091b      	lsrs	r3, r3, #4
 8009eb2:	f003 030f 	and.w	r3, r3, #15
 8009eb6:	490a      	ldr	r1, [pc, #40]	@ (8009ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8009eb8:	5ccb      	ldrb	r3, [r1, r3]
 8009eba:	fa22 f303 	lsr.w	r3, r2, r3
 8009ebe:	4a09      	ldr	r2, [pc, #36]	@ (8009ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8009ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ec2:	4b09      	ldr	r3, [pc, #36]	@ (8009ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fe f97c 	bl	80081c4 <HAL_InitTick>

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40023c00 	.word	0x40023c00
 8009edc:	40023800 	.word	0x40023800
 8009ee0:	080105ac 	.word	0x080105ac
 8009ee4:	2000000c 	.word	0x2000000c
 8009ee8:	200002d0 	.word	0x200002d0

08009eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ef0:	b094      	sub	sp, #80	@ 0x50
 8009ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef8:	2300      	movs	r3, #0
 8009efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009efc:	2300      	movs	r3, #0
 8009efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f04:	4b79      	ldr	r3, [pc, #484]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f003 030c 	and.w	r3, r3, #12
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d00d      	beq.n	8009f2c <HAL_RCC_GetSysClockFreq+0x40>
 8009f10:	2b08      	cmp	r3, #8
 8009f12:	f200 80e1 	bhi.w	800a0d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_RCC_GetSysClockFreq+0x34>
 8009f1a:	2b04      	cmp	r3, #4
 8009f1c:	d003      	beq.n	8009f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8009f1e:	e0db      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f20:	4b73      	ldr	r3, [pc, #460]	@ (800a0f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009f24:	e0db      	b.n	800a0de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f26:	4b73      	ldr	r3, [pc, #460]	@ (800a0f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009f2a:	e0d8      	b.n	800a0de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f2c:	4b6f      	ldr	r3, [pc, #444]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f36:	4b6d      	ldr	r3, [pc, #436]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d063      	beq.n	800a00a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f42:	4b6a      	ldr	r3, [pc, #424]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	2200      	movs	r2, #0
 8009f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f56:	2300      	movs	r3, #0
 8009f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009f5e:	4622      	mov	r2, r4
 8009f60:	462b      	mov	r3, r5
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f04f 0100 	mov.w	r1, #0
 8009f6a:	0159      	lsls	r1, r3, #5
 8009f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f70:	0150      	lsls	r0, r2, #5
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4621      	mov	r1, r4
 8009f78:	1a51      	subs	r1, r2, r1
 8009f7a:	6139      	str	r1, [r7, #16]
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f90:	4659      	mov	r1, fp
 8009f92:	018b      	lsls	r3, r1, #6
 8009f94:	4651      	mov	r1, sl
 8009f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f9a:	4651      	mov	r1, sl
 8009f9c:	018a      	lsls	r2, r1, #6
 8009f9e:	4651      	mov	r1, sl
 8009fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8009faa:	f04f 0200 	mov.w	r2, #0
 8009fae:	f04f 0300 	mov.w	r3, #0
 8009fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fbe:	4690      	mov	r8, r2
 8009fc0:	4699      	mov	r9, r3
 8009fc2:	4623      	mov	r3, r4
 8009fc4:	eb18 0303 	adds.w	r3, r8, r3
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	462b      	mov	r3, r5
 8009fcc:	eb49 0303 	adc.w	r3, r9, r3
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009fde:	4629      	mov	r1, r5
 8009fe0:	024b      	lsls	r3, r1, #9
 8009fe2:	4621      	mov	r1, r4
 8009fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009fe8:	4621      	mov	r1, r4
 8009fea:	024a      	lsls	r2, r1, #9
 8009fec:	4610      	mov	r0, r2
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009ffc:	f7f6 fe4c 	bl	8000c98 <__aeabi_uldivmod>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4613      	mov	r3, r2
 800a006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a008:	e058      	b.n	800a0bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00a:	4b38      	ldr	r3, [pc, #224]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	099b      	lsrs	r3, r3, #6
 800a010:	2200      	movs	r2, #0
 800a012:	4618      	mov	r0, r3
 800a014:	4611      	mov	r1, r2
 800a016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a01a:	623b      	str	r3, [r7, #32]
 800a01c:	2300      	movs	r3, #0
 800a01e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a024:	4642      	mov	r2, r8
 800a026:	464b      	mov	r3, r9
 800a028:	f04f 0000 	mov.w	r0, #0
 800a02c:	f04f 0100 	mov.w	r1, #0
 800a030:	0159      	lsls	r1, r3, #5
 800a032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a036:	0150      	lsls	r0, r2, #5
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4641      	mov	r1, r8
 800a03e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a042:	4649      	mov	r1, r9
 800a044:	eb63 0b01 	sbc.w	fp, r3, r1
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a05c:	ebb2 040a 	subs.w	r4, r2, sl
 800a060:	eb63 050b 	sbc.w	r5, r3, fp
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	f04f 0300 	mov.w	r3, #0
 800a06c:	00eb      	lsls	r3, r5, #3
 800a06e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a072:	00e2      	lsls	r2, r4, #3
 800a074:	4614      	mov	r4, r2
 800a076:	461d      	mov	r5, r3
 800a078:	4643      	mov	r3, r8
 800a07a:	18e3      	adds	r3, r4, r3
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	464b      	mov	r3, r9
 800a080:	eb45 0303 	adc.w	r3, r5, r3
 800a084:	607b      	str	r3, [r7, #4]
 800a086:	f04f 0200 	mov.w	r2, #0
 800a08a:	f04f 0300 	mov.w	r3, #0
 800a08e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a092:	4629      	mov	r1, r5
 800a094:	028b      	lsls	r3, r1, #10
 800a096:	4621      	mov	r1, r4
 800a098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a09c:	4621      	mov	r1, r4
 800a09e:	028a      	lsls	r2, r1, #10
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	61bb      	str	r3, [r7, #24]
 800a0aa:	61fa      	str	r2, [r7, #28]
 800a0ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0b0:	f7f6 fdf2 	bl	8000c98 <__aeabi_uldivmod>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	0c1b      	lsrs	r3, r3, #16
 800a0c2:	f003 0303 	and.w	r3, r3, #3
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800a0cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a0d6:	e002      	b.n	800a0de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0d8:	4b05      	ldr	r3, [pc, #20]	@ (800a0f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a0dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3750      	adds	r7, #80	@ 0x50
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0ea:	bf00      	nop
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	00f42400 	.word	0x00f42400
 800a0f4:	007a1200 	.word	0x007a1200

0800a0f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0fc:	4b03      	ldr	r3, [pc, #12]	@ (800a10c <HAL_RCC_GetHCLKFreq+0x14>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
}
 800a100:	4618      	mov	r0, r3
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	2000000c 	.word	0x2000000c

0800a110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a114:	f7ff fff0 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800a118:	4602      	mov	r2, r0
 800a11a:	4b05      	ldr	r3, [pc, #20]	@ (800a130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	0a9b      	lsrs	r3, r3, #10
 800a120:	f003 0307 	and.w	r3, r3, #7
 800a124:	4903      	ldr	r1, [pc, #12]	@ (800a134 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a126:	5ccb      	ldrb	r3, [r1, r3]
 800a128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	40023800 	.word	0x40023800
 800a134:	080105bc 	.word	0x080105bc

0800a138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a13c:	f7ff ffdc 	bl	800a0f8 <HAL_RCC_GetHCLKFreq>
 800a140:	4602      	mov	r2, r0
 800a142:	4b05      	ldr	r3, [pc, #20]	@ (800a158 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	0b5b      	lsrs	r3, r3, #13
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	4903      	ldr	r1, [pc, #12]	@ (800a15c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a14e:	5ccb      	ldrb	r3, [r1, r3]
 800a150:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a154:	4618      	mov	r0, r3
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40023800 	.word	0x40023800
 800a15c:	080105bc 	.word	0x080105bc

0800a160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e041      	b.n	800a1f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7f8 fa24 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	4610      	mov	r0, r2
 800a1a0:	f000 fd36 	bl	800ac10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b01      	cmp	r3, #1
 800a212:	d001      	beq.n	800a218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e044      	b.n	800a2a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f042 0201 	orr.w	r2, r2, #1
 800a22e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1e      	ldr	r2, [pc, #120]	@ (800a2b0 <HAL_TIM_Base_Start_IT+0xb0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d018      	beq.n	800a26c <HAL_TIM_Base_Start_IT+0x6c>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a242:	d013      	beq.n	800a26c <HAL_TIM_Base_Start_IT+0x6c>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a1a      	ldr	r2, [pc, #104]	@ (800a2b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00e      	beq.n	800a26c <HAL_TIM_Base_Start_IT+0x6c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a19      	ldr	r2, [pc, #100]	@ (800a2b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d009      	beq.n	800a26c <HAL_TIM_Base_Start_IT+0x6c>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a17      	ldr	r2, [pc, #92]	@ (800a2bc <HAL_TIM_Base_Start_IT+0xbc>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d004      	beq.n	800a26c <HAL_TIM_Base_Start_IT+0x6c>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a16      	ldr	r2, [pc, #88]	@ (800a2c0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d111      	bne.n	800a290 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 0307 	and.w	r3, r3, #7
 800a276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b06      	cmp	r3, #6
 800a27c:	d010      	beq.n	800a2a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f042 0201 	orr.w	r2, r2, #1
 800a28c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a28e:	e007      	b.n	800a2a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	40010000 	.word	0x40010000
 800a2b4:	40000400 	.word	0x40000400
 800a2b8:	40000800 	.word	0x40000800
 800a2bc:	40000c00 	.word	0x40000c00
 800a2c0:	40014000 	.word	0x40014000

0800a2c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d101      	bne.n	800a2d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e041      	b.n	800a35a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d106      	bne.n	800a2f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7f8 f902 	bl	80024f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f000 fc84 	bl	800ac10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
	...

0800a364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <HAL_TIM_PWM_Start+0x24>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	bf14      	ite	ne
 800a380:	2301      	movne	r3, #1
 800a382:	2300      	moveq	r3, #0
 800a384:	b2db      	uxtb	r3, r3
 800a386:	e022      	b.n	800a3ce <HAL_TIM_PWM_Start+0x6a>
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	d109      	bne.n	800a3a2 <HAL_TIM_PWM_Start+0x3e>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b01      	cmp	r3, #1
 800a398:	bf14      	ite	ne
 800a39a:	2301      	movne	r3, #1
 800a39c:	2300      	moveq	r3, #0
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e015      	b.n	800a3ce <HAL_TIM_PWM_Start+0x6a>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d109      	bne.n	800a3bc <HAL_TIM_PWM_Start+0x58>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	bf14      	ite	ne
 800a3b4:	2301      	movne	r3, #1
 800a3b6:	2300      	moveq	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	e008      	b.n	800a3ce <HAL_TIM_PWM_Start+0x6a>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	bf14      	ite	ne
 800a3c8:	2301      	movne	r3, #1
 800a3ca:	2300      	moveq	r3, #0
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e068      	b.n	800a4a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d104      	bne.n	800a3e6 <HAL_TIM_PWM_Start+0x82>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3e4:	e013      	b.n	800a40e <HAL_TIM_PWM_Start+0xaa>
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d104      	bne.n	800a3f6 <HAL_TIM_PWM_Start+0x92>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3f4:	e00b      	b.n	800a40e <HAL_TIM_PWM_Start+0xaa>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b08      	cmp	r3, #8
 800a3fa:	d104      	bne.n	800a406 <HAL_TIM_PWM_Start+0xa2>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2202      	movs	r2, #2
 800a400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a404:	e003      	b.n	800a40e <HAL_TIM_PWM_Start+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2202      	movs	r2, #2
 800a40a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2201      	movs	r2, #1
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f000 ff30 	bl	800b27c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a23      	ldr	r2, [pc, #140]	@ (800a4b0 <HAL_TIM_PWM_Start+0x14c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d107      	bne.n	800a436 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a434:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a1d      	ldr	r2, [pc, #116]	@ (800a4b0 <HAL_TIM_PWM_Start+0x14c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d018      	beq.n	800a472 <HAL_TIM_PWM_Start+0x10e>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a448:	d013      	beq.n	800a472 <HAL_TIM_PWM_Start+0x10e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a19      	ldr	r2, [pc, #100]	@ (800a4b4 <HAL_TIM_PWM_Start+0x150>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00e      	beq.n	800a472 <HAL_TIM_PWM_Start+0x10e>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a17      	ldr	r2, [pc, #92]	@ (800a4b8 <HAL_TIM_PWM_Start+0x154>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d009      	beq.n	800a472 <HAL_TIM_PWM_Start+0x10e>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a16      	ldr	r2, [pc, #88]	@ (800a4bc <HAL_TIM_PWM_Start+0x158>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d004      	beq.n	800a472 <HAL_TIM_PWM_Start+0x10e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a14      	ldr	r2, [pc, #80]	@ (800a4c0 <HAL_TIM_PWM_Start+0x15c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d111      	bne.n	800a496 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f003 0307 	and.w	r3, r3, #7
 800a47c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b06      	cmp	r3, #6
 800a482:	d010      	beq.n	800a4a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a494:	e007      	b.n	800a4a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f042 0201 	orr.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	40010000 	.word	0x40010000
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40014000 	.word	0x40014000

0800a4c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e041      	b.n	800a55a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7f7 ffaa 	bl	8002444 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2202      	movs	r2, #2
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	3304      	adds	r3, #4
 800a500:	4619      	mov	r1, r3
 800a502:	4610      	mov	r0, r2
 800a504:	f000 fb84 	bl	800ac10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2201      	movs	r2, #1
 800a524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b086      	sub	sp, #24
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d101      	bne.n	800a576 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e097      	b.n	800a6a6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d106      	bne.n	800a590 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7f7 ffd2 	bl	8002534 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f000 fb2a 	bl	800ac10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a1b      	ldr	r3, [r3, #32]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5e4:	f023 0303 	bic.w	r3, r3, #3
 800a5e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a602:	f023 030c 	bic.w	r3, r3, #12
 800a606:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a60e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	68da      	ldr	r2, [r3, #12]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	4313      	orrs	r3, r2
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	4313      	orrs	r3, r2
 800a624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	011a      	lsls	r2, r3, #4
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	6a1b      	ldr	r3, [r3, #32]
 800a630:	031b      	lsls	r3, r3, #12
 800a632:	4313      	orrs	r3, r2
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4313      	orrs	r3, r2
 800a638:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a640:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a648:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	4313      	orrs	r3, r2
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4313      	orrs	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f003 0302 	and.w	r3, r3, #2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d020      	beq.n	800a712 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f003 0302 	and.w	r3, r3, #2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01b      	beq.n	800a712 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f06f 0202 	mvn.w	r2, #2
 800a6e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	699b      	ldr	r3, [r3, #24]
 800a6f0:	f003 0303 	and.w	r3, r3, #3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7f7 fb7f 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 800a6fe:	e005      	b.n	800a70c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fa67 	bl	800abd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 fa6e 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f003 0304 	and.w	r3, r3, #4
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d020      	beq.n	800a75e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0304 	and.w	r3, r3, #4
 800a722:	2b00      	cmp	r3, #0
 800a724:	d01b      	beq.n	800a75e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f06f 0204 	mvn.w	r2, #4
 800a72e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699b      	ldr	r3, [r3, #24]
 800a73c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7f7 fb59 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 800a74a:	e005      	b.n	800a758 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fa41 	bl	800abd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fa48 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f003 0308 	and.w	r3, r3, #8
 800a764:	2b00      	cmp	r3, #0
 800a766:	d020      	beq.n	800a7aa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f003 0308 	and.w	r3, r3, #8
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d01b      	beq.n	800a7aa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f06f 0208 	mvn.w	r2, #8
 800a77a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2204      	movs	r2, #4
 800a780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f7f7 fb33 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 800a796:	e005      	b.n	800a7a4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fa1b 	bl	800abd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa22 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d020      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f003 0310 	and.w	r3, r3, #16
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d01b      	beq.n	800a7f6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f06f 0210 	mvn.w	r2, #16
 800a7c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2208      	movs	r2, #8
 800a7cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7f7 fb0d 	bl	8001dfc <HAL_TIM_IC_CaptureCallback>
 800a7e2:	e005      	b.n	800a7f0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f9f5 	bl	800abd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f9fc 	bl	800abe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00c      	beq.n	800a81a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f003 0301 	and.w	r3, r3, #1
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f06f 0201 	mvn.w	r2, #1
 800a812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7f6 fbf9 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fdbd 	bl	800b3b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00c      	beq.n	800a862 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d007      	beq.n	800a862 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a85a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f9cd 	bl	800abfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00c      	beq.n	800a886 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d007      	beq.n	800a886 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f06f 0220 	mvn.w	r2, #32
 800a87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fd8f 	bl	800b3a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b086      	sub	sp, #24
 800a892:	af00      	add	r7, sp, #0
 800a894:	60f8      	str	r0, [r7, #12]
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d101      	bne.n	800a8ac <HAL_TIM_IC_ConfigChannel+0x1e>
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	e088      	b.n	800a9be <HAL_TIM_IC_ConfigChannel+0x130>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d11b      	bne.n	800a8f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a8ca:	f000 fbb9 	bl	800b040 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	699a      	ldr	r2, [r3, #24]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f022 020c 	bic.w	r2, r2, #12
 800a8dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6999      	ldr	r1, [r3, #24]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	619a      	str	r2, [r3, #24]
 800a8f0:	e060      	b.n	800a9b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b04      	cmp	r3, #4
 800a8f6:	d11c      	bne.n	800a932 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a908:	f000 fc02 	bl	800b110 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699a      	ldr	r2, [r3, #24]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a91a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6999      	ldr	r1, [r3, #24]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	021a      	lsls	r2, r3, #8
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	619a      	str	r2, [r3, #24]
 800a930:	e040      	b.n	800a9b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b08      	cmp	r3, #8
 800a936:	d11b      	bne.n	800a970 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a948:	f000 fc1f 	bl	800b18a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	69da      	ldr	r2, [r3, #28]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 020c 	bic.w	r2, r2, #12
 800a95a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	69d9      	ldr	r1, [r3, #28]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	689a      	ldr	r2, [r3, #8]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	430a      	orrs	r2, r1
 800a96c:	61da      	str	r2, [r3, #28]
 800a96e:	e021      	b.n	800a9b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b0c      	cmp	r3, #12
 800a974:	d11c      	bne.n	800a9b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a986:	f000 fc3c 	bl	800b202 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69da      	ldr	r2, [r3, #28]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800a998:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69d9      	ldr	r1, [r3, #28]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	021a      	lsls	r2, r3, #8
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	61da      	str	r2, [r3, #28]
 800a9ae:	e001      	b.n	800a9b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	e0ae      	b.n	800ab44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b0c      	cmp	r3, #12
 800a9f2:	f200 809f 	bhi.w	800ab34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa31 	.word	0x0800aa31
 800aa00:	0800ab35 	.word	0x0800ab35
 800aa04:	0800ab35 	.word	0x0800ab35
 800aa08:	0800ab35 	.word	0x0800ab35
 800aa0c:	0800aa71 	.word	0x0800aa71
 800aa10:	0800ab35 	.word	0x0800ab35
 800aa14:	0800ab35 	.word	0x0800ab35
 800aa18:	0800ab35 	.word	0x0800ab35
 800aa1c:	0800aab3 	.word	0x0800aab3
 800aa20:	0800ab35 	.word	0x0800ab35
 800aa24:	0800ab35 	.word	0x0800ab35
 800aa28:	0800ab35 	.word	0x0800ab35
 800aa2c:	0800aaf3 	.word	0x0800aaf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 f976 	bl	800ad28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0208 	orr.w	r2, r2, #8
 800aa4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699a      	ldr	r2, [r3, #24]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0204 	bic.w	r2, r2, #4
 800aa5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6999      	ldr	r1, [r3, #24]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	691a      	ldr	r2, [r3, #16]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	619a      	str	r2, [r3, #24]
      break;
 800aa6e:	e064      	b.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f9bc 	bl	800adf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6999      	ldr	r1, [r3, #24]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	021a      	lsls	r2, r3, #8
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	430a      	orrs	r2, r1
 800aaae:	619a      	str	r2, [r3, #24]
      break;
 800aab0:	e043      	b.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fa07 	bl	800aecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69da      	ldr	r2, [r3, #28]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f042 0208 	orr.w	r2, r2, #8
 800aacc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69da      	ldr	r2, [r3, #28]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0204 	bic.w	r2, r2, #4
 800aadc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	69d9      	ldr	r1, [r3, #28]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	430a      	orrs	r2, r1
 800aaee:	61da      	str	r2, [r3, #28]
      break;
 800aaf0:	e023      	b.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f000 fa51 	bl	800afa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69da      	ldr	r2, [r3, #28]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	69da      	ldr	r2, [r3, #28]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69d9      	ldr	r1, [r3, #28]
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	021a      	lsls	r2, r3, #8
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	61da      	str	r2, [r3, #28]
      break;
 800ab32:	e002      	b.n	800ab3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]
      break;
 800ab38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	2b0c      	cmp	r3, #12
 800ab5e:	d831      	bhi.n	800abc4 <HAL_TIM_ReadCapturedValue+0x78>
 800ab60:	a201      	add	r2, pc, #4	@ (adr r2, 800ab68 <HAL_TIM_ReadCapturedValue+0x1c>)
 800ab62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab66:	bf00      	nop
 800ab68:	0800ab9d 	.word	0x0800ab9d
 800ab6c:	0800abc5 	.word	0x0800abc5
 800ab70:	0800abc5 	.word	0x0800abc5
 800ab74:	0800abc5 	.word	0x0800abc5
 800ab78:	0800aba7 	.word	0x0800aba7
 800ab7c:	0800abc5 	.word	0x0800abc5
 800ab80:	0800abc5 	.word	0x0800abc5
 800ab84:	0800abc5 	.word	0x0800abc5
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abc5 	.word	0x0800abc5
 800ab90:	0800abc5 	.word	0x0800abc5
 800ab94:	0800abc5 	.word	0x0800abc5
 800ab98:	0800abbb 	.word	0x0800abbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba2:	60fb      	str	r3, [r7, #12]

      break;
 800aba4:	e00f      	b.n	800abc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abac:	60fb      	str	r3, [r7, #12]

      break;
 800abae:	e00a      	b.n	800abc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb6:	60fb      	str	r3, [r7, #12]

      break;
 800abb8:	e005      	b.n	800abc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc0:	60fb      	str	r3, [r7, #12]

      break;
 800abc2:	e000      	b.n	800abc6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800abc4:	bf00      	nop
  }

  return tmpreg;
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac04:	bf00      	nop
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a3a      	ldr	r2, [pc, #232]	@ (800ad0c <TIM_Base_SetConfig+0xfc>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d00f      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2e:	d00b      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a37      	ldr	r2, [pc, #220]	@ (800ad10 <TIM_Base_SetConfig+0x100>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d007      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a36      	ldr	r2, [pc, #216]	@ (800ad14 <TIM_Base_SetConfig+0x104>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d003      	beq.n	800ac48 <TIM_Base_SetConfig+0x38>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a35      	ldr	r2, [pc, #212]	@ (800ad18 <TIM_Base_SetConfig+0x108>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d108      	bne.n	800ac5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a2b      	ldr	r2, [pc, #172]	@ (800ad0c <TIM_Base_SetConfig+0xfc>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d01b      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac68:	d017      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a28      	ldr	r2, [pc, #160]	@ (800ad10 <TIM_Base_SetConfig+0x100>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d013      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a27      	ldr	r2, [pc, #156]	@ (800ad14 <TIM_Base_SetConfig+0x104>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d00f      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a26      	ldr	r2, [pc, #152]	@ (800ad18 <TIM_Base_SetConfig+0x108>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00b      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a25      	ldr	r2, [pc, #148]	@ (800ad1c <TIM_Base_SetConfig+0x10c>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d007      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a24      	ldr	r2, [pc, #144]	@ (800ad20 <TIM_Base_SetConfig+0x110>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d003      	beq.n	800ac9a <TIM_Base_SetConfig+0x8a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a23      	ldr	r2, [pc, #140]	@ (800ad24 <TIM_Base_SetConfig+0x114>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d108      	bne.n	800acac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	689a      	ldr	r2, [r3, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a0e      	ldr	r2, [pc, #56]	@ (800ad0c <TIM_Base_SetConfig+0xfc>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d103      	bne.n	800ace0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	691a      	ldr	r2, [r3, #16]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2201      	movs	r2, #1
 800ace4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d105      	bne.n	800acfe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	f023 0201 	bic.w	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	611a      	str	r2, [r3, #16]
  }
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	40010000 	.word	0x40010000
 800ad10:	40000400 	.word	0x40000400
 800ad14:	40000800 	.word	0x40000800
 800ad18:	40000c00 	.word	0x40000c00
 800ad1c:	40014000 	.word	0x40014000
 800ad20:	40014400 	.word	0x40014400
 800ad24:	40014800 	.word	0x40014800

0800ad28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	f023 0201 	bic.w	r2, r3, #1
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0303 	bic.w	r3, r3, #3
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f023 0302 	bic.w	r3, r3, #2
 800ad70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	697a      	ldr	r2, [r7, #20]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a1c      	ldr	r2, [pc, #112]	@ (800adf0 <TIM_OC1_SetConfig+0xc8>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d10c      	bne.n	800ad9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0308 	bic.w	r3, r3, #8
 800ad8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f023 0304 	bic.w	r3, r3, #4
 800ad9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a13      	ldr	r2, [pc, #76]	@ (800adf0 <TIM_OC1_SetConfig+0xc8>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d111      	bne.n	800adca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800adb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	699b      	ldr	r3, [r3, #24]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	685a      	ldr	r2, [r3, #4]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	621a      	str	r2, [r3, #32]
}
 800ade4:	bf00      	nop
 800ade6:	371c      	adds	r7, #28
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	40010000 	.word	0x40010000

0800adf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b087      	sub	sp, #28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	f023 0210 	bic.w	r2, r3, #16
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f023 0320 	bic.w	r3, r3, #32
 800ae3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	011b      	lsls	r3, r3, #4
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a1e      	ldr	r2, [pc, #120]	@ (800aec8 <TIM_OC2_SetConfig+0xd4>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d10d      	bne.n	800ae70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a15      	ldr	r2, [pc, #84]	@ (800aec8 <TIM_OC2_SetConfig+0xd4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d113      	bne.n	800aea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	693a      	ldr	r2, [r7, #16]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	621a      	str	r2, [r3, #32]
}
 800aeba:	bf00      	nop
 800aebc:	371c      	adds	r7, #28
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	40010000 	.word	0x40010000

0800aecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aefa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	021b      	lsls	r3, r3, #8
 800af1c:	697a      	ldr	r2, [r7, #20]
 800af1e:	4313      	orrs	r3, r2
 800af20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a1d      	ldr	r2, [pc, #116]	@ (800af9c <TIM_OC3_SetConfig+0xd0>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d10d      	bne.n	800af46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a14      	ldr	r2, [pc, #80]	@ (800af9c <TIM_OC3_SetConfig+0xd0>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d113      	bne.n	800af76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	695b      	ldr	r3, [r3, #20]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	011b      	lsls	r3, r3, #4
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	621a      	str	r2, [r3, #32]
}
 800af90:	bf00      	nop
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr
 800af9c:	40010000 	.word	0x40010000

0800afa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	021b      	lsls	r3, r3, #8
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	031b      	lsls	r3, r3, #12
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a10      	ldr	r2, [pc, #64]	@ (800b03c <TIM_OC4_SetConfig+0x9c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d109      	bne.n	800b014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	019b      	lsls	r3, r3, #6
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	4313      	orrs	r3, r2
 800b012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	621a      	str	r2, [r3, #32]
}
 800b02e:	bf00      	nop
 800b030:	371c      	adds	r7, #28
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40010000 	.word	0x40010000

0800b040 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	f023 0201 	bic.w	r2, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	4a24      	ldr	r2, [pc, #144]	@ (800b0fc <TIM_TI1_SetConfig+0xbc>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d013      	beq.n	800b096 <TIM_TI1_SetConfig+0x56>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b074:	d00f      	beq.n	800b096 <TIM_TI1_SetConfig+0x56>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4a21      	ldr	r2, [pc, #132]	@ (800b100 <TIM_TI1_SetConfig+0xc0>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00b      	beq.n	800b096 <TIM_TI1_SetConfig+0x56>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4a20      	ldr	r2, [pc, #128]	@ (800b104 <TIM_TI1_SetConfig+0xc4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d007      	beq.n	800b096 <TIM_TI1_SetConfig+0x56>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4a1f      	ldr	r2, [pc, #124]	@ (800b108 <TIM_TI1_SetConfig+0xc8>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_TI1_SetConfig+0x56>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4a1e      	ldr	r2, [pc, #120]	@ (800b10c <TIM_TI1_SetConfig+0xcc>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d101      	bne.n	800b09a <TIM_TI1_SetConfig+0x5a>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <TIM_TI1_SetConfig+0x5c>
 800b09a:	2300      	movs	r3, #0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f023 0303 	bic.w	r3, r3, #3
 800b0a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e003      	b.n	800b0ba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f043 0301 	orr.w	r3, r3, #1
 800b0b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f023 030a 	bic.w	r3, r3, #10
 800b0d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	f003 030a 	and.w	r3, r3, #10
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	40010000 	.word	0x40010000
 800b100:	40000400 	.word	0x40000400
 800b104:	40000800 	.word	0x40000800
 800b108:	40000c00 	.word	0x40000c00
 800b10c:	40014000 	.word	0x40014000

0800b110 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
 800b11c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a1b      	ldr	r3, [r3, #32]
 800b128:	f023 0210 	bic.w	r2, r3, #16
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b13c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	021b      	lsls	r3, r3, #8
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	4313      	orrs	r3, r2
 800b146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	031b      	lsls	r3, r3, #12
 800b154:	b29b      	uxth	r3, r3
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	4313      	orrs	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b162:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b16c:	697a      	ldr	r2, [r7, #20]
 800b16e:	4313      	orrs	r3, r2
 800b170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	621a      	str	r2, [r3, #32]
}
 800b17e:	bf00      	nop
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6a1b      	ldr	r3, [r3, #32]
 800b1a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b1c6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	011b      	lsls	r3, r3, #4
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	693a      	ldr	r2, [r7, #16]
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800b1da:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800b1e4:	697a      	ldr	r2, [r7, #20]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	697a      	ldr	r2, [r7, #20]
 800b1f4:	621a      	str	r2, [r3, #32]
}
 800b1f6:	bf00      	nop
 800b1f8:	371c      	adds	r7, #28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b202:	b480      	push	{r7}
 800b204:	b087      	sub	sp, #28
 800b206:	af00      	add	r7, sp, #0
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b22e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	021b      	lsls	r3, r3, #8
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b240:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	031b      	lsls	r3, r3, #12
 800b246:	b29b      	uxth	r3, r3
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800b254:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	031b      	lsls	r3, r3, #12
 800b25a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	4313      	orrs	r3, r2
 800b262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	621a      	str	r2, [r3, #32]
}
 800b270:	bf00      	nop
 800b272:	371c      	adds	r7, #28
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b087      	sub	sp, #28
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	f003 031f 	and.w	r3, r3, #31
 800b28e:	2201      	movs	r2, #1
 800b290:	fa02 f303 	lsl.w	r3, r2, r3
 800b294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6a1a      	ldr	r2, [r3, #32]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	43db      	mvns	r3, r3
 800b29e:	401a      	ands	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6a1a      	ldr	r2, [r3, #32]
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f003 031f 	and.w	r3, r3, #31
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	621a      	str	r2, [r3, #32]
}
 800b2ba:	bf00      	nop
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e050      	b.n	800b382 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b306:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a1c      	ldr	r2, [pc, #112]	@ (800b390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d018      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b32c:	d013      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a18      	ldr	r2, [pc, #96]	@ (800b394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d00e      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a16      	ldr	r2, [pc, #88]	@ (800b398 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d009      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a15      	ldr	r2, [pc, #84]	@ (800b39c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d004      	beq.n	800b356 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a13      	ldr	r2, [pc, #76]	@ (800b3a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d10c      	bne.n	800b370 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b35c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	4313      	orrs	r3, r2
 800b366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	40010000 	.word	0x40010000
 800b394:	40000400 	.word	0x40000400
 800b398:	40000800 	.word	0x40000800
 800b39c:	40000c00 	.word	0x40000c00
 800b3a0:	40014000 	.word	0x40014000

0800b3a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3ac:	bf00      	nop
 800b3ae:	370c      	adds	r7, #12
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e042      	b.n	800b464 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f7 f94e 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2224      	movs	r2, #36	@ 0x24
 800b3fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b40e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f82b 	bl	800b46c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b424:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	695a      	ldr	r2, [r3, #20]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b434:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68da      	ldr	r2, [r3, #12]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b444:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2220      	movs	r2, #32
 800b450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3708      	adds	r7, #8
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b46c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b470:	b0c0      	sub	sp, #256	@ 0x100
 800b472:	af00      	add	r7, sp, #0
 800b474:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b488:	68d9      	ldr	r1, [r3, #12]
 800b48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	ea40 0301 	orr.w	r3, r0, r1
 800b494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b49a:	689a      	ldr	r2, [r3, #8]
 800b49c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4b0:	69db      	ldr	r3, [r3, #28]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b4b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b4c4:	f021 010c 	bic.w	r1, r1, #12
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b4e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4e6:	6999      	ldr	r1, [r3, #24]
 800b4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	ea40 0301 	orr.w	r3, r0, r1
 800b4f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	4b8f      	ldr	r3, [pc, #572]	@ (800b738 <UART_SetConfig+0x2cc>)
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d005      	beq.n	800b50c <UART_SetConfig+0xa0>
 800b500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b8d      	ldr	r3, [pc, #564]	@ (800b73c <UART_SetConfig+0x2d0>)
 800b508:	429a      	cmp	r2, r3
 800b50a:	d104      	bne.n	800b516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b50c:	f7fe fe14 	bl	800a138 <HAL_RCC_GetPCLK2Freq>
 800b510:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b514:	e003      	b.n	800b51e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b516:	f7fe fdfb 	bl	800a110 <HAL_RCC_GetPCLK1Freq>
 800b51a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b51e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b528:	f040 810c 	bne.w	800b744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b530:	2200      	movs	r2, #0
 800b532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b536:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b53a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b53e:	4622      	mov	r2, r4
 800b540:	462b      	mov	r3, r5
 800b542:	1891      	adds	r1, r2, r2
 800b544:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b546:	415b      	adcs	r3, r3
 800b548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b54a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b54e:	4621      	mov	r1, r4
 800b550:	eb12 0801 	adds.w	r8, r2, r1
 800b554:	4629      	mov	r1, r5
 800b556:	eb43 0901 	adc.w	r9, r3, r1
 800b55a:	f04f 0200 	mov.w	r2, #0
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b56a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b56e:	4690      	mov	r8, r2
 800b570:	4699      	mov	r9, r3
 800b572:	4623      	mov	r3, r4
 800b574:	eb18 0303 	adds.w	r3, r8, r3
 800b578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b57c:	462b      	mov	r3, r5
 800b57e:	eb49 0303 	adc.w	r3, r9, r3
 800b582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b592:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b59a:	460b      	mov	r3, r1
 800b59c:	18db      	adds	r3, r3, r3
 800b59e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	eb42 0303 	adc.w	r3, r2, r3
 800b5a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b5a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b5ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b5b0:	f7f5 fb72 	bl	8000c98 <__aeabi_uldivmod>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4b61      	ldr	r3, [pc, #388]	@ (800b740 <UART_SetConfig+0x2d4>)
 800b5ba:	fba3 2302 	umull	r2, r3, r3, r2
 800b5be:	095b      	lsrs	r3, r3, #5
 800b5c0:	011c      	lsls	r4, r3, #4
 800b5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b5d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	464b      	mov	r3, r9
 800b5d8:	1891      	adds	r1, r2, r2
 800b5da:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b5dc:	415b      	adcs	r3, r3
 800b5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b5e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	eb12 0a01 	adds.w	sl, r2, r1
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	eb43 0b01 	adc.w	fp, r3, r1
 800b5f0:	f04f 0200 	mov.w	r2, #0
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b5fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b604:	4692      	mov	sl, r2
 800b606:	469b      	mov	fp, r3
 800b608:	4643      	mov	r3, r8
 800b60a:	eb1a 0303 	adds.w	r3, sl, r3
 800b60e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b612:	464b      	mov	r3, r9
 800b614:	eb4b 0303 	adc.w	r3, fp, r3
 800b618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b61c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b62c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b630:	460b      	mov	r3, r1
 800b632:	18db      	adds	r3, r3, r3
 800b634:	643b      	str	r3, [r7, #64]	@ 0x40
 800b636:	4613      	mov	r3, r2
 800b638:	eb42 0303 	adc.w	r3, r2, r3
 800b63c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b63e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b646:	f7f5 fb27 	bl	8000c98 <__aeabi_uldivmod>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4611      	mov	r1, r2
 800b650:	4b3b      	ldr	r3, [pc, #236]	@ (800b740 <UART_SetConfig+0x2d4>)
 800b652:	fba3 2301 	umull	r2, r3, r3, r1
 800b656:	095b      	lsrs	r3, r3, #5
 800b658:	2264      	movs	r2, #100	@ 0x64
 800b65a:	fb02 f303 	mul.w	r3, r2, r3
 800b65e:	1acb      	subs	r3, r1, r3
 800b660:	00db      	lsls	r3, r3, #3
 800b662:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b666:	4b36      	ldr	r3, [pc, #216]	@ (800b740 <UART_SetConfig+0x2d4>)
 800b668:	fba3 2302 	umull	r2, r3, r3, r2
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b674:	441c      	add	r4, r3
 800b676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b680:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b688:	4642      	mov	r2, r8
 800b68a:	464b      	mov	r3, r9
 800b68c:	1891      	adds	r1, r2, r2
 800b68e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b690:	415b      	adcs	r3, r3
 800b692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b698:	4641      	mov	r1, r8
 800b69a:	1851      	adds	r1, r2, r1
 800b69c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b69e:	4649      	mov	r1, r9
 800b6a0:	414b      	adcs	r3, r1
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	f04f 0300 	mov.w	r3, #0
 800b6ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	00cb      	lsls	r3, r1, #3
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ba:	4651      	mov	r1, sl
 800b6bc:	00ca      	lsls	r2, r1, #3
 800b6be:	4610      	mov	r0, r2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	4642      	mov	r2, r8
 800b6c6:	189b      	adds	r3, r3, r2
 800b6c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	460a      	mov	r2, r1
 800b6d0:	eb42 0303 	adc.w	r3, r2, r3
 800b6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b6e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b6e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	18db      	adds	r3, r3, r3
 800b6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	eb42 0303 	adc.w	r3, r2, r3
 800b6f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b6fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b702:	f7f5 fac9 	bl	8000c98 <__aeabi_uldivmod>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4b0d      	ldr	r3, [pc, #52]	@ (800b740 <UART_SetConfig+0x2d4>)
 800b70c:	fba3 1302 	umull	r1, r3, r3, r2
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	2164      	movs	r1, #100	@ 0x64
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	00db      	lsls	r3, r3, #3
 800b71c:	3332      	adds	r3, #50	@ 0x32
 800b71e:	4a08      	ldr	r2, [pc, #32]	@ (800b740 <UART_SetConfig+0x2d4>)
 800b720:	fba2 2303 	umull	r2, r3, r2, r3
 800b724:	095b      	lsrs	r3, r3, #5
 800b726:	f003 0207 	and.w	r2, r3, #7
 800b72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4422      	add	r2, r4
 800b732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b734:	e106      	b.n	800b944 <UART_SetConfig+0x4d8>
 800b736:	bf00      	nop
 800b738:	40011000 	.word	0x40011000
 800b73c:	40011400 	.word	0x40011400
 800b740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b748:	2200      	movs	r2, #0
 800b74a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b74e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b756:	4642      	mov	r2, r8
 800b758:	464b      	mov	r3, r9
 800b75a:	1891      	adds	r1, r2, r2
 800b75c:	6239      	str	r1, [r7, #32]
 800b75e:	415b      	adcs	r3, r3
 800b760:	627b      	str	r3, [r7, #36]	@ 0x24
 800b762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b766:	4641      	mov	r1, r8
 800b768:	1854      	adds	r4, r2, r1
 800b76a:	4649      	mov	r1, r9
 800b76c:	eb43 0501 	adc.w	r5, r3, r1
 800b770:	f04f 0200 	mov.w	r2, #0
 800b774:	f04f 0300 	mov.w	r3, #0
 800b778:	00eb      	lsls	r3, r5, #3
 800b77a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b77e:	00e2      	lsls	r2, r4, #3
 800b780:	4614      	mov	r4, r2
 800b782:	461d      	mov	r5, r3
 800b784:	4643      	mov	r3, r8
 800b786:	18e3      	adds	r3, r4, r3
 800b788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b78c:	464b      	mov	r3, r9
 800b78e:	eb45 0303 	adc.w	r3, r5, r3
 800b792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b7a6:	f04f 0200 	mov.w	r2, #0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	008b      	lsls	r3, r1, #2
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7bc:	4621      	mov	r1, r4
 800b7be:	008a      	lsls	r2, r1, #2
 800b7c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b7c4:	f7f5 fa68 	bl	8000c98 <__aeabi_uldivmod>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4b60      	ldr	r3, [pc, #384]	@ (800b950 <UART_SetConfig+0x4e4>)
 800b7ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b7d2:	095b      	lsrs	r3, r3, #5
 800b7d4:	011c      	lsls	r4, r3, #4
 800b7d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b7e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b7e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b7e8:	4642      	mov	r2, r8
 800b7ea:	464b      	mov	r3, r9
 800b7ec:	1891      	adds	r1, r2, r2
 800b7ee:	61b9      	str	r1, [r7, #24]
 800b7f0:	415b      	adcs	r3, r3
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b7f8:	4641      	mov	r1, r8
 800b7fa:	1851      	adds	r1, r2, r1
 800b7fc:	6139      	str	r1, [r7, #16]
 800b7fe:	4649      	mov	r1, r9
 800b800:	414b      	adcs	r3, r1
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	f04f 0200 	mov.w	r2, #0
 800b808:	f04f 0300 	mov.w	r3, #0
 800b80c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b810:	4659      	mov	r1, fp
 800b812:	00cb      	lsls	r3, r1, #3
 800b814:	4651      	mov	r1, sl
 800b816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b81a:	4651      	mov	r1, sl
 800b81c:	00ca      	lsls	r2, r1, #3
 800b81e:	4610      	mov	r0, r2
 800b820:	4619      	mov	r1, r3
 800b822:	4603      	mov	r3, r0
 800b824:	4642      	mov	r2, r8
 800b826:	189b      	adds	r3, r3, r2
 800b828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b82c:	464b      	mov	r3, r9
 800b82e:	460a      	mov	r2, r1
 800b830:	eb42 0303 	adc.w	r3, r2, r3
 800b834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b842:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b844:	f04f 0200 	mov.w	r2, #0
 800b848:	f04f 0300 	mov.w	r3, #0
 800b84c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b850:	4649      	mov	r1, r9
 800b852:	008b      	lsls	r3, r1, #2
 800b854:	4641      	mov	r1, r8
 800b856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b85a:	4641      	mov	r1, r8
 800b85c:	008a      	lsls	r2, r1, #2
 800b85e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b862:	f7f5 fa19 	bl	8000c98 <__aeabi_uldivmod>
 800b866:	4602      	mov	r2, r0
 800b868:	460b      	mov	r3, r1
 800b86a:	4611      	mov	r1, r2
 800b86c:	4b38      	ldr	r3, [pc, #224]	@ (800b950 <UART_SetConfig+0x4e4>)
 800b86e:	fba3 2301 	umull	r2, r3, r3, r1
 800b872:	095b      	lsrs	r3, r3, #5
 800b874:	2264      	movs	r2, #100	@ 0x64
 800b876:	fb02 f303 	mul.w	r3, r2, r3
 800b87a:	1acb      	subs	r3, r1, r3
 800b87c:	011b      	lsls	r3, r3, #4
 800b87e:	3332      	adds	r3, #50	@ 0x32
 800b880:	4a33      	ldr	r2, [pc, #204]	@ (800b950 <UART_SetConfig+0x4e4>)
 800b882:	fba2 2303 	umull	r2, r3, r2, r3
 800b886:	095b      	lsrs	r3, r3, #5
 800b888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b88c:	441c      	add	r4, r3
 800b88e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b892:	2200      	movs	r2, #0
 800b894:	673b      	str	r3, [r7, #112]	@ 0x70
 800b896:	677a      	str	r2, [r7, #116]	@ 0x74
 800b898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b89c:	4642      	mov	r2, r8
 800b89e:	464b      	mov	r3, r9
 800b8a0:	1891      	adds	r1, r2, r2
 800b8a2:	60b9      	str	r1, [r7, #8]
 800b8a4:	415b      	adcs	r3, r3
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8ac:	4641      	mov	r1, r8
 800b8ae:	1851      	adds	r1, r2, r1
 800b8b0:	6039      	str	r1, [r7, #0]
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	414b      	adcs	r3, r1
 800b8b6:	607b      	str	r3, [r7, #4]
 800b8b8:	f04f 0200 	mov.w	r2, #0
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b8c4:	4659      	mov	r1, fp
 800b8c6:	00cb      	lsls	r3, r1, #3
 800b8c8:	4651      	mov	r1, sl
 800b8ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b8ce:	4651      	mov	r1, sl
 800b8d0:	00ca      	lsls	r2, r1, #3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4642      	mov	r2, r8
 800b8da:	189b      	adds	r3, r3, r2
 800b8dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8de:	464b      	mov	r3, r9
 800b8e0:	460a      	mov	r2, r1
 800b8e2:	eb42 0303 	adc.w	r3, r2, r3
 800b8e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b8e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f2:	667a      	str	r2, [r7, #100]	@ 0x64
 800b8f4:	f04f 0200 	mov.w	r2, #0
 800b8f8:	f04f 0300 	mov.w	r3, #0
 800b8fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b900:	4649      	mov	r1, r9
 800b902:	008b      	lsls	r3, r1, #2
 800b904:	4641      	mov	r1, r8
 800b906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b90a:	4641      	mov	r1, r8
 800b90c:	008a      	lsls	r2, r1, #2
 800b90e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b912:	f7f5 f9c1 	bl	8000c98 <__aeabi_uldivmod>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4b0d      	ldr	r3, [pc, #52]	@ (800b950 <UART_SetConfig+0x4e4>)
 800b91c:	fba3 1302 	umull	r1, r3, r3, r2
 800b920:	095b      	lsrs	r3, r3, #5
 800b922:	2164      	movs	r1, #100	@ 0x64
 800b924:	fb01 f303 	mul.w	r3, r1, r3
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	3332      	adds	r3, #50	@ 0x32
 800b92e:	4a08      	ldr	r2, [pc, #32]	@ (800b950 <UART_SetConfig+0x4e4>)
 800b930:	fba2 2303 	umull	r2, r3, r2, r3
 800b934:	095b      	lsrs	r3, r3, #5
 800b936:	f003 020f 	and.w	r2, r3, #15
 800b93a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4422      	add	r2, r4
 800b942:	609a      	str	r2, [r3, #8]
}
 800b944:	bf00      	nop
 800b946:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b94a:	46bd      	mov	sp, r7
 800b94c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b950:	51eb851f 	.word	0x51eb851f

0800b954 <__cvt>:
 800b954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	ec57 6b10 	vmov	r6, r7, d0
 800b95c:	2f00      	cmp	r7, #0
 800b95e:	460c      	mov	r4, r1
 800b960:	4619      	mov	r1, r3
 800b962:	463b      	mov	r3, r7
 800b964:	bfbb      	ittet	lt
 800b966:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b96a:	461f      	movlt	r7, r3
 800b96c:	2300      	movge	r3, #0
 800b96e:	232d      	movlt	r3, #45	@ 0x2d
 800b970:	700b      	strb	r3, [r1, #0]
 800b972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b974:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b978:	4691      	mov	r9, r2
 800b97a:	f023 0820 	bic.w	r8, r3, #32
 800b97e:	bfbc      	itt	lt
 800b980:	4632      	movlt	r2, r6
 800b982:	4616      	movlt	r6, r2
 800b984:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b988:	d005      	beq.n	800b996 <__cvt+0x42>
 800b98a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b98e:	d100      	bne.n	800b992 <__cvt+0x3e>
 800b990:	3401      	adds	r4, #1
 800b992:	2102      	movs	r1, #2
 800b994:	e000      	b.n	800b998 <__cvt+0x44>
 800b996:	2103      	movs	r1, #3
 800b998:	ab03      	add	r3, sp, #12
 800b99a:	9301      	str	r3, [sp, #4]
 800b99c:	ab02      	add	r3, sp, #8
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	ec47 6b10 	vmov	d0, r6, r7
 800b9a4:	4653      	mov	r3, sl
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	f001 ff72 	bl	800d890 <_dtoa_r>
 800b9ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	d119      	bne.n	800b9e8 <__cvt+0x94>
 800b9b4:	f019 0f01 	tst.w	r9, #1
 800b9b8:	d00e      	beq.n	800b9d8 <__cvt+0x84>
 800b9ba:	eb00 0904 	add.w	r9, r0, r4
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f5 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9ca:	b108      	cbz	r0, 800b9d0 <__cvt+0x7c>
 800b9cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9d0:	2230      	movs	r2, #48	@ 0x30
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	454b      	cmp	r3, r9
 800b9d6:	d31e      	bcc.n	800ba16 <__cvt+0xc2>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9dc:	1b5b      	subs	r3, r3, r5
 800b9de:	4628      	mov	r0, r5
 800b9e0:	6013      	str	r3, [r2, #0]
 800b9e2:	b004      	add	sp, #16
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b9ec:	eb00 0904 	add.w	r9, r0, r4
 800b9f0:	d1e5      	bne.n	800b9be <__cvt+0x6a>
 800b9f2:	7803      	ldrb	r3, [r0, #0]
 800b9f4:	2b30      	cmp	r3, #48	@ 0x30
 800b9f6:	d10a      	bne.n	800ba0e <__cvt+0xba>
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f5 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba04:	b918      	cbnz	r0, 800ba0e <__cvt+0xba>
 800ba06:	f1c4 0401 	rsb	r4, r4, #1
 800ba0a:	f8ca 4000 	str.w	r4, [sl]
 800ba0e:	f8da 3000 	ldr.w	r3, [sl]
 800ba12:	4499      	add	r9, r3
 800ba14:	e7d3      	b.n	800b9be <__cvt+0x6a>
 800ba16:	1c59      	adds	r1, r3, #1
 800ba18:	9103      	str	r1, [sp, #12]
 800ba1a:	701a      	strb	r2, [r3, #0]
 800ba1c:	e7d9      	b.n	800b9d2 <__cvt+0x7e>

0800ba1e <__exponent>:
 800ba1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba20:	2900      	cmp	r1, #0
 800ba22:	bfba      	itte	lt
 800ba24:	4249      	neglt	r1, r1
 800ba26:	232d      	movlt	r3, #45	@ 0x2d
 800ba28:	232b      	movge	r3, #43	@ 0x2b
 800ba2a:	2909      	cmp	r1, #9
 800ba2c:	7002      	strb	r2, [r0, #0]
 800ba2e:	7043      	strb	r3, [r0, #1]
 800ba30:	dd29      	ble.n	800ba86 <__exponent+0x68>
 800ba32:	f10d 0307 	add.w	r3, sp, #7
 800ba36:	461d      	mov	r5, r3
 800ba38:	270a      	movs	r7, #10
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ba40:	fb07 1416 	mls	r4, r7, r6, r1
 800ba44:	3430      	adds	r4, #48	@ 0x30
 800ba46:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	2c63      	cmp	r4, #99	@ 0x63
 800ba4e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ba52:	4631      	mov	r1, r6
 800ba54:	dcf1      	bgt.n	800ba3a <__exponent+0x1c>
 800ba56:	3130      	adds	r1, #48	@ 0x30
 800ba58:	1e94      	subs	r4, r2, #2
 800ba5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba5e:	1c41      	adds	r1, r0, #1
 800ba60:	4623      	mov	r3, r4
 800ba62:	42ab      	cmp	r3, r5
 800ba64:	d30a      	bcc.n	800ba7c <__exponent+0x5e>
 800ba66:	f10d 0309 	add.w	r3, sp, #9
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	42ac      	cmp	r4, r5
 800ba6e:	bf88      	it	hi
 800ba70:	2300      	movhi	r3, #0
 800ba72:	3302      	adds	r3, #2
 800ba74:	4403      	add	r3, r0
 800ba76:	1a18      	subs	r0, r3, r0
 800ba78:	b003      	add	sp, #12
 800ba7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba80:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba84:	e7ed      	b.n	800ba62 <__exponent+0x44>
 800ba86:	2330      	movs	r3, #48	@ 0x30
 800ba88:	3130      	adds	r1, #48	@ 0x30
 800ba8a:	7083      	strb	r3, [r0, #2]
 800ba8c:	70c1      	strb	r1, [r0, #3]
 800ba8e:	1d03      	adds	r3, r0, #4
 800ba90:	e7f1      	b.n	800ba76 <__exponent+0x58>
	...

0800ba94 <_printf_float>:
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	b08d      	sub	sp, #52	@ 0x34
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800baa0:	4616      	mov	r6, r2
 800baa2:	461f      	mov	r7, r3
 800baa4:	4605      	mov	r5, r0
 800baa6:	f001 fe13 	bl	800d6d0 <_localeconv_r>
 800baaa:	6803      	ldr	r3, [r0, #0]
 800baac:	9304      	str	r3, [sp, #16]
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f4 fbe6 	bl	8000280 <strlen>
 800bab4:	2300      	movs	r3, #0
 800bab6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bab8:	f8d8 3000 	ldr.w	r3, [r8]
 800babc:	9005      	str	r0, [sp, #20]
 800babe:	3307      	adds	r3, #7
 800bac0:	f023 0307 	bic.w	r3, r3, #7
 800bac4:	f103 0208 	add.w	r2, r3, #8
 800bac8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bacc:	f8d4 b000 	ldr.w	fp, [r4]
 800bad0:	f8c8 2000 	str.w	r2, [r8]
 800bad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bad8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	f8cd 8018 	str.w	r8, [sp, #24]
 800bae2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bae6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baea:	4b9c      	ldr	r3, [pc, #624]	@ (800bd5c <_printf_float+0x2c8>)
 800baec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800baf0:	f7f5 f824 	bl	8000b3c <__aeabi_dcmpun>
 800baf4:	bb70      	cbnz	r0, 800bb54 <_printf_float+0xc0>
 800baf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bafa:	4b98      	ldr	r3, [pc, #608]	@ (800bd5c <_printf_float+0x2c8>)
 800bafc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb00:	f7f4 fffe 	bl	8000b00 <__aeabi_dcmple>
 800bb04:	bb30      	cbnz	r0, 800bb54 <_printf_float+0xc0>
 800bb06:	2200      	movs	r2, #0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 ffed 	bl	8000aec <__aeabi_dcmplt>
 800bb12:	b110      	cbz	r0, 800bb1a <_printf_float+0x86>
 800bb14:	232d      	movs	r3, #45	@ 0x2d
 800bb16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb1a:	4a91      	ldr	r2, [pc, #580]	@ (800bd60 <_printf_float+0x2cc>)
 800bb1c:	4b91      	ldr	r3, [pc, #580]	@ (800bd64 <_printf_float+0x2d0>)
 800bb1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bb22:	bf94      	ite	ls
 800bb24:	4690      	movls	r8, r2
 800bb26:	4698      	movhi	r8, r3
 800bb28:	2303      	movs	r3, #3
 800bb2a:	6123      	str	r3, [r4, #16]
 800bb2c:	f02b 0304 	bic.w	r3, fp, #4
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	9700      	str	r7, [sp, #0]
 800bb38:	4633      	mov	r3, r6
 800bb3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f9d2 	bl	800bee8 <_printf_common>
 800bb44:	3001      	adds	r0, #1
 800bb46:	f040 808d 	bne.w	800bc64 <_printf_float+0x1d0>
 800bb4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb4e:	b00d      	add	sp, #52	@ 0x34
 800bb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb54:	4642      	mov	r2, r8
 800bb56:	464b      	mov	r3, r9
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	f7f4 ffee 	bl	8000b3c <__aeabi_dcmpun>
 800bb60:	b140      	cbz	r0, 800bb74 <_printf_float+0xe0>
 800bb62:	464b      	mov	r3, r9
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfbc      	itt	lt
 800bb68:	232d      	movlt	r3, #45	@ 0x2d
 800bb6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bb6e:	4a7e      	ldr	r2, [pc, #504]	@ (800bd68 <_printf_float+0x2d4>)
 800bb70:	4b7e      	ldr	r3, [pc, #504]	@ (800bd6c <_printf_float+0x2d8>)
 800bb72:	e7d4      	b.n	800bb1e <_printf_float+0x8a>
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bb7a:	9206      	str	r2, [sp, #24]
 800bb7c:	1c5a      	adds	r2, r3, #1
 800bb7e:	d13b      	bne.n	800bbf8 <_printf_float+0x164>
 800bb80:	2306      	movs	r3, #6
 800bb82:	6063      	str	r3, [r4, #4]
 800bb84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb88:	2300      	movs	r3, #0
 800bb8a:	6022      	str	r2, [r4, #0]
 800bb8c:	9303      	str	r3, [sp, #12]
 800bb8e:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb90:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb94:	ab09      	add	r3, sp, #36	@ 0x24
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	6861      	ldr	r1, [r4, #4]
 800bb9a:	ec49 8b10 	vmov	d0, r8, r9
 800bb9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bba2:	4628      	mov	r0, r5
 800bba4:	f7ff fed6 	bl	800b954 <__cvt>
 800bba8:	9b06      	ldr	r3, [sp, #24]
 800bbaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bbac:	2b47      	cmp	r3, #71	@ 0x47
 800bbae:	4680      	mov	r8, r0
 800bbb0:	d129      	bne.n	800bc06 <_printf_float+0x172>
 800bbb2:	1cc8      	adds	r0, r1, #3
 800bbb4:	db02      	blt.n	800bbbc <_printf_float+0x128>
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	4299      	cmp	r1, r3
 800bbba:	dd41      	ble.n	800bc40 <_printf_float+0x1ac>
 800bbbc:	f1aa 0a02 	sub.w	sl, sl, #2
 800bbc0:	fa5f fa8a 	uxtb.w	sl, sl
 800bbc4:	3901      	subs	r1, #1
 800bbc6:	4652      	mov	r2, sl
 800bbc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bbcc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bbce:	f7ff ff26 	bl	800ba1e <__exponent>
 800bbd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbd4:	1813      	adds	r3, r2, r0
 800bbd6:	2a01      	cmp	r2, #1
 800bbd8:	4681      	mov	r9, r0
 800bbda:	6123      	str	r3, [r4, #16]
 800bbdc:	dc02      	bgt.n	800bbe4 <_printf_float+0x150>
 800bbde:	6822      	ldr	r2, [r4, #0]
 800bbe0:	07d2      	lsls	r2, r2, #31
 800bbe2:	d501      	bpl.n	800bbe8 <_printf_float+0x154>
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d0a2      	beq.n	800bb36 <_printf_float+0xa2>
 800bbf0:	232d      	movs	r3, #45	@ 0x2d
 800bbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbf6:	e79e      	b.n	800bb36 <_printf_float+0xa2>
 800bbf8:	9a06      	ldr	r2, [sp, #24]
 800bbfa:	2a47      	cmp	r2, #71	@ 0x47
 800bbfc:	d1c2      	bne.n	800bb84 <_printf_float+0xf0>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1c0      	bne.n	800bb84 <_printf_float+0xf0>
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7bd      	b.n	800bb82 <_printf_float+0xee>
 800bc06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc0a:	d9db      	bls.n	800bbc4 <_printf_float+0x130>
 800bc0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bc10:	d118      	bne.n	800bc44 <_printf_float+0x1b0>
 800bc12:	2900      	cmp	r1, #0
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	dd0b      	ble.n	800bc30 <_printf_float+0x19c>
 800bc18:	6121      	str	r1, [r4, #16]
 800bc1a:	b913      	cbnz	r3, 800bc22 <_printf_float+0x18e>
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	07d0      	lsls	r0, r2, #31
 800bc20:	d502      	bpl.n	800bc28 <_printf_float+0x194>
 800bc22:	3301      	adds	r3, #1
 800bc24:	440b      	add	r3, r1
 800bc26:	6123      	str	r3, [r4, #16]
 800bc28:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bc2a:	f04f 0900 	mov.w	r9, #0
 800bc2e:	e7db      	b.n	800bbe8 <_printf_float+0x154>
 800bc30:	b913      	cbnz	r3, 800bc38 <_printf_float+0x1a4>
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	07d2      	lsls	r2, r2, #31
 800bc36:	d501      	bpl.n	800bc3c <_printf_float+0x1a8>
 800bc38:	3302      	adds	r3, #2
 800bc3a:	e7f4      	b.n	800bc26 <_printf_float+0x192>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f2      	b.n	800bc26 <_printf_float+0x192>
 800bc40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bc44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc46:	4299      	cmp	r1, r3
 800bc48:	db05      	blt.n	800bc56 <_printf_float+0x1c2>
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	6121      	str	r1, [r4, #16]
 800bc4e:	07d8      	lsls	r0, r3, #31
 800bc50:	d5ea      	bpl.n	800bc28 <_printf_float+0x194>
 800bc52:	1c4b      	adds	r3, r1, #1
 800bc54:	e7e7      	b.n	800bc26 <_printf_float+0x192>
 800bc56:	2900      	cmp	r1, #0
 800bc58:	bfd4      	ite	le
 800bc5a:	f1c1 0202 	rsble	r2, r1, #2
 800bc5e:	2201      	movgt	r2, #1
 800bc60:	4413      	add	r3, r2
 800bc62:	e7e0      	b.n	800bc26 <_printf_float+0x192>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	055a      	lsls	r2, r3, #21
 800bc68:	d407      	bmi.n	800bc7a <_printf_float+0x1e6>
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	d12b      	bne.n	800bcd0 <_printf_float+0x23c>
 800bc78:	e767      	b.n	800bb4a <_printf_float+0xb6>
 800bc7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc7e:	f240 80dd 	bls.w	800be3c <_printf_float+0x3a8>
 800bc82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc86:	2200      	movs	r2, #0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f7f4 ff25 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d033      	beq.n	800bcfa <_printf_float+0x266>
 800bc92:	4a37      	ldr	r2, [pc, #220]	@ (800bd70 <_printf_float+0x2dc>)
 800bc94:	2301      	movs	r3, #1
 800bc96:	4631      	mov	r1, r6
 800bc98:	4628      	mov	r0, r5
 800bc9a:	47b8      	blx	r7
 800bc9c:	3001      	adds	r0, #1
 800bc9e:	f43f af54 	beq.w	800bb4a <_printf_float+0xb6>
 800bca2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bca6:	4543      	cmp	r3, r8
 800bca8:	db02      	blt.n	800bcb0 <_printf_float+0x21c>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	07d8      	lsls	r0, r3, #31
 800bcae:	d50f      	bpl.n	800bcd0 <_printf_float+0x23c>
 800bcb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb4:	4631      	mov	r1, r6
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	47b8      	blx	r7
 800bcba:	3001      	adds	r0, #1
 800bcbc:	f43f af45 	beq.w	800bb4a <_printf_float+0xb6>
 800bcc0:	f04f 0900 	mov.w	r9, #0
 800bcc4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bcc8:	f104 0a1a 	add.w	sl, r4, #26
 800bccc:	45c8      	cmp	r8, r9
 800bcce:	dc09      	bgt.n	800bce4 <_printf_float+0x250>
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	079b      	lsls	r3, r3, #30
 800bcd4:	f100 8103 	bmi.w	800bede <_printf_float+0x44a>
 800bcd8:	68e0      	ldr	r0, [r4, #12]
 800bcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcdc:	4298      	cmp	r0, r3
 800bcde:	bfb8      	it	lt
 800bce0:	4618      	movlt	r0, r3
 800bce2:	e734      	b.n	800bb4e <_printf_float+0xba>
 800bce4:	2301      	movs	r3, #1
 800bce6:	4652      	mov	r2, sl
 800bce8:	4631      	mov	r1, r6
 800bcea:	4628      	mov	r0, r5
 800bcec:	47b8      	blx	r7
 800bcee:	3001      	adds	r0, #1
 800bcf0:	f43f af2b 	beq.w	800bb4a <_printf_float+0xb6>
 800bcf4:	f109 0901 	add.w	r9, r9, #1
 800bcf8:	e7e8      	b.n	800bccc <_printf_float+0x238>
 800bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dc39      	bgt.n	800bd74 <_printf_float+0x2e0>
 800bd00:	4a1b      	ldr	r2, [pc, #108]	@ (800bd70 <_printf_float+0x2dc>)
 800bd02:	2301      	movs	r3, #1
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f af1d 	beq.w	800bb4a <_printf_float+0xb6>
 800bd10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bd14:	ea59 0303 	orrs.w	r3, r9, r3
 800bd18:	d102      	bne.n	800bd20 <_printf_float+0x28c>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	07d9      	lsls	r1, r3, #31
 800bd1e:	d5d7      	bpl.n	800bcd0 <_printf_float+0x23c>
 800bd20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd24:	4631      	mov	r1, r6
 800bd26:	4628      	mov	r0, r5
 800bd28:	47b8      	blx	r7
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	f43f af0d 	beq.w	800bb4a <_printf_float+0xb6>
 800bd30:	f04f 0a00 	mov.w	sl, #0
 800bd34:	f104 0b1a 	add.w	fp, r4, #26
 800bd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3a:	425b      	negs	r3, r3
 800bd3c:	4553      	cmp	r3, sl
 800bd3e:	dc01      	bgt.n	800bd44 <_printf_float+0x2b0>
 800bd40:	464b      	mov	r3, r9
 800bd42:	e793      	b.n	800bc6c <_printf_float+0x1d8>
 800bd44:	2301      	movs	r3, #1
 800bd46:	465a      	mov	r2, fp
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	f43f aefb 	beq.w	800bb4a <_printf_float+0xb6>
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	e7ee      	b.n	800bd38 <_printf_float+0x2a4>
 800bd5a:	bf00      	nop
 800bd5c:	7fefffff 	.word	0x7fefffff
 800bd60:	080105c4 	.word	0x080105c4
 800bd64:	080105c8 	.word	0x080105c8
 800bd68:	080105cc 	.word	0x080105cc
 800bd6c:	080105d0 	.word	0x080105d0
 800bd70:	080105d4 	.word	0x080105d4
 800bd74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd7a:	4553      	cmp	r3, sl
 800bd7c:	bfa8      	it	ge
 800bd7e:	4653      	movge	r3, sl
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	4699      	mov	r9, r3
 800bd84:	dc36      	bgt.n	800bdf4 <_printf_float+0x360>
 800bd86:	f04f 0b00 	mov.w	fp, #0
 800bd8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd8e:	f104 021a 	add.w	r2, r4, #26
 800bd92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd94:	9306      	str	r3, [sp, #24]
 800bd96:	eba3 0309 	sub.w	r3, r3, r9
 800bd9a:	455b      	cmp	r3, fp
 800bd9c:	dc31      	bgt.n	800be02 <_printf_float+0x36e>
 800bd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda0:	459a      	cmp	sl, r3
 800bda2:	dc3a      	bgt.n	800be1a <_printf_float+0x386>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	07da      	lsls	r2, r3, #31
 800bda8:	d437      	bmi.n	800be1a <_printf_float+0x386>
 800bdaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdac:	ebaa 0903 	sub.w	r9, sl, r3
 800bdb0:	9b06      	ldr	r3, [sp, #24]
 800bdb2:	ebaa 0303 	sub.w	r3, sl, r3
 800bdb6:	4599      	cmp	r9, r3
 800bdb8:	bfa8      	it	ge
 800bdba:	4699      	movge	r9, r3
 800bdbc:	f1b9 0f00 	cmp.w	r9, #0
 800bdc0:	dc33      	bgt.n	800be2a <_printf_float+0x396>
 800bdc2:	f04f 0800 	mov.w	r8, #0
 800bdc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bdca:	f104 0b1a 	add.w	fp, r4, #26
 800bdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdd0:	ebaa 0303 	sub.w	r3, sl, r3
 800bdd4:	eba3 0309 	sub.w	r3, r3, r9
 800bdd8:	4543      	cmp	r3, r8
 800bdda:	f77f af79 	ble.w	800bcd0 <_printf_float+0x23c>
 800bdde:	2301      	movs	r3, #1
 800bde0:	465a      	mov	r2, fp
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f aeae 	beq.w	800bb4a <_printf_float+0xb6>
 800bdee:	f108 0801 	add.w	r8, r8, #1
 800bdf2:	e7ec      	b.n	800bdce <_printf_float+0x33a>
 800bdf4:	4642      	mov	r2, r8
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	d1c2      	bne.n	800bd86 <_printf_float+0x2f2>
 800be00:	e6a3      	b.n	800bb4a <_printf_float+0xb6>
 800be02:	2301      	movs	r3, #1
 800be04:	4631      	mov	r1, r6
 800be06:	4628      	mov	r0, r5
 800be08:	9206      	str	r2, [sp, #24]
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	f43f ae9c 	beq.w	800bb4a <_printf_float+0xb6>
 800be12:	9a06      	ldr	r2, [sp, #24]
 800be14:	f10b 0b01 	add.w	fp, fp, #1
 800be18:	e7bb      	b.n	800bd92 <_printf_float+0x2fe>
 800be1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be1e:	4631      	mov	r1, r6
 800be20:	4628      	mov	r0, r5
 800be22:	47b8      	blx	r7
 800be24:	3001      	adds	r0, #1
 800be26:	d1c0      	bne.n	800bdaa <_printf_float+0x316>
 800be28:	e68f      	b.n	800bb4a <_printf_float+0xb6>
 800be2a:	9a06      	ldr	r2, [sp, #24]
 800be2c:	464b      	mov	r3, r9
 800be2e:	4442      	add	r2, r8
 800be30:	4631      	mov	r1, r6
 800be32:	4628      	mov	r0, r5
 800be34:	47b8      	blx	r7
 800be36:	3001      	adds	r0, #1
 800be38:	d1c3      	bne.n	800bdc2 <_printf_float+0x32e>
 800be3a:	e686      	b.n	800bb4a <_printf_float+0xb6>
 800be3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800be40:	f1ba 0f01 	cmp.w	sl, #1
 800be44:	dc01      	bgt.n	800be4a <_printf_float+0x3b6>
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d536      	bpl.n	800beb8 <_printf_float+0x424>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4642      	mov	r2, r8
 800be4e:	4631      	mov	r1, r6
 800be50:	4628      	mov	r0, r5
 800be52:	47b8      	blx	r7
 800be54:	3001      	adds	r0, #1
 800be56:	f43f ae78 	beq.w	800bb4a <_printf_float+0xb6>
 800be5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be5e:	4631      	mov	r1, r6
 800be60:	4628      	mov	r0, r5
 800be62:	47b8      	blx	r7
 800be64:	3001      	adds	r0, #1
 800be66:	f43f ae70 	beq.w	800bb4a <_printf_float+0xb6>
 800be6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800be6e:	2200      	movs	r2, #0
 800be70:	2300      	movs	r3, #0
 800be72:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800be76:	f7f4 fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800be7a:	b9c0      	cbnz	r0, 800beae <_printf_float+0x41a>
 800be7c:	4653      	mov	r3, sl
 800be7e:	f108 0201 	add.w	r2, r8, #1
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	d10c      	bne.n	800bea6 <_printf_float+0x412>
 800be8c:	e65d      	b.n	800bb4a <_printf_float+0xb6>
 800be8e:	2301      	movs	r3, #1
 800be90:	465a      	mov	r2, fp
 800be92:	4631      	mov	r1, r6
 800be94:	4628      	mov	r0, r5
 800be96:	47b8      	blx	r7
 800be98:	3001      	adds	r0, #1
 800be9a:	f43f ae56 	beq.w	800bb4a <_printf_float+0xb6>
 800be9e:	f108 0801 	add.w	r8, r8, #1
 800bea2:	45d0      	cmp	r8, sl
 800bea4:	dbf3      	blt.n	800be8e <_printf_float+0x3fa>
 800bea6:	464b      	mov	r3, r9
 800bea8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800beac:	e6df      	b.n	800bc6e <_printf_float+0x1da>
 800beae:	f04f 0800 	mov.w	r8, #0
 800beb2:	f104 0b1a 	add.w	fp, r4, #26
 800beb6:	e7f4      	b.n	800bea2 <_printf_float+0x40e>
 800beb8:	2301      	movs	r3, #1
 800beba:	4642      	mov	r2, r8
 800bebc:	e7e1      	b.n	800be82 <_printf_float+0x3ee>
 800bebe:	2301      	movs	r3, #1
 800bec0:	464a      	mov	r2, r9
 800bec2:	4631      	mov	r1, r6
 800bec4:	4628      	mov	r0, r5
 800bec6:	47b8      	blx	r7
 800bec8:	3001      	adds	r0, #1
 800beca:	f43f ae3e 	beq.w	800bb4a <_printf_float+0xb6>
 800bece:	f108 0801 	add.w	r8, r8, #1
 800bed2:	68e3      	ldr	r3, [r4, #12]
 800bed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bed6:	1a5b      	subs	r3, r3, r1
 800bed8:	4543      	cmp	r3, r8
 800beda:	dcf0      	bgt.n	800bebe <_printf_float+0x42a>
 800bedc:	e6fc      	b.n	800bcd8 <_printf_float+0x244>
 800bede:	f04f 0800 	mov.w	r8, #0
 800bee2:	f104 0919 	add.w	r9, r4, #25
 800bee6:	e7f4      	b.n	800bed2 <_printf_float+0x43e>

0800bee8 <_printf_common>:
 800bee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beec:	4616      	mov	r6, r2
 800beee:	4698      	mov	r8, r3
 800bef0:	688a      	ldr	r2, [r1, #8]
 800bef2:	690b      	ldr	r3, [r1, #16]
 800bef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bef8:	4293      	cmp	r3, r2
 800befa:	bfb8      	it	lt
 800befc:	4613      	movlt	r3, r2
 800befe:	6033      	str	r3, [r6, #0]
 800bf00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf04:	4607      	mov	r7, r0
 800bf06:	460c      	mov	r4, r1
 800bf08:	b10a      	cbz	r2, 800bf0e <_printf_common+0x26>
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	6033      	str	r3, [r6, #0]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	0699      	lsls	r1, r3, #26
 800bf12:	bf42      	ittt	mi
 800bf14:	6833      	ldrmi	r3, [r6, #0]
 800bf16:	3302      	addmi	r3, #2
 800bf18:	6033      	strmi	r3, [r6, #0]
 800bf1a:	6825      	ldr	r5, [r4, #0]
 800bf1c:	f015 0506 	ands.w	r5, r5, #6
 800bf20:	d106      	bne.n	800bf30 <_printf_common+0x48>
 800bf22:	f104 0a19 	add.w	sl, r4, #25
 800bf26:	68e3      	ldr	r3, [r4, #12]
 800bf28:	6832      	ldr	r2, [r6, #0]
 800bf2a:	1a9b      	subs	r3, r3, r2
 800bf2c:	42ab      	cmp	r3, r5
 800bf2e:	dc26      	bgt.n	800bf7e <_printf_common+0x96>
 800bf30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf34:	6822      	ldr	r2, [r4, #0]
 800bf36:	3b00      	subs	r3, #0
 800bf38:	bf18      	it	ne
 800bf3a:	2301      	movne	r3, #1
 800bf3c:	0692      	lsls	r2, r2, #26
 800bf3e:	d42b      	bmi.n	800bf98 <_printf_common+0xb0>
 800bf40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf44:	4641      	mov	r1, r8
 800bf46:	4638      	mov	r0, r7
 800bf48:	47c8      	blx	r9
 800bf4a:	3001      	adds	r0, #1
 800bf4c:	d01e      	beq.n	800bf8c <_printf_common+0xa4>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	6922      	ldr	r2, [r4, #16]
 800bf52:	f003 0306 	and.w	r3, r3, #6
 800bf56:	2b04      	cmp	r3, #4
 800bf58:	bf02      	ittt	eq
 800bf5a:	68e5      	ldreq	r5, [r4, #12]
 800bf5c:	6833      	ldreq	r3, [r6, #0]
 800bf5e:	1aed      	subeq	r5, r5, r3
 800bf60:	68a3      	ldr	r3, [r4, #8]
 800bf62:	bf0c      	ite	eq
 800bf64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf68:	2500      	movne	r5, #0
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	bfc4      	itt	gt
 800bf6e:	1a9b      	subgt	r3, r3, r2
 800bf70:	18ed      	addgt	r5, r5, r3
 800bf72:	2600      	movs	r6, #0
 800bf74:	341a      	adds	r4, #26
 800bf76:	42b5      	cmp	r5, r6
 800bf78:	d11a      	bne.n	800bfb0 <_printf_common+0xc8>
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e008      	b.n	800bf90 <_printf_common+0xa8>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	4652      	mov	r2, sl
 800bf82:	4641      	mov	r1, r8
 800bf84:	4638      	mov	r0, r7
 800bf86:	47c8      	blx	r9
 800bf88:	3001      	adds	r0, #1
 800bf8a:	d103      	bne.n	800bf94 <_printf_common+0xac>
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf94:	3501      	adds	r5, #1
 800bf96:	e7c6      	b.n	800bf26 <_printf_common+0x3e>
 800bf98:	18e1      	adds	r1, r4, r3
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	2030      	movs	r0, #48	@ 0x30
 800bf9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfa2:	4422      	add	r2, r4
 800bfa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfac:	3302      	adds	r3, #2
 800bfae:	e7c7      	b.n	800bf40 <_printf_common+0x58>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4622      	mov	r2, r4
 800bfb4:	4641      	mov	r1, r8
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	47c8      	blx	r9
 800bfba:	3001      	adds	r0, #1
 800bfbc:	d0e6      	beq.n	800bf8c <_printf_common+0xa4>
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	e7d9      	b.n	800bf76 <_printf_common+0x8e>
	...

0800bfc4 <_printf_i>:
 800bfc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc8:	7e0f      	ldrb	r7, [r1, #24]
 800bfca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bfcc:	2f78      	cmp	r7, #120	@ 0x78
 800bfce:	4691      	mov	r9, r2
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	460c      	mov	r4, r1
 800bfd4:	469a      	mov	sl, r3
 800bfd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bfda:	d807      	bhi.n	800bfec <_printf_i+0x28>
 800bfdc:	2f62      	cmp	r7, #98	@ 0x62
 800bfde:	d80a      	bhi.n	800bff6 <_printf_i+0x32>
 800bfe0:	2f00      	cmp	r7, #0
 800bfe2:	f000 80d2 	beq.w	800c18a <_printf_i+0x1c6>
 800bfe6:	2f58      	cmp	r7, #88	@ 0x58
 800bfe8:	f000 80b9 	beq.w	800c15e <_printf_i+0x19a>
 800bfec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bff4:	e03a      	b.n	800c06c <_printf_i+0xa8>
 800bff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bffa:	2b15      	cmp	r3, #21
 800bffc:	d8f6      	bhi.n	800bfec <_printf_i+0x28>
 800bffe:	a101      	add	r1, pc, #4	@ (adr r1, 800c004 <_printf_i+0x40>)
 800c000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c004:	0800c05d 	.word	0x0800c05d
 800c008:	0800c071 	.word	0x0800c071
 800c00c:	0800bfed 	.word	0x0800bfed
 800c010:	0800bfed 	.word	0x0800bfed
 800c014:	0800bfed 	.word	0x0800bfed
 800c018:	0800bfed 	.word	0x0800bfed
 800c01c:	0800c071 	.word	0x0800c071
 800c020:	0800bfed 	.word	0x0800bfed
 800c024:	0800bfed 	.word	0x0800bfed
 800c028:	0800bfed 	.word	0x0800bfed
 800c02c:	0800bfed 	.word	0x0800bfed
 800c030:	0800c171 	.word	0x0800c171
 800c034:	0800c09b 	.word	0x0800c09b
 800c038:	0800c12b 	.word	0x0800c12b
 800c03c:	0800bfed 	.word	0x0800bfed
 800c040:	0800bfed 	.word	0x0800bfed
 800c044:	0800c193 	.word	0x0800c193
 800c048:	0800bfed 	.word	0x0800bfed
 800c04c:	0800c09b 	.word	0x0800c09b
 800c050:	0800bfed 	.word	0x0800bfed
 800c054:	0800bfed 	.word	0x0800bfed
 800c058:	0800c133 	.word	0x0800c133
 800c05c:	6833      	ldr	r3, [r6, #0]
 800c05e:	1d1a      	adds	r2, r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6032      	str	r2, [r6, #0]
 800c064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c06c:	2301      	movs	r3, #1
 800c06e:	e09d      	b.n	800c1ac <_printf_i+0x1e8>
 800c070:	6833      	ldr	r3, [r6, #0]
 800c072:	6820      	ldr	r0, [r4, #0]
 800c074:	1d19      	adds	r1, r3, #4
 800c076:	6031      	str	r1, [r6, #0]
 800c078:	0606      	lsls	r6, r0, #24
 800c07a:	d501      	bpl.n	800c080 <_printf_i+0xbc>
 800c07c:	681d      	ldr	r5, [r3, #0]
 800c07e:	e003      	b.n	800c088 <_printf_i+0xc4>
 800c080:	0645      	lsls	r5, r0, #25
 800c082:	d5fb      	bpl.n	800c07c <_printf_i+0xb8>
 800c084:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c088:	2d00      	cmp	r5, #0
 800c08a:	da03      	bge.n	800c094 <_printf_i+0xd0>
 800c08c:	232d      	movs	r3, #45	@ 0x2d
 800c08e:	426d      	negs	r5, r5
 800c090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c094:	4859      	ldr	r0, [pc, #356]	@ (800c1fc <_printf_i+0x238>)
 800c096:	230a      	movs	r3, #10
 800c098:	e011      	b.n	800c0be <_printf_i+0xfa>
 800c09a:	6821      	ldr	r1, [r4, #0]
 800c09c:	6833      	ldr	r3, [r6, #0]
 800c09e:	0608      	lsls	r0, r1, #24
 800c0a0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0a4:	d402      	bmi.n	800c0ac <_printf_i+0xe8>
 800c0a6:	0649      	lsls	r1, r1, #25
 800c0a8:	bf48      	it	mi
 800c0aa:	b2ad      	uxthmi	r5, r5
 800c0ac:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0ae:	4853      	ldr	r0, [pc, #332]	@ (800c1fc <_printf_i+0x238>)
 800c0b0:	6033      	str	r3, [r6, #0]
 800c0b2:	bf14      	ite	ne
 800c0b4:	230a      	movne	r3, #10
 800c0b6:	2308      	moveq	r3, #8
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0be:	6866      	ldr	r6, [r4, #4]
 800c0c0:	60a6      	str	r6, [r4, #8]
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	bfa2      	ittt	ge
 800c0c6:	6821      	ldrge	r1, [r4, #0]
 800c0c8:	f021 0104 	bicge.w	r1, r1, #4
 800c0cc:	6021      	strge	r1, [r4, #0]
 800c0ce:	b90d      	cbnz	r5, 800c0d4 <_printf_i+0x110>
 800c0d0:	2e00      	cmp	r6, #0
 800c0d2:	d04b      	beq.n	800c16c <_printf_i+0x1a8>
 800c0d4:	4616      	mov	r6, r2
 800c0d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0da:	fb03 5711 	mls	r7, r3, r1, r5
 800c0de:	5dc7      	ldrb	r7, [r0, r7]
 800c0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0e4:	462f      	mov	r7, r5
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	d9f4      	bls.n	800c0d6 <_printf_i+0x112>
 800c0ec:	2b08      	cmp	r3, #8
 800c0ee:	d10b      	bne.n	800c108 <_printf_i+0x144>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	07df      	lsls	r7, r3, #31
 800c0f4:	d508      	bpl.n	800c108 <_printf_i+0x144>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	6861      	ldr	r1, [r4, #4]
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	bfde      	ittt	le
 800c0fe:	2330      	movle	r3, #48	@ 0x30
 800c100:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c104:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c108:	1b92      	subs	r2, r2, r6
 800c10a:	6122      	str	r2, [r4, #16]
 800c10c:	f8cd a000 	str.w	sl, [sp]
 800c110:	464b      	mov	r3, r9
 800c112:	aa03      	add	r2, sp, #12
 800c114:	4621      	mov	r1, r4
 800c116:	4640      	mov	r0, r8
 800c118:	f7ff fee6 	bl	800bee8 <_printf_common>
 800c11c:	3001      	adds	r0, #1
 800c11e:	d14a      	bne.n	800c1b6 <_printf_i+0x1f2>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c124:	b004      	add	sp, #16
 800c126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	f043 0320 	orr.w	r3, r3, #32
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	4833      	ldr	r0, [pc, #204]	@ (800c200 <_printf_i+0x23c>)
 800c134:	2778      	movs	r7, #120	@ 0x78
 800c136:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	6831      	ldr	r1, [r6, #0]
 800c13e:	061f      	lsls	r7, r3, #24
 800c140:	f851 5b04 	ldr.w	r5, [r1], #4
 800c144:	d402      	bmi.n	800c14c <_printf_i+0x188>
 800c146:	065f      	lsls	r7, r3, #25
 800c148:	bf48      	it	mi
 800c14a:	b2ad      	uxthmi	r5, r5
 800c14c:	6031      	str	r1, [r6, #0]
 800c14e:	07d9      	lsls	r1, r3, #31
 800c150:	bf44      	itt	mi
 800c152:	f043 0320 	orrmi.w	r3, r3, #32
 800c156:	6023      	strmi	r3, [r4, #0]
 800c158:	b11d      	cbz	r5, 800c162 <_printf_i+0x19e>
 800c15a:	2310      	movs	r3, #16
 800c15c:	e7ac      	b.n	800c0b8 <_printf_i+0xf4>
 800c15e:	4827      	ldr	r0, [pc, #156]	@ (800c1fc <_printf_i+0x238>)
 800c160:	e7e9      	b.n	800c136 <_printf_i+0x172>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	f023 0320 	bic.w	r3, r3, #32
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	e7f6      	b.n	800c15a <_printf_i+0x196>
 800c16c:	4616      	mov	r6, r2
 800c16e:	e7bd      	b.n	800c0ec <_printf_i+0x128>
 800c170:	6833      	ldr	r3, [r6, #0]
 800c172:	6825      	ldr	r5, [r4, #0]
 800c174:	6961      	ldr	r1, [r4, #20]
 800c176:	1d18      	adds	r0, r3, #4
 800c178:	6030      	str	r0, [r6, #0]
 800c17a:	062e      	lsls	r6, r5, #24
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	d501      	bpl.n	800c184 <_printf_i+0x1c0>
 800c180:	6019      	str	r1, [r3, #0]
 800c182:	e002      	b.n	800c18a <_printf_i+0x1c6>
 800c184:	0668      	lsls	r0, r5, #25
 800c186:	d5fb      	bpl.n	800c180 <_printf_i+0x1bc>
 800c188:	8019      	strh	r1, [r3, #0]
 800c18a:	2300      	movs	r3, #0
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	4616      	mov	r6, r2
 800c190:	e7bc      	b.n	800c10c <_printf_i+0x148>
 800c192:	6833      	ldr	r3, [r6, #0]
 800c194:	1d1a      	adds	r2, r3, #4
 800c196:	6032      	str	r2, [r6, #0]
 800c198:	681e      	ldr	r6, [r3, #0]
 800c19a:	6862      	ldr	r2, [r4, #4]
 800c19c:	2100      	movs	r1, #0
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7f4 f81e 	bl	80001e0 <memchr>
 800c1a4:	b108      	cbz	r0, 800c1aa <_printf_i+0x1e6>
 800c1a6:	1b80      	subs	r0, r0, r6
 800c1a8:	6060      	str	r0, [r4, #4]
 800c1aa:	6863      	ldr	r3, [r4, #4]
 800c1ac:	6123      	str	r3, [r4, #16]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1b4:	e7aa      	b.n	800c10c <_printf_i+0x148>
 800c1b6:	6923      	ldr	r3, [r4, #16]
 800c1b8:	4632      	mov	r2, r6
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	4640      	mov	r0, r8
 800c1be:	47d0      	blx	sl
 800c1c0:	3001      	adds	r0, #1
 800c1c2:	d0ad      	beq.n	800c120 <_printf_i+0x15c>
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	079b      	lsls	r3, r3, #30
 800c1c8:	d413      	bmi.n	800c1f2 <_printf_i+0x22e>
 800c1ca:	68e0      	ldr	r0, [r4, #12]
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	4298      	cmp	r0, r3
 800c1d0:	bfb8      	it	lt
 800c1d2:	4618      	movlt	r0, r3
 800c1d4:	e7a6      	b.n	800c124 <_printf_i+0x160>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4632      	mov	r2, r6
 800c1da:	4649      	mov	r1, r9
 800c1dc:	4640      	mov	r0, r8
 800c1de:	47d0      	blx	sl
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d09d      	beq.n	800c120 <_printf_i+0x15c>
 800c1e4:	3501      	adds	r5, #1
 800c1e6:	68e3      	ldr	r3, [r4, #12]
 800c1e8:	9903      	ldr	r1, [sp, #12]
 800c1ea:	1a5b      	subs	r3, r3, r1
 800c1ec:	42ab      	cmp	r3, r5
 800c1ee:	dcf2      	bgt.n	800c1d6 <_printf_i+0x212>
 800c1f0:	e7eb      	b.n	800c1ca <_printf_i+0x206>
 800c1f2:	2500      	movs	r5, #0
 800c1f4:	f104 0619 	add.w	r6, r4, #25
 800c1f8:	e7f5      	b.n	800c1e6 <_printf_i+0x222>
 800c1fa:	bf00      	nop
 800c1fc:	080105d6 	.word	0x080105d6
 800c200:	080105e7 	.word	0x080105e7

0800c204 <_scanf_float>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	b087      	sub	sp, #28
 800c20a:	4617      	mov	r7, r2
 800c20c:	9303      	str	r3, [sp, #12]
 800c20e:	688b      	ldr	r3, [r1, #8]
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c216:	bf81      	itttt	hi
 800c218:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c21c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c220:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c224:	608b      	strhi	r3, [r1, #8]
 800c226:	680b      	ldr	r3, [r1, #0]
 800c228:	460a      	mov	r2, r1
 800c22a:	f04f 0500 	mov.w	r5, #0
 800c22e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c232:	f842 3b1c 	str.w	r3, [r2], #28
 800c236:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c23a:	4680      	mov	r8, r0
 800c23c:	460c      	mov	r4, r1
 800c23e:	bf98      	it	ls
 800c240:	f04f 0b00 	movls.w	fp, #0
 800c244:	9201      	str	r2, [sp, #4]
 800c246:	4616      	mov	r6, r2
 800c248:	46aa      	mov	sl, r5
 800c24a:	46a9      	mov	r9, r5
 800c24c:	9502      	str	r5, [sp, #8]
 800c24e:	68a2      	ldr	r2, [r4, #8]
 800c250:	b152      	cbz	r2, 800c268 <_scanf_float+0x64>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b4e      	cmp	r3, #78	@ 0x4e
 800c258:	d864      	bhi.n	800c324 <_scanf_float+0x120>
 800c25a:	2b40      	cmp	r3, #64	@ 0x40
 800c25c:	d83c      	bhi.n	800c2d8 <_scanf_float+0xd4>
 800c25e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c262:	b2c8      	uxtb	r0, r1
 800c264:	280e      	cmp	r0, #14
 800c266:	d93a      	bls.n	800c2de <_scanf_float+0xda>
 800c268:	f1b9 0f00 	cmp.w	r9, #0
 800c26c:	d003      	beq.n	800c276 <_scanf_float+0x72>
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c27a:	f1ba 0f01 	cmp.w	sl, #1
 800c27e:	f200 8117 	bhi.w	800c4b0 <_scanf_float+0x2ac>
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	429e      	cmp	r6, r3
 800c286:	f200 8108 	bhi.w	800c49a <_scanf_float+0x296>
 800c28a:	2001      	movs	r0, #1
 800c28c:	b007      	add	sp, #28
 800c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c292:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c296:	2a0d      	cmp	r2, #13
 800c298:	d8e6      	bhi.n	800c268 <_scanf_float+0x64>
 800c29a:	a101      	add	r1, pc, #4	@ (adr r1, 800c2a0 <_scanf_float+0x9c>)
 800c29c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c2a0:	0800c3e7 	.word	0x0800c3e7
 800c2a4:	0800c269 	.word	0x0800c269
 800c2a8:	0800c269 	.word	0x0800c269
 800c2ac:	0800c269 	.word	0x0800c269
 800c2b0:	0800c447 	.word	0x0800c447
 800c2b4:	0800c41f 	.word	0x0800c41f
 800c2b8:	0800c269 	.word	0x0800c269
 800c2bc:	0800c269 	.word	0x0800c269
 800c2c0:	0800c3f5 	.word	0x0800c3f5
 800c2c4:	0800c269 	.word	0x0800c269
 800c2c8:	0800c269 	.word	0x0800c269
 800c2cc:	0800c269 	.word	0x0800c269
 800c2d0:	0800c269 	.word	0x0800c269
 800c2d4:	0800c3ad 	.word	0x0800c3ad
 800c2d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c2dc:	e7db      	b.n	800c296 <_scanf_float+0x92>
 800c2de:	290e      	cmp	r1, #14
 800c2e0:	d8c2      	bhi.n	800c268 <_scanf_float+0x64>
 800c2e2:	a001      	add	r0, pc, #4	@ (adr r0, 800c2e8 <_scanf_float+0xe4>)
 800c2e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c2e8:	0800c39d 	.word	0x0800c39d
 800c2ec:	0800c269 	.word	0x0800c269
 800c2f0:	0800c39d 	.word	0x0800c39d
 800c2f4:	0800c433 	.word	0x0800c433
 800c2f8:	0800c269 	.word	0x0800c269
 800c2fc:	0800c345 	.word	0x0800c345
 800c300:	0800c383 	.word	0x0800c383
 800c304:	0800c383 	.word	0x0800c383
 800c308:	0800c383 	.word	0x0800c383
 800c30c:	0800c383 	.word	0x0800c383
 800c310:	0800c383 	.word	0x0800c383
 800c314:	0800c383 	.word	0x0800c383
 800c318:	0800c383 	.word	0x0800c383
 800c31c:	0800c383 	.word	0x0800c383
 800c320:	0800c383 	.word	0x0800c383
 800c324:	2b6e      	cmp	r3, #110	@ 0x6e
 800c326:	d809      	bhi.n	800c33c <_scanf_float+0x138>
 800c328:	2b60      	cmp	r3, #96	@ 0x60
 800c32a:	d8b2      	bhi.n	800c292 <_scanf_float+0x8e>
 800c32c:	2b54      	cmp	r3, #84	@ 0x54
 800c32e:	d07b      	beq.n	800c428 <_scanf_float+0x224>
 800c330:	2b59      	cmp	r3, #89	@ 0x59
 800c332:	d199      	bne.n	800c268 <_scanf_float+0x64>
 800c334:	2d07      	cmp	r5, #7
 800c336:	d197      	bne.n	800c268 <_scanf_float+0x64>
 800c338:	2508      	movs	r5, #8
 800c33a:	e02c      	b.n	800c396 <_scanf_float+0x192>
 800c33c:	2b74      	cmp	r3, #116	@ 0x74
 800c33e:	d073      	beq.n	800c428 <_scanf_float+0x224>
 800c340:	2b79      	cmp	r3, #121	@ 0x79
 800c342:	e7f6      	b.n	800c332 <_scanf_float+0x12e>
 800c344:	6821      	ldr	r1, [r4, #0]
 800c346:	05c8      	lsls	r0, r1, #23
 800c348:	d51b      	bpl.n	800c382 <_scanf_float+0x17e>
 800c34a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c34e:	6021      	str	r1, [r4, #0]
 800c350:	f109 0901 	add.w	r9, r9, #1
 800c354:	f1bb 0f00 	cmp.w	fp, #0
 800c358:	d003      	beq.n	800c362 <_scanf_float+0x15e>
 800c35a:	3201      	adds	r2, #1
 800c35c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c360:	60a2      	str	r2, [r4, #8]
 800c362:	68a3      	ldr	r3, [r4, #8]
 800c364:	3b01      	subs	r3, #1
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	3301      	adds	r3, #1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	3b01      	subs	r3, #1
 800c372:	2b00      	cmp	r3, #0
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	f340 8087 	ble.w	800c488 <_scanf_float+0x284>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	3301      	adds	r3, #1
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	e765      	b.n	800c24e <_scanf_float+0x4a>
 800c382:	eb1a 0105 	adds.w	r1, sl, r5
 800c386:	f47f af6f 	bne.w	800c268 <_scanf_float+0x64>
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	460d      	mov	r5, r1
 800c394:	468a      	mov	sl, r1
 800c396:	f806 3b01 	strb.w	r3, [r6], #1
 800c39a:	e7e2      	b.n	800c362 <_scanf_float+0x15e>
 800c39c:	6822      	ldr	r2, [r4, #0]
 800c39e:	0610      	lsls	r0, r2, #24
 800c3a0:	f57f af62 	bpl.w	800c268 <_scanf_float+0x64>
 800c3a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3a8:	6022      	str	r2, [r4, #0]
 800c3aa:	e7f4      	b.n	800c396 <_scanf_float+0x192>
 800c3ac:	f1ba 0f00 	cmp.w	sl, #0
 800c3b0:	d10e      	bne.n	800c3d0 <_scanf_float+0x1cc>
 800c3b2:	f1b9 0f00 	cmp.w	r9, #0
 800c3b6:	d10e      	bne.n	800c3d6 <_scanf_float+0x1d2>
 800c3b8:	6822      	ldr	r2, [r4, #0]
 800c3ba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c3be:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c3c2:	d108      	bne.n	800c3d6 <_scanf_float+0x1d2>
 800c3c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3c8:	6022      	str	r2, [r4, #0]
 800c3ca:	f04f 0a01 	mov.w	sl, #1
 800c3ce:	e7e2      	b.n	800c396 <_scanf_float+0x192>
 800c3d0:	f1ba 0f02 	cmp.w	sl, #2
 800c3d4:	d055      	beq.n	800c482 <_scanf_float+0x27e>
 800c3d6:	2d01      	cmp	r5, #1
 800c3d8:	d002      	beq.n	800c3e0 <_scanf_float+0x1dc>
 800c3da:	2d04      	cmp	r5, #4
 800c3dc:	f47f af44 	bne.w	800c268 <_scanf_float+0x64>
 800c3e0:	3501      	adds	r5, #1
 800c3e2:	b2ed      	uxtb	r5, r5
 800c3e4:	e7d7      	b.n	800c396 <_scanf_float+0x192>
 800c3e6:	f1ba 0f01 	cmp.w	sl, #1
 800c3ea:	f47f af3d 	bne.w	800c268 <_scanf_float+0x64>
 800c3ee:	f04f 0a02 	mov.w	sl, #2
 800c3f2:	e7d0      	b.n	800c396 <_scanf_float+0x192>
 800c3f4:	b97d      	cbnz	r5, 800c416 <_scanf_float+0x212>
 800c3f6:	f1b9 0f00 	cmp.w	r9, #0
 800c3fa:	f47f af38 	bne.w	800c26e <_scanf_float+0x6a>
 800c3fe:	6822      	ldr	r2, [r4, #0]
 800c400:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c404:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c408:	f040 8108 	bne.w	800c61c <_scanf_float+0x418>
 800c40c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c410:	6022      	str	r2, [r4, #0]
 800c412:	2501      	movs	r5, #1
 800c414:	e7bf      	b.n	800c396 <_scanf_float+0x192>
 800c416:	2d03      	cmp	r5, #3
 800c418:	d0e2      	beq.n	800c3e0 <_scanf_float+0x1dc>
 800c41a:	2d05      	cmp	r5, #5
 800c41c:	e7de      	b.n	800c3dc <_scanf_float+0x1d8>
 800c41e:	2d02      	cmp	r5, #2
 800c420:	f47f af22 	bne.w	800c268 <_scanf_float+0x64>
 800c424:	2503      	movs	r5, #3
 800c426:	e7b6      	b.n	800c396 <_scanf_float+0x192>
 800c428:	2d06      	cmp	r5, #6
 800c42a:	f47f af1d 	bne.w	800c268 <_scanf_float+0x64>
 800c42e:	2507      	movs	r5, #7
 800c430:	e7b1      	b.n	800c396 <_scanf_float+0x192>
 800c432:	6822      	ldr	r2, [r4, #0]
 800c434:	0591      	lsls	r1, r2, #22
 800c436:	f57f af17 	bpl.w	800c268 <_scanf_float+0x64>
 800c43a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c43e:	6022      	str	r2, [r4, #0]
 800c440:	f8cd 9008 	str.w	r9, [sp, #8]
 800c444:	e7a7      	b.n	800c396 <_scanf_float+0x192>
 800c446:	6822      	ldr	r2, [r4, #0]
 800c448:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c44c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c450:	d006      	beq.n	800c460 <_scanf_float+0x25c>
 800c452:	0550      	lsls	r0, r2, #21
 800c454:	f57f af08 	bpl.w	800c268 <_scanf_float+0x64>
 800c458:	f1b9 0f00 	cmp.w	r9, #0
 800c45c:	f000 80de 	beq.w	800c61c <_scanf_float+0x418>
 800c460:	0591      	lsls	r1, r2, #22
 800c462:	bf58      	it	pl
 800c464:	9902      	ldrpl	r1, [sp, #8]
 800c466:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c46a:	bf58      	it	pl
 800c46c:	eba9 0101 	subpl.w	r1, r9, r1
 800c470:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c474:	bf58      	it	pl
 800c476:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c47a:	6022      	str	r2, [r4, #0]
 800c47c:	f04f 0900 	mov.w	r9, #0
 800c480:	e789      	b.n	800c396 <_scanf_float+0x192>
 800c482:	f04f 0a03 	mov.w	sl, #3
 800c486:	e786      	b.n	800c396 <_scanf_float+0x192>
 800c488:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c48c:	4639      	mov	r1, r7
 800c48e:	4640      	mov	r0, r8
 800c490:	4798      	blx	r3
 800c492:	2800      	cmp	r0, #0
 800c494:	f43f aedb 	beq.w	800c24e <_scanf_float+0x4a>
 800c498:	e6e6      	b.n	800c268 <_scanf_float+0x64>
 800c49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c49e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	4798      	blx	r3
 800c4a8:	6923      	ldr	r3, [r4, #16]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	e6e8      	b.n	800c282 <_scanf_float+0x7e>
 800c4b0:	1e6b      	subs	r3, r5, #1
 800c4b2:	2b06      	cmp	r3, #6
 800c4b4:	d824      	bhi.n	800c500 <_scanf_float+0x2fc>
 800c4b6:	2d02      	cmp	r5, #2
 800c4b8:	d836      	bhi.n	800c528 <_scanf_float+0x324>
 800c4ba:	9b01      	ldr	r3, [sp, #4]
 800c4bc:	429e      	cmp	r6, r3
 800c4be:	f67f aee4 	bls.w	800c28a <_scanf_float+0x86>
 800c4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4798      	blx	r3
 800c4d0:	6923      	ldr	r3, [r4, #16]
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	e7f0      	b.n	800c4ba <_scanf_float+0x2b6>
 800c4d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c4e0:	463a      	mov	r2, r7
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	4798      	blx	r3
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	6123      	str	r3, [r4, #16]
 800c4ec:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c4f0:	fa5f fa8a 	uxtb.w	sl, sl
 800c4f4:	f1ba 0f02 	cmp.w	sl, #2
 800c4f8:	d1ee      	bne.n	800c4d8 <_scanf_float+0x2d4>
 800c4fa:	3d03      	subs	r5, #3
 800c4fc:	b2ed      	uxtb	r5, r5
 800c4fe:	1b76      	subs	r6, r6, r5
 800c500:	6823      	ldr	r3, [r4, #0]
 800c502:	05da      	lsls	r2, r3, #23
 800c504:	d530      	bpl.n	800c568 <_scanf_float+0x364>
 800c506:	055b      	lsls	r3, r3, #21
 800c508:	d511      	bpl.n	800c52e <_scanf_float+0x32a>
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	429e      	cmp	r6, r3
 800c50e:	f67f aebc 	bls.w	800c28a <_scanf_float+0x86>
 800c512:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c516:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c51a:	463a      	mov	r2, r7
 800c51c:	4640      	mov	r0, r8
 800c51e:	4798      	blx	r3
 800c520:	6923      	ldr	r3, [r4, #16]
 800c522:	3b01      	subs	r3, #1
 800c524:	6123      	str	r3, [r4, #16]
 800c526:	e7f0      	b.n	800c50a <_scanf_float+0x306>
 800c528:	46aa      	mov	sl, r5
 800c52a:	46b3      	mov	fp, r6
 800c52c:	e7de      	b.n	800c4ec <_scanf_float+0x2e8>
 800c52e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c532:	6923      	ldr	r3, [r4, #16]
 800c534:	2965      	cmp	r1, #101	@ 0x65
 800c536:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c53a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800c53e:	6123      	str	r3, [r4, #16]
 800c540:	d00c      	beq.n	800c55c <_scanf_float+0x358>
 800c542:	2945      	cmp	r1, #69	@ 0x45
 800c544:	d00a      	beq.n	800c55c <_scanf_float+0x358>
 800c546:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c54a:	463a      	mov	r2, r7
 800c54c:	4640      	mov	r0, r8
 800c54e:	4798      	blx	r3
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c556:	3b01      	subs	r3, #1
 800c558:	1eb5      	subs	r5, r6, #2
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c560:	463a      	mov	r2, r7
 800c562:	4640      	mov	r0, r8
 800c564:	4798      	blx	r3
 800c566:	462e      	mov	r6, r5
 800c568:	6822      	ldr	r2, [r4, #0]
 800c56a:	f012 0210 	ands.w	r2, r2, #16
 800c56e:	d001      	beq.n	800c574 <_scanf_float+0x370>
 800c570:	2000      	movs	r0, #0
 800c572:	e68b      	b.n	800c28c <_scanf_float+0x88>
 800c574:	7032      	strb	r2, [r6, #0]
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c57c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c580:	d11c      	bne.n	800c5bc <_scanf_float+0x3b8>
 800c582:	9b02      	ldr	r3, [sp, #8]
 800c584:	454b      	cmp	r3, r9
 800c586:	eba3 0209 	sub.w	r2, r3, r9
 800c58a:	d123      	bne.n	800c5d4 <_scanf_float+0x3d0>
 800c58c:	9901      	ldr	r1, [sp, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	4640      	mov	r0, r8
 800c592:	f000 ffd1 	bl	800d538 <_strtod_r>
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	6821      	ldr	r1, [r4, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f011 0f02 	tst.w	r1, #2
 800c5a0:	ec57 6b10 	vmov	r6, r7, d0
 800c5a4:	f103 0204 	add.w	r2, r3, #4
 800c5a8:	d01f      	beq.n	800c5ea <_scanf_float+0x3e6>
 800c5aa:	9903      	ldr	r1, [sp, #12]
 800c5ac:	600a      	str	r2, [r1, #0]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	e9c3 6700 	strd	r6, r7, [r3]
 800c5b4:	68e3      	ldr	r3, [r4, #12]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	60e3      	str	r3, [r4, #12]
 800c5ba:	e7d9      	b.n	800c570 <_scanf_float+0x36c>
 800c5bc:	9b04      	ldr	r3, [sp, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0e4      	beq.n	800c58c <_scanf_float+0x388>
 800c5c2:	9905      	ldr	r1, [sp, #20]
 800c5c4:	230a      	movs	r3, #10
 800c5c6:	3101      	adds	r1, #1
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	f001 f835 	bl	800d638 <_strtol_r>
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	9e05      	ldr	r6, [sp, #20]
 800c5d2:	1ac2      	subs	r2, r0, r3
 800c5d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c5d8:	429e      	cmp	r6, r3
 800c5da:	bf28      	it	cs
 800c5dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c5e0:	4910      	ldr	r1, [pc, #64]	@ (800c624 <_scanf_float+0x420>)
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f000 f8e2 	bl	800c7ac <siprintf>
 800c5e8:	e7d0      	b.n	800c58c <_scanf_float+0x388>
 800c5ea:	f011 0f04 	tst.w	r1, #4
 800c5ee:	9903      	ldr	r1, [sp, #12]
 800c5f0:	600a      	str	r2, [r1, #0]
 800c5f2:	d1dc      	bne.n	800c5ae <_scanf_float+0x3aa>
 800c5f4:	681d      	ldr	r5, [r3, #0]
 800c5f6:	4632      	mov	r2, r6
 800c5f8:	463b      	mov	r3, r7
 800c5fa:	4630      	mov	r0, r6
 800c5fc:	4639      	mov	r1, r7
 800c5fe:	f7f4 fa9d 	bl	8000b3c <__aeabi_dcmpun>
 800c602:	b128      	cbz	r0, 800c610 <_scanf_float+0x40c>
 800c604:	4808      	ldr	r0, [pc, #32]	@ (800c628 <_scanf_float+0x424>)
 800c606:	f001 f8b3 	bl	800d770 <nanf>
 800c60a:	ed85 0a00 	vstr	s0, [r5]
 800c60e:	e7d1      	b.n	800c5b4 <_scanf_float+0x3b0>
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f4 faf0 	bl	8000bf8 <__aeabi_d2f>
 800c618:	6028      	str	r0, [r5, #0]
 800c61a:	e7cb      	b.n	800c5b4 <_scanf_float+0x3b0>
 800c61c:	f04f 0900 	mov.w	r9, #0
 800c620:	e629      	b.n	800c276 <_scanf_float+0x72>
 800c622:	bf00      	nop
 800c624:	080105f8 	.word	0x080105f8
 800c628:	080109eb 	.word	0x080109eb

0800c62c <__sflush_r>:
 800c62c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	0716      	lsls	r6, r2, #28
 800c636:	4605      	mov	r5, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	d454      	bmi.n	800c6e6 <__sflush_r+0xba>
 800c63c:	684b      	ldr	r3, [r1, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dc02      	bgt.n	800c648 <__sflush_r+0x1c>
 800c642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c644:	2b00      	cmp	r3, #0
 800c646:	dd48      	ble.n	800c6da <__sflush_r+0xae>
 800c648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c64a:	2e00      	cmp	r6, #0
 800c64c:	d045      	beq.n	800c6da <__sflush_r+0xae>
 800c64e:	2300      	movs	r3, #0
 800c650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c654:	682f      	ldr	r7, [r5, #0]
 800c656:	6a21      	ldr	r1, [r4, #32]
 800c658:	602b      	str	r3, [r5, #0]
 800c65a:	d030      	beq.n	800c6be <__sflush_r+0x92>
 800c65c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c65e:	89a3      	ldrh	r3, [r4, #12]
 800c660:	0759      	lsls	r1, r3, #29
 800c662:	d505      	bpl.n	800c670 <__sflush_r+0x44>
 800c664:	6863      	ldr	r3, [r4, #4]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c66a:	b10b      	cbz	r3, 800c670 <__sflush_r+0x44>
 800c66c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c66e:	1ad2      	subs	r2, r2, r3
 800c670:	2300      	movs	r3, #0
 800c672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c674:	6a21      	ldr	r1, [r4, #32]
 800c676:	4628      	mov	r0, r5
 800c678:	47b0      	blx	r6
 800c67a:	1c43      	adds	r3, r0, #1
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	d106      	bne.n	800c68e <__sflush_r+0x62>
 800c680:	6829      	ldr	r1, [r5, #0]
 800c682:	291d      	cmp	r1, #29
 800c684:	d82b      	bhi.n	800c6de <__sflush_r+0xb2>
 800c686:	4a2a      	ldr	r2, [pc, #168]	@ (800c730 <__sflush_r+0x104>)
 800c688:	410a      	asrs	r2, r1
 800c68a:	07d6      	lsls	r6, r2, #31
 800c68c:	d427      	bmi.n	800c6de <__sflush_r+0xb2>
 800c68e:	2200      	movs	r2, #0
 800c690:	6062      	str	r2, [r4, #4]
 800c692:	04d9      	lsls	r1, r3, #19
 800c694:	6922      	ldr	r2, [r4, #16]
 800c696:	6022      	str	r2, [r4, #0]
 800c698:	d504      	bpl.n	800c6a4 <__sflush_r+0x78>
 800c69a:	1c42      	adds	r2, r0, #1
 800c69c:	d101      	bne.n	800c6a2 <__sflush_r+0x76>
 800c69e:	682b      	ldr	r3, [r5, #0]
 800c6a0:	b903      	cbnz	r3, 800c6a4 <__sflush_r+0x78>
 800c6a2:	6560      	str	r0, [r4, #84]	@ 0x54
 800c6a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c6a6:	602f      	str	r7, [r5, #0]
 800c6a8:	b1b9      	cbz	r1, 800c6da <__sflush_r+0xae>
 800c6aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d002      	beq.n	800c6b8 <__sflush_r+0x8c>
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f001 feb0 	bl	800e418 <_free_r>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6363      	str	r3, [r4, #52]	@ 0x34
 800c6bc:	e00d      	b.n	800c6da <__sflush_r+0xae>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b0      	blx	r6
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	1c50      	adds	r0, r2, #1
 800c6c8:	d1c9      	bne.n	800c65e <__sflush_r+0x32>
 800c6ca:	682b      	ldr	r3, [r5, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0c6      	beq.n	800c65e <__sflush_r+0x32>
 800c6d0:	2b1d      	cmp	r3, #29
 800c6d2:	d001      	beq.n	800c6d8 <__sflush_r+0xac>
 800c6d4:	2b16      	cmp	r3, #22
 800c6d6:	d11e      	bne.n	800c716 <__sflush_r+0xea>
 800c6d8:	602f      	str	r7, [r5, #0]
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e022      	b.n	800c724 <__sflush_r+0xf8>
 800c6de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6e2:	b21b      	sxth	r3, r3
 800c6e4:	e01b      	b.n	800c71e <__sflush_r+0xf2>
 800c6e6:	690f      	ldr	r7, [r1, #16]
 800c6e8:	2f00      	cmp	r7, #0
 800c6ea:	d0f6      	beq.n	800c6da <__sflush_r+0xae>
 800c6ec:	0793      	lsls	r3, r2, #30
 800c6ee:	680e      	ldr	r6, [r1, #0]
 800c6f0:	bf08      	it	eq
 800c6f2:	694b      	ldreq	r3, [r1, #20]
 800c6f4:	600f      	str	r7, [r1, #0]
 800c6f6:	bf18      	it	ne
 800c6f8:	2300      	movne	r3, #0
 800c6fa:	eba6 0807 	sub.w	r8, r6, r7
 800c6fe:	608b      	str	r3, [r1, #8]
 800c700:	f1b8 0f00 	cmp.w	r8, #0
 800c704:	dde9      	ble.n	800c6da <__sflush_r+0xae>
 800c706:	6a21      	ldr	r1, [r4, #32]
 800c708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c70a:	4643      	mov	r3, r8
 800c70c:	463a      	mov	r2, r7
 800c70e:	4628      	mov	r0, r5
 800c710:	47b0      	blx	r6
 800c712:	2800      	cmp	r0, #0
 800c714:	dc08      	bgt.n	800c728 <__sflush_r+0xfc>
 800c716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c71a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	4407      	add	r7, r0
 800c72a:	eba8 0800 	sub.w	r8, r8, r0
 800c72e:	e7e7      	b.n	800c700 <__sflush_r+0xd4>
 800c730:	dfbffffe 	.word	0xdfbffffe

0800c734 <_fflush_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	690b      	ldr	r3, [r1, #16]
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	b913      	cbnz	r3, 800c744 <_fflush_r+0x10>
 800c73e:	2500      	movs	r5, #0
 800c740:	4628      	mov	r0, r5
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	b118      	cbz	r0, 800c74e <_fflush_r+0x1a>
 800c746:	6a03      	ldr	r3, [r0, #32]
 800c748:	b90b      	cbnz	r3, 800c74e <_fflush_r+0x1a>
 800c74a:	f000 f8db 	bl	800c904 <__sinit>
 800c74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f3      	beq.n	800c73e <_fflush_r+0xa>
 800c756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c758:	07d0      	lsls	r0, r2, #31
 800c75a:	d404      	bmi.n	800c766 <_fflush_r+0x32>
 800c75c:	0599      	lsls	r1, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_fflush_r+0x32>
 800c760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c762:	f000 ffe4 	bl	800d72e <__retarget_lock_acquire_recursive>
 800c766:	4628      	mov	r0, r5
 800c768:	4621      	mov	r1, r4
 800c76a:	f7ff ff5f 	bl	800c62c <__sflush_r>
 800c76e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c770:	07da      	lsls	r2, r3, #31
 800c772:	4605      	mov	r5, r0
 800c774:	d4e4      	bmi.n	800c740 <_fflush_r+0xc>
 800c776:	89a3      	ldrh	r3, [r4, #12]
 800c778:	059b      	lsls	r3, r3, #22
 800c77a:	d4e1      	bmi.n	800c740 <_fflush_r+0xc>
 800c77c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c77e:	f000 ffd7 	bl	800d730 <__retarget_lock_release_recursive>
 800c782:	e7dd      	b.n	800c740 <_fflush_r+0xc>

0800c784 <fflush>:
 800c784:	4601      	mov	r1, r0
 800c786:	b920      	cbnz	r0, 800c792 <fflush+0xe>
 800c788:	4a04      	ldr	r2, [pc, #16]	@ (800c79c <fflush+0x18>)
 800c78a:	4905      	ldr	r1, [pc, #20]	@ (800c7a0 <fflush+0x1c>)
 800c78c:	4805      	ldr	r0, [pc, #20]	@ (800c7a4 <fflush+0x20>)
 800c78e:	f000 bf55 	b.w	800d63c <_fwalk_sglue>
 800c792:	4b05      	ldr	r3, [pc, #20]	@ (800c7a8 <fflush+0x24>)
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	f7ff bfcd 	b.w	800c734 <_fflush_r>
 800c79a:	bf00      	nop
 800c79c:	200002d8 	.word	0x200002d8
 800c7a0:	0800c735 	.word	0x0800c735
 800c7a4:	20000454 	.word	0x20000454
 800c7a8:	20000450 	.word	0x20000450

0800c7ac <siprintf>:
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b500      	push	{lr}
 800c7b0:	b09c      	sub	sp, #112	@ 0x70
 800c7b2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7b4:	9002      	str	r0, [sp, #8]
 800c7b6:	9006      	str	r0, [sp, #24]
 800c7b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c7bc:	4809      	ldr	r0, [pc, #36]	@ (800c7e4 <siprintf+0x38>)
 800c7be:	9107      	str	r1, [sp, #28]
 800c7c0:	9104      	str	r1, [sp, #16]
 800c7c2:	4909      	ldr	r1, [pc, #36]	@ (800c7e8 <siprintf+0x3c>)
 800c7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c8:	9105      	str	r1, [sp, #20]
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	a902      	add	r1, sp, #8
 800c7d0:	f002 fa00 	bl	800ebd4 <_svfiprintf_r>
 800c7d4:	9b02      	ldr	r3, [sp, #8]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	b01c      	add	sp, #112	@ 0x70
 800c7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e0:	b003      	add	sp, #12
 800c7e2:	4770      	bx	lr
 800c7e4:	20000450 	.word	0x20000450
 800c7e8:	ffff0208 	.word	0xffff0208

0800c7ec <std>:
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800c7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7fa:	6083      	str	r3, [r0, #8]
 800c7fc:	8181      	strh	r1, [r0, #12]
 800c7fe:	6643      	str	r3, [r0, #100]	@ 0x64
 800c800:	81c2      	strh	r2, [r0, #14]
 800c802:	6183      	str	r3, [r0, #24]
 800c804:	4619      	mov	r1, r3
 800c806:	2208      	movs	r2, #8
 800c808:	305c      	adds	r0, #92	@ 0x5c
 800c80a:	f000 ff59 	bl	800d6c0 <memset>
 800c80e:	4b0d      	ldr	r3, [pc, #52]	@ (800c844 <std+0x58>)
 800c810:	6263      	str	r3, [r4, #36]	@ 0x24
 800c812:	4b0d      	ldr	r3, [pc, #52]	@ (800c848 <std+0x5c>)
 800c814:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c816:	4b0d      	ldr	r3, [pc, #52]	@ (800c84c <std+0x60>)
 800c818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c81a:	4b0d      	ldr	r3, [pc, #52]	@ (800c850 <std+0x64>)
 800c81c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c81e:	4b0d      	ldr	r3, [pc, #52]	@ (800c854 <std+0x68>)
 800c820:	6224      	str	r4, [r4, #32]
 800c822:	429c      	cmp	r4, r3
 800c824:	d006      	beq.n	800c834 <std+0x48>
 800c826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c82a:	4294      	cmp	r4, r2
 800c82c:	d002      	beq.n	800c834 <std+0x48>
 800c82e:	33d0      	adds	r3, #208	@ 0xd0
 800c830:	429c      	cmp	r4, r3
 800c832:	d105      	bne.n	800c840 <std+0x54>
 800c834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c83c:	f000 bf76 	b.w	800d72c <__retarget_lock_init_recursive>
 800c840:	bd10      	pop	{r4, pc}
 800c842:	bf00      	nop
 800c844:	0800fb45 	.word	0x0800fb45
 800c848:	0800fb67 	.word	0x0800fb67
 800c84c:	0800fb9f 	.word	0x0800fb9f
 800c850:	0800fbc3 	.word	0x0800fbc3
 800c854:	200011cc 	.word	0x200011cc

0800c858 <stdio_exit_handler>:
 800c858:	4a02      	ldr	r2, [pc, #8]	@ (800c864 <stdio_exit_handler+0xc>)
 800c85a:	4903      	ldr	r1, [pc, #12]	@ (800c868 <stdio_exit_handler+0x10>)
 800c85c:	4803      	ldr	r0, [pc, #12]	@ (800c86c <stdio_exit_handler+0x14>)
 800c85e:	f000 beed 	b.w	800d63c <_fwalk_sglue>
 800c862:	bf00      	nop
 800c864:	200002d8 	.word	0x200002d8
 800c868:	0800c735 	.word	0x0800c735
 800c86c:	20000454 	.word	0x20000454

0800c870 <cleanup_stdio>:
 800c870:	6841      	ldr	r1, [r0, #4]
 800c872:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a4 <cleanup_stdio+0x34>)
 800c874:	4299      	cmp	r1, r3
 800c876:	b510      	push	{r4, lr}
 800c878:	4604      	mov	r4, r0
 800c87a:	d001      	beq.n	800c880 <cleanup_stdio+0x10>
 800c87c:	f7ff ff5a 	bl	800c734 <_fflush_r>
 800c880:	68a1      	ldr	r1, [r4, #8]
 800c882:	4b09      	ldr	r3, [pc, #36]	@ (800c8a8 <cleanup_stdio+0x38>)
 800c884:	4299      	cmp	r1, r3
 800c886:	d002      	beq.n	800c88e <cleanup_stdio+0x1e>
 800c888:	4620      	mov	r0, r4
 800c88a:	f7ff ff53 	bl	800c734 <_fflush_r>
 800c88e:	68e1      	ldr	r1, [r4, #12]
 800c890:	4b06      	ldr	r3, [pc, #24]	@ (800c8ac <cleanup_stdio+0x3c>)
 800c892:	4299      	cmp	r1, r3
 800c894:	d004      	beq.n	800c8a0 <cleanup_stdio+0x30>
 800c896:	4620      	mov	r0, r4
 800c898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c89c:	f7ff bf4a 	b.w	800c734 <_fflush_r>
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200011cc 	.word	0x200011cc
 800c8a8:	20001234 	.word	0x20001234
 800c8ac:	2000129c 	.word	0x2000129c

0800c8b0 <global_stdio_init.part.0>:
 800c8b0:	b510      	push	{r4, lr}
 800c8b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e0 <global_stdio_init.part.0+0x30>)
 800c8b4:	4c0b      	ldr	r4, [pc, #44]	@ (800c8e4 <global_stdio_init.part.0+0x34>)
 800c8b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c8e8 <global_stdio_init.part.0+0x38>)
 800c8b8:	601a      	str	r2, [r3, #0]
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2104      	movs	r1, #4
 800c8c0:	f7ff ff94 	bl	800c7ec <std>
 800c8c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	2109      	movs	r1, #9
 800c8cc:	f7ff ff8e 	bl	800c7ec <std>
 800c8d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8da:	2112      	movs	r1, #18
 800c8dc:	f7ff bf86 	b.w	800c7ec <std>
 800c8e0:	20001304 	.word	0x20001304
 800c8e4:	200011cc 	.word	0x200011cc
 800c8e8:	0800c859 	.word	0x0800c859

0800c8ec <__sfp_lock_acquire>:
 800c8ec:	4801      	ldr	r0, [pc, #4]	@ (800c8f4 <__sfp_lock_acquire+0x8>)
 800c8ee:	f000 bf1e 	b.w	800d72e <__retarget_lock_acquire_recursive>
 800c8f2:	bf00      	nop
 800c8f4:	20001309 	.word	0x20001309

0800c8f8 <__sfp_lock_release>:
 800c8f8:	4801      	ldr	r0, [pc, #4]	@ (800c900 <__sfp_lock_release+0x8>)
 800c8fa:	f000 bf19 	b.w	800d730 <__retarget_lock_release_recursive>
 800c8fe:	bf00      	nop
 800c900:	20001309 	.word	0x20001309

0800c904 <__sinit>:
 800c904:	b510      	push	{r4, lr}
 800c906:	4604      	mov	r4, r0
 800c908:	f7ff fff0 	bl	800c8ec <__sfp_lock_acquire>
 800c90c:	6a23      	ldr	r3, [r4, #32]
 800c90e:	b11b      	cbz	r3, 800c918 <__sinit+0x14>
 800c910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c914:	f7ff bff0 	b.w	800c8f8 <__sfp_lock_release>
 800c918:	4b04      	ldr	r3, [pc, #16]	@ (800c92c <__sinit+0x28>)
 800c91a:	6223      	str	r3, [r4, #32]
 800c91c:	4b04      	ldr	r3, [pc, #16]	@ (800c930 <__sinit+0x2c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1f5      	bne.n	800c910 <__sinit+0xc>
 800c924:	f7ff ffc4 	bl	800c8b0 <global_stdio_init.part.0>
 800c928:	e7f2      	b.n	800c910 <__sinit+0xc>
 800c92a:	bf00      	nop
 800c92c:	0800c871 	.word	0x0800c871
 800c930:	20001304 	.word	0x20001304

0800c934 <sulp>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	ec45 4b10 	vmov	d0, r4, r5
 800c93e:	4616      	mov	r6, r2
 800c940:	f002 ffc2 	bl	800f8c8 <__ulp>
 800c944:	ec51 0b10 	vmov	r0, r1, d0
 800c948:	b17e      	cbz	r6, 800c96a <sulp+0x36>
 800c94a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c94e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c952:	2b00      	cmp	r3, #0
 800c954:	dd09      	ble.n	800c96a <sulp+0x36>
 800c956:	051b      	lsls	r3, r3, #20
 800c958:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c95c:	2400      	movs	r4, #0
 800c95e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c962:	4622      	mov	r2, r4
 800c964:	462b      	mov	r3, r5
 800c966:	f7f3 fe4f 	bl	8000608 <__aeabi_dmul>
 800c96a:	ec41 0b10 	vmov	d0, r0, r1
 800c96e:	bd70      	pop	{r4, r5, r6, pc}

0800c970 <_strtod_l>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	b09f      	sub	sp, #124	@ 0x7c
 800c976:	460c      	mov	r4, r1
 800c978:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c97a:	2200      	movs	r2, #0
 800c97c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c97e:	9005      	str	r0, [sp, #20]
 800c980:	f04f 0a00 	mov.w	sl, #0
 800c984:	f04f 0b00 	mov.w	fp, #0
 800c988:	460a      	mov	r2, r1
 800c98a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c98c:	7811      	ldrb	r1, [r2, #0]
 800c98e:	292b      	cmp	r1, #43	@ 0x2b
 800c990:	d04a      	beq.n	800ca28 <_strtod_l+0xb8>
 800c992:	d838      	bhi.n	800ca06 <_strtod_l+0x96>
 800c994:	290d      	cmp	r1, #13
 800c996:	d832      	bhi.n	800c9fe <_strtod_l+0x8e>
 800c998:	2908      	cmp	r1, #8
 800c99a:	d832      	bhi.n	800ca02 <_strtod_l+0x92>
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d03b      	beq.n	800ca18 <_strtod_l+0xa8>
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c9a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c9a6:	782a      	ldrb	r2, [r5, #0]
 800c9a8:	2a30      	cmp	r2, #48	@ 0x30
 800c9aa:	f040 80b3 	bne.w	800cb14 <_strtod_l+0x1a4>
 800c9ae:	786a      	ldrb	r2, [r5, #1]
 800c9b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c9b4:	2a58      	cmp	r2, #88	@ 0x58
 800c9b6:	d16e      	bne.n	800ca96 <_strtod_l+0x126>
 800c9b8:	9302      	str	r3, [sp, #8]
 800c9ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	ab1a      	add	r3, sp, #104	@ 0x68
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	4a8e      	ldr	r2, [pc, #568]	@ (800cbfc <_strtod_l+0x28c>)
 800c9c4:	9805      	ldr	r0, [sp, #20]
 800c9c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c9c8:	a919      	add	r1, sp, #100	@ 0x64
 800c9ca:	f001 fdd7 	bl	800e57c <__gethex>
 800c9ce:	f010 060f 	ands.w	r6, r0, #15
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	d005      	beq.n	800c9e2 <_strtod_l+0x72>
 800c9d6:	2e06      	cmp	r6, #6
 800c9d8:	d128      	bne.n	800ca2c <_strtod_l+0xbc>
 800c9da:	3501      	adds	r5, #1
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9519      	str	r5, [sp, #100]	@ 0x64
 800c9e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f040 858e 	bne.w	800d506 <_strtod_l+0xb96>
 800c9ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9ec:	b1cb      	cbz	r3, 800ca22 <_strtod_l+0xb2>
 800c9ee:	4652      	mov	r2, sl
 800c9f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c9f4:	ec43 2b10 	vmov	d0, r2, r3
 800c9f8:	b01f      	add	sp, #124	@ 0x7c
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2920      	cmp	r1, #32
 800ca00:	d1ce      	bne.n	800c9a0 <_strtod_l+0x30>
 800ca02:	3201      	adds	r2, #1
 800ca04:	e7c1      	b.n	800c98a <_strtod_l+0x1a>
 800ca06:	292d      	cmp	r1, #45	@ 0x2d
 800ca08:	d1ca      	bne.n	800c9a0 <_strtod_l+0x30>
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ca0e:	1c51      	adds	r1, r2, #1
 800ca10:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca12:	7852      	ldrb	r2, [r2, #1]
 800ca14:	2a00      	cmp	r2, #0
 800ca16:	d1c5      	bne.n	800c9a4 <_strtod_l+0x34>
 800ca18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f040 8570 	bne.w	800d502 <_strtod_l+0xb92>
 800ca22:	4652      	mov	r2, sl
 800ca24:	465b      	mov	r3, fp
 800ca26:	e7e5      	b.n	800c9f4 <_strtod_l+0x84>
 800ca28:	2100      	movs	r1, #0
 800ca2a:	e7ef      	b.n	800ca0c <_strtod_l+0x9c>
 800ca2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ca2e:	b13a      	cbz	r2, 800ca40 <_strtod_l+0xd0>
 800ca30:	2135      	movs	r1, #53	@ 0x35
 800ca32:	a81c      	add	r0, sp, #112	@ 0x70
 800ca34:	f003 f842 	bl	800fabc <__copybits>
 800ca38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca3a:	9805      	ldr	r0, [sp, #20]
 800ca3c:	f002 fc10 	bl	800f260 <_Bfree>
 800ca40:	3e01      	subs	r6, #1
 800ca42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ca44:	2e04      	cmp	r6, #4
 800ca46:	d806      	bhi.n	800ca56 <_strtod_l+0xe6>
 800ca48:	e8df f006 	tbb	[pc, r6]
 800ca4c:	201d0314 	.word	0x201d0314
 800ca50:	14          	.byte	0x14
 800ca51:	00          	.byte	0x00
 800ca52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ca56:	05e1      	lsls	r1, r4, #23
 800ca58:	bf48      	it	mi
 800ca5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ca5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca62:	0d1b      	lsrs	r3, r3, #20
 800ca64:	051b      	lsls	r3, r3, #20
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1bb      	bne.n	800c9e2 <_strtod_l+0x72>
 800ca6a:	f000 fe35 	bl	800d6d8 <__errno>
 800ca6e:	2322      	movs	r3, #34	@ 0x22
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	e7b6      	b.n	800c9e2 <_strtod_l+0x72>
 800ca74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca84:	e7e7      	b.n	800ca56 <_strtod_l+0xe6>
 800ca86:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cc04 <_strtod_l+0x294>
 800ca8a:	e7e4      	b.n	800ca56 <_strtod_l+0xe6>
 800ca8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca90:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ca94:	e7df      	b.n	800ca56 <_strtod_l+0xe6>
 800ca96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	2b30      	cmp	r3, #48	@ 0x30
 800caa0:	d0f9      	beq.n	800ca96 <_strtod_l+0x126>
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d09d      	beq.n	800c9e2 <_strtod_l+0x72>
 800caa6:	2301      	movs	r3, #1
 800caa8:	9309      	str	r3, [sp, #36]	@ 0x24
 800caaa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caac:	930c      	str	r3, [sp, #48]	@ 0x30
 800caae:	2300      	movs	r3, #0
 800cab0:	9308      	str	r3, [sp, #32]
 800cab2:	930a      	str	r3, [sp, #40]	@ 0x28
 800cab4:	461f      	mov	r7, r3
 800cab6:	220a      	movs	r2, #10
 800cab8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800caba:	7805      	ldrb	r5, [r0, #0]
 800cabc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cac0:	b2d9      	uxtb	r1, r3
 800cac2:	2909      	cmp	r1, #9
 800cac4:	d928      	bls.n	800cb18 <_strtod_l+0x1a8>
 800cac6:	494e      	ldr	r1, [pc, #312]	@ (800cc00 <_strtod_l+0x290>)
 800cac8:	2201      	movs	r2, #1
 800caca:	f000 fde7 	bl	800d69c <strncmp>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d032      	beq.n	800cb38 <_strtod_l+0x1c8>
 800cad2:	2000      	movs	r0, #0
 800cad4:	462a      	mov	r2, r5
 800cad6:	4681      	mov	r9, r0
 800cad8:	463d      	mov	r5, r7
 800cada:	4603      	mov	r3, r0
 800cadc:	2a65      	cmp	r2, #101	@ 0x65
 800cade:	d001      	beq.n	800cae4 <_strtod_l+0x174>
 800cae0:	2a45      	cmp	r2, #69	@ 0x45
 800cae2:	d114      	bne.n	800cb0e <_strtod_l+0x19e>
 800cae4:	b91d      	cbnz	r5, 800caee <_strtod_l+0x17e>
 800cae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cae8:	4302      	orrs	r2, r0
 800caea:	d095      	beq.n	800ca18 <_strtod_l+0xa8>
 800caec:	2500      	movs	r5, #0
 800caee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800caf0:	1c62      	adds	r2, r4, #1
 800caf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800caf4:	7862      	ldrb	r2, [r4, #1]
 800caf6:	2a2b      	cmp	r2, #43	@ 0x2b
 800caf8:	d077      	beq.n	800cbea <_strtod_l+0x27a>
 800cafa:	2a2d      	cmp	r2, #45	@ 0x2d
 800cafc:	d07b      	beq.n	800cbf6 <_strtod_l+0x286>
 800cafe:	f04f 0c00 	mov.w	ip, #0
 800cb02:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb06:	2909      	cmp	r1, #9
 800cb08:	f240 8082 	bls.w	800cc10 <_strtod_l+0x2a0>
 800cb0c:	9419      	str	r4, [sp, #100]	@ 0x64
 800cb0e:	f04f 0800 	mov.w	r8, #0
 800cb12:	e0a2      	b.n	800cc5a <_strtod_l+0x2ea>
 800cb14:	2300      	movs	r3, #0
 800cb16:	e7c7      	b.n	800caa8 <_strtod_l+0x138>
 800cb18:	2f08      	cmp	r7, #8
 800cb1a:	bfd5      	itete	le
 800cb1c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cb1e:	9908      	ldrgt	r1, [sp, #32]
 800cb20:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb24:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cb28:	f100 0001 	add.w	r0, r0, #1
 800cb2c:	bfd4      	ite	le
 800cb2e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cb30:	9308      	strgt	r3, [sp, #32]
 800cb32:	3701      	adds	r7, #1
 800cb34:	9019      	str	r0, [sp, #100]	@ 0x64
 800cb36:	e7bf      	b.n	800cab8 <_strtod_l+0x148>
 800cb38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb3e:	785a      	ldrb	r2, [r3, #1]
 800cb40:	b37f      	cbz	r7, 800cba2 <_strtod_l+0x232>
 800cb42:	4681      	mov	r9, r0
 800cb44:	463d      	mov	r5, r7
 800cb46:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cb4a:	2b09      	cmp	r3, #9
 800cb4c:	d912      	bls.n	800cb74 <_strtod_l+0x204>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e7c4      	b.n	800cadc <_strtod_l+0x16c>
 800cb52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb58:	785a      	ldrb	r2, [r3, #1]
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	2a30      	cmp	r2, #48	@ 0x30
 800cb5e:	d0f8      	beq.n	800cb52 <_strtod_l+0x1e2>
 800cb60:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cb64:	2b08      	cmp	r3, #8
 800cb66:	f200 84d3 	bhi.w	800d510 <_strtod_l+0xba0>
 800cb6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb6e:	4681      	mov	r9, r0
 800cb70:	2000      	movs	r0, #0
 800cb72:	4605      	mov	r5, r0
 800cb74:	3a30      	subs	r2, #48	@ 0x30
 800cb76:	f100 0301 	add.w	r3, r0, #1
 800cb7a:	d02a      	beq.n	800cbd2 <_strtod_l+0x262>
 800cb7c:	4499      	add	r9, r3
 800cb7e:	eb00 0c05 	add.w	ip, r0, r5
 800cb82:	462b      	mov	r3, r5
 800cb84:	210a      	movs	r1, #10
 800cb86:	4563      	cmp	r3, ip
 800cb88:	d10d      	bne.n	800cba6 <_strtod_l+0x236>
 800cb8a:	1c69      	adds	r1, r5, #1
 800cb8c:	4401      	add	r1, r0
 800cb8e:	4428      	add	r0, r5
 800cb90:	2808      	cmp	r0, #8
 800cb92:	dc16      	bgt.n	800cbc2 <_strtod_l+0x252>
 800cb94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb96:	230a      	movs	r3, #10
 800cb98:	fb03 2300 	mla	r3, r3, r0, r2
 800cb9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e018      	b.n	800cbd4 <_strtod_l+0x264>
 800cba2:	4638      	mov	r0, r7
 800cba4:	e7da      	b.n	800cb5c <_strtod_l+0x1ec>
 800cba6:	2b08      	cmp	r3, #8
 800cba8:	f103 0301 	add.w	r3, r3, #1
 800cbac:	dc03      	bgt.n	800cbb6 <_strtod_l+0x246>
 800cbae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cbb0:	434e      	muls	r6, r1
 800cbb2:	960a      	str	r6, [sp, #40]	@ 0x28
 800cbb4:	e7e7      	b.n	800cb86 <_strtod_l+0x216>
 800cbb6:	2b10      	cmp	r3, #16
 800cbb8:	bfde      	ittt	le
 800cbba:	9e08      	ldrle	r6, [sp, #32]
 800cbbc:	434e      	mulle	r6, r1
 800cbbe:	9608      	strle	r6, [sp, #32]
 800cbc0:	e7e1      	b.n	800cb86 <_strtod_l+0x216>
 800cbc2:	280f      	cmp	r0, #15
 800cbc4:	dceb      	bgt.n	800cb9e <_strtod_l+0x22e>
 800cbc6:	9808      	ldr	r0, [sp, #32]
 800cbc8:	230a      	movs	r3, #10
 800cbca:	fb03 2300 	mla	r3, r3, r0, r2
 800cbce:	9308      	str	r3, [sp, #32]
 800cbd0:	e7e5      	b.n	800cb9e <_strtod_l+0x22e>
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbd6:	1c50      	adds	r0, r2, #1
 800cbd8:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbda:	7852      	ldrb	r2, [r2, #1]
 800cbdc:	4618      	mov	r0, r3
 800cbde:	460d      	mov	r5, r1
 800cbe0:	e7b1      	b.n	800cb46 <_strtod_l+0x1d6>
 800cbe2:	f04f 0900 	mov.w	r9, #0
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e77d      	b.n	800cae6 <_strtod_l+0x176>
 800cbea:	f04f 0c00 	mov.w	ip, #0
 800cbee:	1ca2      	adds	r2, r4, #2
 800cbf0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbf2:	78a2      	ldrb	r2, [r4, #2]
 800cbf4:	e785      	b.n	800cb02 <_strtod_l+0x192>
 800cbf6:	f04f 0c01 	mov.w	ip, #1
 800cbfa:	e7f8      	b.n	800cbee <_strtod_l+0x27e>
 800cbfc:	08010614 	.word	0x08010614
 800cc00:	080105fd 	.word	0x080105fd
 800cc04:	7ff00000 	.word	0x7ff00000
 800cc08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc0a:	1c51      	adds	r1, r2, #1
 800cc0c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cc0e:	7852      	ldrb	r2, [r2, #1]
 800cc10:	2a30      	cmp	r2, #48	@ 0x30
 800cc12:	d0f9      	beq.n	800cc08 <_strtod_l+0x298>
 800cc14:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cc18:	2908      	cmp	r1, #8
 800cc1a:	f63f af78 	bhi.w	800cb0e <_strtod_l+0x19e>
 800cc1e:	3a30      	subs	r2, #48	@ 0x30
 800cc20:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc24:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cc26:	f04f 080a 	mov.w	r8, #10
 800cc2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc2c:	1c56      	adds	r6, r2, #1
 800cc2e:	9619      	str	r6, [sp, #100]	@ 0x64
 800cc30:	7852      	ldrb	r2, [r2, #1]
 800cc32:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cc36:	f1be 0f09 	cmp.w	lr, #9
 800cc3a:	d939      	bls.n	800ccb0 <_strtod_l+0x340>
 800cc3c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cc3e:	1a76      	subs	r6, r6, r1
 800cc40:	2e08      	cmp	r6, #8
 800cc42:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cc46:	dc03      	bgt.n	800cc50 <_strtod_l+0x2e0>
 800cc48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cc4a:	4588      	cmp	r8, r1
 800cc4c:	bfa8      	it	ge
 800cc4e:	4688      	movge	r8, r1
 800cc50:	f1bc 0f00 	cmp.w	ip, #0
 800cc54:	d001      	beq.n	800cc5a <_strtod_l+0x2ea>
 800cc56:	f1c8 0800 	rsb	r8, r8, #0
 800cc5a:	2d00      	cmp	r5, #0
 800cc5c:	d14e      	bne.n	800ccfc <_strtod_l+0x38c>
 800cc5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc60:	4308      	orrs	r0, r1
 800cc62:	f47f aebe 	bne.w	800c9e2 <_strtod_l+0x72>
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f47f aed6 	bne.w	800ca18 <_strtod_l+0xa8>
 800cc6c:	2a69      	cmp	r2, #105	@ 0x69
 800cc6e:	d028      	beq.n	800ccc2 <_strtod_l+0x352>
 800cc70:	dc25      	bgt.n	800ccbe <_strtod_l+0x34e>
 800cc72:	2a49      	cmp	r2, #73	@ 0x49
 800cc74:	d025      	beq.n	800ccc2 <_strtod_l+0x352>
 800cc76:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc78:	f47f aece 	bne.w	800ca18 <_strtod_l+0xa8>
 800cc7c:	499b      	ldr	r1, [pc, #620]	@ (800ceec <_strtod_l+0x57c>)
 800cc7e:	a819      	add	r0, sp, #100	@ 0x64
 800cc80:	f001 fe9e 	bl	800e9c0 <__match>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f43f aec7 	beq.w	800ca18 <_strtod_l+0xa8>
 800cc8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	2b28      	cmp	r3, #40	@ 0x28
 800cc90:	d12e      	bne.n	800ccf0 <_strtod_l+0x380>
 800cc92:	4997      	ldr	r1, [pc, #604]	@ (800cef0 <_strtod_l+0x580>)
 800cc94:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc96:	a819      	add	r0, sp, #100	@ 0x64
 800cc98:	f001 fea6 	bl	800e9e8 <__hexnan>
 800cc9c:	2805      	cmp	r0, #5
 800cc9e:	d127      	bne.n	800ccf0 <_strtod_l+0x380>
 800cca0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cca2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cca6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ccaa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ccae:	e698      	b.n	800c9e2 <_strtod_l+0x72>
 800ccb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccb2:	fb08 2101 	mla	r1, r8, r1, r2
 800ccb6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ccba:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccbc:	e7b5      	b.n	800cc2a <_strtod_l+0x2ba>
 800ccbe:	2a6e      	cmp	r2, #110	@ 0x6e
 800ccc0:	e7da      	b.n	800cc78 <_strtod_l+0x308>
 800ccc2:	498c      	ldr	r1, [pc, #560]	@ (800cef4 <_strtod_l+0x584>)
 800ccc4:	a819      	add	r0, sp, #100	@ 0x64
 800ccc6:	f001 fe7b 	bl	800e9c0 <__match>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	f43f aea4 	beq.w	800ca18 <_strtod_l+0xa8>
 800ccd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccd2:	4989      	ldr	r1, [pc, #548]	@ (800cef8 <_strtod_l+0x588>)
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	a819      	add	r0, sp, #100	@ 0x64
 800ccd8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ccda:	f001 fe71 	bl	800e9c0 <__match>
 800ccde:	b910      	cbnz	r0, 800cce6 <_strtod_l+0x376>
 800cce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cce2:	3301      	adds	r3, #1
 800cce4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cce6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cf08 <_strtod_l+0x598>
 800ccea:	f04f 0a00 	mov.w	sl, #0
 800ccee:	e678      	b.n	800c9e2 <_strtod_l+0x72>
 800ccf0:	4882      	ldr	r0, [pc, #520]	@ (800cefc <_strtod_l+0x58c>)
 800ccf2:	f000 fd35 	bl	800d760 <nan>
 800ccf6:	ec5b ab10 	vmov	sl, fp, d0
 800ccfa:	e672      	b.n	800c9e2 <_strtod_l+0x72>
 800ccfc:	eba8 0309 	sub.w	r3, r8, r9
 800cd00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd04:	2f00      	cmp	r7, #0
 800cd06:	bf08      	it	eq
 800cd08:	462f      	moveq	r7, r5
 800cd0a:	2d10      	cmp	r5, #16
 800cd0c:	462c      	mov	r4, r5
 800cd0e:	bfa8      	it	ge
 800cd10:	2410      	movge	r4, #16
 800cd12:	f7f3 fbff 	bl	8000514 <__aeabi_ui2d>
 800cd16:	2d09      	cmp	r5, #9
 800cd18:	4682      	mov	sl, r0
 800cd1a:	468b      	mov	fp, r1
 800cd1c:	dc13      	bgt.n	800cd46 <_strtod_l+0x3d6>
 800cd1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f43f ae5e 	beq.w	800c9e2 <_strtod_l+0x72>
 800cd26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd28:	dd78      	ble.n	800ce1c <_strtod_l+0x4ac>
 800cd2a:	2b16      	cmp	r3, #22
 800cd2c:	dc5f      	bgt.n	800cdee <_strtod_l+0x47e>
 800cd2e:	4974      	ldr	r1, [pc, #464]	@ (800cf00 <_strtod_l+0x590>)
 800cd30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd38:	4652      	mov	r2, sl
 800cd3a:	465b      	mov	r3, fp
 800cd3c:	f7f3 fc64 	bl	8000608 <__aeabi_dmul>
 800cd40:	4682      	mov	sl, r0
 800cd42:	468b      	mov	fp, r1
 800cd44:	e64d      	b.n	800c9e2 <_strtod_l+0x72>
 800cd46:	4b6e      	ldr	r3, [pc, #440]	@ (800cf00 <_strtod_l+0x590>)
 800cd48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cd4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cd50:	f7f3 fc5a 	bl	8000608 <__aeabi_dmul>
 800cd54:	4682      	mov	sl, r0
 800cd56:	9808      	ldr	r0, [sp, #32]
 800cd58:	468b      	mov	fp, r1
 800cd5a:	f7f3 fbdb 	bl	8000514 <__aeabi_ui2d>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	460b      	mov	r3, r1
 800cd62:	4650      	mov	r0, sl
 800cd64:	4659      	mov	r1, fp
 800cd66:	f7f3 fa99 	bl	800029c <__adddf3>
 800cd6a:	2d0f      	cmp	r5, #15
 800cd6c:	4682      	mov	sl, r0
 800cd6e:	468b      	mov	fp, r1
 800cd70:	ddd5      	ble.n	800cd1e <_strtod_l+0x3ae>
 800cd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd74:	1b2c      	subs	r4, r5, r4
 800cd76:	441c      	add	r4, r3
 800cd78:	2c00      	cmp	r4, #0
 800cd7a:	f340 8096 	ble.w	800ceaa <_strtod_l+0x53a>
 800cd7e:	f014 030f 	ands.w	r3, r4, #15
 800cd82:	d00a      	beq.n	800cd9a <_strtod_l+0x42a>
 800cd84:	495e      	ldr	r1, [pc, #376]	@ (800cf00 <_strtod_l+0x590>)
 800cd86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	465b      	mov	r3, fp
 800cd8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd92:	f7f3 fc39 	bl	8000608 <__aeabi_dmul>
 800cd96:	4682      	mov	sl, r0
 800cd98:	468b      	mov	fp, r1
 800cd9a:	f034 040f 	bics.w	r4, r4, #15
 800cd9e:	d073      	beq.n	800ce88 <_strtod_l+0x518>
 800cda0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cda4:	dd48      	ble.n	800ce38 <_strtod_l+0x4c8>
 800cda6:	2400      	movs	r4, #0
 800cda8:	46a0      	mov	r8, r4
 800cdaa:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdac:	46a1      	mov	r9, r4
 800cdae:	9a05      	ldr	r2, [sp, #20]
 800cdb0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cf08 <_strtod_l+0x598>
 800cdb4:	2322      	movs	r3, #34	@ 0x22
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	f04f 0a00 	mov.w	sl, #0
 800cdbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f43f ae0f 	beq.w	800c9e2 <_strtod_l+0x72>
 800cdc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdc6:	9805      	ldr	r0, [sp, #20]
 800cdc8:	f002 fa4a 	bl	800f260 <_Bfree>
 800cdcc:	9805      	ldr	r0, [sp, #20]
 800cdce:	4649      	mov	r1, r9
 800cdd0:	f002 fa46 	bl	800f260 <_Bfree>
 800cdd4:	9805      	ldr	r0, [sp, #20]
 800cdd6:	4641      	mov	r1, r8
 800cdd8:	f002 fa42 	bl	800f260 <_Bfree>
 800cddc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cdde:	9805      	ldr	r0, [sp, #20]
 800cde0:	f002 fa3e 	bl	800f260 <_Bfree>
 800cde4:	9805      	ldr	r0, [sp, #20]
 800cde6:	4621      	mov	r1, r4
 800cde8:	f002 fa3a 	bl	800f260 <_Bfree>
 800cdec:	e5f9      	b.n	800c9e2 <_strtod_l+0x72>
 800cdee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	dbbc      	blt.n	800cd72 <_strtod_l+0x402>
 800cdf8:	4c41      	ldr	r4, [pc, #260]	@ (800cf00 <_strtod_l+0x590>)
 800cdfa:	f1c5 050f 	rsb	r5, r5, #15
 800cdfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce02:	4652      	mov	r2, sl
 800ce04:	465b      	mov	r3, fp
 800ce06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce0a:	f7f3 fbfd 	bl	8000608 <__aeabi_dmul>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce10:	1b5d      	subs	r5, r3, r5
 800ce12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ce16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ce1a:	e78f      	b.n	800cd3c <_strtod_l+0x3cc>
 800ce1c:	3316      	adds	r3, #22
 800ce1e:	dba8      	blt.n	800cd72 <_strtod_l+0x402>
 800ce20:	4b37      	ldr	r3, [pc, #220]	@ (800cf00 <_strtod_l+0x590>)
 800ce22:	eba9 0808 	sub.w	r8, r9, r8
 800ce26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ce2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ce2e:	4650      	mov	r0, sl
 800ce30:	4659      	mov	r1, fp
 800ce32:	f7f3 fd13 	bl	800085c <__aeabi_ddiv>
 800ce36:	e783      	b.n	800cd40 <_strtod_l+0x3d0>
 800ce38:	4b32      	ldr	r3, [pc, #200]	@ (800cf04 <_strtod_l+0x594>)
 800ce3a:	9308      	str	r3, [sp, #32]
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	1124      	asrs	r4, r4, #4
 800ce40:	4650      	mov	r0, sl
 800ce42:	4659      	mov	r1, fp
 800ce44:	461e      	mov	r6, r3
 800ce46:	2c01      	cmp	r4, #1
 800ce48:	dc21      	bgt.n	800ce8e <_strtod_l+0x51e>
 800ce4a:	b10b      	cbz	r3, 800ce50 <_strtod_l+0x4e0>
 800ce4c:	4682      	mov	sl, r0
 800ce4e:	468b      	mov	fp, r1
 800ce50:	492c      	ldr	r1, [pc, #176]	@ (800cf04 <_strtod_l+0x594>)
 800ce52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ce56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ce5a:	4652      	mov	r2, sl
 800ce5c:	465b      	mov	r3, fp
 800ce5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce62:	f7f3 fbd1 	bl	8000608 <__aeabi_dmul>
 800ce66:	4b28      	ldr	r3, [pc, #160]	@ (800cf08 <_strtod_l+0x598>)
 800ce68:	460a      	mov	r2, r1
 800ce6a:	400b      	ands	r3, r1
 800ce6c:	4927      	ldr	r1, [pc, #156]	@ (800cf0c <_strtod_l+0x59c>)
 800ce6e:	428b      	cmp	r3, r1
 800ce70:	4682      	mov	sl, r0
 800ce72:	d898      	bhi.n	800cda6 <_strtod_l+0x436>
 800ce74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce78:	428b      	cmp	r3, r1
 800ce7a:	bf86      	itte	hi
 800ce7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cf10 <_strtod_l+0x5a0>
 800ce80:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ce84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce88:	2300      	movs	r3, #0
 800ce8a:	9308      	str	r3, [sp, #32]
 800ce8c:	e07a      	b.n	800cf84 <_strtod_l+0x614>
 800ce8e:	07e2      	lsls	r2, r4, #31
 800ce90:	d505      	bpl.n	800ce9e <_strtod_l+0x52e>
 800ce92:	9b08      	ldr	r3, [sp, #32]
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 fbb6 	bl	8000608 <__aeabi_dmul>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	9a08      	ldr	r2, [sp, #32]
 800cea0:	3208      	adds	r2, #8
 800cea2:	3601      	adds	r6, #1
 800cea4:	1064      	asrs	r4, r4, #1
 800cea6:	9208      	str	r2, [sp, #32]
 800cea8:	e7cd      	b.n	800ce46 <_strtod_l+0x4d6>
 800ceaa:	d0ed      	beq.n	800ce88 <_strtod_l+0x518>
 800ceac:	4264      	negs	r4, r4
 800ceae:	f014 020f 	ands.w	r2, r4, #15
 800ceb2:	d00a      	beq.n	800ceca <_strtod_l+0x55a>
 800ceb4:	4b12      	ldr	r3, [pc, #72]	@ (800cf00 <_strtod_l+0x590>)
 800ceb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ceba:	4650      	mov	r0, sl
 800cebc:	4659      	mov	r1, fp
 800cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec2:	f7f3 fccb 	bl	800085c <__aeabi_ddiv>
 800cec6:	4682      	mov	sl, r0
 800cec8:	468b      	mov	fp, r1
 800ceca:	1124      	asrs	r4, r4, #4
 800cecc:	d0dc      	beq.n	800ce88 <_strtod_l+0x518>
 800cece:	2c1f      	cmp	r4, #31
 800ced0:	dd20      	ble.n	800cf14 <_strtod_l+0x5a4>
 800ced2:	2400      	movs	r4, #0
 800ced4:	46a0      	mov	r8, r4
 800ced6:	940a      	str	r4, [sp, #40]	@ 0x28
 800ced8:	46a1      	mov	r9, r4
 800ceda:	9a05      	ldr	r2, [sp, #20]
 800cedc:	2322      	movs	r3, #34	@ 0x22
 800cede:	f04f 0a00 	mov.w	sl, #0
 800cee2:	f04f 0b00 	mov.w	fp, #0
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	e768      	b.n	800cdbc <_strtod_l+0x44c>
 800ceea:	bf00      	nop
 800ceec:	080105d1 	.word	0x080105d1
 800cef0:	08010600 	.word	0x08010600
 800cef4:	080105c9 	.word	0x080105c9
 800cef8:	0801075c 	.word	0x0801075c
 800cefc:	080109eb 	.word	0x080109eb
 800cf00:	080108e8 	.word	0x080108e8
 800cf04:	080108c0 	.word	0x080108c0
 800cf08:	7ff00000 	.word	0x7ff00000
 800cf0c:	7ca00000 	.word	0x7ca00000
 800cf10:	7fefffff 	.word	0x7fefffff
 800cf14:	f014 0310 	ands.w	r3, r4, #16
 800cf18:	bf18      	it	ne
 800cf1a:	236a      	movne	r3, #106	@ 0x6a
 800cf1c:	4ea9      	ldr	r6, [pc, #676]	@ (800d1c4 <_strtod_l+0x854>)
 800cf1e:	9308      	str	r3, [sp, #32]
 800cf20:	4650      	mov	r0, sl
 800cf22:	4659      	mov	r1, fp
 800cf24:	2300      	movs	r3, #0
 800cf26:	07e2      	lsls	r2, r4, #31
 800cf28:	d504      	bpl.n	800cf34 <_strtod_l+0x5c4>
 800cf2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cf2e:	f7f3 fb6b 	bl	8000608 <__aeabi_dmul>
 800cf32:	2301      	movs	r3, #1
 800cf34:	1064      	asrs	r4, r4, #1
 800cf36:	f106 0608 	add.w	r6, r6, #8
 800cf3a:	d1f4      	bne.n	800cf26 <_strtod_l+0x5b6>
 800cf3c:	b10b      	cbz	r3, 800cf42 <_strtod_l+0x5d2>
 800cf3e:	4682      	mov	sl, r0
 800cf40:	468b      	mov	fp, r1
 800cf42:	9b08      	ldr	r3, [sp, #32]
 800cf44:	b1b3      	cbz	r3, 800cf74 <_strtod_l+0x604>
 800cf46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cf4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	4659      	mov	r1, fp
 800cf52:	dd0f      	ble.n	800cf74 <_strtod_l+0x604>
 800cf54:	2b1f      	cmp	r3, #31
 800cf56:	dd55      	ble.n	800d004 <_strtod_l+0x694>
 800cf58:	2b34      	cmp	r3, #52	@ 0x34
 800cf5a:	bfde      	ittt	le
 800cf5c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800cf60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cf64:	4093      	lslle	r3, r2
 800cf66:	f04f 0a00 	mov.w	sl, #0
 800cf6a:	bfcc      	ite	gt
 800cf6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf70:	ea03 0b01 	andle.w	fp, r3, r1
 800cf74:	2200      	movs	r2, #0
 800cf76:	2300      	movs	r3, #0
 800cf78:	4650      	mov	r0, sl
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	f7f3 fdac 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf80:	2800      	cmp	r0, #0
 800cf82:	d1a6      	bne.n	800ced2 <_strtod_l+0x562>
 800cf84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf8a:	9805      	ldr	r0, [sp, #20]
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	463a      	mov	r2, r7
 800cf90:	f002 f9ce 	bl	800f330 <__s2b>
 800cf94:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f43f af05 	beq.w	800cda6 <_strtod_l+0x436>
 800cf9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf9e:	2a00      	cmp	r2, #0
 800cfa0:	eba9 0308 	sub.w	r3, r9, r8
 800cfa4:	bfa8      	it	ge
 800cfa6:	2300      	movge	r3, #0
 800cfa8:	9312      	str	r3, [sp, #72]	@ 0x48
 800cfaa:	2400      	movs	r4, #0
 800cfac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cfb0:	9316      	str	r3, [sp, #88]	@ 0x58
 800cfb2:	46a0      	mov	r8, r4
 800cfb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb6:	9805      	ldr	r0, [sp, #20]
 800cfb8:	6859      	ldr	r1, [r3, #4]
 800cfba:	f002 f911 	bl	800f1e0 <_Balloc>
 800cfbe:	4681      	mov	r9, r0
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	f43f aef4 	beq.w	800cdae <_strtod_l+0x43e>
 800cfc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfc8:	691a      	ldr	r2, [r3, #16]
 800cfca:	3202      	adds	r2, #2
 800cfcc:	f103 010c 	add.w	r1, r3, #12
 800cfd0:	0092      	lsls	r2, r2, #2
 800cfd2:	300c      	adds	r0, #12
 800cfd4:	f000 fbad 	bl	800d732 <memcpy>
 800cfd8:	ec4b ab10 	vmov	d0, sl, fp
 800cfdc:	9805      	ldr	r0, [sp, #20]
 800cfde:	aa1c      	add	r2, sp, #112	@ 0x70
 800cfe0:	a91b      	add	r1, sp, #108	@ 0x6c
 800cfe2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cfe6:	f002 fcdf 	bl	800f9a8 <__d2b>
 800cfea:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfec:	2800      	cmp	r0, #0
 800cfee:	f43f aede 	beq.w	800cdae <_strtod_l+0x43e>
 800cff2:	9805      	ldr	r0, [sp, #20]
 800cff4:	2101      	movs	r1, #1
 800cff6:	f002 fa31 	bl	800f45c <__i2b>
 800cffa:	4680      	mov	r8, r0
 800cffc:	b948      	cbnz	r0, 800d012 <_strtod_l+0x6a2>
 800cffe:	f04f 0800 	mov.w	r8, #0
 800d002:	e6d4      	b.n	800cdae <_strtod_l+0x43e>
 800d004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d008:	fa02 f303 	lsl.w	r3, r2, r3
 800d00c:	ea03 0a0a 	and.w	sl, r3, sl
 800d010:	e7b0      	b.n	800cf74 <_strtod_l+0x604>
 800d012:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d014:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d016:	2d00      	cmp	r5, #0
 800d018:	bfab      	itete	ge
 800d01a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d01c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d01e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d020:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d022:	bfac      	ite	ge
 800d024:	18ef      	addge	r7, r5, r3
 800d026:	1b5e      	sublt	r6, r3, r5
 800d028:	9b08      	ldr	r3, [sp, #32]
 800d02a:	1aed      	subs	r5, r5, r3
 800d02c:	4415      	add	r5, r2
 800d02e:	4b66      	ldr	r3, [pc, #408]	@ (800d1c8 <_strtod_l+0x858>)
 800d030:	3d01      	subs	r5, #1
 800d032:	429d      	cmp	r5, r3
 800d034:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d038:	da50      	bge.n	800d0dc <_strtod_l+0x76c>
 800d03a:	1b5b      	subs	r3, r3, r5
 800d03c:	2b1f      	cmp	r3, #31
 800d03e:	eba2 0203 	sub.w	r2, r2, r3
 800d042:	f04f 0101 	mov.w	r1, #1
 800d046:	dc3d      	bgt.n	800d0c4 <_strtod_l+0x754>
 800d048:	fa01 f303 	lsl.w	r3, r1, r3
 800d04c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d04e:	2300      	movs	r3, #0
 800d050:	9310      	str	r3, [sp, #64]	@ 0x40
 800d052:	18bd      	adds	r5, r7, r2
 800d054:	9b08      	ldr	r3, [sp, #32]
 800d056:	42af      	cmp	r7, r5
 800d058:	4416      	add	r6, r2
 800d05a:	441e      	add	r6, r3
 800d05c:	463b      	mov	r3, r7
 800d05e:	bfa8      	it	ge
 800d060:	462b      	movge	r3, r5
 800d062:	42b3      	cmp	r3, r6
 800d064:	bfa8      	it	ge
 800d066:	4633      	movge	r3, r6
 800d068:	2b00      	cmp	r3, #0
 800d06a:	bfc2      	ittt	gt
 800d06c:	1aed      	subgt	r5, r5, r3
 800d06e:	1af6      	subgt	r6, r6, r3
 800d070:	1aff      	subgt	r7, r7, r3
 800d072:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d074:	2b00      	cmp	r3, #0
 800d076:	dd16      	ble.n	800d0a6 <_strtod_l+0x736>
 800d078:	4641      	mov	r1, r8
 800d07a:	9805      	ldr	r0, [sp, #20]
 800d07c:	461a      	mov	r2, r3
 800d07e:	f002 faad 	bl	800f5dc <__pow5mult>
 800d082:	4680      	mov	r8, r0
 800d084:	2800      	cmp	r0, #0
 800d086:	d0ba      	beq.n	800cffe <_strtod_l+0x68e>
 800d088:	4601      	mov	r1, r0
 800d08a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d08c:	9805      	ldr	r0, [sp, #20]
 800d08e:	f002 f9fb 	bl	800f488 <__multiply>
 800d092:	900e      	str	r0, [sp, #56]	@ 0x38
 800d094:	2800      	cmp	r0, #0
 800d096:	f43f ae8a 	beq.w	800cdae <_strtod_l+0x43e>
 800d09a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d09c:	9805      	ldr	r0, [sp, #20]
 800d09e:	f002 f8df 	bl	800f260 <_Bfree>
 800d0a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d0a6:	2d00      	cmp	r5, #0
 800d0a8:	dc1d      	bgt.n	800d0e6 <_strtod_l+0x776>
 800d0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dd23      	ble.n	800d0f8 <_strtod_l+0x788>
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d0b4:	9805      	ldr	r0, [sp, #20]
 800d0b6:	f002 fa91 	bl	800f5dc <__pow5mult>
 800d0ba:	4681      	mov	r9, r0
 800d0bc:	b9e0      	cbnz	r0, 800d0f8 <_strtod_l+0x788>
 800d0be:	f04f 0900 	mov.w	r9, #0
 800d0c2:	e674      	b.n	800cdae <_strtod_l+0x43e>
 800d0c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d0c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d0cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d0d0:	35e2      	adds	r5, #226	@ 0xe2
 800d0d2:	fa01 f305 	lsl.w	r3, r1, r5
 800d0d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d0da:	e7ba      	b.n	800d052 <_strtod_l+0x6e2>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0e4:	e7b5      	b.n	800d052 <_strtod_l+0x6e2>
 800d0e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0e8:	9805      	ldr	r0, [sp, #20]
 800d0ea:	462a      	mov	r2, r5
 800d0ec:	f002 fad0 	bl	800f690 <__lshift>
 800d0f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d1d9      	bne.n	800d0aa <_strtod_l+0x73a>
 800d0f6:	e65a      	b.n	800cdae <_strtod_l+0x43e>
 800d0f8:	2e00      	cmp	r6, #0
 800d0fa:	dd07      	ble.n	800d10c <_strtod_l+0x79c>
 800d0fc:	4649      	mov	r1, r9
 800d0fe:	9805      	ldr	r0, [sp, #20]
 800d100:	4632      	mov	r2, r6
 800d102:	f002 fac5 	bl	800f690 <__lshift>
 800d106:	4681      	mov	r9, r0
 800d108:	2800      	cmp	r0, #0
 800d10a:	d0d8      	beq.n	800d0be <_strtod_l+0x74e>
 800d10c:	2f00      	cmp	r7, #0
 800d10e:	dd08      	ble.n	800d122 <_strtod_l+0x7b2>
 800d110:	4641      	mov	r1, r8
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	463a      	mov	r2, r7
 800d116:	f002 fabb 	bl	800f690 <__lshift>
 800d11a:	4680      	mov	r8, r0
 800d11c:	2800      	cmp	r0, #0
 800d11e:	f43f ae46 	beq.w	800cdae <_strtod_l+0x43e>
 800d122:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d124:	9805      	ldr	r0, [sp, #20]
 800d126:	464a      	mov	r2, r9
 800d128:	f002 fb3a 	bl	800f7a0 <__mdiff>
 800d12c:	4604      	mov	r4, r0
 800d12e:	2800      	cmp	r0, #0
 800d130:	f43f ae3d 	beq.w	800cdae <_strtod_l+0x43e>
 800d134:	68c3      	ldr	r3, [r0, #12]
 800d136:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d138:	2300      	movs	r3, #0
 800d13a:	60c3      	str	r3, [r0, #12]
 800d13c:	4641      	mov	r1, r8
 800d13e:	f002 fb13 	bl	800f768 <__mcmp>
 800d142:	2800      	cmp	r0, #0
 800d144:	da46      	bge.n	800d1d4 <_strtod_l+0x864>
 800d146:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d148:	ea53 030a 	orrs.w	r3, r3, sl
 800d14c:	d16c      	bne.n	800d228 <_strtod_l+0x8b8>
 800d14e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d152:	2b00      	cmp	r3, #0
 800d154:	d168      	bne.n	800d228 <_strtod_l+0x8b8>
 800d156:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d15a:	0d1b      	lsrs	r3, r3, #20
 800d15c:	051b      	lsls	r3, r3, #20
 800d15e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d162:	d961      	bls.n	800d228 <_strtod_l+0x8b8>
 800d164:	6963      	ldr	r3, [r4, #20]
 800d166:	b913      	cbnz	r3, 800d16e <_strtod_l+0x7fe>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	dd5c      	ble.n	800d228 <_strtod_l+0x8b8>
 800d16e:	4621      	mov	r1, r4
 800d170:	2201      	movs	r2, #1
 800d172:	9805      	ldr	r0, [sp, #20]
 800d174:	f002 fa8c 	bl	800f690 <__lshift>
 800d178:	4641      	mov	r1, r8
 800d17a:	4604      	mov	r4, r0
 800d17c:	f002 faf4 	bl	800f768 <__mcmp>
 800d180:	2800      	cmp	r0, #0
 800d182:	dd51      	ble.n	800d228 <_strtod_l+0x8b8>
 800d184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d188:	9a08      	ldr	r2, [sp, #32]
 800d18a:	0d1b      	lsrs	r3, r3, #20
 800d18c:	051b      	lsls	r3, r3, #20
 800d18e:	2a00      	cmp	r2, #0
 800d190:	d06b      	beq.n	800d26a <_strtod_l+0x8fa>
 800d192:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d196:	d868      	bhi.n	800d26a <_strtod_l+0x8fa>
 800d198:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d19c:	f67f ae9d 	bls.w	800ceda <_strtod_l+0x56a>
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1cc <_strtod_l+0x85c>)
 800d1a2:	4650      	mov	r0, sl
 800d1a4:	4659      	mov	r1, fp
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f7f3 fa2e 	bl	8000608 <__aeabi_dmul>
 800d1ac:	4b08      	ldr	r3, [pc, #32]	@ (800d1d0 <_strtod_l+0x860>)
 800d1ae:	400b      	ands	r3, r1
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	468b      	mov	fp, r1
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f47f ae05 	bne.w	800cdc4 <_strtod_l+0x454>
 800d1ba:	9a05      	ldr	r2, [sp, #20]
 800d1bc:	2322      	movs	r3, #34	@ 0x22
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	e600      	b.n	800cdc4 <_strtod_l+0x454>
 800d1c2:	bf00      	nop
 800d1c4:	08010628 	.word	0x08010628
 800d1c8:	fffffc02 	.word	0xfffffc02
 800d1cc:	39500000 	.word	0x39500000
 800d1d0:	7ff00000 	.word	0x7ff00000
 800d1d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d1d8:	d165      	bne.n	800d2a6 <_strtod_l+0x936>
 800d1da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d1dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1e0:	b35a      	cbz	r2, 800d23a <_strtod_l+0x8ca>
 800d1e2:	4a9f      	ldr	r2, [pc, #636]	@ (800d460 <_strtod_l+0xaf0>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d12b      	bne.n	800d240 <_strtod_l+0x8d0>
 800d1e8:	9b08      	ldr	r3, [sp, #32]
 800d1ea:	4651      	mov	r1, sl
 800d1ec:	b303      	cbz	r3, 800d230 <_strtod_l+0x8c0>
 800d1ee:	4b9d      	ldr	r3, [pc, #628]	@ (800d464 <_strtod_l+0xaf4>)
 800d1f0:	465a      	mov	r2, fp
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d1f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1fc:	d81b      	bhi.n	800d236 <_strtod_l+0x8c6>
 800d1fe:	0d1b      	lsrs	r3, r3, #20
 800d200:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d204:	fa02 f303 	lsl.w	r3, r2, r3
 800d208:	4299      	cmp	r1, r3
 800d20a:	d119      	bne.n	800d240 <_strtod_l+0x8d0>
 800d20c:	4b96      	ldr	r3, [pc, #600]	@ (800d468 <_strtod_l+0xaf8>)
 800d20e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d210:	429a      	cmp	r2, r3
 800d212:	d102      	bne.n	800d21a <_strtod_l+0x8aa>
 800d214:	3101      	adds	r1, #1
 800d216:	f43f adca 	beq.w	800cdae <_strtod_l+0x43e>
 800d21a:	4b92      	ldr	r3, [pc, #584]	@ (800d464 <_strtod_l+0xaf4>)
 800d21c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d21e:	401a      	ands	r2, r3
 800d220:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d224:	f04f 0a00 	mov.w	sl, #0
 800d228:	9b08      	ldr	r3, [sp, #32]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1b8      	bne.n	800d1a0 <_strtod_l+0x830>
 800d22e:	e5c9      	b.n	800cdc4 <_strtod_l+0x454>
 800d230:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d234:	e7e8      	b.n	800d208 <_strtod_l+0x898>
 800d236:	4613      	mov	r3, r2
 800d238:	e7e6      	b.n	800d208 <_strtod_l+0x898>
 800d23a:	ea53 030a 	orrs.w	r3, r3, sl
 800d23e:	d0a1      	beq.n	800d184 <_strtod_l+0x814>
 800d240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d242:	b1db      	cbz	r3, 800d27c <_strtod_l+0x90c>
 800d244:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d246:	4213      	tst	r3, r2
 800d248:	d0ee      	beq.n	800d228 <_strtod_l+0x8b8>
 800d24a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d24c:	9a08      	ldr	r2, [sp, #32]
 800d24e:	4650      	mov	r0, sl
 800d250:	4659      	mov	r1, fp
 800d252:	b1bb      	cbz	r3, 800d284 <_strtod_l+0x914>
 800d254:	f7ff fb6e 	bl	800c934 <sulp>
 800d258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d25c:	ec53 2b10 	vmov	r2, r3, d0
 800d260:	f7f3 f81c 	bl	800029c <__adddf3>
 800d264:	4682      	mov	sl, r0
 800d266:	468b      	mov	fp, r1
 800d268:	e7de      	b.n	800d228 <_strtod_l+0x8b8>
 800d26a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d26e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d272:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d276:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d27a:	e7d5      	b.n	800d228 <_strtod_l+0x8b8>
 800d27c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d27e:	ea13 0f0a 	tst.w	r3, sl
 800d282:	e7e1      	b.n	800d248 <_strtod_l+0x8d8>
 800d284:	f7ff fb56 	bl	800c934 <sulp>
 800d288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d28c:	ec53 2b10 	vmov	r2, r3, d0
 800d290:	f7f3 f802 	bl	8000298 <__aeabi_dsub>
 800d294:	2200      	movs	r2, #0
 800d296:	2300      	movs	r3, #0
 800d298:	4682      	mov	sl, r0
 800d29a:	468b      	mov	fp, r1
 800d29c:	f7f3 fc1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2a0:	2800      	cmp	r0, #0
 800d2a2:	d0c1      	beq.n	800d228 <_strtod_l+0x8b8>
 800d2a4:	e619      	b.n	800ceda <_strtod_l+0x56a>
 800d2a6:	4641      	mov	r1, r8
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f002 fbd5 	bl	800fa58 <__ratio>
 800d2ae:	ec57 6b10 	vmov	r6, r7, d0
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	4639      	mov	r1, r7
 800d2bc:	f7f3 fc20 	bl	8000b00 <__aeabi_dcmple>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d06f      	beq.n	800d3a4 <_strtod_l+0xa34>
 800d2c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d17a      	bne.n	800d3c0 <_strtod_l+0xa50>
 800d2ca:	f1ba 0f00 	cmp.w	sl, #0
 800d2ce:	d158      	bne.n	800d382 <_strtod_l+0xa12>
 800d2d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d15a      	bne.n	800d390 <_strtod_l+0xa20>
 800d2da:	4b64      	ldr	r3, [pc, #400]	@ (800d46c <_strtod_l+0xafc>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4630      	mov	r0, r6
 800d2e0:	4639      	mov	r1, r7
 800d2e2:	f7f3 fc03 	bl	8000aec <__aeabi_dcmplt>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d159      	bne.n	800d39e <_strtod_l+0xa2e>
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	4639      	mov	r1, r7
 800d2ee:	4b60      	ldr	r3, [pc, #384]	@ (800d470 <_strtod_l+0xb00>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f7f3 f989 	bl	8000608 <__aeabi_dmul>
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460f      	mov	r7, r1
 800d2fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d2fe:	9606      	str	r6, [sp, #24]
 800d300:	9307      	str	r3, [sp, #28]
 800d302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d306:	4d57      	ldr	r5, [pc, #348]	@ (800d464 <_strtod_l+0xaf4>)
 800d308:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d30c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d30e:	401d      	ands	r5, r3
 800d310:	4b58      	ldr	r3, [pc, #352]	@ (800d474 <_strtod_l+0xb04>)
 800d312:	429d      	cmp	r5, r3
 800d314:	f040 80b2 	bne.w	800d47c <_strtod_l+0xb0c>
 800d318:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d31a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d31e:	ec4b ab10 	vmov	d0, sl, fp
 800d322:	f002 fad1 	bl	800f8c8 <__ulp>
 800d326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d32a:	ec51 0b10 	vmov	r0, r1, d0
 800d32e:	f7f3 f96b 	bl	8000608 <__aeabi_dmul>
 800d332:	4652      	mov	r2, sl
 800d334:	465b      	mov	r3, fp
 800d336:	f7f2 ffb1 	bl	800029c <__adddf3>
 800d33a:	460b      	mov	r3, r1
 800d33c:	4949      	ldr	r1, [pc, #292]	@ (800d464 <_strtod_l+0xaf4>)
 800d33e:	4a4e      	ldr	r2, [pc, #312]	@ (800d478 <_strtod_l+0xb08>)
 800d340:	4019      	ands	r1, r3
 800d342:	4291      	cmp	r1, r2
 800d344:	4682      	mov	sl, r0
 800d346:	d942      	bls.n	800d3ce <_strtod_l+0xa5e>
 800d348:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d34a:	4b47      	ldr	r3, [pc, #284]	@ (800d468 <_strtod_l+0xaf8>)
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d103      	bne.n	800d358 <_strtod_l+0x9e8>
 800d350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d352:	3301      	adds	r3, #1
 800d354:	f43f ad2b 	beq.w	800cdae <_strtod_l+0x43e>
 800d358:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d468 <_strtod_l+0xaf8>
 800d35c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d360:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d362:	9805      	ldr	r0, [sp, #20]
 800d364:	f001 ff7c 	bl	800f260 <_Bfree>
 800d368:	9805      	ldr	r0, [sp, #20]
 800d36a:	4649      	mov	r1, r9
 800d36c:	f001 ff78 	bl	800f260 <_Bfree>
 800d370:	9805      	ldr	r0, [sp, #20]
 800d372:	4641      	mov	r1, r8
 800d374:	f001 ff74 	bl	800f260 <_Bfree>
 800d378:	9805      	ldr	r0, [sp, #20]
 800d37a:	4621      	mov	r1, r4
 800d37c:	f001 ff70 	bl	800f260 <_Bfree>
 800d380:	e618      	b.n	800cfb4 <_strtod_l+0x644>
 800d382:	f1ba 0f01 	cmp.w	sl, #1
 800d386:	d103      	bne.n	800d390 <_strtod_l+0xa20>
 800d388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f43f ada5 	beq.w	800ceda <_strtod_l+0x56a>
 800d390:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d440 <_strtod_l+0xad0>
 800d394:	4f35      	ldr	r7, [pc, #212]	@ (800d46c <_strtod_l+0xafc>)
 800d396:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d39a:	2600      	movs	r6, #0
 800d39c:	e7b1      	b.n	800d302 <_strtod_l+0x992>
 800d39e:	4f34      	ldr	r7, [pc, #208]	@ (800d470 <_strtod_l+0xb00>)
 800d3a0:	2600      	movs	r6, #0
 800d3a2:	e7aa      	b.n	800d2fa <_strtod_l+0x98a>
 800d3a4:	4b32      	ldr	r3, [pc, #200]	@ (800d470 <_strtod_l+0xb00>)
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	4639      	mov	r1, r7
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f7f3 f92c 	bl	8000608 <__aeabi_dmul>
 800d3b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	460f      	mov	r7, r1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d09f      	beq.n	800d2fa <_strtod_l+0x98a>
 800d3ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d3be:	e7a0      	b.n	800d302 <_strtod_l+0x992>
 800d3c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d448 <_strtod_l+0xad8>
 800d3c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d3c8:	ec57 6b17 	vmov	r6, r7, d7
 800d3cc:	e799      	b.n	800d302 <_strtod_l+0x992>
 800d3ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d3d2:	9b08      	ldr	r3, [sp, #32]
 800d3d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1c1      	bne.n	800d360 <_strtod_l+0x9f0>
 800d3dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d3e0:	0d1b      	lsrs	r3, r3, #20
 800d3e2:	051b      	lsls	r3, r3, #20
 800d3e4:	429d      	cmp	r5, r3
 800d3e6:	d1bb      	bne.n	800d360 <_strtod_l+0x9f0>
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	f7f3 fc6c 	bl	8000cc8 <__aeabi_d2lz>
 800d3f0:	f7f3 f8dc 	bl	80005ac <__aeabi_l2d>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	f7f2 ff4c 	bl	8000298 <__aeabi_dsub>
 800d400:	460b      	mov	r3, r1
 800d402:	4602      	mov	r2, r0
 800d404:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d408:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d40c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d40e:	ea46 060a 	orr.w	r6, r6, sl
 800d412:	431e      	orrs	r6, r3
 800d414:	d06f      	beq.n	800d4f6 <_strtod_l+0xb86>
 800d416:	a30e      	add	r3, pc, #56	@ (adr r3, 800d450 <_strtod_l+0xae0>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f7f3 fb66 	bl	8000aec <__aeabi_dcmplt>
 800d420:	2800      	cmp	r0, #0
 800d422:	f47f accf 	bne.w	800cdc4 <_strtod_l+0x454>
 800d426:	a30c      	add	r3, pc, #48	@ (adr r3, 800d458 <_strtod_l+0xae8>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d430:	f7f3 fb7a 	bl	8000b28 <__aeabi_dcmpgt>
 800d434:	2800      	cmp	r0, #0
 800d436:	d093      	beq.n	800d360 <_strtod_l+0x9f0>
 800d438:	e4c4      	b.n	800cdc4 <_strtod_l+0x454>
 800d43a:	bf00      	nop
 800d43c:	f3af 8000 	nop.w
 800d440:	00000000 	.word	0x00000000
 800d444:	bff00000 	.word	0xbff00000
 800d448:	00000000 	.word	0x00000000
 800d44c:	3ff00000 	.word	0x3ff00000
 800d450:	94a03595 	.word	0x94a03595
 800d454:	3fdfffff 	.word	0x3fdfffff
 800d458:	35afe535 	.word	0x35afe535
 800d45c:	3fe00000 	.word	0x3fe00000
 800d460:	000fffff 	.word	0x000fffff
 800d464:	7ff00000 	.word	0x7ff00000
 800d468:	7fefffff 	.word	0x7fefffff
 800d46c:	3ff00000 	.word	0x3ff00000
 800d470:	3fe00000 	.word	0x3fe00000
 800d474:	7fe00000 	.word	0x7fe00000
 800d478:	7c9fffff 	.word	0x7c9fffff
 800d47c:	9b08      	ldr	r3, [sp, #32]
 800d47e:	b323      	cbz	r3, 800d4ca <_strtod_l+0xb5a>
 800d480:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d484:	d821      	bhi.n	800d4ca <_strtod_l+0xb5a>
 800d486:	a328      	add	r3, pc, #160	@ (adr r3, 800d528 <_strtod_l+0xbb8>)
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f3 fb36 	bl	8000b00 <__aeabi_dcmple>
 800d494:	b1a0      	cbz	r0, 800d4c0 <_strtod_l+0xb50>
 800d496:	4639      	mov	r1, r7
 800d498:	4630      	mov	r0, r6
 800d49a:	f7f3 fb8d 	bl	8000bb8 <__aeabi_d2uiz>
 800d49e:	2801      	cmp	r0, #1
 800d4a0:	bf38      	it	cc
 800d4a2:	2001      	movcc	r0, #1
 800d4a4:	f7f3 f836 	bl	8000514 <__aeabi_ui2d>
 800d4a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	b9fb      	cbnz	r3, 800d4f0 <_strtod_l+0xb80>
 800d4b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4b4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d4b6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d4b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d4bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d4c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d4c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d4c6:	1b5b      	subs	r3, r3, r5
 800d4c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d4ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d4ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d4d2:	f002 f9f9 	bl	800f8c8 <__ulp>
 800d4d6:	4650      	mov	r0, sl
 800d4d8:	ec53 2b10 	vmov	r2, r3, d0
 800d4dc:	4659      	mov	r1, fp
 800d4de:	f7f3 f893 	bl	8000608 <__aeabi_dmul>
 800d4e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d4e6:	f7f2 fed9 	bl	800029c <__adddf3>
 800d4ea:	4682      	mov	sl, r0
 800d4ec:	468b      	mov	fp, r1
 800d4ee:	e770      	b.n	800d3d2 <_strtod_l+0xa62>
 800d4f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d4f4:	e7e0      	b.n	800d4b8 <_strtod_l+0xb48>
 800d4f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d530 <_strtod_l+0xbc0>)
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	f7f3 faf6 	bl	8000aec <__aeabi_dcmplt>
 800d500:	e798      	b.n	800d434 <_strtod_l+0xac4>
 800d502:	2300      	movs	r3, #0
 800d504:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d506:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d50a:	6013      	str	r3, [r2, #0]
 800d50c:	f7ff ba6d 	b.w	800c9ea <_strtod_l+0x7a>
 800d510:	2a65      	cmp	r2, #101	@ 0x65
 800d512:	f43f ab66 	beq.w	800cbe2 <_strtod_l+0x272>
 800d516:	2a45      	cmp	r2, #69	@ 0x45
 800d518:	f43f ab63 	beq.w	800cbe2 <_strtod_l+0x272>
 800d51c:	2301      	movs	r3, #1
 800d51e:	f7ff bb9e 	b.w	800cc5e <_strtod_l+0x2ee>
 800d522:	bf00      	nop
 800d524:	f3af 8000 	nop.w
 800d528:	ffc00000 	.word	0xffc00000
 800d52c:	41dfffff 	.word	0x41dfffff
 800d530:	94a03595 	.word	0x94a03595
 800d534:	3fcfffff 	.word	0x3fcfffff

0800d538 <_strtod_r>:
 800d538:	4b01      	ldr	r3, [pc, #4]	@ (800d540 <_strtod_r+0x8>)
 800d53a:	f7ff ba19 	b.w	800c970 <_strtod_l>
 800d53e:	bf00      	nop
 800d540:	200002e4 	.word	0x200002e4

0800d544 <_strtol_l.constprop.0>:
 800d544:	2b24      	cmp	r3, #36	@ 0x24
 800d546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d54a:	4686      	mov	lr, r0
 800d54c:	4690      	mov	r8, r2
 800d54e:	d801      	bhi.n	800d554 <_strtol_l.constprop.0+0x10>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d106      	bne.n	800d562 <_strtol_l.constprop.0+0x1e>
 800d554:	f000 f8c0 	bl	800d6d8 <__errno>
 800d558:	2316      	movs	r3, #22
 800d55a:	6003      	str	r3, [r0, #0]
 800d55c:	2000      	movs	r0, #0
 800d55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d562:	4834      	ldr	r0, [pc, #208]	@ (800d634 <_strtol_l.constprop.0+0xf0>)
 800d564:	460d      	mov	r5, r1
 800d566:	462a      	mov	r2, r5
 800d568:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d56c:	5d06      	ldrb	r6, [r0, r4]
 800d56e:	f016 0608 	ands.w	r6, r6, #8
 800d572:	d1f8      	bne.n	800d566 <_strtol_l.constprop.0+0x22>
 800d574:	2c2d      	cmp	r4, #45	@ 0x2d
 800d576:	d12d      	bne.n	800d5d4 <_strtol_l.constprop.0+0x90>
 800d578:	782c      	ldrb	r4, [r5, #0]
 800d57a:	2601      	movs	r6, #1
 800d57c:	1c95      	adds	r5, r2, #2
 800d57e:	f033 0210 	bics.w	r2, r3, #16
 800d582:	d109      	bne.n	800d598 <_strtol_l.constprop.0+0x54>
 800d584:	2c30      	cmp	r4, #48	@ 0x30
 800d586:	d12a      	bne.n	800d5de <_strtol_l.constprop.0+0x9a>
 800d588:	782a      	ldrb	r2, [r5, #0]
 800d58a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d58e:	2a58      	cmp	r2, #88	@ 0x58
 800d590:	d125      	bne.n	800d5de <_strtol_l.constprop.0+0x9a>
 800d592:	786c      	ldrb	r4, [r5, #1]
 800d594:	2310      	movs	r3, #16
 800d596:	3502      	adds	r5, #2
 800d598:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d59c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	fbbc f9f3 	udiv	r9, ip, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d5b0:	2f09      	cmp	r7, #9
 800d5b2:	d81b      	bhi.n	800d5ec <_strtol_l.constprop.0+0xa8>
 800d5b4:	463c      	mov	r4, r7
 800d5b6:	42a3      	cmp	r3, r4
 800d5b8:	dd27      	ble.n	800d60a <_strtol_l.constprop.0+0xc6>
 800d5ba:	1c57      	adds	r7, r2, #1
 800d5bc:	d007      	beq.n	800d5ce <_strtol_l.constprop.0+0x8a>
 800d5be:	4581      	cmp	r9, r0
 800d5c0:	d320      	bcc.n	800d604 <_strtol_l.constprop.0+0xc0>
 800d5c2:	d101      	bne.n	800d5c8 <_strtol_l.constprop.0+0x84>
 800d5c4:	45a2      	cmp	sl, r4
 800d5c6:	db1d      	blt.n	800d604 <_strtol_l.constprop.0+0xc0>
 800d5c8:	fb00 4003 	mla	r0, r0, r3, r4
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5d2:	e7eb      	b.n	800d5ac <_strtol_l.constprop.0+0x68>
 800d5d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5d6:	bf04      	itt	eq
 800d5d8:	782c      	ldrbeq	r4, [r5, #0]
 800d5da:	1c95      	addeq	r5, r2, #2
 800d5dc:	e7cf      	b.n	800d57e <_strtol_l.constprop.0+0x3a>
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1da      	bne.n	800d598 <_strtol_l.constprop.0+0x54>
 800d5e2:	2c30      	cmp	r4, #48	@ 0x30
 800d5e4:	bf0c      	ite	eq
 800d5e6:	2308      	moveq	r3, #8
 800d5e8:	230a      	movne	r3, #10
 800d5ea:	e7d5      	b.n	800d598 <_strtol_l.constprop.0+0x54>
 800d5ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d5f0:	2f19      	cmp	r7, #25
 800d5f2:	d801      	bhi.n	800d5f8 <_strtol_l.constprop.0+0xb4>
 800d5f4:	3c37      	subs	r4, #55	@ 0x37
 800d5f6:	e7de      	b.n	800d5b6 <_strtol_l.constprop.0+0x72>
 800d5f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d5fc:	2f19      	cmp	r7, #25
 800d5fe:	d804      	bhi.n	800d60a <_strtol_l.constprop.0+0xc6>
 800d600:	3c57      	subs	r4, #87	@ 0x57
 800d602:	e7d8      	b.n	800d5b6 <_strtol_l.constprop.0+0x72>
 800d604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d608:	e7e1      	b.n	800d5ce <_strtol_l.constprop.0+0x8a>
 800d60a:	1c53      	adds	r3, r2, #1
 800d60c:	d108      	bne.n	800d620 <_strtol_l.constprop.0+0xdc>
 800d60e:	2322      	movs	r3, #34	@ 0x22
 800d610:	f8ce 3000 	str.w	r3, [lr]
 800d614:	4660      	mov	r0, ip
 800d616:	f1b8 0f00 	cmp.w	r8, #0
 800d61a:	d0a0      	beq.n	800d55e <_strtol_l.constprop.0+0x1a>
 800d61c:	1e69      	subs	r1, r5, #1
 800d61e:	e006      	b.n	800d62e <_strtol_l.constprop.0+0xea>
 800d620:	b106      	cbz	r6, 800d624 <_strtol_l.constprop.0+0xe0>
 800d622:	4240      	negs	r0, r0
 800d624:	f1b8 0f00 	cmp.w	r8, #0
 800d628:	d099      	beq.n	800d55e <_strtol_l.constprop.0+0x1a>
 800d62a:	2a00      	cmp	r2, #0
 800d62c:	d1f6      	bne.n	800d61c <_strtol_l.constprop.0+0xd8>
 800d62e:	f8c8 1000 	str.w	r1, [r8]
 800d632:	e794      	b.n	800d55e <_strtol_l.constprop.0+0x1a>
 800d634:	08010659 	.word	0x08010659

0800d638 <_strtol_r>:
 800d638:	f7ff bf84 	b.w	800d544 <_strtol_l.constprop.0>

0800d63c <_fwalk_sglue>:
 800d63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d640:	4607      	mov	r7, r0
 800d642:	4688      	mov	r8, r1
 800d644:	4614      	mov	r4, r2
 800d646:	2600      	movs	r6, #0
 800d648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d64c:	f1b9 0901 	subs.w	r9, r9, #1
 800d650:	d505      	bpl.n	800d65e <_fwalk_sglue+0x22>
 800d652:	6824      	ldr	r4, [r4, #0]
 800d654:	2c00      	cmp	r4, #0
 800d656:	d1f7      	bne.n	800d648 <_fwalk_sglue+0xc>
 800d658:	4630      	mov	r0, r6
 800d65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65e:	89ab      	ldrh	r3, [r5, #12]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d907      	bls.n	800d674 <_fwalk_sglue+0x38>
 800d664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d668:	3301      	adds	r3, #1
 800d66a:	d003      	beq.n	800d674 <_fwalk_sglue+0x38>
 800d66c:	4629      	mov	r1, r5
 800d66e:	4638      	mov	r0, r7
 800d670:	47c0      	blx	r8
 800d672:	4306      	orrs	r6, r0
 800d674:	3568      	adds	r5, #104	@ 0x68
 800d676:	e7e9      	b.n	800d64c <_fwalk_sglue+0x10>

0800d678 <iprintf>:
 800d678:	b40f      	push	{r0, r1, r2, r3}
 800d67a:	b507      	push	{r0, r1, r2, lr}
 800d67c:	4906      	ldr	r1, [pc, #24]	@ (800d698 <iprintf+0x20>)
 800d67e:	ab04      	add	r3, sp, #16
 800d680:	6808      	ldr	r0, [r1, #0]
 800d682:	f853 2b04 	ldr.w	r2, [r3], #4
 800d686:	6881      	ldr	r1, [r0, #8]
 800d688:	9301      	str	r3, [sp, #4]
 800d68a:	f001 fbc9 	bl	800ee20 <_vfiprintf_r>
 800d68e:	b003      	add	sp, #12
 800d690:	f85d eb04 	ldr.w	lr, [sp], #4
 800d694:	b004      	add	sp, #16
 800d696:	4770      	bx	lr
 800d698:	20000450 	.word	0x20000450

0800d69c <strncmp>:
 800d69c:	b510      	push	{r4, lr}
 800d69e:	b16a      	cbz	r2, 800d6bc <strncmp+0x20>
 800d6a0:	3901      	subs	r1, #1
 800d6a2:	1884      	adds	r4, r0, r2
 800d6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d103      	bne.n	800d6b8 <strncmp+0x1c>
 800d6b0:	42a0      	cmp	r0, r4
 800d6b2:	d001      	beq.n	800d6b8 <strncmp+0x1c>
 800d6b4:	2a00      	cmp	r2, #0
 800d6b6:	d1f5      	bne.n	800d6a4 <strncmp+0x8>
 800d6b8:	1ad0      	subs	r0, r2, r3
 800d6ba:	bd10      	pop	{r4, pc}
 800d6bc:	4610      	mov	r0, r2
 800d6be:	e7fc      	b.n	800d6ba <strncmp+0x1e>

0800d6c0 <memset>:
 800d6c0:	4402      	add	r2, r0
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d100      	bne.n	800d6ca <memset+0xa>
 800d6c8:	4770      	bx	lr
 800d6ca:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ce:	e7f9      	b.n	800d6c4 <memset+0x4>

0800d6d0 <_localeconv_r>:
 800d6d0:	4800      	ldr	r0, [pc, #0]	@ (800d6d4 <_localeconv_r+0x4>)
 800d6d2:	4770      	bx	lr
 800d6d4:	200003d4 	.word	0x200003d4

0800d6d8 <__errno>:
 800d6d8:	4b01      	ldr	r3, [pc, #4]	@ (800d6e0 <__errno+0x8>)
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20000450 	.word	0x20000450

0800d6e4 <__libc_init_array>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d71c <__libc_init_array+0x38>)
 800d6e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d720 <__libc_init_array+0x3c>)
 800d6ea:	1b64      	subs	r4, r4, r5
 800d6ec:	10a4      	asrs	r4, r4, #2
 800d6ee:	2600      	movs	r6, #0
 800d6f0:	42a6      	cmp	r6, r4
 800d6f2:	d109      	bne.n	800d708 <__libc_init_array+0x24>
 800d6f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d724 <__libc_init_array+0x40>)
 800d6f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d728 <__libc_init_array+0x44>)
 800d6f8:	f002 fce6 	bl	80100c8 <_init>
 800d6fc:	1b64      	subs	r4, r4, r5
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	2600      	movs	r6, #0
 800d702:	42a6      	cmp	r6, r4
 800d704:	d105      	bne.n	800d712 <__libc_init_array+0x2e>
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	f855 3b04 	ldr.w	r3, [r5], #4
 800d70c:	4798      	blx	r3
 800d70e:	3601      	adds	r6, #1
 800d710:	e7ee      	b.n	800d6f0 <__libc_init_array+0xc>
 800d712:	f855 3b04 	ldr.w	r3, [r5], #4
 800d716:	4798      	blx	r3
 800d718:	3601      	adds	r6, #1
 800d71a:	e7f2      	b.n	800d702 <__libc_init_array+0x1e>
 800d71c:	080109f4 	.word	0x080109f4
 800d720:	080109f4 	.word	0x080109f4
 800d724:	080109f4 	.word	0x080109f4
 800d728:	080109f8 	.word	0x080109f8

0800d72c <__retarget_lock_init_recursive>:
 800d72c:	4770      	bx	lr

0800d72e <__retarget_lock_acquire_recursive>:
 800d72e:	4770      	bx	lr

0800d730 <__retarget_lock_release_recursive>:
 800d730:	4770      	bx	lr

0800d732 <memcpy>:
 800d732:	440a      	add	r2, r1
 800d734:	4291      	cmp	r1, r2
 800d736:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d73a:	d100      	bne.n	800d73e <memcpy+0xc>
 800d73c:	4770      	bx	lr
 800d73e:	b510      	push	{r4, lr}
 800d740:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d744:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d748:	4291      	cmp	r1, r2
 800d74a:	d1f9      	bne.n	800d740 <memcpy+0xe>
 800d74c:	bd10      	pop	{r4, pc}

0800d74e <strcpy>:
 800d74e:	4603      	mov	r3, r0
 800d750:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d754:	f803 2b01 	strb.w	r2, [r3], #1
 800d758:	2a00      	cmp	r2, #0
 800d75a:	d1f9      	bne.n	800d750 <strcpy+0x2>
 800d75c:	4770      	bx	lr
	...

0800d760 <nan>:
 800d760:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d768 <nan+0x8>
 800d764:	4770      	bx	lr
 800d766:	bf00      	nop
 800d768:	00000000 	.word	0x00000000
 800d76c:	7ff80000 	.word	0x7ff80000

0800d770 <nanf>:
 800d770:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d778 <nanf+0x8>
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	7fc00000 	.word	0x7fc00000

0800d77c <quorem>:
 800d77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	6903      	ldr	r3, [r0, #16]
 800d782:	690c      	ldr	r4, [r1, #16]
 800d784:	42a3      	cmp	r3, r4
 800d786:	4607      	mov	r7, r0
 800d788:	db7e      	blt.n	800d888 <quorem+0x10c>
 800d78a:	3c01      	subs	r4, #1
 800d78c:	f101 0814 	add.w	r8, r1, #20
 800d790:	00a3      	lsls	r3, r4, #2
 800d792:	f100 0514 	add.w	r5, r0, #20
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7b2:	d32e      	bcc.n	800d812 <quorem+0x96>
 800d7b4:	f04f 0a00 	mov.w	sl, #0
 800d7b8:	46c4      	mov	ip, r8
 800d7ba:	46ae      	mov	lr, r5
 800d7bc:	46d3      	mov	fp, sl
 800d7be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d7c2:	b298      	uxth	r0, r3
 800d7c4:	fb06 a000 	mla	r0, r6, r0, sl
 800d7c8:	0c02      	lsrs	r2, r0, #16
 800d7ca:	0c1b      	lsrs	r3, r3, #16
 800d7cc:	fb06 2303 	mla	r3, r6, r3, r2
 800d7d0:	f8de 2000 	ldr.w	r2, [lr]
 800d7d4:	b280      	uxth	r0, r0
 800d7d6:	b292      	uxth	r2, r2
 800d7d8:	1a12      	subs	r2, r2, r0
 800d7da:	445a      	add	r2, fp
 800d7dc:	f8de 0000 	ldr.w	r0, [lr]
 800d7e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d7ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d7f4:	45e1      	cmp	r9, ip
 800d7f6:	f84e 2b04 	str.w	r2, [lr], #4
 800d7fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d7fe:	d2de      	bcs.n	800d7be <quorem+0x42>
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	58eb      	ldr	r3, [r5, r3]
 800d804:	b92b      	cbnz	r3, 800d812 <quorem+0x96>
 800d806:	9b01      	ldr	r3, [sp, #4]
 800d808:	3b04      	subs	r3, #4
 800d80a:	429d      	cmp	r5, r3
 800d80c:	461a      	mov	r2, r3
 800d80e:	d32f      	bcc.n	800d870 <quorem+0xf4>
 800d810:	613c      	str	r4, [r7, #16]
 800d812:	4638      	mov	r0, r7
 800d814:	f001 ffa8 	bl	800f768 <__mcmp>
 800d818:	2800      	cmp	r0, #0
 800d81a:	db25      	blt.n	800d868 <quorem+0xec>
 800d81c:	4629      	mov	r1, r5
 800d81e:	2000      	movs	r0, #0
 800d820:	f858 2b04 	ldr.w	r2, [r8], #4
 800d824:	f8d1 c000 	ldr.w	ip, [r1]
 800d828:	fa1f fe82 	uxth.w	lr, r2
 800d82c:	fa1f f38c 	uxth.w	r3, ip
 800d830:	eba3 030e 	sub.w	r3, r3, lr
 800d834:	4403      	add	r3, r0
 800d836:	0c12      	lsrs	r2, r2, #16
 800d838:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d83c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d840:	b29b      	uxth	r3, r3
 800d842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d846:	45c1      	cmp	r9, r8
 800d848:	f841 3b04 	str.w	r3, [r1], #4
 800d84c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d850:	d2e6      	bcs.n	800d820 <quorem+0xa4>
 800d852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d85a:	b922      	cbnz	r2, 800d866 <quorem+0xea>
 800d85c:	3b04      	subs	r3, #4
 800d85e:	429d      	cmp	r5, r3
 800d860:	461a      	mov	r2, r3
 800d862:	d30b      	bcc.n	800d87c <quorem+0x100>
 800d864:	613c      	str	r4, [r7, #16]
 800d866:	3601      	adds	r6, #1
 800d868:	4630      	mov	r0, r6
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d870:	6812      	ldr	r2, [r2, #0]
 800d872:	3b04      	subs	r3, #4
 800d874:	2a00      	cmp	r2, #0
 800d876:	d1cb      	bne.n	800d810 <quorem+0x94>
 800d878:	3c01      	subs	r4, #1
 800d87a:	e7c6      	b.n	800d80a <quorem+0x8e>
 800d87c:	6812      	ldr	r2, [r2, #0]
 800d87e:	3b04      	subs	r3, #4
 800d880:	2a00      	cmp	r2, #0
 800d882:	d1ef      	bne.n	800d864 <quorem+0xe8>
 800d884:	3c01      	subs	r4, #1
 800d886:	e7ea      	b.n	800d85e <quorem+0xe2>
 800d888:	2000      	movs	r0, #0
 800d88a:	e7ee      	b.n	800d86a <quorem+0xee>
 800d88c:	0000      	movs	r0, r0
	...

0800d890 <_dtoa_r>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	69c7      	ldr	r7, [r0, #28]
 800d896:	b099      	sub	sp, #100	@ 0x64
 800d898:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d89c:	ec55 4b10 	vmov	r4, r5, d0
 800d8a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d8a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8a4:	4683      	mov	fp, r0
 800d8a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d8a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d8aa:	b97f      	cbnz	r7, 800d8cc <_dtoa_r+0x3c>
 800d8ac:	2010      	movs	r0, #16
 800d8ae:	f001 fbcf 	bl	800f050 <malloc>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d8b8:	b920      	cbnz	r0, 800d8c4 <_dtoa_r+0x34>
 800d8ba:	4ba7      	ldr	r3, [pc, #668]	@ (800db58 <_dtoa_r+0x2c8>)
 800d8bc:	21ef      	movs	r1, #239	@ 0xef
 800d8be:	48a7      	ldr	r0, [pc, #668]	@ (800db5c <_dtoa_r+0x2cc>)
 800d8c0:	f002 fb48 	bl	800ff54 <__assert_func>
 800d8c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d8c8:	6007      	str	r7, [r0, #0]
 800d8ca:	60c7      	str	r7, [r0, #12]
 800d8cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d8d0:	6819      	ldr	r1, [r3, #0]
 800d8d2:	b159      	cbz	r1, 800d8ec <_dtoa_r+0x5c>
 800d8d4:	685a      	ldr	r2, [r3, #4]
 800d8d6:	604a      	str	r2, [r1, #4]
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4093      	lsls	r3, r2
 800d8dc:	608b      	str	r3, [r1, #8]
 800d8de:	4658      	mov	r0, fp
 800d8e0:	f001 fcbe 	bl	800f260 <_Bfree>
 800d8e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	1e2b      	subs	r3, r5, #0
 800d8ee:	bfb9      	ittee	lt
 800d8f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d8f4:	9303      	strlt	r3, [sp, #12]
 800d8f6:	2300      	movge	r3, #0
 800d8f8:	6033      	strge	r3, [r6, #0]
 800d8fa:	9f03      	ldr	r7, [sp, #12]
 800d8fc:	4b98      	ldr	r3, [pc, #608]	@ (800db60 <_dtoa_r+0x2d0>)
 800d8fe:	bfbc      	itt	lt
 800d900:	2201      	movlt	r2, #1
 800d902:	6032      	strlt	r2, [r6, #0]
 800d904:	43bb      	bics	r3, r7
 800d906:	d112      	bne.n	800d92e <_dtoa_r+0x9e>
 800d908:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d90a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d914:	4323      	orrs	r3, r4
 800d916:	f000 854d 	beq.w	800e3b4 <_dtoa_r+0xb24>
 800d91a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d91c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800db74 <_dtoa_r+0x2e4>
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 854f 	beq.w	800e3c4 <_dtoa_r+0xb34>
 800d926:	f10a 0303 	add.w	r3, sl, #3
 800d92a:	f000 bd49 	b.w	800e3c0 <_dtoa_r+0xb30>
 800d92e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d932:	2200      	movs	r2, #0
 800d934:	ec51 0b17 	vmov	r0, r1, d7
 800d938:	2300      	movs	r3, #0
 800d93a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d93e:	f7f3 f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 800d942:	4680      	mov	r8, r0
 800d944:	b158      	cbz	r0, 800d95e <_dtoa_r+0xce>
 800d946:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d948:	2301      	movs	r3, #1
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d94e:	b113      	cbz	r3, 800d956 <_dtoa_r+0xc6>
 800d950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d952:	4b84      	ldr	r3, [pc, #528]	@ (800db64 <_dtoa_r+0x2d4>)
 800d954:	6013      	str	r3, [r2, #0]
 800d956:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800db78 <_dtoa_r+0x2e8>
 800d95a:	f000 bd33 	b.w	800e3c4 <_dtoa_r+0xb34>
 800d95e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d962:	aa16      	add	r2, sp, #88	@ 0x58
 800d964:	a917      	add	r1, sp, #92	@ 0x5c
 800d966:	4658      	mov	r0, fp
 800d968:	f002 f81e 	bl	800f9a8 <__d2b>
 800d96c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d970:	4681      	mov	r9, r0
 800d972:	2e00      	cmp	r6, #0
 800d974:	d077      	beq.n	800da66 <_dtoa_r+0x1d6>
 800d976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d978:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d984:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d988:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d98c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d990:	4619      	mov	r1, r3
 800d992:	2200      	movs	r2, #0
 800d994:	4b74      	ldr	r3, [pc, #464]	@ (800db68 <_dtoa_r+0x2d8>)
 800d996:	f7f2 fc7f 	bl	8000298 <__aeabi_dsub>
 800d99a:	a369      	add	r3, pc, #420	@ (adr r3, 800db40 <_dtoa_r+0x2b0>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f7f2 fe32 	bl	8000608 <__aeabi_dmul>
 800d9a4:	a368      	add	r3, pc, #416	@ (adr r3, 800db48 <_dtoa_r+0x2b8>)
 800d9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9aa:	f7f2 fc77 	bl	800029c <__adddf3>
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	460d      	mov	r5, r1
 800d9b4:	f7f2 fdbe 	bl	8000534 <__aeabi_i2d>
 800d9b8:	a365      	add	r3, pc, #404	@ (adr r3, 800db50 <_dtoa_r+0x2c0>)
 800d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9be:	f7f2 fe23 	bl	8000608 <__aeabi_dmul>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	f7f2 fc67 	bl	800029c <__adddf3>
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	f7f3 f8c9 	bl	8000b68 <__aeabi_d2iz>
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	4607      	mov	r7, r0
 800d9da:	2300      	movs	r3, #0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	f7f3 f884 	bl	8000aec <__aeabi_dcmplt>
 800d9e4:	b140      	cbz	r0, 800d9f8 <_dtoa_r+0x168>
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f7f2 fda4 	bl	8000534 <__aeabi_i2d>
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	462b      	mov	r3, r5
 800d9f0:	f7f3 f872 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9f4:	b900      	cbnz	r0, 800d9f8 <_dtoa_r+0x168>
 800d9f6:	3f01      	subs	r7, #1
 800d9f8:	2f16      	cmp	r7, #22
 800d9fa:	d851      	bhi.n	800daa0 <_dtoa_r+0x210>
 800d9fc:	4b5b      	ldr	r3, [pc, #364]	@ (800db6c <_dtoa_r+0x2dc>)
 800d9fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800da0a:	f7f3 f86f 	bl	8000aec <__aeabi_dcmplt>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d048      	beq.n	800daa4 <_dtoa_r+0x214>
 800da12:	3f01      	subs	r7, #1
 800da14:	2300      	movs	r3, #0
 800da16:	9312      	str	r3, [sp, #72]	@ 0x48
 800da18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da1a:	1b9b      	subs	r3, r3, r6
 800da1c:	1e5a      	subs	r2, r3, #1
 800da1e:	bf44      	itt	mi
 800da20:	f1c3 0801 	rsbmi	r8, r3, #1
 800da24:	2300      	movmi	r3, #0
 800da26:	9208      	str	r2, [sp, #32]
 800da28:	bf54      	ite	pl
 800da2a:	f04f 0800 	movpl.w	r8, #0
 800da2e:	9308      	strmi	r3, [sp, #32]
 800da30:	2f00      	cmp	r7, #0
 800da32:	db39      	blt.n	800daa8 <_dtoa_r+0x218>
 800da34:	9b08      	ldr	r3, [sp, #32]
 800da36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800da38:	443b      	add	r3, r7
 800da3a:	9308      	str	r3, [sp, #32]
 800da3c:	2300      	movs	r3, #0
 800da3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da42:	2b09      	cmp	r3, #9
 800da44:	d864      	bhi.n	800db10 <_dtoa_r+0x280>
 800da46:	2b05      	cmp	r3, #5
 800da48:	bfc4      	itt	gt
 800da4a:	3b04      	subgt	r3, #4
 800da4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800da4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da50:	f1a3 0302 	sub.w	r3, r3, #2
 800da54:	bfcc      	ite	gt
 800da56:	2400      	movgt	r4, #0
 800da58:	2401      	movle	r4, #1
 800da5a:	2b03      	cmp	r3, #3
 800da5c:	d863      	bhi.n	800db26 <_dtoa_r+0x296>
 800da5e:	e8df f003 	tbb	[pc, r3]
 800da62:	372a      	.short	0x372a
 800da64:	5535      	.short	0x5535
 800da66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800da6a:	441e      	add	r6, r3
 800da6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800da70:	2b20      	cmp	r3, #32
 800da72:	bfc1      	itttt	gt
 800da74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800da78:	409f      	lslgt	r7, r3
 800da7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800da7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800da82:	bfd6      	itet	le
 800da84:	f1c3 0320 	rsble	r3, r3, #32
 800da88:	ea47 0003 	orrgt.w	r0, r7, r3
 800da8c:	fa04 f003 	lslle.w	r0, r4, r3
 800da90:	f7f2 fd40 	bl	8000514 <__aeabi_ui2d>
 800da94:	2201      	movs	r2, #1
 800da96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800da9a:	3e01      	subs	r6, #1
 800da9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800da9e:	e777      	b.n	800d990 <_dtoa_r+0x100>
 800daa0:	2301      	movs	r3, #1
 800daa2:	e7b8      	b.n	800da16 <_dtoa_r+0x186>
 800daa4:	9012      	str	r0, [sp, #72]	@ 0x48
 800daa6:	e7b7      	b.n	800da18 <_dtoa_r+0x188>
 800daa8:	427b      	negs	r3, r7
 800daaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800daac:	2300      	movs	r3, #0
 800daae:	eba8 0807 	sub.w	r8, r8, r7
 800dab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dab4:	e7c4      	b.n	800da40 <_dtoa_r+0x1b0>
 800dab6:	2300      	movs	r3, #0
 800dab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800daba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	dc35      	bgt.n	800db2c <_dtoa_r+0x29c>
 800dac0:	2301      	movs	r3, #1
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	9307      	str	r3, [sp, #28]
 800dac6:	461a      	mov	r2, r3
 800dac8:	920e      	str	r2, [sp, #56]	@ 0x38
 800daca:	e00b      	b.n	800dae4 <_dtoa_r+0x254>
 800dacc:	2301      	movs	r3, #1
 800dace:	e7f3      	b.n	800dab8 <_dtoa_r+0x228>
 800dad0:	2300      	movs	r3, #0
 800dad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dad6:	18fb      	adds	r3, r7, r3
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	3301      	adds	r3, #1
 800dadc:	2b01      	cmp	r3, #1
 800dade:	9307      	str	r3, [sp, #28]
 800dae0:	bfb8      	it	lt
 800dae2:	2301      	movlt	r3, #1
 800dae4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dae8:	2100      	movs	r1, #0
 800daea:	2204      	movs	r2, #4
 800daec:	f102 0514 	add.w	r5, r2, #20
 800daf0:	429d      	cmp	r5, r3
 800daf2:	d91f      	bls.n	800db34 <_dtoa_r+0x2a4>
 800daf4:	6041      	str	r1, [r0, #4]
 800daf6:	4658      	mov	r0, fp
 800daf8:	f001 fb72 	bl	800f1e0 <_Balloc>
 800dafc:	4682      	mov	sl, r0
 800dafe:	2800      	cmp	r0, #0
 800db00:	d13c      	bne.n	800db7c <_dtoa_r+0x2ec>
 800db02:	4b1b      	ldr	r3, [pc, #108]	@ (800db70 <_dtoa_r+0x2e0>)
 800db04:	4602      	mov	r2, r0
 800db06:	f240 11af 	movw	r1, #431	@ 0x1af
 800db0a:	e6d8      	b.n	800d8be <_dtoa_r+0x2e>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e7e0      	b.n	800dad2 <_dtoa_r+0x242>
 800db10:	2401      	movs	r4, #1
 800db12:	2300      	movs	r3, #0
 800db14:	9309      	str	r3, [sp, #36]	@ 0x24
 800db16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800db18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	9307      	str	r3, [sp, #28]
 800db20:	2200      	movs	r2, #0
 800db22:	2312      	movs	r3, #18
 800db24:	e7d0      	b.n	800dac8 <_dtoa_r+0x238>
 800db26:	2301      	movs	r3, #1
 800db28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db2a:	e7f5      	b.n	800db18 <_dtoa_r+0x288>
 800db2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	9307      	str	r3, [sp, #28]
 800db32:	e7d7      	b.n	800dae4 <_dtoa_r+0x254>
 800db34:	3101      	adds	r1, #1
 800db36:	0052      	lsls	r2, r2, #1
 800db38:	e7d8      	b.n	800daec <_dtoa_r+0x25c>
 800db3a:	bf00      	nop
 800db3c:	f3af 8000 	nop.w
 800db40:	636f4361 	.word	0x636f4361
 800db44:	3fd287a7 	.word	0x3fd287a7
 800db48:	8b60c8b3 	.word	0x8b60c8b3
 800db4c:	3fc68a28 	.word	0x3fc68a28
 800db50:	509f79fb 	.word	0x509f79fb
 800db54:	3fd34413 	.word	0x3fd34413
 800db58:	08010766 	.word	0x08010766
 800db5c:	0801077d 	.word	0x0801077d
 800db60:	7ff00000 	.word	0x7ff00000
 800db64:	080105d5 	.word	0x080105d5
 800db68:	3ff80000 	.word	0x3ff80000
 800db6c:	080108e8 	.word	0x080108e8
 800db70:	080107d5 	.word	0x080107d5
 800db74:	08010762 	.word	0x08010762
 800db78:	080105d4 	.word	0x080105d4
 800db7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800db80:	6018      	str	r0, [r3, #0]
 800db82:	9b07      	ldr	r3, [sp, #28]
 800db84:	2b0e      	cmp	r3, #14
 800db86:	f200 80a4 	bhi.w	800dcd2 <_dtoa_r+0x442>
 800db8a:	2c00      	cmp	r4, #0
 800db8c:	f000 80a1 	beq.w	800dcd2 <_dtoa_r+0x442>
 800db90:	2f00      	cmp	r7, #0
 800db92:	dd33      	ble.n	800dbfc <_dtoa_r+0x36c>
 800db94:	4bad      	ldr	r3, [pc, #692]	@ (800de4c <_dtoa_r+0x5bc>)
 800db96:	f007 020f 	and.w	r2, r7, #15
 800db9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db9e:	ed93 7b00 	vldr	d7, [r3]
 800dba2:	05f8      	lsls	r0, r7, #23
 800dba4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dbac:	d516      	bpl.n	800dbdc <_dtoa_r+0x34c>
 800dbae:	4ba8      	ldr	r3, [pc, #672]	@ (800de50 <_dtoa_r+0x5c0>)
 800dbb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbb8:	f7f2 fe50 	bl	800085c <__aeabi_ddiv>
 800dbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbc0:	f004 040f 	and.w	r4, r4, #15
 800dbc4:	2603      	movs	r6, #3
 800dbc6:	4da2      	ldr	r5, [pc, #648]	@ (800de50 <_dtoa_r+0x5c0>)
 800dbc8:	b954      	cbnz	r4, 800dbe0 <_dtoa_r+0x350>
 800dbca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbd2:	f7f2 fe43 	bl	800085c <__aeabi_ddiv>
 800dbd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbda:	e028      	b.n	800dc2e <_dtoa_r+0x39e>
 800dbdc:	2602      	movs	r6, #2
 800dbde:	e7f2      	b.n	800dbc6 <_dtoa_r+0x336>
 800dbe0:	07e1      	lsls	r1, r4, #31
 800dbe2:	d508      	bpl.n	800dbf6 <_dtoa_r+0x366>
 800dbe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dbe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dbec:	f7f2 fd0c 	bl	8000608 <__aeabi_dmul>
 800dbf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	1064      	asrs	r4, r4, #1
 800dbf8:	3508      	adds	r5, #8
 800dbfa:	e7e5      	b.n	800dbc8 <_dtoa_r+0x338>
 800dbfc:	f000 80d2 	beq.w	800dda4 <_dtoa_r+0x514>
 800dc00:	427c      	negs	r4, r7
 800dc02:	4b92      	ldr	r3, [pc, #584]	@ (800de4c <_dtoa_r+0x5bc>)
 800dc04:	4d92      	ldr	r5, [pc, #584]	@ (800de50 <_dtoa_r+0x5c0>)
 800dc06:	f004 020f 	and.w	r2, r4, #15
 800dc0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc16:	f7f2 fcf7 	bl	8000608 <__aeabi_dmul>
 800dc1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1e:	1124      	asrs	r4, r4, #4
 800dc20:	2300      	movs	r3, #0
 800dc22:	2602      	movs	r6, #2
 800dc24:	2c00      	cmp	r4, #0
 800dc26:	f040 80b2 	bne.w	800dd8e <_dtoa_r+0x4fe>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1d3      	bne.n	800dbd6 <_dtoa_r+0x346>
 800dc2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dc30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 80b7 	beq.w	800dda8 <_dtoa_r+0x518>
 800dc3a:	4b86      	ldr	r3, [pc, #536]	@ (800de54 <_dtoa_r+0x5c4>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 ff53 	bl	8000aec <__aeabi_dcmplt>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	f000 80ae 	beq.w	800dda8 <_dtoa_r+0x518>
 800dc4c:	9b07      	ldr	r3, [sp, #28]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 80aa 	beq.w	800dda8 <_dtoa_r+0x518>
 800dc54:	9b00      	ldr	r3, [sp, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	dd37      	ble.n	800dcca <_dtoa_r+0x43a>
 800dc5a:	1e7b      	subs	r3, r7, #1
 800dc5c:	9304      	str	r3, [sp, #16]
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4b7d      	ldr	r3, [pc, #500]	@ (800de58 <_dtoa_r+0x5c8>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	4629      	mov	r1, r5
 800dc66:	f7f2 fccf 	bl	8000608 <__aeabi_dmul>
 800dc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc6e:	9c00      	ldr	r4, [sp, #0]
 800dc70:	3601      	adds	r6, #1
 800dc72:	4630      	mov	r0, r6
 800dc74:	f7f2 fc5e 	bl	8000534 <__aeabi_i2d>
 800dc78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc7c:	f7f2 fcc4 	bl	8000608 <__aeabi_dmul>
 800dc80:	4b76      	ldr	r3, [pc, #472]	@ (800de5c <_dtoa_r+0x5cc>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	f7f2 fb0a 	bl	800029c <__adddf3>
 800dc88:	4605      	mov	r5, r0
 800dc8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dc8e:	2c00      	cmp	r4, #0
 800dc90:	f040 808d 	bne.w	800ddae <_dtoa_r+0x51e>
 800dc94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc98:	4b71      	ldr	r3, [pc, #452]	@ (800de60 <_dtoa_r+0x5d0>)
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f7f2 fafc 	bl	8000298 <__aeabi_dsub>
 800dca0:	4602      	mov	r2, r0
 800dca2:	460b      	mov	r3, r1
 800dca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4633      	mov	r3, r6
 800dcac:	f7f2 ff3c 	bl	8000b28 <__aeabi_dcmpgt>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	f040 828b 	bne.w	800e1cc <_dtoa_r+0x93c>
 800dcb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcba:	462a      	mov	r2, r5
 800dcbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dcc0:	f7f2 ff14 	bl	8000aec <__aeabi_dcmplt>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	f040 8128 	bne.w	800df1a <_dtoa_r+0x68a>
 800dcca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800dcce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800dcd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f2c0 815a 	blt.w	800df8e <_dtoa_r+0x6fe>
 800dcda:	2f0e      	cmp	r7, #14
 800dcdc:	f300 8157 	bgt.w	800df8e <_dtoa_r+0x6fe>
 800dce0:	4b5a      	ldr	r3, [pc, #360]	@ (800de4c <_dtoa_r+0x5bc>)
 800dce2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dce6:	ed93 7b00 	vldr	d7, [r3]
 800dcea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	ed8d 7b00 	vstr	d7, [sp]
 800dcf2:	da03      	bge.n	800dcfc <_dtoa_r+0x46c>
 800dcf4:	9b07      	ldr	r3, [sp, #28]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	f340 8101 	ble.w	800defe <_dtoa_r+0x66e>
 800dcfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dd00:	4656      	mov	r6, sl
 800dd02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd06:	4620      	mov	r0, r4
 800dd08:	4629      	mov	r1, r5
 800dd0a:	f7f2 fda7 	bl	800085c <__aeabi_ddiv>
 800dd0e:	f7f2 ff2b 	bl	8000b68 <__aeabi_d2iz>
 800dd12:	4680      	mov	r8, r0
 800dd14:	f7f2 fc0e 	bl	8000534 <__aeabi_i2d>
 800dd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd1c:	f7f2 fc74 	bl	8000608 <__aeabi_dmul>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4620      	mov	r0, r4
 800dd26:	4629      	mov	r1, r5
 800dd28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dd2c:	f7f2 fab4 	bl	8000298 <__aeabi_dsub>
 800dd30:	f806 4b01 	strb.w	r4, [r6], #1
 800dd34:	9d07      	ldr	r5, [sp, #28]
 800dd36:	eba6 040a 	sub.w	r4, r6, sl
 800dd3a:	42a5      	cmp	r5, r4
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	f040 8117 	bne.w	800df72 <_dtoa_r+0x6e2>
 800dd44:	f7f2 faaa 	bl	800029c <__adddf3>
 800dd48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	460d      	mov	r5, r1
 800dd50:	f7f2 feea 	bl	8000b28 <__aeabi_dcmpgt>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f040 80f9 	bne.w	800df4c <_dtoa_r+0x6bc>
 800dd5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd5e:	4620      	mov	r0, r4
 800dd60:	4629      	mov	r1, r5
 800dd62:	f7f2 feb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd66:	b118      	cbz	r0, 800dd70 <_dtoa_r+0x4e0>
 800dd68:	f018 0f01 	tst.w	r8, #1
 800dd6c:	f040 80ee 	bne.w	800df4c <_dtoa_r+0x6bc>
 800dd70:	4649      	mov	r1, r9
 800dd72:	4658      	mov	r0, fp
 800dd74:	f001 fa74 	bl	800f260 <_Bfree>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	7033      	strb	r3, [r6, #0]
 800dd7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dd7e:	3701      	adds	r7, #1
 800dd80:	601f      	str	r7, [r3, #0]
 800dd82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f000 831d 	beq.w	800e3c4 <_dtoa_r+0xb34>
 800dd8a:	601e      	str	r6, [r3, #0]
 800dd8c:	e31a      	b.n	800e3c4 <_dtoa_r+0xb34>
 800dd8e:	07e2      	lsls	r2, r4, #31
 800dd90:	d505      	bpl.n	800dd9e <_dtoa_r+0x50e>
 800dd92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd96:	f7f2 fc37 	bl	8000608 <__aeabi_dmul>
 800dd9a:	3601      	adds	r6, #1
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	1064      	asrs	r4, r4, #1
 800dda0:	3508      	adds	r5, #8
 800dda2:	e73f      	b.n	800dc24 <_dtoa_r+0x394>
 800dda4:	2602      	movs	r6, #2
 800dda6:	e742      	b.n	800dc2e <_dtoa_r+0x39e>
 800dda8:	9c07      	ldr	r4, [sp, #28]
 800ddaa:	9704      	str	r7, [sp, #16]
 800ddac:	e761      	b.n	800dc72 <_dtoa_r+0x3e2>
 800ddae:	4b27      	ldr	r3, [pc, #156]	@ (800de4c <_dtoa_r+0x5bc>)
 800ddb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ddb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddba:	4454      	add	r4, sl
 800ddbc:	2900      	cmp	r1, #0
 800ddbe:	d053      	beq.n	800de68 <_dtoa_r+0x5d8>
 800ddc0:	4928      	ldr	r1, [pc, #160]	@ (800de64 <_dtoa_r+0x5d4>)
 800ddc2:	2000      	movs	r0, #0
 800ddc4:	f7f2 fd4a 	bl	800085c <__aeabi_ddiv>
 800ddc8:	4633      	mov	r3, r6
 800ddca:	462a      	mov	r2, r5
 800ddcc:	f7f2 fa64 	bl	8000298 <__aeabi_dsub>
 800ddd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ddd4:	4656      	mov	r6, sl
 800ddd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddda:	f7f2 fec5 	bl	8000b68 <__aeabi_d2iz>
 800ddde:	4605      	mov	r5, r0
 800dde0:	f7f2 fba8 	bl	8000534 <__aeabi_i2d>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddec:	f7f2 fa54 	bl	8000298 <__aeabi_dsub>
 800ddf0:	3530      	adds	r5, #48	@ 0x30
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ddfa:	f806 5b01 	strb.w	r5, [r6], #1
 800ddfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de02:	f7f2 fe73 	bl	8000aec <__aeabi_dcmplt>
 800de06:	2800      	cmp	r0, #0
 800de08:	d171      	bne.n	800deee <_dtoa_r+0x65e>
 800de0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de0e:	4911      	ldr	r1, [pc, #68]	@ (800de54 <_dtoa_r+0x5c4>)
 800de10:	2000      	movs	r0, #0
 800de12:	f7f2 fa41 	bl	8000298 <__aeabi_dsub>
 800de16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800de1a:	f7f2 fe67 	bl	8000aec <__aeabi_dcmplt>
 800de1e:	2800      	cmp	r0, #0
 800de20:	f040 8095 	bne.w	800df4e <_dtoa_r+0x6be>
 800de24:	42a6      	cmp	r6, r4
 800de26:	f43f af50 	beq.w	800dcca <_dtoa_r+0x43a>
 800de2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800de2e:	4b0a      	ldr	r3, [pc, #40]	@ (800de58 <_dtoa_r+0x5c8>)
 800de30:	2200      	movs	r2, #0
 800de32:	f7f2 fbe9 	bl	8000608 <__aeabi_dmul>
 800de36:	4b08      	ldr	r3, [pc, #32]	@ (800de58 <_dtoa_r+0x5c8>)
 800de38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de3c:	2200      	movs	r2, #0
 800de3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de42:	f7f2 fbe1 	bl	8000608 <__aeabi_dmul>
 800de46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de4a:	e7c4      	b.n	800ddd6 <_dtoa_r+0x546>
 800de4c:	080108e8 	.word	0x080108e8
 800de50:	080108c0 	.word	0x080108c0
 800de54:	3ff00000 	.word	0x3ff00000
 800de58:	40240000 	.word	0x40240000
 800de5c:	401c0000 	.word	0x401c0000
 800de60:	40140000 	.word	0x40140000
 800de64:	3fe00000 	.word	0x3fe00000
 800de68:	4631      	mov	r1, r6
 800de6a:	4628      	mov	r0, r5
 800de6c:	f7f2 fbcc 	bl	8000608 <__aeabi_dmul>
 800de70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800de74:	9415      	str	r4, [sp, #84]	@ 0x54
 800de76:	4656      	mov	r6, sl
 800de78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de7c:	f7f2 fe74 	bl	8000b68 <__aeabi_d2iz>
 800de80:	4605      	mov	r5, r0
 800de82:	f7f2 fb57 	bl	8000534 <__aeabi_i2d>
 800de86:	4602      	mov	r2, r0
 800de88:	460b      	mov	r3, r1
 800de8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de8e:	f7f2 fa03 	bl	8000298 <__aeabi_dsub>
 800de92:	3530      	adds	r5, #48	@ 0x30
 800de94:	f806 5b01 	strb.w	r5, [r6], #1
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	42a6      	cmp	r6, r4
 800de9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dea2:	f04f 0200 	mov.w	r2, #0
 800dea6:	d124      	bne.n	800def2 <_dtoa_r+0x662>
 800dea8:	4bac      	ldr	r3, [pc, #688]	@ (800e15c <_dtoa_r+0x8cc>)
 800deaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800deae:	f7f2 f9f5 	bl	800029c <__adddf3>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800deba:	f7f2 fe35 	bl	8000b28 <__aeabi_dcmpgt>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d145      	bne.n	800df4e <_dtoa_r+0x6be>
 800dec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dec6:	49a5      	ldr	r1, [pc, #660]	@ (800e15c <_dtoa_r+0x8cc>)
 800dec8:	2000      	movs	r0, #0
 800deca:	f7f2 f9e5 	bl	8000298 <__aeabi_dsub>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ded6:	f7f2 fe09 	bl	8000aec <__aeabi_dcmplt>
 800deda:	2800      	cmp	r0, #0
 800dedc:	f43f aef5 	beq.w	800dcca <_dtoa_r+0x43a>
 800dee0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dee2:	1e73      	subs	r3, r6, #1
 800dee4:	9315      	str	r3, [sp, #84]	@ 0x54
 800dee6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800deea:	2b30      	cmp	r3, #48	@ 0x30
 800deec:	d0f8      	beq.n	800dee0 <_dtoa_r+0x650>
 800deee:	9f04      	ldr	r7, [sp, #16]
 800def0:	e73e      	b.n	800dd70 <_dtoa_r+0x4e0>
 800def2:	4b9b      	ldr	r3, [pc, #620]	@ (800e160 <_dtoa_r+0x8d0>)
 800def4:	f7f2 fb88 	bl	8000608 <__aeabi_dmul>
 800def8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800defc:	e7bc      	b.n	800de78 <_dtoa_r+0x5e8>
 800defe:	d10c      	bne.n	800df1a <_dtoa_r+0x68a>
 800df00:	4b98      	ldr	r3, [pc, #608]	@ (800e164 <_dtoa_r+0x8d4>)
 800df02:	2200      	movs	r2, #0
 800df04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df08:	f7f2 fb7e 	bl	8000608 <__aeabi_dmul>
 800df0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df10:	f7f2 fe00 	bl	8000b14 <__aeabi_dcmpge>
 800df14:	2800      	cmp	r0, #0
 800df16:	f000 8157 	beq.w	800e1c8 <_dtoa_r+0x938>
 800df1a:	2400      	movs	r4, #0
 800df1c:	4625      	mov	r5, r4
 800df1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df20:	43db      	mvns	r3, r3
 800df22:	9304      	str	r3, [sp, #16]
 800df24:	4656      	mov	r6, sl
 800df26:	2700      	movs	r7, #0
 800df28:	4621      	mov	r1, r4
 800df2a:	4658      	mov	r0, fp
 800df2c:	f001 f998 	bl	800f260 <_Bfree>
 800df30:	2d00      	cmp	r5, #0
 800df32:	d0dc      	beq.n	800deee <_dtoa_r+0x65e>
 800df34:	b12f      	cbz	r7, 800df42 <_dtoa_r+0x6b2>
 800df36:	42af      	cmp	r7, r5
 800df38:	d003      	beq.n	800df42 <_dtoa_r+0x6b2>
 800df3a:	4639      	mov	r1, r7
 800df3c:	4658      	mov	r0, fp
 800df3e:	f001 f98f 	bl	800f260 <_Bfree>
 800df42:	4629      	mov	r1, r5
 800df44:	4658      	mov	r0, fp
 800df46:	f001 f98b 	bl	800f260 <_Bfree>
 800df4a:	e7d0      	b.n	800deee <_dtoa_r+0x65e>
 800df4c:	9704      	str	r7, [sp, #16]
 800df4e:	4633      	mov	r3, r6
 800df50:	461e      	mov	r6, r3
 800df52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df56:	2a39      	cmp	r2, #57	@ 0x39
 800df58:	d107      	bne.n	800df6a <_dtoa_r+0x6da>
 800df5a:	459a      	cmp	sl, r3
 800df5c:	d1f8      	bne.n	800df50 <_dtoa_r+0x6c0>
 800df5e:	9a04      	ldr	r2, [sp, #16]
 800df60:	3201      	adds	r2, #1
 800df62:	9204      	str	r2, [sp, #16]
 800df64:	2230      	movs	r2, #48	@ 0x30
 800df66:	f88a 2000 	strb.w	r2, [sl]
 800df6a:	781a      	ldrb	r2, [r3, #0]
 800df6c:	3201      	adds	r2, #1
 800df6e:	701a      	strb	r2, [r3, #0]
 800df70:	e7bd      	b.n	800deee <_dtoa_r+0x65e>
 800df72:	4b7b      	ldr	r3, [pc, #492]	@ (800e160 <_dtoa_r+0x8d0>)
 800df74:	2200      	movs	r2, #0
 800df76:	f7f2 fb47 	bl	8000608 <__aeabi_dmul>
 800df7a:	2200      	movs	r2, #0
 800df7c:	2300      	movs	r3, #0
 800df7e:	4604      	mov	r4, r0
 800df80:	460d      	mov	r5, r1
 800df82:	f7f2 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 800df86:	2800      	cmp	r0, #0
 800df88:	f43f aebb 	beq.w	800dd02 <_dtoa_r+0x472>
 800df8c:	e6f0      	b.n	800dd70 <_dtoa_r+0x4e0>
 800df8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df90:	2a00      	cmp	r2, #0
 800df92:	f000 80db 	beq.w	800e14c <_dtoa_r+0x8bc>
 800df96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df98:	2a01      	cmp	r2, #1
 800df9a:	f300 80bf 	bgt.w	800e11c <_dtoa_r+0x88c>
 800df9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	f000 80b7 	beq.w	800e114 <_dtoa_r+0x884>
 800dfa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dfaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dfac:	4646      	mov	r6, r8
 800dfae:	9a08      	ldr	r2, [sp, #32]
 800dfb0:	2101      	movs	r1, #1
 800dfb2:	441a      	add	r2, r3
 800dfb4:	4658      	mov	r0, fp
 800dfb6:	4498      	add	r8, r3
 800dfb8:	9208      	str	r2, [sp, #32]
 800dfba:	f001 fa4f 	bl	800f45c <__i2b>
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	b15e      	cbz	r6, 800dfda <_dtoa_r+0x74a>
 800dfc2:	9b08      	ldr	r3, [sp, #32]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd08      	ble.n	800dfda <_dtoa_r+0x74a>
 800dfc8:	42b3      	cmp	r3, r6
 800dfca:	9a08      	ldr	r2, [sp, #32]
 800dfcc:	bfa8      	it	ge
 800dfce:	4633      	movge	r3, r6
 800dfd0:	eba8 0803 	sub.w	r8, r8, r3
 800dfd4:	1af6      	subs	r6, r6, r3
 800dfd6:	1ad3      	subs	r3, r2, r3
 800dfd8:	9308      	str	r3, [sp, #32]
 800dfda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfdc:	b1f3      	cbz	r3, 800e01c <_dtoa_r+0x78c>
 800dfde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 80b7 	beq.w	800e154 <_dtoa_r+0x8c4>
 800dfe6:	b18c      	cbz	r4, 800e00c <_dtoa_r+0x77c>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4622      	mov	r2, r4
 800dfec:	4658      	mov	r0, fp
 800dfee:	f001 faf5 	bl	800f5dc <__pow5mult>
 800dff2:	464a      	mov	r2, r9
 800dff4:	4601      	mov	r1, r0
 800dff6:	4605      	mov	r5, r0
 800dff8:	4658      	mov	r0, fp
 800dffa:	f001 fa45 	bl	800f488 <__multiply>
 800dffe:	4649      	mov	r1, r9
 800e000:	9004      	str	r0, [sp, #16]
 800e002:	4658      	mov	r0, fp
 800e004:	f001 f92c 	bl	800f260 <_Bfree>
 800e008:	9b04      	ldr	r3, [sp, #16]
 800e00a:	4699      	mov	r9, r3
 800e00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e00e:	1b1a      	subs	r2, r3, r4
 800e010:	d004      	beq.n	800e01c <_dtoa_r+0x78c>
 800e012:	4649      	mov	r1, r9
 800e014:	4658      	mov	r0, fp
 800e016:	f001 fae1 	bl	800f5dc <__pow5mult>
 800e01a:	4681      	mov	r9, r0
 800e01c:	2101      	movs	r1, #1
 800e01e:	4658      	mov	r0, fp
 800e020:	f001 fa1c 	bl	800f45c <__i2b>
 800e024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e026:	4604      	mov	r4, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	f000 81cf 	beq.w	800e3cc <_dtoa_r+0xb3c>
 800e02e:	461a      	mov	r2, r3
 800e030:	4601      	mov	r1, r0
 800e032:	4658      	mov	r0, fp
 800e034:	f001 fad2 	bl	800f5dc <__pow5mult>
 800e038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	4604      	mov	r4, r0
 800e03e:	f300 8095 	bgt.w	800e16c <_dtoa_r+0x8dc>
 800e042:	9b02      	ldr	r3, [sp, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	f040 8087 	bne.w	800e158 <_dtoa_r+0x8c8>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e050:	2b00      	cmp	r3, #0
 800e052:	f040 8089 	bne.w	800e168 <_dtoa_r+0x8d8>
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e05c:	0d1b      	lsrs	r3, r3, #20
 800e05e:	051b      	lsls	r3, r3, #20
 800e060:	b12b      	cbz	r3, 800e06e <_dtoa_r+0x7de>
 800e062:	9b08      	ldr	r3, [sp, #32]
 800e064:	3301      	adds	r3, #1
 800e066:	9308      	str	r3, [sp, #32]
 800e068:	f108 0801 	add.w	r8, r8, #1
 800e06c:	2301      	movs	r3, #1
 800e06e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e072:	2b00      	cmp	r3, #0
 800e074:	f000 81b0 	beq.w	800e3d8 <_dtoa_r+0xb48>
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e07e:	6918      	ldr	r0, [r3, #16]
 800e080:	f001 f9a0 	bl	800f3c4 <__hi0bits>
 800e084:	f1c0 0020 	rsb	r0, r0, #32
 800e088:	9b08      	ldr	r3, [sp, #32]
 800e08a:	4418      	add	r0, r3
 800e08c:	f010 001f 	ands.w	r0, r0, #31
 800e090:	d077      	beq.n	800e182 <_dtoa_r+0x8f2>
 800e092:	f1c0 0320 	rsb	r3, r0, #32
 800e096:	2b04      	cmp	r3, #4
 800e098:	dd6b      	ble.n	800e172 <_dtoa_r+0x8e2>
 800e09a:	9b08      	ldr	r3, [sp, #32]
 800e09c:	f1c0 001c 	rsb	r0, r0, #28
 800e0a0:	4403      	add	r3, r0
 800e0a2:	4480      	add	r8, r0
 800e0a4:	4406      	add	r6, r0
 800e0a6:	9308      	str	r3, [sp, #32]
 800e0a8:	f1b8 0f00 	cmp.w	r8, #0
 800e0ac:	dd05      	ble.n	800e0ba <_dtoa_r+0x82a>
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	4658      	mov	r0, fp
 800e0b4:	f001 faec 	bl	800f690 <__lshift>
 800e0b8:	4681      	mov	r9, r0
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dd05      	ble.n	800e0cc <_dtoa_r+0x83c>
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	4658      	mov	r0, fp
 800e0c6:	f001 fae3 	bl	800f690 <__lshift>
 800e0ca:	4604      	mov	r4, r0
 800e0cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d059      	beq.n	800e186 <_dtoa_r+0x8f6>
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	4648      	mov	r0, r9
 800e0d6:	f001 fb47 	bl	800f768 <__mcmp>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	da53      	bge.n	800e186 <_dtoa_r+0x8f6>
 800e0de:	1e7b      	subs	r3, r7, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	4649      	mov	r1, r9
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	220a      	movs	r2, #10
 800e0e8:	4658      	mov	r0, fp
 800e0ea:	f001 f8db 	bl	800f2a4 <__multadd>
 800e0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0f0:	4681      	mov	r9, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 8172 	beq.w	800e3dc <_dtoa_r+0xb4c>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	220a      	movs	r2, #10
 800e0fe:	4658      	mov	r0, fp
 800e100:	f001 f8d0 	bl	800f2a4 <__multadd>
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	4605      	mov	r5, r0
 800e10a:	dc67      	bgt.n	800e1dc <_dtoa_r+0x94c>
 800e10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e10e:	2b02      	cmp	r3, #2
 800e110:	dc41      	bgt.n	800e196 <_dtoa_r+0x906>
 800e112:	e063      	b.n	800e1dc <_dtoa_r+0x94c>
 800e114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e116:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e11a:	e746      	b.n	800dfaa <_dtoa_r+0x71a>
 800e11c:	9b07      	ldr	r3, [sp, #28]
 800e11e:	1e5c      	subs	r4, r3, #1
 800e120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e122:	42a3      	cmp	r3, r4
 800e124:	bfbf      	itttt	lt
 800e126:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e128:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e12a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e12c:	1ae3      	sublt	r3, r4, r3
 800e12e:	bfb4      	ite	lt
 800e130:	18d2      	addlt	r2, r2, r3
 800e132:	1b1c      	subge	r4, r3, r4
 800e134:	9b07      	ldr	r3, [sp, #28]
 800e136:	bfbc      	itt	lt
 800e138:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e13a:	2400      	movlt	r4, #0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	bfb5      	itete	lt
 800e140:	eba8 0603 	sublt.w	r6, r8, r3
 800e144:	9b07      	ldrge	r3, [sp, #28]
 800e146:	2300      	movlt	r3, #0
 800e148:	4646      	movge	r6, r8
 800e14a:	e730      	b.n	800dfae <_dtoa_r+0x71e>
 800e14c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e14e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e150:	4646      	mov	r6, r8
 800e152:	e735      	b.n	800dfc0 <_dtoa_r+0x730>
 800e154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e156:	e75c      	b.n	800e012 <_dtoa_r+0x782>
 800e158:	2300      	movs	r3, #0
 800e15a:	e788      	b.n	800e06e <_dtoa_r+0x7de>
 800e15c:	3fe00000 	.word	0x3fe00000
 800e160:	40240000 	.word	0x40240000
 800e164:	40140000 	.word	0x40140000
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	e780      	b.n	800e06e <_dtoa_r+0x7de>
 800e16c:	2300      	movs	r3, #0
 800e16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e170:	e782      	b.n	800e078 <_dtoa_r+0x7e8>
 800e172:	d099      	beq.n	800e0a8 <_dtoa_r+0x818>
 800e174:	9a08      	ldr	r2, [sp, #32]
 800e176:	331c      	adds	r3, #28
 800e178:	441a      	add	r2, r3
 800e17a:	4498      	add	r8, r3
 800e17c:	441e      	add	r6, r3
 800e17e:	9208      	str	r2, [sp, #32]
 800e180:	e792      	b.n	800e0a8 <_dtoa_r+0x818>
 800e182:	4603      	mov	r3, r0
 800e184:	e7f6      	b.n	800e174 <_dtoa_r+0x8e4>
 800e186:	9b07      	ldr	r3, [sp, #28]
 800e188:	9704      	str	r7, [sp, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	dc20      	bgt.n	800e1d0 <_dtoa_r+0x940>
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e192:	2b02      	cmp	r3, #2
 800e194:	dd1e      	ble.n	800e1d4 <_dtoa_r+0x944>
 800e196:	9b00      	ldr	r3, [sp, #0]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f47f aec0 	bne.w	800df1e <_dtoa_r+0x68e>
 800e19e:	4621      	mov	r1, r4
 800e1a0:	2205      	movs	r2, #5
 800e1a2:	4658      	mov	r0, fp
 800e1a4:	f001 f87e 	bl	800f2a4 <__multadd>
 800e1a8:	4601      	mov	r1, r0
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	4648      	mov	r0, r9
 800e1ae:	f001 fadb 	bl	800f768 <__mcmp>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	f77f aeb3 	ble.w	800df1e <_dtoa_r+0x68e>
 800e1b8:	4656      	mov	r6, sl
 800e1ba:	2331      	movs	r3, #49	@ 0x31
 800e1bc:	f806 3b01 	strb.w	r3, [r6], #1
 800e1c0:	9b04      	ldr	r3, [sp, #16]
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	e6ae      	b.n	800df26 <_dtoa_r+0x696>
 800e1c8:	9c07      	ldr	r4, [sp, #28]
 800e1ca:	9704      	str	r7, [sp, #16]
 800e1cc:	4625      	mov	r5, r4
 800e1ce:	e7f3      	b.n	800e1b8 <_dtoa_r+0x928>
 800e1d0:	9b07      	ldr	r3, [sp, #28]
 800e1d2:	9300      	str	r3, [sp, #0]
 800e1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	f000 8104 	beq.w	800e3e4 <_dtoa_r+0xb54>
 800e1dc:	2e00      	cmp	r6, #0
 800e1de:	dd05      	ble.n	800e1ec <_dtoa_r+0x95c>
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	4658      	mov	r0, fp
 800e1e6:	f001 fa53 	bl	800f690 <__lshift>
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d05a      	beq.n	800e2a8 <_dtoa_r+0xa18>
 800e1f2:	6869      	ldr	r1, [r5, #4]
 800e1f4:	4658      	mov	r0, fp
 800e1f6:	f000 fff3 	bl	800f1e0 <_Balloc>
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	b928      	cbnz	r0, 800e20a <_dtoa_r+0x97a>
 800e1fe:	4b84      	ldr	r3, [pc, #528]	@ (800e410 <_dtoa_r+0xb80>)
 800e200:	4602      	mov	r2, r0
 800e202:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e206:	f7ff bb5a 	b.w	800d8be <_dtoa_r+0x2e>
 800e20a:	692a      	ldr	r2, [r5, #16]
 800e20c:	3202      	adds	r2, #2
 800e20e:	0092      	lsls	r2, r2, #2
 800e210:	f105 010c 	add.w	r1, r5, #12
 800e214:	300c      	adds	r0, #12
 800e216:	f7ff fa8c 	bl	800d732 <memcpy>
 800e21a:	2201      	movs	r2, #1
 800e21c:	4631      	mov	r1, r6
 800e21e:	4658      	mov	r0, fp
 800e220:	f001 fa36 	bl	800f690 <__lshift>
 800e224:	f10a 0301 	add.w	r3, sl, #1
 800e228:	9307      	str	r3, [sp, #28]
 800e22a:	9b00      	ldr	r3, [sp, #0]
 800e22c:	4453      	add	r3, sl
 800e22e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e230:	9b02      	ldr	r3, [sp, #8]
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	462f      	mov	r7, r5
 800e238:	930a      	str	r3, [sp, #40]	@ 0x28
 800e23a:	4605      	mov	r5, r0
 800e23c:	9b07      	ldr	r3, [sp, #28]
 800e23e:	4621      	mov	r1, r4
 800e240:	3b01      	subs	r3, #1
 800e242:	4648      	mov	r0, r9
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	f7ff fa99 	bl	800d77c <quorem>
 800e24a:	4639      	mov	r1, r7
 800e24c:	9002      	str	r0, [sp, #8]
 800e24e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e252:	4648      	mov	r0, r9
 800e254:	f001 fa88 	bl	800f768 <__mcmp>
 800e258:	462a      	mov	r2, r5
 800e25a:	9008      	str	r0, [sp, #32]
 800e25c:	4621      	mov	r1, r4
 800e25e:	4658      	mov	r0, fp
 800e260:	f001 fa9e 	bl	800f7a0 <__mdiff>
 800e264:	68c2      	ldr	r2, [r0, #12]
 800e266:	4606      	mov	r6, r0
 800e268:	bb02      	cbnz	r2, 800e2ac <_dtoa_r+0xa1c>
 800e26a:	4601      	mov	r1, r0
 800e26c:	4648      	mov	r0, r9
 800e26e:	f001 fa7b 	bl	800f768 <__mcmp>
 800e272:	4602      	mov	r2, r0
 800e274:	4631      	mov	r1, r6
 800e276:	4658      	mov	r0, fp
 800e278:	920e      	str	r2, [sp, #56]	@ 0x38
 800e27a:	f000 fff1 	bl	800f260 <_Bfree>
 800e27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e282:	9e07      	ldr	r6, [sp, #28]
 800e284:	ea43 0102 	orr.w	r1, r3, r2
 800e288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e28a:	4319      	orrs	r1, r3
 800e28c:	d110      	bne.n	800e2b0 <_dtoa_r+0xa20>
 800e28e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e292:	d029      	beq.n	800e2e8 <_dtoa_r+0xa58>
 800e294:	9b08      	ldr	r3, [sp, #32]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dd02      	ble.n	800e2a0 <_dtoa_r+0xa10>
 800e29a:	9b02      	ldr	r3, [sp, #8]
 800e29c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e2a0:	9b00      	ldr	r3, [sp, #0]
 800e2a2:	f883 8000 	strb.w	r8, [r3]
 800e2a6:	e63f      	b.n	800df28 <_dtoa_r+0x698>
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	e7bb      	b.n	800e224 <_dtoa_r+0x994>
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	e7e1      	b.n	800e274 <_dtoa_r+0x9e4>
 800e2b0:	9b08      	ldr	r3, [sp, #32]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	db04      	blt.n	800e2c0 <_dtoa_r+0xa30>
 800e2b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2b8:	430b      	orrs	r3, r1
 800e2ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e2bc:	430b      	orrs	r3, r1
 800e2be:	d120      	bne.n	800e302 <_dtoa_r+0xa72>
 800e2c0:	2a00      	cmp	r2, #0
 800e2c2:	dded      	ble.n	800e2a0 <_dtoa_r+0xa10>
 800e2c4:	4649      	mov	r1, r9
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	4658      	mov	r0, fp
 800e2ca:	f001 f9e1 	bl	800f690 <__lshift>
 800e2ce:	4621      	mov	r1, r4
 800e2d0:	4681      	mov	r9, r0
 800e2d2:	f001 fa49 	bl	800f768 <__mcmp>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	dc03      	bgt.n	800e2e2 <_dtoa_r+0xa52>
 800e2da:	d1e1      	bne.n	800e2a0 <_dtoa_r+0xa10>
 800e2dc:	f018 0f01 	tst.w	r8, #1
 800e2e0:	d0de      	beq.n	800e2a0 <_dtoa_r+0xa10>
 800e2e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e2e6:	d1d8      	bne.n	800e29a <_dtoa_r+0xa0a>
 800e2e8:	9a00      	ldr	r2, [sp, #0]
 800e2ea:	2339      	movs	r3, #57	@ 0x39
 800e2ec:	7013      	strb	r3, [r2, #0]
 800e2ee:	4633      	mov	r3, r6
 800e2f0:	461e      	mov	r6, r3
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e2f8:	2a39      	cmp	r2, #57	@ 0x39
 800e2fa:	d052      	beq.n	800e3a2 <_dtoa_r+0xb12>
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	701a      	strb	r2, [r3, #0]
 800e300:	e612      	b.n	800df28 <_dtoa_r+0x698>
 800e302:	2a00      	cmp	r2, #0
 800e304:	dd07      	ble.n	800e316 <_dtoa_r+0xa86>
 800e306:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e30a:	d0ed      	beq.n	800e2e8 <_dtoa_r+0xa58>
 800e30c:	9a00      	ldr	r2, [sp, #0]
 800e30e:	f108 0301 	add.w	r3, r8, #1
 800e312:	7013      	strb	r3, [r2, #0]
 800e314:	e608      	b.n	800df28 <_dtoa_r+0x698>
 800e316:	9b07      	ldr	r3, [sp, #28]
 800e318:	9a07      	ldr	r2, [sp, #28]
 800e31a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e320:	4293      	cmp	r3, r2
 800e322:	d028      	beq.n	800e376 <_dtoa_r+0xae6>
 800e324:	4649      	mov	r1, r9
 800e326:	2300      	movs	r3, #0
 800e328:	220a      	movs	r2, #10
 800e32a:	4658      	mov	r0, fp
 800e32c:	f000 ffba 	bl	800f2a4 <__multadd>
 800e330:	42af      	cmp	r7, r5
 800e332:	4681      	mov	r9, r0
 800e334:	f04f 0300 	mov.w	r3, #0
 800e338:	f04f 020a 	mov.w	r2, #10
 800e33c:	4639      	mov	r1, r7
 800e33e:	4658      	mov	r0, fp
 800e340:	d107      	bne.n	800e352 <_dtoa_r+0xac2>
 800e342:	f000 ffaf 	bl	800f2a4 <__multadd>
 800e346:	4607      	mov	r7, r0
 800e348:	4605      	mov	r5, r0
 800e34a:	9b07      	ldr	r3, [sp, #28]
 800e34c:	3301      	adds	r3, #1
 800e34e:	9307      	str	r3, [sp, #28]
 800e350:	e774      	b.n	800e23c <_dtoa_r+0x9ac>
 800e352:	f000 ffa7 	bl	800f2a4 <__multadd>
 800e356:	4629      	mov	r1, r5
 800e358:	4607      	mov	r7, r0
 800e35a:	2300      	movs	r3, #0
 800e35c:	220a      	movs	r2, #10
 800e35e:	4658      	mov	r0, fp
 800e360:	f000 ffa0 	bl	800f2a4 <__multadd>
 800e364:	4605      	mov	r5, r0
 800e366:	e7f0      	b.n	800e34a <_dtoa_r+0xaba>
 800e368:	9b00      	ldr	r3, [sp, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	bfcc      	ite	gt
 800e36e:	461e      	movgt	r6, r3
 800e370:	2601      	movle	r6, #1
 800e372:	4456      	add	r6, sl
 800e374:	2700      	movs	r7, #0
 800e376:	4649      	mov	r1, r9
 800e378:	2201      	movs	r2, #1
 800e37a:	4658      	mov	r0, fp
 800e37c:	f001 f988 	bl	800f690 <__lshift>
 800e380:	4621      	mov	r1, r4
 800e382:	4681      	mov	r9, r0
 800e384:	f001 f9f0 	bl	800f768 <__mcmp>
 800e388:	2800      	cmp	r0, #0
 800e38a:	dcb0      	bgt.n	800e2ee <_dtoa_r+0xa5e>
 800e38c:	d102      	bne.n	800e394 <_dtoa_r+0xb04>
 800e38e:	f018 0f01 	tst.w	r8, #1
 800e392:	d1ac      	bne.n	800e2ee <_dtoa_r+0xa5e>
 800e394:	4633      	mov	r3, r6
 800e396:	461e      	mov	r6, r3
 800e398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e39c:	2a30      	cmp	r2, #48	@ 0x30
 800e39e:	d0fa      	beq.n	800e396 <_dtoa_r+0xb06>
 800e3a0:	e5c2      	b.n	800df28 <_dtoa_r+0x698>
 800e3a2:	459a      	cmp	sl, r3
 800e3a4:	d1a4      	bne.n	800e2f0 <_dtoa_r+0xa60>
 800e3a6:	9b04      	ldr	r3, [sp, #16]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	9304      	str	r3, [sp, #16]
 800e3ac:	2331      	movs	r3, #49	@ 0x31
 800e3ae:	f88a 3000 	strb.w	r3, [sl]
 800e3b2:	e5b9      	b.n	800df28 <_dtoa_r+0x698>
 800e3b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e414 <_dtoa_r+0xb84>
 800e3ba:	b11b      	cbz	r3, 800e3c4 <_dtoa_r+0xb34>
 800e3bc:	f10a 0308 	add.w	r3, sl, #8
 800e3c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e3c2:	6013      	str	r3, [r2, #0]
 800e3c4:	4650      	mov	r0, sl
 800e3c6:	b019      	add	sp, #100	@ 0x64
 800e3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	f77f ae37 	ble.w	800e042 <_dtoa_r+0x7b2>
 800e3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3d8:	2001      	movs	r0, #1
 800e3da:	e655      	b.n	800e088 <_dtoa_r+0x7f8>
 800e3dc:	9b00      	ldr	r3, [sp, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f77f aed6 	ble.w	800e190 <_dtoa_r+0x900>
 800e3e4:	4656      	mov	r6, sl
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	4648      	mov	r0, r9
 800e3ea:	f7ff f9c7 	bl	800d77c <quorem>
 800e3ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e3f2:	f806 8b01 	strb.w	r8, [r6], #1
 800e3f6:	9b00      	ldr	r3, [sp, #0]
 800e3f8:	eba6 020a 	sub.w	r2, r6, sl
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	ddb3      	ble.n	800e368 <_dtoa_r+0xad8>
 800e400:	4649      	mov	r1, r9
 800e402:	2300      	movs	r3, #0
 800e404:	220a      	movs	r2, #10
 800e406:	4658      	mov	r0, fp
 800e408:	f000 ff4c 	bl	800f2a4 <__multadd>
 800e40c:	4681      	mov	r9, r0
 800e40e:	e7ea      	b.n	800e3e6 <_dtoa_r+0xb56>
 800e410:	080107d5 	.word	0x080107d5
 800e414:	08010759 	.word	0x08010759

0800e418 <_free_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4605      	mov	r5, r0
 800e41c:	2900      	cmp	r1, #0
 800e41e:	d041      	beq.n	800e4a4 <_free_r+0x8c>
 800e420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e424:	1f0c      	subs	r4, r1, #4
 800e426:	2b00      	cmp	r3, #0
 800e428:	bfb8      	it	lt
 800e42a:	18e4      	addlt	r4, r4, r3
 800e42c:	f000 fecc 	bl	800f1c8 <__malloc_lock>
 800e430:	4a1d      	ldr	r2, [pc, #116]	@ (800e4a8 <_free_r+0x90>)
 800e432:	6813      	ldr	r3, [r2, #0]
 800e434:	b933      	cbnz	r3, 800e444 <_free_r+0x2c>
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	6014      	str	r4, [r2, #0]
 800e43a:	4628      	mov	r0, r5
 800e43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e440:	f000 bec8 	b.w	800f1d4 <__malloc_unlock>
 800e444:	42a3      	cmp	r3, r4
 800e446:	d908      	bls.n	800e45a <_free_r+0x42>
 800e448:	6820      	ldr	r0, [r4, #0]
 800e44a:	1821      	adds	r1, r4, r0
 800e44c:	428b      	cmp	r3, r1
 800e44e:	bf01      	itttt	eq
 800e450:	6819      	ldreq	r1, [r3, #0]
 800e452:	685b      	ldreq	r3, [r3, #4]
 800e454:	1809      	addeq	r1, r1, r0
 800e456:	6021      	streq	r1, [r4, #0]
 800e458:	e7ed      	b.n	800e436 <_free_r+0x1e>
 800e45a:	461a      	mov	r2, r3
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	b10b      	cbz	r3, 800e464 <_free_r+0x4c>
 800e460:	42a3      	cmp	r3, r4
 800e462:	d9fa      	bls.n	800e45a <_free_r+0x42>
 800e464:	6811      	ldr	r1, [r2, #0]
 800e466:	1850      	adds	r0, r2, r1
 800e468:	42a0      	cmp	r0, r4
 800e46a:	d10b      	bne.n	800e484 <_free_r+0x6c>
 800e46c:	6820      	ldr	r0, [r4, #0]
 800e46e:	4401      	add	r1, r0
 800e470:	1850      	adds	r0, r2, r1
 800e472:	4283      	cmp	r3, r0
 800e474:	6011      	str	r1, [r2, #0]
 800e476:	d1e0      	bne.n	800e43a <_free_r+0x22>
 800e478:	6818      	ldr	r0, [r3, #0]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	6053      	str	r3, [r2, #4]
 800e47e:	4408      	add	r0, r1
 800e480:	6010      	str	r0, [r2, #0]
 800e482:	e7da      	b.n	800e43a <_free_r+0x22>
 800e484:	d902      	bls.n	800e48c <_free_r+0x74>
 800e486:	230c      	movs	r3, #12
 800e488:	602b      	str	r3, [r5, #0]
 800e48a:	e7d6      	b.n	800e43a <_free_r+0x22>
 800e48c:	6820      	ldr	r0, [r4, #0]
 800e48e:	1821      	adds	r1, r4, r0
 800e490:	428b      	cmp	r3, r1
 800e492:	bf04      	itt	eq
 800e494:	6819      	ldreq	r1, [r3, #0]
 800e496:	685b      	ldreq	r3, [r3, #4]
 800e498:	6063      	str	r3, [r4, #4]
 800e49a:	bf04      	itt	eq
 800e49c:	1809      	addeq	r1, r1, r0
 800e49e:	6021      	streq	r1, [r4, #0]
 800e4a0:	6054      	str	r4, [r2, #4]
 800e4a2:	e7ca      	b.n	800e43a <_free_r+0x22>
 800e4a4:	bd38      	pop	{r3, r4, r5, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20001310 	.word	0x20001310

0800e4ac <rshift>:
 800e4ac:	6903      	ldr	r3, [r0, #16]
 800e4ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e4b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e4ba:	f100 0414 	add.w	r4, r0, #20
 800e4be:	dd45      	ble.n	800e54c <rshift+0xa0>
 800e4c0:	f011 011f 	ands.w	r1, r1, #31
 800e4c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e4c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e4cc:	d10c      	bne.n	800e4e8 <rshift+0x3c>
 800e4ce:	f100 0710 	add.w	r7, r0, #16
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	42b1      	cmp	r1, r6
 800e4d6:	d334      	bcc.n	800e542 <rshift+0x96>
 800e4d8:	1a9b      	subs	r3, r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	1eea      	subs	r2, r5, #3
 800e4de:	4296      	cmp	r6, r2
 800e4e0:	bf38      	it	cc
 800e4e2:	2300      	movcc	r3, #0
 800e4e4:	4423      	add	r3, r4
 800e4e6:	e015      	b.n	800e514 <rshift+0x68>
 800e4e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e4ec:	f1c1 0820 	rsb	r8, r1, #32
 800e4f0:	40cf      	lsrs	r7, r1
 800e4f2:	f105 0e04 	add.w	lr, r5, #4
 800e4f6:	46a1      	mov	r9, r4
 800e4f8:	4576      	cmp	r6, lr
 800e4fa:	46f4      	mov	ip, lr
 800e4fc:	d815      	bhi.n	800e52a <rshift+0x7e>
 800e4fe:	1a9a      	subs	r2, r3, r2
 800e500:	0092      	lsls	r2, r2, #2
 800e502:	3a04      	subs	r2, #4
 800e504:	3501      	adds	r5, #1
 800e506:	42ae      	cmp	r6, r5
 800e508:	bf38      	it	cc
 800e50a:	2200      	movcc	r2, #0
 800e50c:	18a3      	adds	r3, r4, r2
 800e50e:	50a7      	str	r7, [r4, r2]
 800e510:	b107      	cbz	r7, 800e514 <rshift+0x68>
 800e512:	3304      	adds	r3, #4
 800e514:	1b1a      	subs	r2, r3, r4
 800e516:	42a3      	cmp	r3, r4
 800e518:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e51c:	bf08      	it	eq
 800e51e:	2300      	moveq	r3, #0
 800e520:	6102      	str	r2, [r0, #16]
 800e522:	bf08      	it	eq
 800e524:	6143      	streq	r3, [r0, #20]
 800e526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e52a:	f8dc c000 	ldr.w	ip, [ip]
 800e52e:	fa0c fc08 	lsl.w	ip, ip, r8
 800e532:	ea4c 0707 	orr.w	r7, ip, r7
 800e536:	f849 7b04 	str.w	r7, [r9], #4
 800e53a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e53e:	40cf      	lsrs	r7, r1
 800e540:	e7da      	b.n	800e4f8 <rshift+0x4c>
 800e542:	f851 cb04 	ldr.w	ip, [r1], #4
 800e546:	f847 cf04 	str.w	ip, [r7, #4]!
 800e54a:	e7c3      	b.n	800e4d4 <rshift+0x28>
 800e54c:	4623      	mov	r3, r4
 800e54e:	e7e1      	b.n	800e514 <rshift+0x68>

0800e550 <__hexdig_fun>:
 800e550:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e554:	2b09      	cmp	r3, #9
 800e556:	d802      	bhi.n	800e55e <__hexdig_fun+0xe>
 800e558:	3820      	subs	r0, #32
 800e55a:	b2c0      	uxtb	r0, r0
 800e55c:	4770      	bx	lr
 800e55e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e562:	2b05      	cmp	r3, #5
 800e564:	d801      	bhi.n	800e56a <__hexdig_fun+0x1a>
 800e566:	3847      	subs	r0, #71	@ 0x47
 800e568:	e7f7      	b.n	800e55a <__hexdig_fun+0xa>
 800e56a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e56e:	2b05      	cmp	r3, #5
 800e570:	d801      	bhi.n	800e576 <__hexdig_fun+0x26>
 800e572:	3827      	subs	r0, #39	@ 0x27
 800e574:	e7f1      	b.n	800e55a <__hexdig_fun+0xa>
 800e576:	2000      	movs	r0, #0
 800e578:	4770      	bx	lr
	...

0800e57c <__gethex>:
 800e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	b085      	sub	sp, #20
 800e582:	468a      	mov	sl, r1
 800e584:	9302      	str	r3, [sp, #8]
 800e586:	680b      	ldr	r3, [r1, #0]
 800e588:	9001      	str	r0, [sp, #4]
 800e58a:	4690      	mov	r8, r2
 800e58c:	1c9c      	adds	r4, r3, #2
 800e58e:	46a1      	mov	r9, r4
 800e590:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e594:	2830      	cmp	r0, #48	@ 0x30
 800e596:	d0fa      	beq.n	800e58e <__gethex+0x12>
 800e598:	eba9 0303 	sub.w	r3, r9, r3
 800e59c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e5a0:	f7ff ffd6 	bl	800e550 <__hexdig_fun>
 800e5a4:	4605      	mov	r5, r0
 800e5a6:	2800      	cmp	r0, #0
 800e5a8:	d168      	bne.n	800e67c <__gethex+0x100>
 800e5aa:	49a0      	ldr	r1, [pc, #640]	@ (800e82c <__gethex+0x2b0>)
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	4648      	mov	r0, r9
 800e5b0:	f7ff f874 	bl	800d69c <strncmp>
 800e5b4:	4607      	mov	r7, r0
 800e5b6:	2800      	cmp	r0, #0
 800e5b8:	d167      	bne.n	800e68a <__gethex+0x10e>
 800e5ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e5be:	4626      	mov	r6, r4
 800e5c0:	f7ff ffc6 	bl	800e550 <__hexdig_fun>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d062      	beq.n	800e68e <__gethex+0x112>
 800e5c8:	4623      	mov	r3, r4
 800e5ca:	7818      	ldrb	r0, [r3, #0]
 800e5cc:	2830      	cmp	r0, #48	@ 0x30
 800e5ce:	4699      	mov	r9, r3
 800e5d0:	f103 0301 	add.w	r3, r3, #1
 800e5d4:	d0f9      	beq.n	800e5ca <__gethex+0x4e>
 800e5d6:	f7ff ffbb 	bl	800e550 <__hexdig_fun>
 800e5da:	fab0 f580 	clz	r5, r0
 800e5de:	096d      	lsrs	r5, r5, #5
 800e5e0:	f04f 0b01 	mov.w	fp, #1
 800e5e4:	464a      	mov	r2, r9
 800e5e6:	4616      	mov	r6, r2
 800e5e8:	3201      	adds	r2, #1
 800e5ea:	7830      	ldrb	r0, [r6, #0]
 800e5ec:	f7ff ffb0 	bl	800e550 <__hexdig_fun>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d1f8      	bne.n	800e5e6 <__gethex+0x6a>
 800e5f4:	498d      	ldr	r1, [pc, #564]	@ (800e82c <__gethex+0x2b0>)
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f7ff f84f 	bl	800d69c <strncmp>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d13f      	bne.n	800e682 <__gethex+0x106>
 800e602:	b944      	cbnz	r4, 800e616 <__gethex+0x9a>
 800e604:	1c74      	adds	r4, r6, #1
 800e606:	4622      	mov	r2, r4
 800e608:	4616      	mov	r6, r2
 800e60a:	3201      	adds	r2, #1
 800e60c:	7830      	ldrb	r0, [r6, #0]
 800e60e:	f7ff ff9f 	bl	800e550 <__hexdig_fun>
 800e612:	2800      	cmp	r0, #0
 800e614:	d1f8      	bne.n	800e608 <__gethex+0x8c>
 800e616:	1ba4      	subs	r4, r4, r6
 800e618:	00a7      	lsls	r7, r4, #2
 800e61a:	7833      	ldrb	r3, [r6, #0]
 800e61c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e620:	2b50      	cmp	r3, #80	@ 0x50
 800e622:	d13e      	bne.n	800e6a2 <__gethex+0x126>
 800e624:	7873      	ldrb	r3, [r6, #1]
 800e626:	2b2b      	cmp	r3, #43	@ 0x2b
 800e628:	d033      	beq.n	800e692 <__gethex+0x116>
 800e62a:	2b2d      	cmp	r3, #45	@ 0x2d
 800e62c:	d034      	beq.n	800e698 <__gethex+0x11c>
 800e62e:	1c71      	adds	r1, r6, #1
 800e630:	2400      	movs	r4, #0
 800e632:	7808      	ldrb	r0, [r1, #0]
 800e634:	f7ff ff8c 	bl	800e550 <__hexdig_fun>
 800e638:	1e43      	subs	r3, r0, #1
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b18      	cmp	r3, #24
 800e63e:	d830      	bhi.n	800e6a2 <__gethex+0x126>
 800e640:	f1a0 0210 	sub.w	r2, r0, #16
 800e644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e648:	f7ff ff82 	bl	800e550 <__hexdig_fun>
 800e64c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800e650:	fa5f fc8c 	uxtb.w	ip, ip
 800e654:	f1bc 0f18 	cmp.w	ip, #24
 800e658:	f04f 030a 	mov.w	r3, #10
 800e65c:	d91e      	bls.n	800e69c <__gethex+0x120>
 800e65e:	b104      	cbz	r4, 800e662 <__gethex+0xe6>
 800e660:	4252      	negs	r2, r2
 800e662:	4417      	add	r7, r2
 800e664:	f8ca 1000 	str.w	r1, [sl]
 800e668:	b1ed      	cbz	r5, 800e6a6 <__gethex+0x12a>
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	bf0c      	ite	eq
 800e670:	2506      	moveq	r5, #6
 800e672:	2500      	movne	r5, #0
 800e674:	4628      	mov	r0, r5
 800e676:	b005      	add	sp, #20
 800e678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67c:	2500      	movs	r5, #0
 800e67e:	462c      	mov	r4, r5
 800e680:	e7b0      	b.n	800e5e4 <__gethex+0x68>
 800e682:	2c00      	cmp	r4, #0
 800e684:	d1c7      	bne.n	800e616 <__gethex+0x9a>
 800e686:	4627      	mov	r7, r4
 800e688:	e7c7      	b.n	800e61a <__gethex+0x9e>
 800e68a:	464e      	mov	r6, r9
 800e68c:	462f      	mov	r7, r5
 800e68e:	2501      	movs	r5, #1
 800e690:	e7c3      	b.n	800e61a <__gethex+0x9e>
 800e692:	2400      	movs	r4, #0
 800e694:	1cb1      	adds	r1, r6, #2
 800e696:	e7cc      	b.n	800e632 <__gethex+0xb6>
 800e698:	2401      	movs	r4, #1
 800e69a:	e7fb      	b.n	800e694 <__gethex+0x118>
 800e69c:	fb03 0002 	mla	r0, r3, r2, r0
 800e6a0:	e7ce      	b.n	800e640 <__gethex+0xc4>
 800e6a2:	4631      	mov	r1, r6
 800e6a4:	e7de      	b.n	800e664 <__gethex+0xe8>
 800e6a6:	eba6 0309 	sub.w	r3, r6, r9
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	2b07      	cmp	r3, #7
 800e6b0:	dc0a      	bgt.n	800e6c8 <__gethex+0x14c>
 800e6b2:	9801      	ldr	r0, [sp, #4]
 800e6b4:	f000 fd94 	bl	800f1e0 <_Balloc>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	b940      	cbnz	r0, 800e6ce <__gethex+0x152>
 800e6bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e830 <__gethex+0x2b4>)
 800e6be:	4602      	mov	r2, r0
 800e6c0:	21e4      	movs	r1, #228	@ 0xe4
 800e6c2:	485c      	ldr	r0, [pc, #368]	@ (800e834 <__gethex+0x2b8>)
 800e6c4:	f001 fc46 	bl	800ff54 <__assert_func>
 800e6c8:	3101      	adds	r1, #1
 800e6ca:	105b      	asrs	r3, r3, #1
 800e6cc:	e7ef      	b.n	800e6ae <__gethex+0x132>
 800e6ce:	f100 0a14 	add.w	sl, r0, #20
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	4655      	mov	r5, sl
 800e6d6:	469b      	mov	fp, r3
 800e6d8:	45b1      	cmp	r9, r6
 800e6da:	d337      	bcc.n	800e74c <__gethex+0x1d0>
 800e6dc:	f845 bb04 	str.w	fp, [r5], #4
 800e6e0:	eba5 050a 	sub.w	r5, r5, sl
 800e6e4:	10ad      	asrs	r5, r5, #2
 800e6e6:	6125      	str	r5, [r4, #16]
 800e6e8:	4658      	mov	r0, fp
 800e6ea:	f000 fe6b 	bl	800f3c4 <__hi0bits>
 800e6ee:	016d      	lsls	r5, r5, #5
 800e6f0:	f8d8 6000 	ldr.w	r6, [r8]
 800e6f4:	1a2d      	subs	r5, r5, r0
 800e6f6:	42b5      	cmp	r5, r6
 800e6f8:	dd54      	ble.n	800e7a4 <__gethex+0x228>
 800e6fa:	1bad      	subs	r5, r5, r6
 800e6fc:	4629      	mov	r1, r5
 800e6fe:	4620      	mov	r0, r4
 800e700:	f001 f9ff 	bl	800fb02 <__any_on>
 800e704:	4681      	mov	r9, r0
 800e706:	b178      	cbz	r0, 800e728 <__gethex+0x1ac>
 800e708:	1e6b      	subs	r3, r5, #1
 800e70a:	1159      	asrs	r1, r3, #5
 800e70c:	f003 021f 	and.w	r2, r3, #31
 800e710:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e714:	f04f 0901 	mov.w	r9, #1
 800e718:	fa09 f202 	lsl.w	r2, r9, r2
 800e71c:	420a      	tst	r2, r1
 800e71e:	d003      	beq.n	800e728 <__gethex+0x1ac>
 800e720:	454b      	cmp	r3, r9
 800e722:	dc36      	bgt.n	800e792 <__gethex+0x216>
 800e724:	f04f 0902 	mov.w	r9, #2
 800e728:	4629      	mov	r1, r5
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7ff febe 	bl	800e4ac <rshift>
 800e730:	442f      	add	r7, r5
 800e732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e736:	42bb      	cmp	r3, r7
 800e738:	da42      	bge.n	800e7c0 <__gethex+0x244>
 800e73a:	9801      	ldr	r0, [sp, #4]
 800e73c:	4621      	mov	r1, r4
 800e73e:	f000 fd8f 	bl	800f260 <_Bfree>
 800e742:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e744:	2300      	movs	r3, #0
 800e746:	6013      	str	r3, [r2, #0]
 800e748:	25a3      	movs	r5, #163	@ 0xa3
 800e74a:	e793      	b.n	800e674 <__gethex+0xf8>
 800e74c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e750:	2a2e      	cmp	r2, #46	@ 0x2e
 800e752:	d012      	beq.n	800e77a <__gethex+0x1fe>
 800e754:	2b20      	cmp	r3, #32
 800e756:	d104      	bne.n	800e762 <__gethex+0x1e6>
 800e758:	f845 bb04 	str.w	fp, [r5], #4
 800e75c:	f04f 0b00 	mov.w	fp, #0
 800e760:	465b      	mov	r3, fp
 800e762:	7830      	ldrb	r0, [r6, #0]
 800e764:	9303      	str	r3, [sp, #12]
 800e766:	f7ff fef3 	bl	800e550 <__hexdig_fun>
 800e76a:	9b03      	ldr	r3, [sp, #12]
 800e76c:	f000 000f 	and.w	r0, r0, #15
 800e770:	4098      	lsls	r0, r3
 800e772:	ea4b 0b00 	orr.w	fp, fp, r0
 800e776:	3304      	adds	r3, #4
 800e778:	e7ae      	b.n	800e6d8 <__gethex+0x15c>
 800e77a:	45b1      	cmp	r9, r6
 800e77c:	d8ea      	bhi.n	800e754 <__gethex+0x1d8>
 800e77e:	492b      	ldr	r1, [pc, #172]	@ (800e82c <__gethex+0x2b0>)
 800e780:	9303      	str	r3, [sp, #12]
 800e782:	2201      	movs	r2, #1
 800e784:	4630      	mov	r0, r6
 800e786:	f7fe ff89 	bl	800d69c <strncmp>
 800e78a:	9b03      	ldr	r3, [sp, #12]
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d1e1      	bne.n	800e754 <__gethex+0x1d8>
 800e790:	e7a2      	b.n	800e6d8 <__gethex+0x15c>
 800e792:	1ea9      	subs	r1, r5, #2
 800e794:	4620      	mov	r0, r4
 800e796:	f001 f9b4 	bl	800fb02 <__any_on>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d0c2      	beq.n	800e724 <__gethex+0x1a8>
 800e79e:	f04f 0903 	mov.w	r9, #3
 800e7a2:	e7c1      	b.n	800e728 <__gethex+0x1ac>
 800e7a4:	da09      	bge.n	800e7ba <__gethex+0x23e>
 800e7a6:	1b75      	subs	r5, r6, r5
 800e7a8:	4621      	mov	r1, r4
 800e7aa:	9801      	ldr	r0, [sp, #4]
 800e7ac:	462a      	mov	r2, r5
 800e7ae:	f000 ff6f 	bl	800f690 <__lshift>
 800e7b2:	1b7f      	subs	r7, r7, r5
 800e7b4:	4604      	mov	r4, r0
 800e7b6:	f100 0a14 	add.w	sl, r0, #20
 800e7ba:	f04f 0900 	mov.w	r9, #0
 800e7be:	e7b8      	b.n	800e732 <__gethex+0x1b6>
 800e7c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7c4:	42bd      	cmp	r5, r7
 800e7c6:	dd6f      	ble.n	800e8a8 <__gethex+0x32c>
 800e7c8:	1bed      	subs	r5, r5, r7
 800e7ca:	42ae      	cmp	r6, r5
 800e7cc:	dc34      	bgt.n	800e838 <__gethex+0x2bc>
 800e7ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d022      	beq.n	800e81c <__gethex+0x2a0>
 800e7d6:	2b03      	cmp	r3, #3
 800e7d8:	d024      	beq.n	800e824 <__gethex+0x2a8>
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d115      	bne.n	800e80a <__gethex+0x28e>
 800e7de:	42ae      	cmp	r6, r5
 800e7e0:	d113      	bne.n	800e80a <__gethex+0x28e>
 800e7e2:	2e01      	cmp	r6, #1
 800e7e4:	d10b      	bne.n	800e7fe <__gethex+0x282>
 800e7e6:	9a02      	ldr	r2, [sp, #8]
 800e7e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7ec:	6013      	str	r3, [r2, #0]
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	6123      	str	r3, [r4, #16]
 800e7f2:	f8ca 3000 	str.w	r3, [sl]
 800e7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7f8:	2562      	movs	r5, #98	@ 0x62
 800e7fa:	601c      	str	r4, [r3, #0]
 800e7fc:	e73a      	b.n	800e674 <__gethex+0xf8>
 800e7fe:	1e71      	subs	r1, r6, #1
 800e800:	4620      	mov	r0, r4
 800e802:	f001 f97e 	bl	800fb02 <__any_on>
 800e806:	2800      	cmp	r0, #0
 800e808:	d1ed      	bne.n	800e7e6 <__gethex+0x26a>
 800e80a:	9801      	ldr	r0, [sp, #4]
 800e80c:	4621      	mov	r1, r4
 800e80e:	f000 fd27 	bl	800f260 <_Bfree>
 800e812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e814:	2300      	movs	r3, #0
 800e816:	6013      	str	r3, [r2, #0]
 800e818:	2550      	movs	r5, #80	@ 0x50
 800e81a:	e72b      	b.n	800e674 <__gethex+0xf8>
 800e81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1f3      	bne.n	800e80a <__gethex+0x28e>
 800e822:	e7e0      	b.n	800e7e6 <__gethex+0x26a>
 800e824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1dd      	bne.n	800e7e6 <__gethex+0x26a>
 800e82a:	e7ee      	b.n	800e80a <__gethex+0x28e>
 800e82c:	080105fd 	.word	0x080105fd
 800e830:	080107d5 	.word	0x080107d5
 800e834:	080107e6 	.word	0x080107e6
 800e838:	1e6f      	subs	r7, r5, #1
 800e83a:	f1b9 0f00 	cmp.w	r9, #0
 800e83e:	d130      	bne.n	800e8a2 <__gethex+0x326>
 800e840:	b127      	cbz	r7, 800e84c <__gethex+0x2d0>
 800e842:	4639      	mov	r1, r7
 800e844:	4620      	mov	r0, r4
 800e846:	f001 f95c 	bl	800fb02 <__any_on>
 800e84a:	4681      	mov	r9, r0
 800e84c:	117a      	asrs	r2, r7, #5
 800e84e:	2301      	movs	r3, #1
 800e850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e854:	f007 071f 	and.w	r7, r7, #31
 800e858:	40bb      	lsls	r3, r7
 800e85a:	4213      	tst	r3, r2
 800e85c:	4629      	mov	r1, r5
 800e85e:	4620      	mov	r0, r4
 800e860:	bf18      	it	ne
 800e862:	f049 0902 	orrne.w	r9, r9, #2
 800e866:	f7ff fe21 	bl	800e4ac <rshift>
 800e86a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e86e:	1b76      	subs	r6, r6, r5
 800e870:	2502      	movs	r5, #2
 800e872:	f1b9 0f00 	cmp.w	r9, #0
 800e876:	d047      	beq.n	800e908 <__gethex+0x38c>
 800e878:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	d015      	beq.n	800e8ac <__gethex+0x330>
 800e880:	2b03      	cmp	r3, #3
 800e882:	d017      	beq.n	800e8b4 <__gethex+0x338>
 800e884:	2b01      	cmp	r3, #1
 800e886:	d109      	bne.n	800e89c <__gethex+0x320>
 800e888:	f019 0f02 	tst.w	r9, #2
 800e88c:	d006      	beq.n	800e89c <__gethex+0x320>
 800e88e:	f8da 3000 	ldr.w	r3, [sl]
 800e892:	ea49 0903 	orr.w	r9, r9, r3
 800e896:	f019 0f01 	tst.w	r9, #1
 800e89a:	d10e      	bne.n	800e8ba <__gethex+0x33e>
 800e89c:	f045 0510 	orr.w	r5, r5, #16
 800e8a0:	e032      	b.n	800e908 <__gethex+0x38c>
 800e8a2:	f04f 0901 	mov.w	r9, #1
 800e8a6:	e7d1      	b.n	800e84c <__gethex+0x2d0>
 800e8a8:	2501      	movs	r5, #1
 800e8aa:	e7e2      	b.n	800e872 <__gethex+0x2f6>
 800e8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8ae:	f1c3 0301 	rsb	r3, r3, #1
 800e8b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d0f0      	beq.n	800e89c <__gethex+0x320>
 800e8ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8be:	f104 0314 	add.w	r3, r4, #20
 800e8c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8ca:	f04f 0c00 	mov.w	ip, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8d4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e8d8:	d01b      	beq.n	800e912 <__gethex+0x396>
 800e8da:	3201      	adds	r2, #1
 800e8dc:	6002      	str	r2, [r0, #0]
 800e8de:	2d02      	cmp	r5, #2
 800e8e0:	f104 0314 	add.w	r3, r4, #20
 800e8e4:	d13c      	bne.n	800e960 <__gethex+0x3e4>
 800e8e6:	f8d8 2000 	ldr.w	r2, [r8]
 800e8ea:	3a01      	subs	r2, #1
 800e8ec:	42b2      	cmp	r2, r6
 800e8ee:	d109      	bne.n	800e904 <__gethex+0x388>
 800e8f0:	1171      	asrs	r1, r6, #5
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8f8:	f006 061f 	and.w	r6, r6, #31
 800e8fc:	fa02 f606 	lsl.w	r6, r2, r6
 800e900:	421e      	tst	r6, r3
 800e902:	d13a      	bne.n	800e97a <__gethex+0x3fe>
 800e904:	f045 0520 	orr.w	r5, r5, #32
 800e908:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e90a:	601c      	str	r4, [r3, #0]
 800e90c:	9b02      	ldr	r3, [sp, #8]
 800e90e:	601f      	str	r7, [r3, #0]
 800e910:	e6b0      	b.n	800e674 <__gethex+0xf8>
 800e912:	4299      	cmp	r1, r3
 800e914:	f843 cc04 	str.w	ip, [r3, #-4]
 800e918:	d8d9      	bhi.n	800e8ce <__gethex+0x352>
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	459b      	cmp	fp, r3
 800e91e:	db17      	blt.n	800e950 <__gethex+0x3d4>
 800e920:	6861      	ldr	r1, [r4, #4]
 800e922:	9801      	ldr	r0, [sp, #4]
 800e924:	3101      	adds	r1, #1
 800e926:	f000 fc5b 	bl	800f1e0 <_Balloc>
 800e92a:	4681      	mov	r9, r0
 800e92c:	b918      	cbnz	r0, 800e936 <__gethex+0x3ba>
 800e92e:	4b1a      	ldr	r3, [pc, #104]	@ (800e998 <__gethex+0x41c>)
 800e930:	4602      	mov	r2, r0
 800e932:	2184      	movs	r1, #132	@ 0x84
 800e934:	e6c5      	b.n	800e6c2 <__gethex+0x146>
 800e936:	6922      	ldr	r2, [r4, #16]
 800e938:	3202      	adds	r2, #2
 800e93a:	f104 010c 	add.w	r1, r4, #12
 800e93e:	0092      	lsls	r2, r2, #2
 800e940:	300c      	adds	r0, #12
 800e942:	f7fe fef6 	bl	800d732 <memcpy>
 800e946:	4621      	mov	r1, r4
 800e948:	9801      	ldr	r0, [sp, #4]
 800e94a:	f000 fc89 	bl	800f260 <_Bfree>
 800e94e:	464c      	mov	r4, r9
 800e950:	6923      	ldr	r3, [r4, #16]
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e958:	6122      	str	r2, [r4, #16]
 800e95a:	2201      	movs	r2, #1
 800e95c:	615a      	str	r2, [r3, #20]
 800e95e:	e7be      	b.n	800e8de <__gethex+0x362>
 800e960:	6922      	ldr	r2, [r4, #16]
 800e962:	455a      	cmp	r2, fp
 800e964:	dd0b      	ble.n	800e97e <__gethex+0x402>
 800e966:	2101      	movs	r1, #1
 800e968:	4620      	mov	r0, r4
 800e96a:	f7ff fd9f 	bl	800e4ac <rshift>
 800e96e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e972:	3701      	adds	r7, #1
 800e974:	42bb      	cmp	r3, r7
 800e976:	f6ff aee0 	blt.w	800e73a <__gethex+0x1be>
 800e97a:	2501      	movs	r5, #1
 800e97c:	e7c2      	b.n	800e904 <__gethex+0x388>
 800e97e:	f016 061f 	ands.w	r6, r6, #31
 800e982:	d0fa      	beq.n	800e97a <__gethex+0x3fe>
 800e984:	4453      	add	r3, sl
 800e986:	f1c6 0620 	rsb	r6, r6, #32
 800e98a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e98e:	f000 fd19 	bl	800f3c4 <__hi0bits>
 800e992:	42b0      	cmp	r0, r6
 800e994:	dbe7      	blt.n	800e966 <__gethex+0x3ea>
 800e996:	e7f0      	b.n	800e97a <__gethex+0x3fe>
 800e998:	080107d5 	.word	0x080107d5

0800e99c <L_shift>:
 800e99c:	f1c2 0208 	rsb	r2, r2, #8
 800e9a0:	0092      	lsls	r2, r2, #2
 800e9a2:	b570      	push	{r4, r5, r6, lr}
 800e9a4:	f1c2 0620 	rsb	r6, r2, #32
 800e9a8:	6843      	ldr	r3, [r0, #4]
 800e9aa:	6804      	ldr	r4, [r0, #0]
 800e9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e9b0:	432c      	orrs	r4, r5
 800e9b2:	40d3      	lsrs	r3, r2
 800e9b4:	6004      	str	r4, [r0, #0]
 800e9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9ba:	4288      	cmp	r0, r1
 800e9bc:	d3f4      	bcc.n	800e9a8 <L_shift+0xc>
 800e9be:	bd70      	pop	{r4, r5, r6, pc}

0800e9c0 <__match>:
 800e9c0:	b530      	push	{r4, r5, lr}
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ca:	b914      	cbnz	r4, 800e9d2 <__match+0x12>
 800e9cc:	6003      	str	r3, [r0, #0]
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	bd30      	pop	{r4, r5, pc}
 800e9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e9da:	2d19      	cmp	r5, #25
 800e9dc:	bf98      	it	ls
 800e9de:	3220      	addls	r2, #32
 800e9e0:	42a2      	cmp	r2, r4
 800e9e2:	d0f0      	beq.n	800e9c6 <__match+0x6>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	e7f3      	b.n	800e9d0 <__match+0x10>

0800e9e8 <__hexnan>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	680b      	ldr	r3, [r1, #0]
 800e9ee:	6801      	ldr	r1, [r0, #0]
 800e9f0:	115e      	asrs	r6, r3, #5
 800e9f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e9f6:	f013 031f 	ands.w	r3, r3, #31
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	bf18      	it	ne
 800e9fe:	3604      	addne	r6, #4
 800ea00:	2500      	movs	r5, #0
 800ea02:	1f37      	subs	r7, r6, #4
 800ea04:	4682      	mov	sl, r0
 800ea06:	4690      	mov	r8, r2
 800ea08:	9301      	str	r3, [sp, #4]
 800ea0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea0e:	46b9      	mov	r9, r7
 800ea10:	463c      	mov	r4, r7
 800ea12:	9502      	str	r5, [sp, #8]
 800ea14:	46ab      	mov	fp, r5
 800ea16:	784a      	ldrb	r2, [r1, #1]
 800ea18:	1c4b      	adds	r3, r1, #1
 800ea1a:	9303      	str	r3, [sp, #12]
 800ea1c:	b342      	cbz	r2, 800ea70 <__hexnan+0x88>
 800ea1e:	4610      	mov	r0, r2
 800ea20:	9105      	str	r1, [sp, #20]
 800ea22:	9204      	str	r2, [sp, #16]
 800ea24:	f7ff fd94 	bl	800e550 <__hexdig_fun>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d151      	bne.n	800ead0 <__hexnan+0xe8>
 800ea2c:	9a04      	ldr	r2, [sp, #16]
 800ea2e:	9905      	ldr	r1, [sp, #20]
 800ea30:	2a20      	cmp	r2, #32
 800ea32:	d818      	bhi.n	800ea66 <__hexnan+0x7e>
 800ea34:	9b02      	ldr	r3, [sp, #8]
 800ea36:	459b      	cmp	fp, r3
 800ea38:	dd13      	ble.n	800ea62 <__hexnan+0x7a>
 800ea3a:	454c      	cmp	r4, r9
 800ea3c:	d206      	bcs.n	800ea4c <__hexnan+0x64>
 800ea3e:	2d07      	cmp	r5, #7
 800ea40:	dc04      	bgt.n	800ea4c <__hexnan+0x64>
 800ea42:	462a      	mov	r2, r5
 800ea44:	4649      	mov	r1, r9
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff ffa8 	bl	800e99c <L_shift>
 800ea4c:	4544      	cmp	r4, r8
 800ea4e:	d952      	bls.n	800eaf6 <__hexnan+0x10e>
 800ea50:	2300      	movs	r3, #0
 800ea52:	f1a4 0904 	sub.w	r9, r4, #4
 800ea56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea5e:	464c      	mov	r4, r9
 800ea60:	461d      	mov	r5, r3
 800ea62:	9903      	ldr	r1, [sp, #12]
 800ea64:	e7d7      	b.n	800ea16 <__hexnan+0x2e>
 800ea66:	2a29      	cmp	r2, #41	@ 0x29
 800ea68:	d157      	bne.n	800eb1a <__hexnan+0x132>
 800ea6a:	3102      	adds	r1, #2
 800ea6c:	f8ca 1000 	str.w	r1, [sl]
 800ea70:	f1bb 0f00 	cmp.w	fp, #0
 800ea74:	d051      	beq.n	800eb1a <__hexnan+0x132>
 800ea76:	454c      	cmp	r4, r9
 800ea78:	d206      	bcs.n	800ea88 <__hexnan+0xa0>
 800ea7a:	2d07      	cmp	r5, #7
 800ea7c:	dc04      	bgt.n	800ea88 <__hexnan+0xa0>
 800ea7e:	462a      	mov	r2, r5
 800ea80:	4649      	mov	r1, r9
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7ff ff8a 	bl	800e99c <L_shift>
 800ea88:	4544      	cmp	r4, r8
 800ea8a:	d936      	bls.n	800eafa <__hexnan+0x112>
 800ea8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ea90:	4623      	mov	r3, r4
 800ea92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea9a:	429f      	cmp	r7, r3
 800ea9c:	d2f9      	bcs.n	800ea92 <__hexnan+0xaa>
 800ea9e:	1b3b      	subs	r3, r7, r4
 800eaa0:	f023 0303 	bic.w	r3, r3, #3
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	3401      	adds	r4, #1
 800eaa8:	3e03      	subs	r6, #3
 800eaaa:	42b4      	cmp	r4, r6
 800eaac:	bf88      	it	hi
 800eaae:	2304      	movhi	r3, #4
 800eab0:	4443      	add	r3, r8
 800eab2:	2200      	movs	r2, #0
 800eab4:	f843 2b04 	str.w	r2, [r3], #4
 800eab8:	429f      	cmp	r7, r3
 800eaba:	d2fb      	bcs.n	800eab4 <__hexnan+0xcc>
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	b91b      	cbnz	r3, 800eac8 <__hexnan+0xe0>
 800eac0:	4547      	cmp	r7, r8
 800eac2:	d128      	bne.n	800eb16 <__hexnan+0x12e>
 800eac4:	2301      	movs	r3, #1
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	2005      	movs	r0, #5
 800eaca:	b007      	add	sp, #28
 800eacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead0:	3501      	adds	r5, #1
 800ead2:	2d08      	cmp	r5, #8
 800ead4:	f10b 0b01 	add.w	fp, fp, #1
 800ead8:	dd06      	ble.n	800eae8 <__hexnan+0x100>
 800eada:	4544      	cmp	r4, r8
 800eadc:	d9c1      	bls.n	800ea62 <__hexnan+0x7a>
 800eade:	2300      	movs	r3, #0
 800eae0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eae4:	2501      	movs	r5, #1
 800eae6:	3c04      	subs	r4, #4
 800eae8:	6822      	ldr	r2, [r4, #0]
 800eaea:	f000 000f 	and.w	r0, r0, #15
 800eaee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eaf2:	6020      	str	r0, [r4, #0]
 800eaf4:	e7b5      	b.n	800ea62 <__hexnan+0x7a>
 800eaf6:	2508      	movs	r5, #8
 800eaf8:	e7b3      	b.n	800ea62 <__hexnan+0x7a>
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0dd      	beq.n	800eabc <__hexnan+0xd4>
 800eb00:	f1c3 0320 	rsb	r3, r3, #32
 800eb04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb08:	40da      	lsrs	r2, r3
 800eb0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eb0e:	4013      	ands	r3, r2
 800eb10:	f846 3c04 	str.w	r3, [r6, #-4]
 800eb14:	e7d2      	b.n	800eabc <__hexnan+0xd4>
 800eb16:	3f04      	subs	r7, #4
 800eb18:	e7d0      	b.n	800eabc <__hexnan+0xd4>
 800eb1a:	2004      	movs	r0, #4
 800eb1c:	e7d5      	b.n	800eaca <__hexnan+0xe2>

0800eb1e <__ssputs_r>:
 800eb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb22:	688e      	ldr	r6, [r1, #8]
 800eb24:	461f      	mov	r7, r3
 800eb26:	42be      	cmp	r6, r7
 800eb28:	680b      	ldr	r3, [r1, #0]
 800eb2a:	4682      	mov	sl, r0
 800eb2c:	460c      	mov	r4, r1
 800eb2e:	4690      	mov	r8, r2
 800eb30:	d82d      	bhi.n	800eb8e <__ssputs_r+0x70>
 800eb32:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb36:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb3a:	d026      	beq.n	800eb8a <__ssputs_r+0x6c>
 800eb3c:	6965      	ldr	r5, [r4, #20]
 800eb3e:	6909      	ldr	r1, [r1, #16]
 800eb40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb44:	eba3 0901 	sub.w	r9, r3, r1
 800eb48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb4c:	1c7b      	adds	r3, r7, #1
 800eb4e:	444b      	add	r3, r9
 800eb50:	106d      	asrs	r5, r5, #1
 800eb52:	429d      	cmp	r5, r3
 800eb54:	bf38      	it	cc
 800eb56:	461d      	movcc	r5, r3
 800eb58:	0553      	lsls	r3, r2, #21
 800eb5a:	d527      	bpl.n	800ebac <__ssputs_r+0x8e>
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	f000 faa1 	bl	800f0a4 <_malloc_r>
 800eb62:	4606      	mov	r6, r0
 800eb64:	b360      	cbz	r0, 800ebc0 <__ssputs_r+0xa2>
 800eb66:	6921      	ldr	r1, [r4, #16]
 800eb68:	464a      	mov	r2, r9
 800eb6a:	f7fe fde2 	bl	800d732 <memcpy>
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eb74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb78:	81a3      	strh	r3, [r4, #12]
 800eb7a:	6126      	str	r6, [r4, #16]
 800eb7c:	6165      	str	r5, [r4, #20]
 800eb7e:	444e      	add	r6, r9
 800eb80:	eba5 0509 	sub.w	r5, r5, r9
 800eb84:	6026      	str	r6, [r4, #0]
 800eb86:	60a5      	str	r5, [r4, #8]
 800eb88:	463e      	mov	r6, r7
 800eb8a:	42be      	cmp	r6, r7
 800eb8c:	d900      	bls.n	800eb90 <__ssputs_r+0x72>
 800eb8e:	463e      	mov	r6, r7
 800eb90:	6820      	ldr	r0, [r4, #0]
 800eb92:	4632      	mov	r2, r6
 800eb94:	4641      	mov	r1, r8
 800eb96:	f001 f94a 	bl	800fe2e <memmove>
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	1b9b      	subs	r3, r3, r6
 800eb9e:	60a3      	str	r3, [r4, #8]
 800eba0:	6823      	ldr	r3, [r4, #0]
 800eba2:	4433      	add	r3, r6
 800eba4:	6023      	str	r3, [r4, #0]
 800eba6:	2000      	movs	r0, #0
 800eba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebac:	462a      	mov	r2, r5
 800ebae:	f001 f80c 	bl	800fbca <_realloc_r>
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d1e0      	bne.n	800eb7a <__ssputs_r+0x5c>
 800ebb8:	6921      	ldr	r1, [r4, #16]
 800ebba:	4650      	mov	r0, sl
 800ebbc:	f7ff fc2c 	bl	800e418 <_free_r>
 800ebc0:	230c      	movs	r3, #12
 800ebc2:	f8ca 3000 	str.w	r3, [sl]
 800ebc6:	89a3      	ldrh	r3, [r4, #12]
 800ebc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebcc:	81a3      	strh	r3, [r4, #12]
 800ebce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebd2:	e7e9      	b.n	800eba8 <__ssputs_r+0x8a>

0800ebd4 <_svfiprintf_r>:
 800ebd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebd8:	4698      	mov	r8, r3
 800ebda:	898b      	ldrh	r3, [r1, #12]
 800ebdc:	061b      	lsls	r3, r3, #24
 800ebde:	b09d      	sub	sp, #116	@ 0x74
 800ebe0:	4607      	mov	r7, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	4614      	mov	r4, r2
 800ebe6:	d510      	bpl.n	800ec0a <_svfiprintf_r+0x36>
 800ebe8:	690b      	ldr	r3, [r1, #16]
 800ebea:	b973      	cbnz	r3, 800ec0a <_svfiprintf_r+0x36>
 800ebec:	2140      	movs	r1, #64	@ 0x40
 800ebee:	f000 fa59 	bl	800f0a4 <_malloc_r>
 800ebf2:	6028      	str	r0, [r5, #0]
 800ebf4:	6128      	str	r0, [r5, #16]
 800ebf6:	b930      	cbnz	r0, 800ec06 <_svfiprintf_r+0x32>
 800ebf8:	230c      	movs	r3, #12
 800ebfa:	603b      	str	r3, [r7, #0]
 800ebfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec00:	b01d      	add	sp, #116	@ 0x74
 800ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec06:	2340      	movs	r3, #64	@ 0x40
 800ec08:	616b      	str	r3, [r5, #20]
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec0e:	2320      	movs	r3, #32
 800ec10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec18:	2330      	movs	r3, #48	@ 0x30
 800ec1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800edb8 <_svfiprintf_r+0x1e4>
 800ec1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec22:	f04f 0901 	mov.w	r9, #1
 800ec26:	4623      	mov	r3, r4
 800ec28:	469a      	mov	sl, r3
 800ec2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec2e:	b10a      	cbz	r2, 800ec34 <_svfiprintf_r+0x60>
 800ec30:	2a25      	cmp	r2, #37	@ 0x25
 800ec32:	d1f9      	bne.n	800ec28 <_svfiprintf_r+0x54>
 800ec34:	ebba 0b04 	subs.w	fp, sl, r4
 800ec38:	d00b      	beq.n	800ec52 <_svfiprintf_r+0x7e>
 800ec3a:	465b      	mov	r3, fp
 800ec3c:	4622      	mov	r2, r4
 800ec3e:	4629      	mov	r1, r5
 800ec40:	4638      	mov	r0, r7
 800ec42:	f7ff ff6c 	bl	800eb1e <__ssputs_r>
 800ec46:	3001      	adds	r0, #1
 800ec48:	f000 80a7 	beq.w	800ed9a <_svfiprintf_r+0x1c6>
 800ec4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec4e:	445a      	add	r2, fp
 800ec50:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec52:	f89a 3000 	ldrb.w	r3, [sl]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f000 809f 	beq.w	800ed9a <_svfiprintf_r+0x1c6>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec66:	f10a 0a01 	add.w	sl, sl, #1
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	9307      	str	r3, [sp, #28]
 800ec6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ec72:	931a      	str	r3, [sp, #104]	@ 0x68
 800ec74:	4654      	mov	r4, sl
 800ec76:	2205      	movs	r2, #5
 800ec78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7c:	484e      	ldr	r0, [pc, #312]	@ (800edb8 <_svfiprintf_r+0x1e4>)
 800ec7e:	f7f1 faaf 	bl	80001e0 <memchr>
 800ec82:	9a04      	ldr	r2, [sp, #16]
 800ec84:	b9d8      	cbnz	r0, 800ecbe <_svfiprintf_r+0xea>
 800ec86:	06d0      	lsls	r0, r2, #27
 800ec88:	bf44      	itt	mi
 800ec8a:	2320      	movmi	r3, #32
 800ec8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec90:	0711      	lsls	r1, r2, #28
 800ec92:	bf44      	itt	mi
 800ec94:	232b      	movmi	r3, #43	@ 0x2b
 800ec96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ec9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ec9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eca0:	d015      	beq.n	800ecce <_svfiprintf_r+0xfa>
 800eca2:	9a07      	ldr	r2, [sp, #28]
 800eca4:	4654      	mov	r4, sl
 800eca6:	2000      	movs	r0, #0
 800eca8:	f04f 0c0a 	mov.w	ip, #10
 800ecac:	4621      	mov	r1, r4
 800ecae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecb2:	3b30      	subs	r3, #48	@ 0x30
 800ecb4:	2b09      	cmp	r3, #9
 800ecb6:	d94b      	bls.n	800ed50 <_svfiprintf_r+0x17c>
 800ecb8:	b1b0      	cbz	r0, 800ece8 <_svfiprintf_r+0x114>
 800ecba:	9207      	str	r2, [sp, #28]
 800ecbc:	e014      	b.n	800ece8 <_svfiprintf_r+0x114>
 800ecbe:	eba0 0308 	sub.w	r3, r0, r8
 800ecc2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	9304      	str	r3, [sp, #16]
 800ecca:	46a2      	mov	sl, r4
 800eccc:	e7d2      	b.n	800ec74 <_svfiprintf_r+0xa0>
 800ecce:	9b03      	ldr	r3, [sp, #12]
 800ecd0:	1d19      	adds	r1, r3, #4
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	9103      	str	r1, [sp, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	bfbb      	ittet	lt
 800ecda:	425b      	neglt	r3, r3
 800ecdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ece0:	9307      	strge	r3, [sp, #28]
 800ece2:	9307      	strlt	r3, [sp, #28]
 800ece4:	bfb8      	it	lt
 800ece6:	9204      	strlt	r2, [sp, #16]
 800ece8:	7823      	ldrb	r3, [r4, #0]
 800ecea:	2b2e      	cmp	r3, #46	@ 0x2e
 800ecec:	d10a      	bne.n	800ed04 <_svfiprintf_r+0x130>
 800ecee:	7863      	ldrb	r3, [r4, #1]
 800ecf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ecf2:	d132      	bne.n	800ed5a <_svfiprintf_r+0x186>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	1d1a      	adds	r2, r3, #4
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	9203      	str	r2, [sp, #12]
 800ecfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed00:	3402      	adds	r4, #2
 800ed02:	9305      	str	r3, [sp, #20]
 800ed04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800edc8 <_svfiprintf_r+0x1f4>
 800ed08:	7821      	ldrb	r1, [r4, #0]
 800ed0a:	2203      	movs	r2, #3
 800ed0c:	4650      	mov	r0, sl
 800ed0e:	f7f1 fa67 	bl	80001e0 <memchr>
 800ed12:	b138      	cbz	r0, 800ed24 <_svfiprintf_r+0x150>
 800ed14:	9b04      	ldr	r3, [sp, #16]
 800ed16:	eba0 000a 	sub.w	r0, r0, sl
 800ed1a:	2240      	movs	r2, #64	@ 0x40
 800ed1c:	4082      	lsls	r2, r0
 800ed1e:	4313      	orrs	r3, r2
 800ed20:	3401      	adds	r4, #1
 800ed22:	9304      	str	r3, [sp, #16]
 800ed24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed28:	4824      	ldr	r0, [pc, #144]	@ (800edbc <_svfiprintf_r+0x1e8>)
 800ed2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed2e:	2206      	movs	r2, #6
 800ed30:	f7f1 fa56 	bl	80001e0 <memchr>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d036      	beq.n	800eda6 <_svfiprintf_r+0x1d2>
 800ed38:	4b21      	ldr	r3, [pc, #132]	@ (800edc0 <_svfiprintf_r+0x1ec>)
 800ed3a:	bb1b      	cbnz	r3, 800ed84 <_svfiprintf_r+0x1b0>
 800ed3c:	9b03      	ldr	r3, [sp, #12]
 800ed3e:	3307      	adds	r3, #7
 800ed40:	f023 0307 	bic.w	r3, r3, #7
 800ed44:	3308      	adds	r3, #8
 800ed46:	9303      	str	r3, [sp, #12]
 800ed48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed4a:	4433      	add	r3, r6
 800ed4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed4e:	e76a      	b.n	800ec26 <_svfiprintf_r+0x52>
 800ed50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed54:	460c      	mov	r4, r1
 800ed56:	2001      	movs	r0, #1
 800ed58:	e7a8      	b.n	800ecac <_svfiprintf_r+0xd8>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	3401      	adds	r4, #1
 800ed5e:	9305      	str	r3, [sp, #20]
 800ed60:	4619      	mov	r1, r3
 800ed62:	f04f 0c0a 	mov.w	ip, #10
 800ed66:	4620      	mov	r0, r4
 800ed68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed6c:	3a30      	subs	r2, #48	@ 0x30
 800ed6e:	2a09      	cmp	r2, #9
 800ed70:	d903      	bls.n	800ed7a <_svfiprintf_r+0x1a6>
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d0c6      	beq.n	800ed04 <_svfiprintf_r+0x130>
 800ed76:	9105      	str	r1, [sp, #20]
 800ed78:	e7c4      	b.n	800ed04 <_svfiprintf_r+0x130>
 800ed7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed7e:	4604      	mov	r4, r0
 800ed80:	2301      	movs	r3, #1
 800ed82:	e7f0      	b.n	800ed66 <_svfiprintf_r+0x192>
 800ed84:	ab03      	add	r3, sp, #12
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	462a      	mov	r2, r5
 800ed8a:	4b0e      	ldr	r3, [pc, #56]	@ (800edc4 <_svfiprintf_r+0x1f0>)
 800ed8c:	a904      	add	r1, sp, #16
 800ed8e:	4638      	mov	r0, r7
 800ed90:	f7fc fe80 	bl	800ba94 <_printf_float>
 800ed94:	1c42      	adds	r2, r0, #1
 800ed96:	4606      	mov	r6, r0
 800ed98:	d1d6      	bne.n	800ed48 <_svfiprintf_r+0x174>
 800ed9a:	89ab      	ldrh	r3, [r5, #12]
 800ed9c:	065b      	lsls	r3, r3, #25
 800ed9e:	f53f af2d 	bmi.w	800ebfc <_svfiprintf_r+0x28>
 800eda2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eda4:	e72c      	b.n	800ec00 <_svfiprintf_r+0x2c>
 800eda6:	ab03      	add	r3, sp, #12
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	462a      	mov	r2, r5
 800edac:	4b05      	ldr	r3, [pc, #20]	@ (800edc4 <_svfiprintf_r+0x1f0>)
 800edae:	a904      	add	r1, sp, #16
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7fd f907 	bl	800bfc4 <_printf_i>
 800edb6:	e7ed      	b.n	800ed94 <_svfiprintf_r+0x1c0>
 800edb8:	08010846 	.word	0x08010846
 800edbc:	08010850 	.word	0x08010850
 800edc0:	0800ba95 	.word	0x0800ba95
 800edc4:	0800eb1f 	.word	0x0800eb1f
 800edc8:	0801084c 	.word	0x0801084c

0800edcc <__sfputc_r>:
 800edcc:	6893      	ldr	r3, [r2, #8]
 800edce:	3b01      	subs	r3, #1
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	b410      	push	{r4}
 800edd4:	6093      	str	r3, [r2, #8]
 800edd6:	da08      	bge.n	800edea <__sfputc_r+0x1e>
 800edd8:	6994      	ldr	r4, [r2, #24]
 800edda:	42a3      	cmp	r3, r4
 800eddc:	db01      	blt.n	800ede2 <__sfputc_r+0x16>
 800edde:	290a      	cmp	r1, #10
 800ede0:	d103      	bne.n	800edea <__sfputc_r+0x1e>
 800ede2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ede6:	f000 bf1e 	b.w	800fc26 <__swbuf_r>
 800edea:	6813      	ldr	r3, [r2, #0]
 800edec:	1c58      	adds	r0, r3, #1
 800edee:	6010      	str	r0, [r2, #0]
 800edf0:	7019      	strb	r1, [r3, #0]
 800edf2:	4608      	mov	r0, r1
 800edf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edf8:	4770      	bx	lr

0800edfa <__sfputs_r>:
 800edfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfc:	4606      	mov	r6, r0
 800edfe:	460f      	mov	r7, r1
 800ee00:	4614      	mov	r4, r2
 800ee02:	18d5      	adds	r5, r2, r3
 800ee04:	42ac      	cmp	r4, r5
 800ee06:	d101      	bne.n	800ee0c <__sfputs_r+0x12>
 800ee08:	2000      	movs	r0, #0
 800ee0a:	e007      	b.n	800ee1c <__sfputs_r+0x22>
 800ee0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee10:	463a      	mov	r2, r7
 800ee12:	4630      	mov	r0, r6
 800ee14:	f7ff ffda 	bl	800edcc <__sfputc_r>
 800ee18:	1c43      	adds	r3, r0, #1
 800ee1a:	d1f3      	bne.n	800ee04 <__sfputs_r+0xa>
 800ee1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ee20 <_vfiprintf_r>:
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	460d      	mov	r5, r1
 800ee26:	b09d      	sub	sp, #116	@ 0x74
 800ee28:	4614      	mov	r4, r2
 800ee2a:	4698      	mov	r8, r3
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	b118      	cbz	r0, 800ee38 <_vfiprintf_r+0x18>
 800ee30:	6a03      	ldr	r3, [r0, #32]
 800ee32:	b90b      	cbnz	r3, 800ee38 <_vfiprintf_r+0x18>
 800ee34:	f7fd fd66 	bl	800c904 <__sinit>
 800ee38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee3a:	07d9      	lsls	r1, r3, #31
 800ee3c:	d405      	bmi.n	800ee4a <_vfiprintf_r+0x2a>
 800ee3e:	89ab      	ldrh	r3, [r5, #12]
 800ee40:	059a      	lsls	r2, r3, #22
 800ee42:	d402      	bmi.n	800ee4a <_vfiprintf_r+0x2a>
 800ee44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee46:	f7fe fc72 	bl	800d72e <__retarget_lock_acquire_recursive>
 800ee4a:	89ab      	ldrh	r3, [r5, #12]
 800ee4c:	071b      	lsls	r3, r3, #28
 800ee4e:	d501      	bpl.n	800ee54 <_vfiprintf_r+0x34>
 800ee50:	692b      	ldr	r3, [r5, #16]
 800ee52:	b99b      	cbnz	r3, 800ee7c <_vfiprintf_r+0x5c>
 800ee54:	4629      	mov	r1, r5
 800ee56:	4630      	mov	r0, r6
 800ee58:	f000 ff24 	bl	800fca4 <__swsetup_r>
 800ee5c:	b170      	cbz	r0, 800ee7c <_vfiprintf_r+0x5c>
 800ee5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee60:	07dc      	lsls	r4, r3, #31
 800ee62:	d504      	bpl.n	800ee6e <_vfiprintf_r+0x4e>
 800ee64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee68:	b01d      	add	sp, #116	@ 0x74
 800ee6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6e:	89ab      	ldrh	r3, [r5, #12]
 800ee70:	0598      	lsls	r0, r3, #22
 800ee72:	d4f7      	bmi.n	800ee64 <_vfiprintf_r+0x44>
 800ee74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee76:	f7fe fc5b 	bl	800d730 <__retarget_lock_release_recursive>
 800ee7a:	e7f3      	b.n	800ee64 <_vfiprintf_r+0x44>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee80:	2320      	movs	r3, #32
 800ee82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee86:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee8a:	2330      	movs	r3, #48	@ 0x30
 800ee8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f03c <_vfiprintf_r+0x21c>
 800ee90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee94:	f04f 0901 	mov.w	r9, #1
 800ee98:	4623      	mov	r3, r4
 800ee9a:	469a      	mov	sl, r3
 800ee9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea0:	b10a      	cbz	r2, 800eea6 <_vfiprintf_r+0x86>
 800eea2:	2a25      	cmp	r2, #37	@ 0x25
 800eea4:	d1f9      	bne.n	800ee9a <_vfiprintf_r+0x7a>
 800eea6:	ebba 0b04 	subs.w	fp, sl, r4
 800eeaa:	d00b      	beq.n	800eec4 <_vfiprintf_r+0xa4>
 800eeac:	465b      	mov	r3, fp
 800eeae:	4622      	mov	r2, r4
 800eeb0:	4629      	mov	r1, r5
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7ff ffa1 	bl	800edfa <__sfputs_r>
 800eeb8:	3001      	adds	r0, #1
 800eeba:	f000 80a7 	beq.w	800f00c <_vfiprintf_r+0x1ec>
 800eebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eec0:	445a      	add	r2, fp
 800eec2:	9209      	str	r2, [sp, #36]	@ 0x24
 800eec4:	f89a 3000 	ldrb.w	r3, [sl]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f000 809f 	beq.w	800f00c <_vfiprintf_r+0x1ec>
 800eece:	2300      	movs	r3, #0
 800eed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eed8:	f10a 0a01 	add.w	sl, sl, #1
 800eedc:	9304      	str	r3, [sp, #16]
 800eede:	9307      	str	r3, [sp, #28]
 800eee0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eee4:	931a      	str	r3, [sp, #104]	@ 0x68
 800eee6:	4654      	mov	r4, sl
 800eee8:	2205      	movs	r2, #5
 800eeea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeee:	4853      	ldr	r0, [pc, #332]	@ (800f03c <_vfiprintf_r+0x21c>)
 800eef0:	f7f1 f976 	bl	80001e0 <memchr>
 800eef4:	9a04      	ldr	r2, [sp, #16]
 800eef6:	b9d8      	cbnz	r0, 800ef30 <_vfiprintf_r+0x110>
 800eef8:	06d1      	lsls	r1, r2, #27
 800eefa:	bf44      	itt	mi
 800eefc:	2320      	movmi	r3, #32
 800eefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef02:	0713      	lsls	r3, r2, #28
 800ef04:	bf44      	itt	mi
 800ef06:	232b      	movmi	r3, #43	@ 0x2b
 800ef08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef12:	d015      	beq.n	800ef40 <_vfiprintf_r+0x120>
 800ef14:	9a07      	ldr	r2, [sp, #28]
 800ef16:	4654      	mov	r4, sl
 800ef18:	2000      	movs	r0, #0
 800ef1a:	f04f 0c0a 	mov.w	ip, #10
 800ef1e:	4621      	mov	r1, r4
 800ef20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef24:	3b30      	subs	r3, #48	@ 0x30
 800ef26:	2b09      	cmp	r3, #9
 800ef28:	d94b      	bls.n	800efc2 <_vfiprintf_r+0x1a2>
 800ef2a:	b1b0      	cbz	r0, 800ef5a <_vfiprintf_r+0x13a>
 800ef2c:	9207      	str	r2, [sp, #28]
 800ef2e:	e014      	b.n	800ef5a <_vfiprintf_r+0x13a>
 800ef30:	eba0 0308 	sub.w	r3, r0, r8
 800ef34:	fa09 f303 	lsl.w	r3, r9, r3
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	9304      	str	r3, [sp, #16]
 800ef3c:	46a2      	mov	sl, r4
 800ef3e:	e7d2      	b.n	800eee6 <_vfiprintf_r+0xc6>
 800ef40:	9b03      	ldr	r3, [sp, #12]
 800ef42:	1d19      	adds	r1, r3, #4
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	9103      	str	r1, [sp, #12]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	bfbb      	ittet	lt
 800ef4c:	425b      	neglt	r3, r3
 800ef4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ef52:	9307      	strge	r3, [sp, #28]
 800ef54:	9307      	strlt	r3, [sp, #28]
 800ef56:	bfb8      	it	lt
 800ef58:	9204      	strlt	r2, [sp, #16]
 800ef5a:	7823      	ldrb	r3, [r4, #0]
 800ef5c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef5e:	d10a      	bne.n	800ef76 <_vfiprintf_r+0x156>
 800ef60:	7863      	ldrb	r3, [r4, #1]
 800ef62:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef64:	d132      	bne.n	800efcc <_vfiprintf_r+0x1ac>
 800ef66:	9b03      	ldr	r3, [sp, #12]
 800ef68:	1d1a      	adds	r2, r3, #4
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	9203      	str	r2, [sp, #12]
 800ef6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef72:	3402      	adds	r4, #2
 800ef74:	9305      	str	r3, [sp, #20]
 800ef76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f04c <_vfiprintf_r+0x22c>
 800ef7a:	7821      	ldrb	r1, [r4, #0]
 800ef7c:	2203      	movs	r2, #3
 800ef7e:	4650      	mov	r0, sl
 800ef80:	f7f1 f92e 	bl	80001e0 <memchr>
 800ef84:	b138      	cbz	r0, 800ef96 <_vfiprintf_r+0x176>
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	eba0 000a 	sub.w	r0, r0, sl
 800ef8c:	2240      	movs	r2, #64	@ 0x40
 800ef8e:	4082      	lsls	r2, r0
 800ef90:	4313      	orrs	r3, r2
 800ef92:	3401      	adds	r4, #1
 800ef94:	9304      	str	r3, [sp, #16]
 800ef96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9a:	4829      	ldr	r0, [pc, #164]	@ (800f040 <_vfiprintf_r+0x220>)
 800ef9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efa0:	2206      	movs	r2, #6
 800efa2:	f7f1 f91d 	bl	80001e0 <memchr>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d03f      	beq.n	800f02a <_vfiprintf_r+0x20a>
 800efaa:	4b26      	ldr	r3, [pc, #152]	@ (800f044 <_vfiprintf_r+0x224>)
 800efac:	bb1b      	cbnz	r3, 800eff6 <_vfiprintf_r+0x1d6>
 800efae:	9b03      	ldr	r3, [sp, #12]
 800efb0:	3307      	adds	r3, #7
 800efb2:	f023 0307 	bic.w	r3, r3, #7
 800efb6:	3308      	adds	r3, #8
 800efb8:	9303      	str	r3, [sp, #12]
 800efba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efbc:	443b      	add	r3, r7
 800efbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800efc0:	e76a      	b.n	800ee98 <_vfiprintf_r+0x78>
 800efc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800efc6:	460c      	mov	r4, r1
 800efc8:	2001      	movs	r0, #1
 800efca:	e7a8      	b.n	800ef1e <_vfiprintf_r+0xfe>
 800efcc:	2300      	movs	r3, #0
 800efce:	3401      	adds	r4, #1
 800efd0:	9305      	str	r3, [sp, #20]
 800efd2:	4619      	mov	r1, r3
 800efd4:	f04f 0c0a 	mov.w	ip, #10
 800efd8:	4620      	mov	r0, r4
 800efda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efde:	3a30      	subs	r2, #48	@ 0x30
 800efe0:	2a09      	cmp	r2, #9
 800efe2:	d903      	bls.n	800efec <_vfiprintf_r+0x1cc>
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d0c6      	beq.n	800ef76 <_vfiprintf_r+0x156>
 800efe8:	9105      	str	r1, [sp, #20]
 800efea:	e7c4      	b.n	800ef76 <_vfiprintf_r+0x156>
 800efec:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff0:	4604      	mov	r4, r0
 800eff2:	2301      	movs	r3, #1
 800eff4:	e7f0      	b.n	800efd8 <_vfiprintf_r+0x1b8>
 800eff6:	ab03      	add	r3, sp, #12
 800eff8:	9300      	str	r3, [sp, #0]
 800effa:	462a      	mov	r2, r5
 800effc:	4b12      	ldr	r3, [pc, #72]	@ (800f048 <_vfiprintf_r+0x228>)
 800effe:	a904      	add	r1, sp, #16
 800f000:	4630      	mov	r0, r6
 800f002:	f7fc fd47 	bl	800ba94 <_printf_float>
 800f006:	4607      	mov	r7, r0
 800f008:	1c78      	adds	r0, r7, #1
 800f00a:	d1d6      	bne.n	800efba <_vfiprintf_r+0x19a>
 800f00c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f00e:	07d9      	lsls	r1, r3, #31
 800f010:	d405      	bmi.n	800f01e <_vfiprintf_r+0x1fe>
 800f012:	89ab      	ldrh	r3, [r5, #12]
 800f014:	059a      	lsls	r2, r3, #22
 800f016:	d402      	bmi.n	800f01e <_vfiprintf_r+0x1fe>
 800f018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f01a:	f7fe fb89 	bl	800d730 <__retarget_lock_release_recursive>
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	065b      	lsls	r3, r3, #25
 800f022:	f53f af1f 	bmi.w	800ee64 <_vfiprintf_r+0x44>
 800f026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f028:	e71e      	b.n	800ee68 <_vfiprintf_r+0x48>
 800f02a:	ab03      	add	r3, sp, #12
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	462a      	mov	r2, r5
 800f030:	4b05      	ldr	r3, [pc, #20]	@ (800f048 <_vfiprintf_r+0x228>)
 800f032:	a904      	add	r1, sp, #16
 800f034:	4630      	mov	r0, r6
 800f036:	f7fc ffc5 	bl	800bfc4 <_printf_i>
 800f03a:	e7e4      	b.n	800f006 <_vfiprintf_r+0x1e6>
 800f03c:	08010846 	.word	0x08010846
 800f040:	08010850 	.word	0x08010850
 800f044:	0800ba95 	.word	0x0800ba95
 800f048:	0800edfb 	.word	0x0800edfb
 800f04c:	0801084c 	.word	0x0801084c

0800f050 <malloc>:
 800f050:	4b02      	ldr	r3, [pc, #8]	@ (800f05c <malloc+0xc>)
 800f052:	4601      	mov	r1, r0
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	f000 b825 	b.w	800f0a4 <_malloc_r>
 800f05a:	bf00      	nop
 800f05c:	20000450 	.word	0x20000450

0800f060 <sbrk_aligned>:
 800f060:	b570      	push	{r4, r5, r6, lr}
 800f062:	4e0f      	ldr	r6, [pc, #60]	@ (800f0a0 <sbrk_aligned+0x40>)
 800f064:	460c      	mov	r4, r1
 800f066:	6831      	ldr	r1, [r6, #0]
 800f068:	4605      	mov	r5, r0
 800f06a:	b911      	cbnz	r1, 800f072 <sbrk_aligned+0x12>
 800f06c:	f000 ff50 	bl	800ff10 <_sbrk_r>
 800f070:	6030      	str	r0, [r6, #0]
 800f072:	4621      	mov	r1, r4
 800f074:	4628      	mov	r0, r5
 800f076:	f000 ff4b 	bl	800ff10 <_sbrk_r>
 800f07a:	1c43      	adds	r3, r0, #1
 800f07c:	d103      	bne.n	800f086 <sbrk_aligned+0x26>
 800f07e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f082:	4620      	mov	r0, r4
 800f084:	bd70      	pop	{r4, r5, r6, pc}
 800f086:	1cc4      	adds	r4, r0, #3
 800f088:	f024 0403 	bic.w	r4, r4, #3
 800f08c:	42a0      	cmp	r0, r4
 800f08e:	d0f8      	beq.n	800f082 <sbrk_aligned+0x22>
 800f090:	1a21      	subs	r1, r4, r0
 800f092:	4628      	mov	r0, r5
 800f094:	f000 ff3c 	bl	800ff10 <_sbrk_r>
 800f098:	3001      	adds	r0, #1
 800f09a:	d1f2      	bne.n	800f082 <sbrk_aligned+0x22>
 800f09c:	e7ef      	b.n	800f07e <sbrk_aligned+0x1e>
 800f09e:	bf00      	nop
 800f0a0:	2000130c 	.word	0x2000130c

0800f0a4 <_malloc_r>:
 800f0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0a8:	1ccd      	adds	r5, r1, #3
 800f0aa:	f025 0503 	bic.w	r5, r5, #3
 800f0ae:	3508      	adds	r5, #8
 800f0b0:	2d0c      	cmp	r5, #12
 800f0b2:	bf38      	it	cc
 800f0b4:	250c      	movcc	r5, #12
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	db01      	blt.n	800f0c0 <_malloc_r+0x1c>
 800f0bc:	42a9      	cmp	r1, r5
 800f0be:	d904      	bls.n	800f0ca <_malloc_r+0x26>
 800f0c0:	230c      	movs	r3, #12
 800f0c2:	6033      	str	r3, [r6, #0]
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f1a0 <_malloc_r+0xfc>
 800f0ce:	f000 f87b 	bl	800f1c8 <__malloc_lock>
 800f0d2:	f8d8 3000 	ldr.w	r3, [r8]
 800f0d6:	461c      	mov	r4, r3
 800f0d8:	bb44      	cbnz	r4, 800f12c <_malloc_r+0x88>
 800f0da:	4629      	mov	r1, r5
 800f0dc:	4630      	mov	r0, r6
 800f0de:	f7ff ffbf 	bl	800f060 <sbrk_aligned>
 800f0e2:	1c43      	adds	r3, r0, #1
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	d158      	bne.n	800f19a <_malloc_r+0xf6>
 800f0e8:	f8d8 4000 	ldr.w	r4, [r8]
 800f0ec:	4627      	mov	r7, r4
 800f0ee:	2f00      	cmp	r7, #0
 800f0f0:	d143      	bne.n	800f17a <_malloc_r+0xd6>
 800f0f2:	2c00      	cmp	r4, #0
 800f0f4:	d04b      	beq.n	800f18e <_malloc_r+0xea>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	4639      	mov	r1, r7
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	eb04 0903 	add.w	r9, r4, r3
 800f100:	f000 ff06 	bl	800ff10 <_sbrk_r>
 800f104:	4581      	cmp	r9, r0
 800f106:	d142      	bne.n	800f18e <_malloc_r+0xea>
 800f108:	6821      	ldr	r1, [r4, #0]
 800f10a:	1a6d      	subs	r5, r5, r1
 800f10c:	4629      	mov	r1, r5
 800f10e:	4630      	mov	r0, r6
 800f110:	f7ff ffa6 	bl	800f060 <sbrk_aligned>
 800f114:	3001      	adds	r0, #1
 800f116:	d03a      	beq.n	800f18e <_malloc_r+0xea>
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	442b      	add	r3, r5
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	f8d8 3000 	ldr.w	r3, [r8]
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	bb62      	cbnz	r2, 800f180 <_malloc_r+0xdc>
 800f126:	f8c8 7000 	str.w	r7, [r8]
 800f12a:	e00f      	b.n	800f14c <_malloc_r+0xa8>
 800f12c:	6822      	ldr	r2, [r4, #0]
 800f12e:	1b52      	subs	r2, r2, r5
 800f130:	d420      	bmi.n	800f174 <_malloc_r+0xd0>
 800f132:	2a0b      	cmp	r2, #11
 800f134:	d917      	bls.n	800f166 <_malloc_r+0xc2>
 800f136:	1961      	adds	r1, r4, r5
 800f138:	42a3      	cmp	r3, r4
 800f13a:	6025      	str	r5, [r4, #0]
 800f13c:	bf18      	it	ne
 800f13e:	6059      	strne	r1, [r3, #4]
 800f140:	6863      	ldr	r3, [r4, #4]
 800f142:	bf08      	it	eq
 800f144:	f8c8 1000 	streq.w	r1, [r8]
 800f148:	5162      	str	r2, [r4, r5]
 800f14a:	604b      	str	r3, [r1, #4]
 800f14c:	4630      	mov	r0, r6
 800f14e:	f000 f841 	bl	800f1d4 <__malloc_unlock>
 800f152:	f104 000b 	add.w	r0, r4, #11
 800f156:	1d23      	adds	r3, r4, #4
 800f158:	f020 0007 	bic.w	r0, r0, #7
 800f15c:	1ac2      	subs	r2, r0, r3
 800f15e:	bf1c      	itt	ne
 800f160:	1a1b      	subne	r3, r3, r0
 800f162:	50a3      	strne	r3, [r4, r2]
 800f164:	e7af      	b.n	800f0c6 <_malloc_r+0x22>
 800f166:	6862      	ldr	r2, [r4, #4]
 800f168:	42a3      	cmp	r3, r4
 800f16a:	bf0c      	ite	eq
 800f16c:	f8c8 2000 	streq.w	r2, [r8]
 800f170:	605a      	strne	r2, [r3, #4]
 800f172:	e7eb      	b.n	800f14c <_malloc_r+0xa8>
 800f174:	4623      	mov	r3, r4
 800f176:	6864      	ldr	r4, [r4, #4]
 800f178:	e7ae      	b.n	800f0d8 <_malloc_r+0x34>
 800f17a:	463c      	mov	r4, r7
 800f17c:	687f      	ldr	r7, [r7, #4]
 800f17e:	e7b6      	b.n	800f0ee <_malloc_r+0x4a>
 800f180:	461a      	mov	r2, r3
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	42a3      	cmp	r3, r4
 800f186:	d1fb      	bne.n	800f180 <_malloc_r+0xdc>
 800f188:	2300      	movs	r3, #0
 800f18a:	6053      	str	r3, [r2, #4]
 800f18c:	e7de      	b.n	800f14c <_malloc_r+0xa8>
 800f18e:	230c      	movs	r3, #12
 800f190:	6033      	str	r3, [r6, #0]
 800f192:	4630      	mov	r0, r6
 800f194:	f000 f81e 	bl	800f1d4 <__malloc_unlock>
 800f198:	e794      	b.n	800f0c4 <_malloc_r+0x20>
 800f19a:	6005      	str	r5, [r0, #0]
 800f19c:	e7d6      	b.n	800f14c <_malloc_r+0xa8>
 800f19e:	bf00      	nop
 800f1a0:	20001310 	.word	0x20001310

0800f1a4 <__ascii_mbtowc>:
 800f1a4:	b082      	sub	sp, #8
 800f1a6:	b901      	cbnz	r1, 800f1aa <__ascii_mbtowc+0x6>
 800f1a8:	a901      	add	r1, sp, #4
 800f1aa:	b142      	cbz	r2, 800f1be <__ascii_mbtowc+0x1a>
 800f1ac:	b14b      	cbz	r3, 800f1c2 <__ascii_mbtowc+0x1e>
 800f1ae:	7813      	ldrb	r3, [r2, #0]
 800f1b0:	600b      	str	r3, [r1, #0]
 800f1b2:	7812      	ldrb	r2, [r2, #0]
 800f1b4:	1e10      	subs	r0, r2, #0
 800f1b6:	bf18      	it	ne
 800f1b8:	2001      	movne	r0, #1
 800f1ba:	b002      	add	sp, #8
 800f1bc:	4770      	bx	lr
 800f1be:	4610      	mov	r0, r2
 800f1c0:	e7fb      	b.n	800f1ba <__ascii_mbtowc+0x16>
 800f1c2:	f06f 0001 	mvn.w	r0, #1
 800f1c6:	e7f8      	b.n	800f1ba <__ascii_mbtowc+0x16>

0800f1c8 <__malloc_lock>:
 800f1c8:	4801      	ldr	r0, [pc, #4]	@ (800f1d0 <__malloc_lock+0x8>)
 800f1ca:	f7fe bab0 	b.w	800d72e <__retarget_lock_acquire_recursive>
 800f1ce:	bf00      	nop
 800f1d0:	20001308 	.word	0x20001308

0800f1d4 <__malloc_unlock>:
 800f1d4:	4801      	ldr	r0, [pc, #4]	@ (800f1dc <__malloc_unlock+0x8>)
 800f1d6:	f7fe baab 	b.w	800d730 <__retarget_lock_release_recursive>
 800f1da:	bf00      	nop
 800f1dc:	20001308 	.word	0x20001308

0800f1e0 <_Balloc>:
 800f1e0:	b570      	push	{r4, r5, r6, lr}
 800f1e2:	69c6      	ldr	r6, [r0, #28]
 800f1e4:	4604      	mov	r4, r0
 800f1e6:	460d      	mov	r5, r1
 800f1e8:	b976      	cbnz	r6, 800f208 <_Balloc+0x28>
 800f1ea:	2010      	movs	r0, #16
 800f1ec:	f7ff ff30 	bl	800f050 <malloc>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	61e0      	str	r0, [r4, #28]
 800f1f4:	b920      	cbnz	r0, 800f200 <_Balloc+0x20>
 800f1f6:	4b18      	ldr	r3, [pc, #96]	@ (800f258 <_Balloc+0x78>)
 800f1f8:	4818      	ldr	r0, [pc, #96]	@ (800f25c <_Balloc+0x7c>)
 800f1fa:	216b      	movs	r1, #107	@ 0x6b
 800f1fc:	f000 feaa 	bl	800ff54 <__assert_func>
 800f200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f204:	6006      	str	r6, [r0, #0]
 800f206:	60c6      	str	r6, [r0, #12]
 800f208:	69e6      	ldr	r6, [r4, #28]
 800f20a:	68f3      	ldr	r3, [r6, #12]
 800f20c:	b183      	cbz	r3, 800f230 <_Balloc+0x50>
 800f20e:	69e3      	ldr	r3, [r4, #28]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f216:	b9b8      	cbnz	r0, 800f248 <_Balloc+0x68>
 800f218:	2101      	movs	r1, #1
 800f21a:	fa01 f605 	lsl.w	r6, r1, r5
 800f21e:	1d72      	adds	r2, r6, #5
 800f220:	0092      	lsls	r2, r2, #2
 800f222:	4620      	mov	r0, r4
 800f224:	f000 feb4 	bl	800ff90 <_calloc_r>
 800f228:	b160      	cbz	r0, 800f244 <_Balloc+0x64>
 800f22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f22e:	e00e      	b.n	800f24e <_Balloc+0x6e>
 800f230:	2221      	movs	r2, #33	@ 0x21
 800f232:	2104      	movs	r1, #4
 800f234:	4620      	mov	r0, r4
 800f236:	f000 feab 	bl	800ff90 <_calloc_r>
 800f23a:	69e3      	ldr	r3, [r4, #28]
 800f23c:	60f0      	str	r0, [r6, #12]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1e4      	bne.n	800f20e <_Balloc+0x2e>
 800f244:	2000      	movs	r0, #0
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	6802      	ldr	r2, [r0, #0]
 800f24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f24e:	2300      	movs	r3, #0
 800f250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f254:	e7f7      	b.n	800f246 <_Balloc+0x66>
 800f256:	bf00      	nop
 800f258:	08010766 	.word	0x08010766
 800f25c:	08010857 	.word	0x08010857

0800f260 <_Bfree>:
 800f260:	b570      	push	{r4, r5, r6, lr}
 800f262:	69c6      	ldr	r6, [r0, #28]
 800f264:	4605      	mov	r5, r0
 800f266:	460c      	mov	r4, r1
 800f268:	b976      	cbnz	r6, 800f288 <_Bfree+0x28>
 800f26a:	2010      	movs	r0, #16
 800f26c:	f7ff fef0 	bl	800f050 <malloc>
 800f270:	4602      	mov	r2, r0
 800f272:	61e8      	str	r0, [r5, #28]
 800f274:	b920      	cbnz	r0, 800f280 <_Bfree+0x20>
 800f276:	4b09      	ldr	r3, [pc, #36]	@ (800f29c <_Bfree+0x3c>)
 800f278:	4809      	ldr	r0, [pc, #36]	@ (800f2a0 <_Bfree+0x40>)
 800f27a:	218f      	movs	r1, #143	@ 0x8f
 800f27c:	f000 fe6a 	bl	800ff54 <__assert_func>
 800f280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f284:	6006      	str	r6, [r0, #0]
 800f286:	60c6      	str	r6, [r0, #12]
 800f288:	b13c      	cbz	r4, 800f29a <_Bfree+0x3a>
 800f28a:	69eb      	ldr	r3, [r5, #28]
 800f28c:	6862      	ldr	r2, [r4, #4]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f294:	6021      	str	r1, [r4, #0]
 800f296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f29a:	bd70      	pop	{r4, r5, r6, pc}
 800f29c:	08010766 	.word	0x08010766
 800f2a0:	08010857 	.word	0x08010857

0800f2a4 <__multadd>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	690d      	ldr	r5, [r1, #16]
 800f2aa:	4607      	mov	r7, r0
 800f2ac:	460c      	mov	r4, r1
 800f2ae:	461e      	mov	r6, r3
 800f2b0:	f101 0c14 	add.w	ip, r1, #20
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f2ba:	b299      	uxth	r1, r3
 800f2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f2c0:	0c1e      	lsrs	r6, r3, #16
 800f2c2:	0c0b      	lsrs	r3, r1, #16
 800f2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f2c8:	b289      	uxth	r1, r1
 800f2ca:	3001      	adds	r0, #1
 800f2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f2d0:	4285      	cmp	r5, r0
 800f2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f2da:	dcec      	bgt.n	800f2b6 <__multadd+0x12>
 800f2dc:	b30e      	cbz	r6, 800f322 <__multadd+0x7e>
 800f2de:	68a3      	ldr	r3, [r4, #8]
 800f2e0:	42ab      	cmp	r3, r5
 800f2e2:	dc19      	bgt.n	800f318 <__multadd+0x74>
 800f2e4:	6861      	ldr	r1, [r4, #4]
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	3101      	adds	r1, #1
 800f2ea:	f7ff ff79 	bl	800f1e0 <_Balloc>
 800f2ee:	4680      	mov	r8, r0
 800f2f0:	b928      	cbnz	r0, 800f2fe <__multadd+0x5a>
 800f2f2:	4602      	mov	r2, r0
 800f2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800f328 <__multadd+0x84>)
 800f2f6:	480d      	ldr	r0, [pc, #52]	@ (800f32c <__multadd+0x88>)
 800f2f8:	21ba      	movs	r1, #186	@ 0xba
 800f2fa:	f000 fe2b 	bl	800ff54 <__assert_func>
 800f2fe:	6922      	ldr	r2, [r4, #16]
 800f300:	3202      	adds	r2, #2
 800f302:	f104 010c 	add.w	r1, r4, #12
 800f306:	0092      	lsls	r2, r2, #2
 800f308:	300c      	adds	r0, #12
 800f30a:	f7fe fa12 	bl	800d732 <memcpy>
 800f30e:	4621      	mov	r1, r4
 800f310:	4638      	mov	r0, r7
 800f312:	f7ff ffa5 	bl	800f260 <_Bfree>
 800f316:	4644      	mov	r4, r8
 800f318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f31c:	3501      	adds	r5, #1
 800f31e:	615e      	str	r6, [r3, #20]
 800f320:	6125      	str	r5, [r4, #16]
 800f322:	4620      	mov	r0, r4
 800f324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f328:	080107d5 	.word	0x080107d5
 800f32c:	08010857 	.word	0x08010857

0800f330 <__s2b>:
 800f330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f334:	460c      	mov	r4, r1
 800f336:	4615      	mov	r5, r2
 800f338:	461f      	mov	r7, r3
 800f33a:	2209      	movs	r2, #9
 800f33c:	3308      	adds	r3, #8
 800f33e:	4606      	mov	r6, r0
 800f340:	fb93 f3f2 	sdiv	r3, r3, r2
 800f344:	2100      	movs	r1, #0
 800f346:	2201      	movs	r2, #1
 800f348:	429a      	cmp	r2, r3
 800f34a:	db09      	blt.n	800f360 <__s2b+0x30>
 800f34c:	4630      	mov	r0, r6
 800f34e:	f7ff ff47 	bl	800f1e0 <_Balloc>
 800f352:	b940      	cbnz	r0, 800f366 <__s2b+0x36>
 800f354:	4602      	mov	r2, r0
 800f356:	4b19      	ldr	r3, [pc, #100]	@ (800f3bc <__s2b+0x8c>)
 800f358:	4819      	ldr	r0, [pc, #100]	@ (800f3c0 <__s2b+0x90>)
 800f35a:	21d3      	movs	r1, #211	@ 0xd3
 800f35c:	f000 fdfa 	bl	800ff54 <__assert_func>
 800f360:	0052      	lsls	r2, r2, #1
 800f362:	3101      	adds	r1, #1
 800f364:	e7f0      	b.n	800f348 <__s2b+0x18>
 800f366:	9b08      	ldr	r3, [sp, #32]
 800f368:	6143      	str	r3, [r0, #20]
 800f36a:	2d09      	cmp	r5, #9
 800f36c:	f04f 0301 	mov.w	r3, #1
 800f370:	6103      	str	r3, [r0, #16]
 800f372:	dd16      	ble.n	800f3a2 <__s2b+0x72>
 800f374:	f104 0909 	add.w	r9, r4, #9
 800f378:	46c8      	mov	r8, r9
 800f37a:	442c      	add	r4, r5
 800f37c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f380:	4601      	mov	r1, r0
 800f382:	3b30      	subs	r3, #48	@ 0x30
 800f384:	220a      	movs	r2, #10
 800f386:	4630      	mov	r0, r6
 800f388:	f7ff ff8c 	bl	800f2a4 <__multadd>
 800f38c:	45a0      	cmp	r8, r4
 800f38e:	d1f5      	bne.n	800f37c <__s2b+0x4c>
 800f390:	f1a5 0408 	sub.w	r4, r5, #8
 800f394:	444c      	add	r4, r9
 800f396:	1b2d      	subs	r5, r5, r4
 800f398:	1963      	adds	r3, r4, r5
 800f39a:	42bb      	cmp	r3, r7
 800f39c:	db04      	blt.n	800f3a8 <__s2b+0x78>
 800f39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3a2:	340a      	adds	r4, #10
 800f3a4:	2509      	movs	r5, #9
 800f3a6:	e7f6      	b.n	800f396 <__s2b+0x66>
 800f3a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f3ac:	4601      	mov	r1, r0
 800f3ae:	3b30      	subs	r3, #48	@ 0x30
 800f3b0:	220a      	movs	r2, #10
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	f7ff ff76 	bl	800f2a4 <__multadd>
 800f3b8:	e7ee      	b.n	800f398 <__s2b+0x68>
 800f3ba:	bf00      	nop
 800f3bc:	080107d5 	.word	0x080107d5
 800f3c0:	08010857 	.word	0x08010857

0800f3c4 <__hi0bits>:
 800f3c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	bf36      	itet	cc
 800f3cc:	0403      	lslcc	r3, r0, #16
 800f3ce:	2000      	movcs	r0, #0
 800f3d0:	2010      	movcc	r0, #16
 800f3d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f3d6:	bf3c      	itt	cc
 800f3d8:	021b      	lslcc	r3, r3, #8
 800f3da:	3008      	addcc	r0, #8
 800f3dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3e0:	bf3c      	itt	cc
 800f3e2:	011b      	lslcc	r3, r3, #4
 800f3e4:	3004      	addcc	r0, #4
 800f3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3ea:	bf3c      	itt	cc
 800f3ec:	009b      	lslcc	r3, r3, #2
 800f3ee:	3002      	addcc	r0, #2
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	db05      	blt.n	800f400 <__hi0bits+0x3c>
 800f3f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f3f8:	f100 0001 	add.w	r0, r0, #1
 800f3fc:	bf08      	it	eq
 800f3fe:	2020      	moveq	r0, #32
 800f400:	4770      	bx	lr

0800f402 <__lo0bits>:
 800f402:	6803      	ldr	r3, [r0, #0]
 800f404:	4602      	mov	r2, r0
 800f406:	f013 0007 	ands.w	r0, r3, #7
 800f40a:	d00b      	beq.n	800f424 <__lo0bits+0x22>
 800f40c:	07d9      	lsls	r1, r3, #31
 800f40e:	d421      	bmi.n	800f454 <__lo0bits+0x52>
 800f410:	0798      	lsls	r0, r3, #30
 800f412:	bf49      	itett	mi
 800f414:	085b      	lsrmi	r3, r3, #1
 800f416:	089b      	lsrpl	r3, r3, #2
 800f418:	2001      	movmi	r0, #1
 800f41a:	6013      	strmi	r3, [r2, #0]
 800f41c:	bf5c      	itt	pl
 800f41e:	6013      	strpl	r3, [r2, #0]
 800f420:	2002      	movpl	r0, #2
 800f422:	4770      	bx	lr
 800f424:	b299      	uxth	r1, r3
 800f426:	b909      	cbnz	r1, 800f42c <__lo0bits+0x2a>
 800f428:	0c1b      	lsrs	r3, r3, #16
 800f42a:	2010      	movs	r0, #16
 800f42c:	b2d9      	uxtb	r1, r3
 800f42e:	b909      	cbnz	r1, 800f434 <__lo0bits+0x32>
 800f430:	3008      	adds	r0, #8
 800f432:	0a1b      	lsrs	r3, r3, #8
 800f434:	0719      	lsls	r1, r3, #28
 800f436:	bf04      	itt	eq
 800f438:	091b      	lsreq	r3, r3, #4
 800f43a:	3004      	addeq	r0, #4
 800f43c:	0799      	lsls	r1, r3, #30
 800f43e:	bf04      	itt	eq
 800f440:	089b      	lsreq	r3, r3, #2
 800f442:	3002      	addeq	r0, #2
 800f444:	07d9      	lsls	r1, r3, #31
 800f446:	d403      	bmi.n	800f450 <__lo0bits+0x4e>
 800f448:	085b      	lsrs	r3, r3, #1
 800f44a:	f100 0001 	add.w	r0, r0, #1
 800f44e:	d003      	beq.n	800f458 <__lo0bits+0x56>
 800f450:	6013      	str	r3, [r2, #0]
 800f452:	4770      	bx	lr
 800f454:	2000      	movs	r0, #0
 800f456:	4770      	bx	lr
 800f458:	2020      	movs	r0, #32
 800f45a:	4770      	bx	lr

0800f45c <__i2b>:
 800f45c:	b510      	push	{r4, lr}
 800f45e:	460c      	mov	r4, r1
 800f460:	2101      	movs	r1, #1
 800f462:	f7ff febd 	bl	800f1e0 <_Balloc>
 800f466:	4602      	mov	r2, r0
 800f468:	b928      	cbnz	r0, 800f476 <__i2b+0x1a>
 800f46a:	4b05      	ldr	r3, [pc, #20]	@ (800f480 <__i2b+0x24>)
 800f46c:	4805      	ldr	r0, [pc, #20]	@ (800f484 <__i2b+0x28>)
 800f46e:	f240 1145 	movw	r1, #325	@ 0x145
 800f472:	f000 fd6f 	bl	800ff54 <__assert_func>
 800f476:	2301      	movs	r3, #1
 800f478:	6144      	str	r4, [r0, #20]
 800f47a:	6103      	str	r3, [r0, #16]
 800f47c:	bd10      	pop	{r4, pc}
 800f47e:	bf00      	nop
 800f480:	080107d5 	.word	0x080107d5
 800f484:	08010857 	.word	0x08010857

0800f488 <__multiply>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	4614      	mov	r4, r2
 800f48e:	690a      	ldr	r2, [r1, #16]
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	429a      	cmp	r2, r3
 800f494:	bfa8      	it	ge
 800f496:	4623      	movge	r3, r4
 800f498:	460f      	mov	r7, r1
 800f49a:	bfa4      	itt	ge
 800f49c:	460c      	movge	r4, r1
 800f49e:	461f      	movge	r7, r3
 800f4a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f4a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	6861      	ldr	r1, [r4, #4]
 800f4ac:	eb0a 0609 	add.w	r6, sl, r9
 800f4b0:	42b3      	cmp	r3, r6
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	bfb8      	it	lt
 800f4b6:	3101      	addlt	r1, #1
 800f4b8:	f7ff fe92 	bl	800f1e0 <_Balloc>
 800f4bc:	b930      	cbnz	r0, 800f4cc <__multiply+0x44>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	4b44      	ldr	r3, [pc, #272]	@ (800f5d4 <__multiply+0x14c>)
 800f4c2:	4845      	ldr	r0, [pc, #276]	@ (800f5d8 <__multiply+0x150>)
 800f4c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f4c8:	f000 fd44 	bl	800ff54 <__assert_func>
 800f4cc:	f100 0514 	add.w	r5, r0, #20
 800f4d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	4543      	cmp	r3, r8
 800f4da:	d321      	bcc.n	800f520 <__multiply+0x98>
 800f4dc:	f107 0114 	add.w	r1, r7, #20
 800f4e0:	f104 0214 	add.w	r2, r4, #20
 800f4e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f4e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f4ec:	9302      	str	r3, [sp, #8]
 800f4ee:	1b13      	subs	r3, r2, r4
 800f4f0:	3b15      	subs	r3, #21
 800f4f2:	f023 0303 	bic.w	r3, r3, #3
 800f4f6:	3304      	adds	r3, #4
 800f4f8:	f104 0715 	add.w	r7, r4, #21
 800f4fc:	42ba      	cmp	r2, r7
 800f4fe:	bf38      	it	cc
 800f500:	2304      	movcc	r3, #4
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	9b02      	ldr	r3, [sp, #8]
 800f506:	9103      	str	r1, [sp, #12]
 800f508:	428b      	cmp	r3, r1
 800f50a:	d80c      	bhi.n	800f526 <__multiply+0x9e>
 800f50c:	2e00      	cmp	r6, #0
 800f50e:	dd03      	ble.n	800f518 <__multiply+0x90>
 800f510:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f514:	2b00      	cmp	r3, #0
 800f516:	d05b      	beq.n	800f5d0 <__multiply+0x148>
 800f518:	6106      	str	r6, [r0, #16]
 800f51a:	b005      	add	sp, #20
 800f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f520:	f843 2b04 	str.w	r2, [r3], #4
 800f524:	e7d8      	b.n	800f4d8 <__multiply+0x50>
 800f526:	f8b1 a000 	ldrh.w	sl, [r1]
 800f52a:	f1ba 0f00 	cmp.w	sl, #0
 800f52e:	d024      	beq.n	800f57a <__multiply+0xf2>
 800f530:	f104 0e14 	add.w	lr, r4, #20
 800f534:	46a9      	mov	r9, r5
 800f536:	f04f 0c00 	mov.w	ip, #0
 800f53a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f53e:	f8d9 3000 	ldr.w	r3, [r9]
 800f542:	fa1f fb87 	uxth.w	fp, r7
 800f546:	b29b      	uxth	r3, r3
 800f548:	fb0a 330b 	mla	r3, sl, fp, r3
 800f54c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f550:	f8d9 7000 	ldr.w	r7, [r9]
 800f554:	4463      	add	r3, ip
 800f556:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f55a:	fb0a c70b 	mla	r7, sl, fp, ip
 800f55e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f562:	b29b      	uxth	r3, r3
 800f564:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f568:	4572      	cmp	r2, lr
 800f56a:	f849 3b04 	str.w	r3, [r9], #4
 800f56e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f572:	d8e2      	bhi.n	800f53a <__multiply+0xb2>
 800f574:	9b01      	ldr	r3, [sp, #4]
 800f576:	f845 c003 	str.w	ip, [r5, r3]
 800f57a:	9b03      	ldr	r3, [sp, #12]
 800f57c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f580:	3104      	adds	r1, #4
 800f582:	f1b9 0f00 	cmp.w	r9, #0
 800f586:	d021      	beq.n	800f5cc <__multiply+0x144>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	f104 0c14 	add.w	ip, r4, #20
 800f58e:	46ae      	mov	lr, r5
 800f590:	f04f 0a00 	mov.w	sl, #0
 800f594:	f8bc b000 	ldrh.w	fp, [ip]
 800f598:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f59c:	fb09 770b 	mla	r7, r9, fp, r7
 800f5a0:	4457      	add	r7, sl
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f5a8:	f84e 3b04 	str.w	r3, [lr], #4
 800f5ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f5b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5b4:	f8be 3000 	ldrh.w	r3, [lr]
 800f5b8:	fb09 330a 	mla	r3, r9, sl, r3
 800f5bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f5c0:	4562      	cmp	r2, ip
 800f5c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f5c6:	d8e5      	bhi.n	800f594 <__multiply+0x10c>
 800f5c8:	9f01      	ldr	r7, [sp, #4]
 800f5ca:	51eb      	str	r3, [r5, r7]
 800f5cc:	3504      	adds	r5, #4
 800f5ce:	e799      	b.n	800f504 <__multiply+0x7c>
 800f5d0:	3e01      	subs	r6, #1
 800f5d2:	e79b      	b.n	800f50c <__multiply+0x84>
 800f5d4:	080107d5 	.word	0x080107d5
 800f5d8:	08010857 	.word	0x08010857

0800f5dc <__pow5mult>:
 800f5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e0:	4615      	mov	r5, r2
 800f5e2:	f012 0203 	ands.w	r2, r2, #3
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	d007      	beq.n	800f5fc <__pow5mult+0x20>
 800f5ec:	4c25      	ldr	r4, [pc, #148]	@ (800f684 <__pow5mult+0xa8>)
 800f5ee:	3a01      	subs	r2, #1
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5f6:	f7ff fe55 	bl	800f2a4 <__multadd>
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	10ad      	asrs	r5, r5, #2
 800f5fe:	d03d      	beq.n	800f67c <__pow5mult+0xa0>
 800f600:	69fc      	ldr	r4, [r7, #28]
 800f602:	b97c      	cbnz	r4, 800f624 <__pow5mult+0x48>
 800f604:	2010      	movs	r0, #16
 800f606:	f7ff fd23 	bl	800f050 <malloc>
 800f60a:	4602      	mov	r2, r0
 800f60c:	61f8      	str	r0, [r7, #28]
 800f60e:	b928      	cbnz	r0, 800f61c <__pow5mult+0x40>
 800f610:	4b1d      	ldr	r3, [pc, #116]	@ (800f688 <__pow5mult+0xac>)
 800f612:	481e      	ldr	r0, [pc, #120]	@ (800f68c <__pow5mult+0xb0>)
 800f614:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f618:	f000 fc9c 	bl	800ff54 <__assert_func>
 800f61c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f620:	6004      	str	r4, [r0, #0]
 800f622:	60c4      	str	r4, [r0, #12]
 800f624:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f62c:	b94c      	cbnz	r4, 800f642 <__pow5mult+0x66>
 800f62e:	f240 2171 	movw	r1, #625	@ 0x271
 800f632:	4638      	mov	r0, r7
 800f634:	f7ff ff12 	bl	800f45c <__i2b>
 800f638:	2300      	movs	r3, #0
 800f63a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f63e:	4604      	mov	r4, r0
 800f640:	6003      	str	r3, [r0, #0]
 800f642:	f04f 0900 	mov.w	r9, #0
 800f646:	07eb      	lsls	r3, r5, #31
 800f648:	d50a      	bpl.n	800f660 <__pow5mult+0x84>
 800f64a:	4631      	mov	r1, r6
 800f64c:	4622      	mov	r2, r4
 800f64e:	4638      	mov	r0, r7
 800f650:	f7ff ff1a 	bl	800f488 <__multiply>
 800f654:	4631      	mov	r1, r6
 800f656:	4680      	mov	r8, r0
 800f658:	4638      	mov	r0, r7
 800f65a:	f7ff fe01 	bl	800f260 <_Bfree>
 800f65e:	4646      	mov	r6, r8
 800f660:	106d      	asrs	r5, r5, #1
 800f662:	d00b      	beq.n	800f67c <__pow5mult+0xa0>
 800f664:	6820      	ldr	r0, [r4, #0]
 800f666:	b938      	cbnz	r0, 800f678 <__pow5mult+0x9c>
 800f668:	4622      	mov	r2, r4
 800f66a:	4621      	mov	r1, r4
 800f66c:	4638      	mov	r0, r7
 800f66e:	f7ff ff0b 	bl	800f488 <__multiply>
 800f672:	6020      	str	r0, [r4, #0]
 800f674:	f8c0 9000 	str.w	r9, [r0]
 800f678:	4604      	mov	r4, r0
 800f67a:	e7e4      	b.n	800f646 <__pow5mult+0x6a>
 800f67c:	4630      	mov	r0, r6
 800f67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f682:	bf00      	nop
 800f684:	080108b0 	.word	0x080108b0
 800f688:	08010766 	.word	0x08010766
 800f68c:	08010857 	.word	0x08010857

0800f690 <__lshift>:
 800f690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f694:	460c      	mov	r4, r1
 800f696:	6849      	ldr	r1, [r1, #4]
 800f698:	6923      	ldr	r3, [r4, #16]
 800f69a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f69e:	68a3      	ldr	r3, [r4, #8]
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	4691      	mov	r9, r2
 800f6a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6a8:	f108 0601 	add.w	r6, r8, #1
 800f6ac:	42b3      	cmp	r3, r6
 800f6ae:	db0b      	blt.n	800f6c8 <__lshift+0x38>
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f7ff fd95 	bl	800f1e0 <_Balloc>
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	b948      	cbnz	r0, 800f6ce <__lshift+0x3e>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	4b28      	ldr	r3, [pc, #160]	@ (800f760 <__lshift+0xd0>)
 800f6be:	4829      	ldr	r0, [pc, #164]	@ (800f764 <__lshift+0xd4>)
 800f6c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f6c4:	f000 fc46 	bl	800ff54 <__assert_func>
 800f6c8:	3101      	adds	r1, #1
 800f6ca:	005b      	lsls	r3, r3, #1
 800f6cc:	e7ee      	b.n	800f6ac <__lshift+0x1c>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f100 0114 	add.w	r1, r0, #20
 800f6d4:	f100 0210 	add.w	r2, r0, #16
 800f6d8:	4618      	mov	r0, r3
 800f6da:	4553      	cmp	r3, sl
 800f6dc:	db33      	blt.n	800f746 <__lshift+0xb6>
 800f6de:	6920      	ldr	r0, [r4, #16]
 800f6e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6e4:	f104 0314 	add.w	r3, r4, #20
 800f6e8:	f019 091f 	ands.w	r9, r9, #31
 800f6ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6f4:	d02b      	beq.n	800f74e <__lshift+0xbe>
 800f6f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f6fa:	468a      	mov	sl, r1
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	fa00 f009 	lsl.w	r0, r0, r9
 800f704:	4310      	orrs	r0, r2
 800f706:	f84a 0b04 	str.w	r0, [sl], #4
 800f70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f70e:	459c      	cmp	ip, r3
 800f710:	fa22 f20e 	lsr.w	r2, r2, lr
 800f714:	d8f3      	bhi.n	800f6fe <__lshift+0x6e>
 800f716:	ebac 0304 	sub.w	r3, ip, r4
 800f71a:	3b15      	subs	r3, #21
 800f71c:	f023 0303 	bic.w	r3, r3, #3
 800f720:	3304      	adds	r3, #4
 800f722:	f104 0015 	add.w	r0, r4, #21
 800f726:	4584      	cmp	ip, r0
 800f728:	bf38      	it	cc
 800f72a:	2304      	movcc	r3, #4
 800f72c:	50ca      	str	r2, [r1, r3]
 800f72e:	b10a      	cbz	r2, 800f734 <__lshift+0xa4>
 800f730:	f108 0602 	add.w	r6, r8, #2
 800f734:	3e01      	subs	r6, #1
 800f736:	4638      	mov	r0, r7
 800f738:	612e      	str	r6, [r5, #16]
 800f73a:	4621      	mov	r1, r4
 800f73c:	f7ff fd90 	bl	800f260 <_Bfree>
 800f740:	4628      	mov	r0, r5
 800f742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f746:	f842 0f04 	str.w	r0, [r2, #4]!
 800f74a:	3301      	adds	r3, #1
 800f74c:	e7c5      	b.n	800f6da <__lshift+0x4a>
 800f74e:	3904      	subs	r1, #4
 800f750:	f853 2b04 	ldr.w	r2, [r3], #4
 800f754:	f841 2f04 	str.w	r2, [r1, #4]!
 800f758:	459c      	cmp	ip, r3
 800f75a:	d8f9      	bhi.n	800f750 <__lshift+0xc0>
 800f75c:	e7ea      	b.n	800f734 <__lshift+0xa4>
 800f75e:	bf00      	nop
 800f760:	080107d5 	.word	0x080107d5
 800f764:	08010857 	.word	0x08010857

0800f768 <__mcmp>:
 800f768:	690a      	ldr	r2, [r1, #16]
 800f76a:	4603      	mov	r3, r0
 800f76c:	6900      	ldr	r0, [r0, #16]
 800f76e:	1a80      	subs	r0, r0, r2
 800f770:	b530      	push	{r4, r5, lr}
 800f772:	d10e      	bne.n	800f792 <__mcmp+0x2a>
 800f774:	3314      	adds	r3, #20
 800f776:	3114      	adds	r1, #20
 800f778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f77c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f788:	4295      	cmp	r5, r2
 800f78a:	d003      	beq.n	800f794 <__mcmp+0x2c>
 800f78c:	d205      	bcs.n	800f79a <__mcmp+0x32>
 800f78e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f792:	bd30      	pop	{r4, r5, pc}
 800f794:	42a3      	cmp	r3, r4
 800f796:	d3f3      	bcc.n	800f780 <__mcmp+0x18>
 800f798:	e7fb      	b.n	800f792 <__mcmp+0x2a>
 800f79a:	2001      	movs	r0, #1
 800f79c:	e7f9      	b.n	800f792 <__mcmp+0x2a>
	...

0800f7a0 <__mdiff>:
 800f7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	4689      	mov	r9, r1
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4648      	mov	r0, r9
 800f7ac:	4614      	mov	r4, r2
 800f7ae:	f7ff ffdb 	bl	800f768 <__mcmp>
 800f7b2:	1e05      	subs	r5, r0, #0
 800f7b4:	d112      	bne.n	800f7dc <__mdiff+0x3c>
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7ff fd11 	bl	800f1e0 <_Balloc>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	b928      	cbnz	r0, 800f7ce <__mdiff+0x2e>
 800f7c2:	4b3f      	ldr	r3, [pc, #252]	@ (800f8c0 <__mdiff+0x120>)
 800f7c4:	f240 2137 	movw	r1, #567	@ 0x237
 800f7c8:	483e      	ldr	r0, [pc, #248]	@ (800f8c4 <__mdiff+0x124>)
 800f7ca:	f000 fbc3 	bl	800ff54 <__assert_func>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	b003      	add	sp, #12
 800f7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7dc:	bfbc      	itt	lt
 800f7de:	464b      	movlt	r3, r9
 800f7e0:	46a1      	movlt	r9, r4
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f7e8:	bfba      	itte	lt
 800f7ea:	461c      	movlt	r4, r3
 800f7ec:	2501      	movlt	r5, #1
 800f7ee:	2500      	movge	r5, #0
 800f7f0:	f7ff fcf6 	bl	800f1e0 <_Balloc>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	b918      	cbnz	r0, 800f800 <__mdiff+0x60>
 800f7f8:	4b31      	ldr	r3, [pc, #196]	@ (800f8c0 <__mdiff+0x120>)
 800f7fa:	f240 2145 	movw	r1, #581	@ 0x245
 800f7fe:	e7e3      	b.n	800f7c8 <__mdiff+0x28>
 800f800:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f804:	6926      	ldr	r6, [r4, #16]
 800f806:	60c5      	str	r5, [r0, #12]
 800f808:	f109 0310 	add.w	r3, r9, #16
 800f80c:	f109 0514 	add.w	r5, r9, #20
 800f810:	f104 0e14 	add.w	lr, r4, #20
 800f814:	f100 0b14 	add.w	fp, r0, #20
 800f818:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f81c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f820:	9301      	str	r3, [sp, #4]
 800f822:	46d9      	mov	r9, fp
 800f824:	f04f 0c00 	mov.w	ip, #0
 800f828:	9b01      	ldr	r3, [sp, #4]
 800f82a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f82e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	fa1f f38a 	uxth.w	r3, sl
 800f838:	4619      	mov	r1, r3
 800f83a:	b283      	uxth	r3, r0
 800f83c:	1acb      	subs	r3, r1, r3
 800f83e:	0c00      	lsrs	r0, r0, #16
 800f840:	4463      	add	r3, ip
 800f842:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f846:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f850:	4576      	cmp	r6, lr
 800f852:	f849 3b04 	str.w	r3, [r9], #4
 800f856:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f85a:	d8e5      	bhi.n	800f828 <__mdiff+0x88>
 800f85c:	1b33      	subs	r3, r6, r4
 800f85e:	3b15      	subs	r3, #21
 800f860:	f023 0303 	bic.w	r3, r3, #3
 800f864:	3415      	adds	r4, #21
 800f866:	3304      	adds	r3, #4
 800f868:	42a6      	cmp	r6, r4
 800f86a:	bf38      	it	cc
 800f86c:	2304      	movcc	r3, #4
 800f86e:	441d      	add	r5, r3
 800f870:	445b      	add	r3, fp
 800f872:	461e      	mov	r6, r3
 800f874:	462c      	mov	r4, r5
 800f876:	4544      	cmp	r4, r8
 800f878:	d30e      	bcc.n	800f898 <__mdiff+0xf8>
 800f87a:	f108 0103 	add.w	r1, r8, #3
 800f87e:	1b49      	subs	r1, r1, r5
 800f880:	f021 0103 	bic.w	r1, r1, #3
 800f884:	3d03      	subs	r5, #3
 800f886:	45a8      	cmp	r8, r5
 800f888:	bf38      	it	cc
 800f88a:	2100      	movcc	r1, #0
 800f88c:	440b      	add	r3, r1
 800f88e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f892:	b191      	cbz	r1, 800f8ba <__mdiff+0x11a>
 800f894:	6117      	str	r7, [r2, #16]
 800f896:	e79d      	b.n	800f7d4 <__mdiff+0x34>
 800f898:	f854 1b04 	ldr.w	r1, [r4], #4
 800f89c:	46e6      	mov	lr, ip
 800f89e:	0c08      	lsrs	r0, r1, #16
 800f8a0:	fa1c fc81 	uxtah	ip, ip, r1
 800f8a4:	4471      	add	r1, lr
 800f8a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f8aa:	b289      	uxth	r1, r1
 800f8ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f8b0:	f846 1b04 	str.w	r1, [r6], #4
 800f8b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8b8:	e7dd      	b.n	800f876 <__mdiff+0xd6>
 800f8ba:	3f01      	subs	r7, #1
 800f8bc:	e7e7      	b.n	800f88e <__mdiff+0xee>
 800f8be:	bf00      	nop
 800f8c0:	080107d5 	.word	0x080107d5
 800f8c4:	08010857 	.word	0x08010857

0800f8c8 <__ulp>:
 800f8c8:	b082      	sub	sp, #8
 800f8ca:	ed8d 0b00 	vstr	d0, [sp]
 800f8ce:	9a01      	ldr	r2, [sp, #4]
 800f8d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f910 <__ulp+0x48>)
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	dc08      	bgt.n	800f8ee <__ulp+0x26>
 800f8dc:	425b      	negs	r3, r3
 800f8de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f8e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f8e6:	da04      	bge.n	800f8f2 <__ulp+0x2a>
 800f8e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f8ec:	4113      	asrs	r3, r2
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	e008      	b.n	800f904 <__ulp+0x3c>
 800f8f2:	f1a2 0314 	sub.w	r3, r2, #20
 800f8f6:	2b1e      	cmp	r3, #30
 800f8f8:	bfda      	itte	le
 800f8fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f8fe:	40da      	lsrle	r2, r3
 800f900:	2201      	movgt	r2, #1
 800f902:	2300      	movs	r3, #0
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	ec41 0b10 	vmov	d0, r0, r1
 800f90c:	b002      	add	sp, #8
 800f90e:	4770      	bx	lr
 800f910:	7ff00000 	.word	0x7ff00000

0800f914 <__b2d>:
 800f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f918:	6906      	ldr	r6, [r0, #16]
 800f91a:	f100 0814 	add.w	r8, r0, #20
 800f91e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f922:	1f37      	subs	r7, r6, #4
 800f924:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f928:	4610      	mov	r0, r2
 800f92a:	f7ff fd4b 	bl	800f3c4 <__hi0bits>
 800f92e:	f1c0 0320 	rsb	r3, r0, #32
 800f932:	280a      	cmp	r0, #10
 800f934:	600b      	str	r3, [r1, #0]
 800f936:	491b      	ldr	r1, [pc, #108]	@ (800f9a4 <__b2d+0x90>)
 800f938:	dc15      	bgt.n	800f966 <__b2d+0x52>
 800f93a:	f1c0 0c0b 	rsb	ip, r0, #11
 800f93e:	fa22 f30c 	lsr.w	r3, r2, ip
 800f942:	45b8      	cmp	r8, r7
 800f944:	ea43 0501 	orr.w	r5, r3, r1
 800f948:	bf34      	ite	cc
 800f94a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f94e:	2300      	movcs	r3, #0
 800f950:	3015      	adds	r0, #21
 800f952:	fa02 f000 	lsl.w	r0, r2, r0
 800f956:	fa23 f30c 	lsr.w	r3, r3, ip
 800f95a:	4303      	orrs	r3, r0
 800f95c:	461c      	mov	r4, r3
 800f95e:	ec45 4b10 	vmov	d0, r4, r5
 800f962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f966:	45b8      	cmp	r8, r7
 800f968:	bf3a      	itte	cc
 800f96a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f96e:	f1a6 0708 	subcc.w	r7, r6, #8
 800f972:	2300      	movcs	r3, #0
 800f974:	380b      	subs	r0, #11
 800f976:	d012      	beq.n	800f99e <__b2d+0x8a>
 800f978:	f1c0 0120 	rsb	r1, r0, #32
 800f97c:	fa23 f401 	lsr.w	r4, r3, r1
 800f980:	4082      	lsls	r2, r0
 800f982:	4322      	orrs	r2, r4
 800f984:	4547      	cmp	r7, r8
 800f986:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f98a:	bf8c      	ite	hi
 800f98c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f990:	2200      	movls	r2, #0
 800f992:	4083      	lsls	r3, r0
 800f994:	40ca      	lsrs	r2, r1
 800f996:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f99a:	4313      	orrs	r3, r2
 800f99c:	e7de      	b.n	800f95c <__b2d+0x48>
 800f99e:	ea42 0501 	orr.w	r5, r2, r1
 800f9a2:	e7db      	b.n	800f95c <__b2d+0x48>
 800f9a4:	3ff00000 	.word	0x3ff00000

0800f9a8 <__d2b>:
 800f9a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9ac:	460f      	mov	r7, r1
 800f9ae:	2101      	movs	r1, #1
 800f9b0:	ec59 8b10 	vmov	r8, r9, d0
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	f7ff fc13 	bl	800f1e0 <_Balloc>
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	b930      	cbnz	r0, 800f9cc <__d2b+0x24>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	4b23      	ldr	r3, [pc, #140]	@ (800fa50 <__d2b+0xa8>)
 800f9c2:	4824      	ldr	r0, [pc, #144]	@ (800fa54 <__d2b+0xac>)
 800f9c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800f9c8:	f000 fac4 	bl	800ff54 <__assert_func>
 800f9cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f9d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f9d4:	b10d      	cbz	r5, 800f9da <__d2b+0x32>
 800f9d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f9da:	9301      	str	r3, [sp, #4]
 800f9dc:	f1b8 0300 	subs.w	r3, r8, #0
 800f9e0:	d023      	beq.n	800fa2a <__d2b+0x82>
 800f9e2:	4668      	mov	r0, sp
 800f9e4:	9300      	str	r3, [sp, #0]
 800f9e6:	f7ff fd0c 	bl	800f402 <__lo0bits>
 800f9ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f9ee:	b1d0      	cbz	r0, 800fa26 <__d2b+0x7e>
 800f9f0:	f1c0 0320 	rsb	r3, r0, #32
 800f9f4:	fa02 f303 	lsl.w	r3, r2, r3
 800f9f8:	430b      	orrs	r3, r1
 800f9fa:	40c2      	lsrs	r2, r0
 800f9fc:	6163      	str	r3, [r4, #20]
 800f9fe:	9201      	str	r2, [sp, #4]
 800fa00:	9b01      	ldr	r3, [sp, #4]
 800fa02:	61a3      	str	r3, [r4, #24]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf0c      	ite	eq
 800fa08:	2201      	moveq	r2, #1
 800fa0a:	2202      	movne	r2, #2
 800fa0c:	6122      	str	r2, [r4, #16]
 800fa0e:	b1a5      	cbz	r5, 800fa3a <__d2b+0x92>
 800fa10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fa14:	4405      	add	r5, r0
 800fa16:	603d      	str	r5, [r7, #0]
 800fa18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fa1c:	6030      	str	r0, [r6, #0]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	b003      	add	sp, #12
 800fa22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa26:	6161      	str	r1, [r4, #20]
 800fa28:	e7ea      	b.n	800fa00 <__d2b+0x58>
 800fa2a:	a801      	add	r0, sp, #4
 800fa2c:	f7ff fce9 	bl	800f402 <__lo0bits>
 800fa30:	9b01      	ldr	r3, [sp, #4]
 800fa32:	6163      	str	r3, [r4, #20]
 800fa34:	3020      	adds	r0, #32
 800fa36:	2201      	movs	r2, #1
 800fa38:	e7e8      	b.n	800fa0c <__d2b+0x64>
 800fa3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fa42:	6038      	str	r0, [r7, #0]
 800fa44:	6918      	ldr	r0, [r3, #16]
 800fa46:	f7ff fcbd 	bl	800f3c4 <__hi0bits>
 800fa4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa4e:	e7e5      	b.n	800fa1c <__d2b+0x74>
 800fa50:	080107d5 	.word	0x080107d5
 800fa54:	08010857 	.word	0x08010857

0800fa58 <__ratio>:
 800fa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa5c:	b085      	sub	sp, #20
 800fa5e:	e9cd 1000 	strd	r1, r0, [sp]
 800fa62:	a902      	add	r1, sp, #8
 800fa64:	f7ff ff56 	bl	800f914 <__b2d>
 800fa68:	9800      	ldr	r0, [sp, #0]
 800fa6a:	a903      	add	r1, sp, #12
 800fa6c:	ec55 4b10 	vmov	r4, r5, d0
 800fa70:	f7ff ff50 	bl	800f914 <__b2d>
 800fa74:	9b01      	ldr	r3, [sp, #4]
 800fa76:	6919      	ldr	r1, [r3, #16]
 800fa78:	9b00      	ldr	r3, [sp, #0]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	1ac9      	subs	r1, r1, r3
 800fa7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fa82:	1a9b      	subs	r3, r3, r2
 800fa84:	ec5b ab10 	vmov	sl, fp, d0
 800fa88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bfce      	itee	gt
 800fa90:	462a      	movgt	r2, r5
 800fa92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa96:	465a      	movle	r2, fp
 800fa98:	462f      	mov	r7, r5
 800fa9a:	46d9      	mov	r9, fp
 800fa9c:	bfcc      	ite	gt
 800fa9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800faa2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800faa6:	464b      	mov	r3, r9
 800faa8:	4652      	mov	r2, sl
 800faaa:	4620      	mov	r0, r4
 800faac:	4639      	mov	r1, r7
 800faae:	f7f0 fed5 	bl	800085c <__aeabi_ddiv>
 800fab2:	ec41 0b10 	vmov	d0, r0, r1
 800fab6:	b005      	add	sp, #20
 800fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fabc <__copybits>:
 800fabc:	3901      	subs	r1, #1
 800fabe:	b570      	push	{r4, r5, r6, lr}
 800fac0:	1149      	asrs	r1, r1, #5
 800fac2:	6914      	ldr	r4, [r2, #16]
 800fac4:	3101      	adds	r1, #1
 800fac6:	f102 0314 	add.w	r3, r2, #20
 800faca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800face:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fad2:	1f05      	subs	r5, r0, #4
 800fad4:	42a3      	cmp	r3, r4
 800fad6:	d30c      	bcc.n	800faf2 <__copybits+0x36>
 800fad8:	1aa3      	subs	r3, r4, r2
 800fada:	3b11      	subs	r3, #17
 800fadc:	f023 0303 	bic.w	r3, r3, #3
 800fae0:	3211      	adds	r2, #17
 800fae2:	42a2      	cmp	r2, r4
 800fae4:	bf88      	it	hi
 800fae6:	2300      	movhi	r3, #0
 800fae8:	4418      	add	r0, r3
 800faea:	2300      	movs	r3, #0
 800faec:	4288      	cmp	r0, r1
 800faee:	d305      	bcc.n	800fafc <__copybits+0x40>
 800faf0:	bd70      	pop	{r4, r5, r6, pc}
 800faf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800faf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800fafa:	e7eb      	b.n	800fad4 <__copybits+0x18>
 800fafc:	f840 3b04 	str.w	r3, [r0], #4
 800fb00:	e7f4      	b.n	800faec <__copybits+0x30>

0800fb02 <__any_on>:
 800fb02:	f100 0214 	add.w	r2, r0, #20
 800fb06:	6900      	ldr	r0, [r0, #16]
 800fb08:	114b      	asrs	r3, r1, #5
 800fb0a:	4298      	cmp	r0, r3
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	db11      	blt.n	800fb34 <__any_on+0x32>
 800fb10:	dd0a      	ble.n	800fb28 <__any_on+0x26>
 800fb12:	f011 011f 	ands.w	r1, r1, #31
 800fb16:	d007      	beq.n	800fb28 <__any_on+0x26>
 800fb18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb1c:	fa24 f001 	lsr.w	r0, r4, r1
 800fb20:	fa00 f101 	lsl.w	r1, r0, r1
 800fb24:	428c      	cmp	r4, r1
 800fb26:	d10b      	bne.n	800fb40 <__any_on+0x3e>
 800fb28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d803      	bhi.n	800fb38 <__any_on+0x36>
 800fb30:	2000      	movs	r0, #0
 800fb32:	bd10      	pop	{r4, pc}
 800fb34:	4603      	mov	r3, r0
 800fb36:	e7f7      	b.n	800fb28 <__any_on+0x26>
 800fb38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb3c:	2900      	cmp	r1, #0
 800fb3e:	d0f5      	beq.n	800fb2c <__any_on+0x2a>
 800fb40:	2001      	movs	r0, #1
 800fb42:	e7f6      	b.n	800fb32 <__any_on+0x30>

0800fb44 <__sread>:
 800fb44:	b510      	push	{r4, lr}
 800fb46:	460c      	mov	r4, r1
 800fb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4c:	f000 f9ce 	bl	800feec <_read_r>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	bfab      	itete	ge
 800fb54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fb56:	89a3      	ldrhlt	r3, [r4, #12]
 800fb58:	181b      	addge	r3, r3, r0
 800fb5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fb5e:	bfac      	ite	ge
 800fb60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fb62:	81a3      	strhlt	r3, [r4, #12]
 800fb64:	bd10      	pop	{r4, pc}

0800fb66 <__swrite>:
 800fb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb6a:	461f      	mov	r7, r3
 800fb6c:	898b      	ldrh	r3, [r1, #12]
 800fb6e:	05db      	lsls	r3, r3, #23
 800fb70:	4605      	mov	r5, r0
 800fb72:	460c      	mov	r4, r1
 800fb74:	4616      	mov	r6, r2
 800fb76:	d505      	bpl.n	800fb84 <__swrite+0x1e>
 800fb78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb7c:	2302      	movs	r3, #2
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f000 f9a2 	bl	800fec8 <_lseek_r>
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb8e:	81a3      	strh	r3, [r4, #12]
 800fb90:	4632      	mov	r2, r6
 800fb92:	463b      	mov	r3, r7
 800fb94:	4628      	mov	r0, r5
 800fb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb9a:	f000 b9c9 	b.w	800ff30 <_write_r>

0800fb9e <__sseek>:
 800fb9e:	b510      	push	{r4, lr}
 800fba0:	460c      	mov	r4, r1
 800fba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fba6:	f000 f98f 	bl	800fec8 <_lseek_r>
 800fbaa:	1c43      	adds	r3, r0, #1
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	bf15      	itete	ne
 800fbb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fbb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fbb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fbba:	81a3      	strheq	r3, [r4, #12]
 800fbbc:	bf18      	it	ne
 800fbbe:	81a3      	strhne	r3, [r4, #12]
 800fbc0:	bd10      	pop	{r4, pc}

0800fbc2 <__sclose>:
 800fbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc6:	f000 b94d 	b.w	800fe64 <_close_r>

0800fbca <_realloc_r>:
 800fbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbce:	4680      	mov	r8, r0
 800fbd0:	4615      	mov	r5, r2
 800fbd2:	460c      	mov	r4, r1
 800fbd4:	b921      	cbnz	r1, 800fbe0 <_realloc_r+0x16>
 800fbd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbda:	4611      	mov	r1, r2
 800fbdc:	f7ff ba62 	b.w	800f0a4 <_malloc_r>
 800fbe0:	b92a      	cbnz	r2, 800fbee <_realloc_r+0x24>
 800fbe2:	f7fe fc19 	bl	800e418 <_free_r>
 800fbe6:	2400      	movs	r4, #0
 800fbe8:	4620      	mov	r0, r4
 800fbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbee:	f000 f9e3 	bl	800ffb8 <_malloc_usable_size_r>
 800fbf2:	4285      	cmp	r5, r0
 800fbf4:	4606      	mov	r6, r0
 800fbf6:	d802      	bhi.n	800fbfe <_realloc_r+0x34>
 800fbf8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fbfc:	d8f4      	bhi.n	800fbe8 <_realloc_r+0x1e>
 800fbfe:	4629      	mov	r1, r5
 800fc00:	4640      	mov	r0, r8
 800fc02:	f7ff fa4f 	bl	800f0a4 <_malloc_r>
 800fc06:	4607      	mov	r7, r0
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d0ec      	beq.n	800fbe6 <_realloc_r+0x1c>
 800fc0c:	42b5      	cmp	r5, r6
 800fc0e:	462a      	mov	r2, r5
 800fc10:	4621      	mov	r1, r4
 800fc12:	bf28      	it	cs
 800fc14:	4632      	movcs	r2, r6
 800fc16:	f7fd fd8c 	bl	800d732 <memcpy>
 800fc1a:	4621      	mov	r1, r4
 800fc1c:	4640      	mov	r0, r8
 800fc1e:	f7fe fbfb 	bl	800e418 <_free_r>
 800fc22:	463c      	mov	r4, r7
 800fc24:	e7e0      	b.n	800fbe8 <_realloc_r+0x1e>

0800fc26 <__swbuf_r>:
 800fc26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc28:	460e      	mov	r6, r1
 800fc2a:	4614      	mov	r4, r2
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	b118      	cbz	r0, 800fc38 <__swbuf_r+0x12>
 800fc30:	6a03      	ldr	r3, [r0, #32]
 800fc32:	b90b      	cbnz	r3, 800fc38 <__swbuf_r+0x12>
 800fc34:	f7fc fe66 	bl	800c904 <__sinit>
 800fc38:	69a3      	ldr	r3, [r4, #24]
 800fc3a:	60a3      	str	r3, [r4, #8]
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	071a      	lsls	r2, r3, #28
 800fc40:	d501      	bpl.n	800fc46 <__swbuf_r+0x20>
 800fc42:	6923      	ldr	r3, [r4, #16]
 800fc44:	b943      	cbnz	r3, 800fc58 <__swbuf_r+0x32>
 800fc46:	4621      	mov	r1, r4
 800fc48:	4628      	mov	r0, r5
 800fc4a:	f000 f82b 	bl	800fca4 <__swsetup_r>
 800fc4e:	b118      	cbz	r0, 800fc58 <__swbuf_r+0x32>
 800fc50:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fc54:	4638      	mov	r0, r7
 800fc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc58:	6823      	ldr	r3, [r4, #0]
 800fc5a:	6922      	ldr	r2, [r4, #16]
 800fc5c:	1a98      	subs	r0, r3, r2
 800fc5e:	6963      	ldr	r3, [r4, #20]
 800fc60:	b2f6      	uxtb	r6, r6
 800fc62:	4283      	cmp	r3, r0
 800fc64:	4637      	mov	r7, r6
 800fc66:	dc05      	bgt.n	800fc74 <__swbuf_r+0x4e>
 800fc68:	4621      	mov	r1, r4
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7fc fd62 	bl	800c734 <_fflush_r>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d1ed      	bne.n	800fc50 <__swbuf_r+0x2a>
 800fc74:	68a3      	ldr	r3, [r4, #8]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	60a3      	str	r3, [r4, #8]
 800fc7a:	6823      	ldr	r3, [r4, #0]
 800fc7c:	1c5a      	adds	r2, r3, #1
 800fc7e:	6022      	str	r2, [r4, #0]
 800fc80:	701e      	strb	r6, [r3, #0]
 800fc82:	6962      	ldr	r2, [r4, #20]
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d004      	beq.n	800fc94 <__swbuf_r+0x6e>
 800fc8a:	89a3      	ldrh	r3, [r4, #12]
 800fc8c:	07db      	lsls	r3, r3, #31
 800fc8e:	d5e1      	bpl.n	800fc54 <__swbuf_r+0x2e>
 800fc90:	2e0a      	cmp	r6, #10
 800fc92:	d1df      	bne.n	800fc54 <__swbuf_r+0x2e>
 800fc94:	4621      	mov	r1, r4
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7fc fd4c 	bl	800c734 <_fflush_r>
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d0d9      	beq.n	800fc54 <__swbuf_r+0x2e>
 800fca0:	e7d6      	b.n	800fc50 <__swbuf_r+0x2a>
	...

0800fca4 <__swsetup_r>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4b29      	ldr	r3, [pc, #164]	@ (800fd4c <__swsetup_r+0xa8>)
 800fca8:	4605      	mov	r5, r0
 800fcaa:	6818      	ldr	r0, [r3, #0]
 800fcac:	460c      	mov	r4, r1
 800fcae:	b118      	cbz	r0, 800fcb8 <__swsetup_r+0x14>
 800fcb0:	6a03      	ldr	r3, [r0, #32]
 800fcb2:	b90b      	cbnz	r3, 800fcb8 <__swsetup_r+0x14>
 800fcb4:	f7fc fe26 	bl	800c904 <__sinit>
 800fcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fcbc:	0719      	lsls	r1, r3, #28
 800fcbe:	d422      	bmi.n	800fd06 <__swsetup_r+0x62>
 800fcc0:	06da      	lsls	r2, r3, #27
 800fcc2:	d407      	bmi.n	800fcd4 <__swsetup_r+0x30>
 800fcc4:	2209      	movs	r2, #9
 800fcc6:	602a      	str	r2, [r5, #0]
 800fcc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fccc:	81a3      	strh	r3, [r4, #12]
 800fcce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcd2:	e033      	b.n	800fd3c <__swsetup_r+0x98>
 800fcd4:	0758      	lsls	r0, r3, #29
 800fcd6:	d512      	bpl.n	800fcfe <__swsetup_r+0x5a>
 800fcd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fcda:	b141      	cbz	r1, 800fcee <__swsetup_r+0x4a>
 800fcdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fce0:	4299      	cmp	r1, r3
 800fce2:	d002      	beq.n	800fcea <__swsetup_r+0x46>
 800fce4:	4628      	mov	r0, r5
 800fce6:	f7fe fb97 	bl	800e418 <_free_r>
 800fcea:	2300      	movs	r3, #0
 800fcec:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fcf4:	81a3      	strh	r3, [r4, #12]
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	6063      	str	r3, [r4, #4]
 800fcfa:	6923      	ldr	r3, [r4, #16]
 800fcfc:	6023      	str	r3, [r4, #0]
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	f043 0308 	orr.w	r3, r3, #8
 800fd04:	81a3      	strh	r3, [r4, #12]
 800fd06:	6923      	ldr	r3, [r4, #16]
 800fd08:	b94b      	cbnz	r3, 800fd1e <__swsetup_r+0x7a>
 800fd0a:	89a3      	ldrh	r3, [r4, #12]
 800fd0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd14:	d003      	beq.n	800fd1e <__swsetup_r+0x7a>
 800fd16:	4621      	mov	r1, r4
 800fd18:	4628      	mov	r0, r5
 800fd1a:	f000 f84c 	bl	800fdb6 <__smakebuf_r>
 800fd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd22:	f013 0201 	ands.w	r2, r3, #1
 800fd26:	d00a      	beq.n	800fd3e <__swsetup_r+0x9a>
 800fd28:	2200      	movs	r2, #0
 800fd2a:	60a2      	str	r2, [r4, #8]
 800fd2c:	6962      	ldr	r2, [r4, #20]
 800fd2e:	4252      	negs	r2, r2
 800fd30:	61a2      	str	r2, [r4, #24]
 800fd32:	6922      	ldr	r2, [r4, #16]
 800fd34:	b942      	cbnz	r2, 800fd48 <__swsetup_r+0xa4>
 800fd36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd3a:	d1c5      	bne.n	800fcc8 <__swsetup_r+0x24>
 800fd3c:	bd38      	pop	{r3, r4, r5, pc}
 800fd3e:	0799      	lsls	r1, r3, #30
 800fd40:	bf58      	it	pl
 800fd42:	6962      	ldrpl	r2, [r4, #20]
 800fd44:	60a2      	str	r2, [r4, #8]
 800fd46:	e7f4      	b.n	800fd32 <__swsetup_r+0x8e>
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e7f7      	b.n	800fd3c <__swsetup_r+0x98>
 800fd4c:	20000450 	.word	0x20000450

0800fd50 <__ascii_wctomb>:
 800fd50:	4603      	mov	r3, r0
 800fd52:	4608      	mov	r0, r1
 800fd54:	b141      	cbz	r1, 800fd68 <__ascii_wctomb+0x18>
 800fd56:	2aff      	cmp	r2, #255	@ 0xff
 800fd58:	d904      	bls.n	800fd64 <__ascii_wctomb+0x14>
 800fd5a:	228a      	movs	r2, #138	@ 0x8a
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd62:	4770      	bx	lr
 800fd64:	700a      	strb	r2, [r1, #0]
 800fd66:	2001      	movs	r0, #1
 800fd68:	4770      	bx	lr

0800fd6a <__swhatbuf_r>:
 800fd6a:	b570      	push	{r4, r5, r6, lr}
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd72:	2900      	cmp	r1, #0
 800fd74:	b096      	sub	sp, #88	@ 0x58
 800fd76:	4615      	mov	r5, r2
 800fd78:	461e      	mov	r6, r3
 800fd7a:	da0d      	bge.n	800fd98 <__swhatbuf_r+0x2e>
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd82:	f04f 0100 	mov.w	r1, #0
 800fd86:	bf14      	ite	ne
 800fd88:	2340      	movne	r3, #64	@ 0x40
 800fd8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd8e:	2000      	movs	r0, #0
 800fd90:	6031      	str	r1, [r6, #0]
 800fd92:	602b      	str	r3, [r5, #0]
 800fd94:	b016      	add	sp, #88	@ 0x58
 800fd96:	bd70      	pop	{r4, r5, r6, pc}
 800fd98:	466a      	mov	r2, sp
 800fd9a:	f000 f873 	bl	800fe84 <_fstat_r>
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	dbec      	blt.n	800fd7c <__swhatbuf_r+0x12>
 800fda2:	9901      	ldr	r1, [sp, #4]
 800fda4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fda8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdac:	4259      	negs	r1, r3
 800fdae:	4159      	adcs	r1, r3
 800fdb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fdb4:	e7eb      	b.n	800fd8e <__swhatbuf_r+0x24>

0800fdb6 <__smakebuf_r>:
 800fdb6:	898b      	ldrh	r3, [r1, #12]
 800fdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdba:	079d      	lsls	r5, r3, #30
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	d507      	bpl.n	800fdd2 <__smakebuf_r+0x1c>
 800fdc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fdc6:	6023      	str	r3, [r4, #0]
 800fdc8:	6123      	str	r3, [r4, #16]
 800fdca:	2301      	movs	r3, #1
 800fdcc:	6163      	str	r3, [r4, #20]
 800fdce:	b003      	add	sp, #12
 800fdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd2:	ab01      	add	r3, sp, #4
 800fdd4:	466a      	mov	r2, sp
 800fdd6:	f7ff ffc8 	bl	800fd6a <__swhatbuf_r>
 800fdda:	9f00      	ldr	r7, [sp, #0]
 800fddc:	4605      	mov	r5, r0
 800fdde:	4639      	mov	r1, r7
 800fde0:	4630      	mov	r0, r6
 800fde2:	f7ff f95f 	bl	800f0a4 <_malloc_r>
 800fde6:	b948      	cbnz	r0, 800fdfc <__smakebuf_r+0x46>
 800fde8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdec:	059a      	lsls	r2, r3, #22
 800fdee:	d4ee      	bmi.n	800fdce <__smakebuf_r+0x18>
 800fdf0:	f023 0303 	bic.w	r3, r3, #3
 800fdf4:	f043 0302 	orr.w	r3, r3, #2
 800fdf8:	81a3      	strh	r3, [r4, #12]
 800fdfa:	e7e2      	b.n	800fdc2 <__smakebuf_r+0xc>
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	6020      	str	r0, [r4, #0]
 800fe00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe04:	81a3      	strh	r3, [r4, #12]
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe0c:	b15b      	cbz	r3, 800fe26 <__smakebuf_r+0x70>
 800fe0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe12:	4630      	mov	r0, r6
 800fe14:	f000 f848 	bl	800fea8 <_isatty_r>
 800fe18:	b128      	cbz	r0, 800fe26 <__smakebuf_r+0x70>
 800fe1a:	89a3      	ldrh	r3, [r4, #12]
 800fe1c:	f023 0303 	bic.w	r3, r3, #3
 800fe20:	f043 0301 	orr.w	r3, r3, #1
 800fe24:	81a3      	strh	r3, [r4, #12]
 800fe26:	89a3      	ldrh	r3, [r4, #12]
 800fe28:	431d      	orrs	r5, r3
 800fe2a:	81a5      	strh	r5, [r4, #12]
 800fe2c:	e7cf      	b.n	800fdce <__smakebuf_r+0x18>

0800fe2e <memmove>:
 800fe2e:	4288      	cmp	r0, r1
 800fe30:	b510      	push	{r4, lr}
 800fe32:	eb01 0402 	add.w	r4, r1, r2
 800fe36:	d902      	bls.n	800fe3e <memmove+0x10>
 800fe38:	4284      	cmp	r4, r0
 800fe3a:	4623      	mov	r3, r4
 800fe3c:	d807      	bhi.n	800fe4e <memmove+0x20>
 800fe3e:	1e43      	subs	r3, r0, #1
 800fe40:	42a1      	cmp	r1, r4
 800fe42:	d008      	beq.n	800fe56 <memmove+0x28>
 800fe44:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe48:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe4c:	e7f8      	b.n	800fe40 <memmove+0x12>
 800fe4e:	4402      	add	r2, r0
 800fe50:	4601      	mov	r1, r0
 800fe52:	428a      	cmp	r2, r1
 800fe54:	d100      	bne.n	800fe58 <memmove+0x2a>
 800fe56:	bd10      	pop	{r4, pc}
 800fe58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe60:	e7f7      	b.n	800fe52 <memmove+0x24>
	...

0800fe64 <_close_r>:
 800fe64:	b538      	push	{r3, r4, r5, lr}
 800fe66:	4d06      	ldr	r5, [pc, #24]	@ (800fe80 <_close_r+0x1c>)
 800fe68:	2300      	movs	r3, #0
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	602b      	str	r3, [r5, #0]
 800fe70:	f7f2 fd0e 	bl	8002890 <_close>
 800fe74:	1c43      	adds	r3, r0, #1
 800fe76:	d102      	bne.n	800fe7e <_close_r+0x1a>
 800fe78:	682b      	ldr	r3, [r5, #0]
 800fe7a:	b103      	cbz	r3, 800fe7e <_close_r+0x1a>
 800fe7c:	6023      	str	r3, [r4, #0]
 800fe7e:	bd38      	pop	{r3, r4, r5, pc}
 800fe80:	20001314 	.word	0x20001314

0800fe84 <_fstat_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d07      	ldr	r5, [pc, #28]	@ (800fea4 <_fstat_r+0x20>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	4611      	mov	r1, r2
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	f7f2 fd09 	bl	80028a8 <_fstat>
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	d102      	bne.n	800fea0 <_fstat_r+0x1c>
 800fe9a:	682b      	ldr	r3, [r5, #0]
 800fe9c:	b103      	cbz	r3, 800fea0 <_fstat_r+0x1c>
 800fe9e:	6023      	str	r3, [r4, #0]
 800fea0:	bd38      	pop	{r3, r4, r5, pc}
 800fea2:	bf00      	nop
 800fea4:	20001314 	.word	0x20001314

0800fea8 <_isatty_r>:
 800fea8:	b538      	push	{r3, r4, r5, lr}
 800feaa:	4d06      	ldr	r5, [pc, #24]	@ (800fec4 <_isatty_r+0x1c>)
 800feac:	2300      	movs	r3, #0
 800feae:	4604      	mov	r4, r0
 800feb0:	4608      	mov	r0, r1
 800feb2:	602b      	str	r3, [r5, #0]
 800feb4:	f7f2 fd08 	bl	80028c8 <_isatty>
 800feb8:	1c43      	adds	r3, r0, #1
 800feba:	d102      	bne.n	800fec2 <_isatty_r+0x1a>
 800febc:	682b      	ldr	r3, [r5, #0]
 800febe:	b103      	cbz	r3, 800fec2 <_isatty_r+0x1a>
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	bd38      	pop	{r3, r4, r5, pc}
 800fec4:	20001314 	.word	0x20001314

0800fec8 <_lseek_r>:
 800fec8:	b538      	push	{r3, r4, r5, lr}
 800feca:	4d07      	ldr	r5, [pc, #28]	@ (800fee8 <_lseek_r+0x20>)
 800fecc:	4604      	mov	r4, r0
 800fece:	4608      	mov	r0, r1
 800fed0:	4611      	mov	r1, r2
 800fed2:	2200      	movs	r2, #0
 800fed4:	602a      	str	r2, [r5, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	f7f2 fd01 	bl	80028de <_lseek>
 800fedc:	1c43      	adds	r3, r0, #1
 800fede:	d102      	bne.n	800fee6 <_lseek_r+0x1e>
 800fee0:	682b      	ldr	r3, [r5, #0]
 800fee2:	b103      	cbz	r3, 800fee6 <_lseek_r+0x1e>
 800fee4:	6023      	str	r3, [r4, #0]
 800fee6:	bd38      	pop	{r3, r4, r5, pc}
 800fee8:	20001314 	.word	0x20001314

0800feec <_read_r>:
 800feec:	b538      	push	{r3, r4, r5, lr}
 800feee:	4d07      	ldr	r5, [pc, #28]	@ (800ff0c <_read_r+0x20>)
 800fef0:	4604      	mov	r4, r0
 800fef2:	4608      	mov	r0, r1
 800fef4:	4611      	mov	r1, r2
 800fef6:	2200      	movs	r2, #0
 800fef8:	602a      	str	r2, [r5, #0]
 800fefa:	461a      	mov	r2, r3
 800fefc:	f7f2 fc8f 	bl	800281e <_read>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d102      	bne.n	800ff0a <_read_r+0x1e>
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	b103      	cbz	r3, 800ff0a <_read_r+0x1e>
 800ff08:	6023      	str	r3, [r4, #0]
 800ff0a:	bd38      	pop	{r3, r4, r5, pc}
 800ff0c:	20001314 	.word	0x20001314

0800ff10 <_sbrk_r>:
 800ff10:	b538      	push	{r3, r4, r5, lr}
 800ff12:	4d06      	ldr	r5, [pc, #24]	@ (800ff2c <_sbrk_r+0x1c>)
 800ff14:	2300      	movs	r3, #0
 800ff16:	4604      	mov	r4, r0
 800ff18:	4608      	mov	r0, r1
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	f7f2 fcec 	bl	80028f8 <_sbrk>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_sbrk_r+0x1a>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_sbrk_r+0x1a>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	20001314 	.word	0x20001314

0800ff30 <_write_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	4d07      	ldr	r5, [pc, #28]	@ (800ff50 <_write_r+0x20>)
 800ff34:	4604      	mov	r4, r0
 800ff36:	4608      	mov	r0, r1
 800ff38:	4611      	mov	r1, r2
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	602a      	str	r2, [r5, #0]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	f7f2 fc8a 	bl	8002858 <_write>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_write_r+0x1e>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_write_r+0x1e>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	20001314 	.word	0x20001314

0800ff54 <__assert_func>:
 800ff54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff56:	4614      	mov	r4, r2
 800ff58:	461a      	mov	r2, r3
 800ff5a:	4b09      	ldr	r3, [pc, #36]	@ (800ff80 <__assert_func+0x2c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	4605      	mov	r5, r0
 800ff60:	68d8      	ldr	r0, [r3, #12]
 800ff62:	b954      	cbnz	r4, 800ff7a <__assert_func+0x26>
 800ff64:	4b07      	ldr	r3, [pc, #28]	@ (800ff84 <__assert_func+0x30>)
 800ff66:	461c      	mov	r4, r3
 800ff68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff6c:	9100      	str	r1, [sp, #0]
 800ff6e:	462b      	mov	r3, r5
 800ff70:	4905      	ldr	r1, [pc, #20]	@ (800ff88 <__assert_func+0x34>)
 800ff72:	f000 f829 	bl	800ffc8 <fiprintf>
 800ff76:	f000 f839 	bl	800ffec <abort>
 800ff7a:	4b04      	ldr	r3, [pc, #16]	@ (800ff8c <__assert_func+0x38>)
 800ff7c:	e7f4      	b.n	800ff68 <__assert_func+0x14>
 800ff7e:	bf00      	nop
 800ff80:	20000450 	.word	0x20000450
 800ff84:	080109eb 	.word	0x080109eb
 800ff88:	080109bd 	.word	0x080109bd
 800ff8c:	080109b0 	.word	0x080109b0

0800ff90 <_calloc_r>:
 800ff90:	b570      	push	{r4, r5, r6, lr}
 800ff92:	fba1 5402 	umull	r5, r4, r1, r2
 800ff96:	b93c      	cbnz	r4, 800ffa8 <_calloc_r+0x18>
 800ff98:	4629      	mov	r1, r5
 800ff9a:	f7ff f883 	bl	800f0a4 <_malloc_r>
 800ff9e:	4606      	mov	r6, r0
 800ffa0:	b928      	cbnz	r0, 800ffae <_calloc_r+0x1e>
 800ffa2:	2600      	movs	r6, #0
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}
 800ffa8:	220c      	movs	r2, #12
 800ffaa:	6002      	str	r2, [r0, #0]
 800ffac:	e7f9      	b.n	800ffa2 <_calloc_r+0x12>
 800ffae:	462a      	mov	r2, r5
 800ffb0:	4621      	mov	r1, r4
 800ffb2:	f7fd fb85 	bl	800d6c0 <memset>
 800ffb6:	e7f5      	b.n	800ffa4 <_calloc_r+0x14>

0800ffb8 <_malloc_usable_size_r>:
 800ffb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffbc:	1f18      	subs	r0, r3, #4
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	bfbc      	itt	lt
 800ffc2:	580b      	ldrlt	r3, [r1, r0]
 800ffc4:	18c0      	addlt	r0, r0, r3
 800ffc6:	4770      	bx	lr

0800ffc8 <fiprintf>:
 800ffc8:	b40e      	push	{r1, r2, r3}
 800ffca:	b503      	push	{r0, r1, lr}
 800ffcc:	4601      	mov	r1, r0
 800ffce:	ab03      	add	r3, sp, #12
 800ffd0:	4805      	ldr	r0, [pc, #20]	@ (800ffe8 <fiprintf+0x20>)
 800ffd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffd6:	6800      	ldr	r0, [r0, #0]
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	f7fe ff21 	bl	800ee20 <_vfiprintf_r>
 800ffde:	b002      	add	sp, #8
 800ffe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffe4:	b003      	add	sp, #12
 800ffe6:	4770      	bx	lr
 800ffe8:	20000450 	.word	0x20000450

0800ffec <abort>:
 800ffec:	b508      	push	{r3, lr}
 800ffee:	2006      	movs	r0, #6
 800fff0:	f000 f82c 	bl	801004c <raise>
 800fff4:	2001      	movs	r0, #1
 800fff6:	f7f2 fc07 	bl	8002808 <_exit>

0800fffa <_raise_r>:
 800fffa:	291f      	cmp	r1, #31
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4605      	mov	r5, r0
 8010000:	460c      	mov	r4, r1
 8010002:	d904      	bls.n	801000e <_raise_r+0x14>
 8010004:	2316      	movs	r3, #22
 8010006:	6003      	str	r3, [r0, #0]
 8010008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801000c:	bd38      	pop	{r3, r4, r5, pc}
 801000e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010010:	b112      	cbz	r2, 8010018 <_raise_r+0x1e>
 8010012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010016:	b94b      	cbnz	r3, 801002c <_raise_r+0x32>
 8010018:	4628      	mov	r0, r5
 801001a:	f000 f831 	bl	8010080 <_getpid_r>
 801001e:	4622      	mov	r2, r4
 8010020:	4601      	mov	r1, r0
 8010022:	4628      	mov	r0, r5
 8010024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010028:	f000 b818 	b.w	801005c <_kill_r>
 801002c:	2b01      	cmp	r3, #1
 801002e:	d00a      	beq.n	8010046 <_raise_r+0x4c>
 8010030:	1c59      	adds	r1, r3, #1
 8010032:	d103      	bne.n	801003c <_raise_r+0x42>
 8010034:	2316      	movs	r3, #22
 8010036:	6003      	str	r3, [r0, #0]
 8010038:	2001      	movs	r0, #1
 801003a:	e7e7      	b.n	801000c <_raise_r+0x12>
 801003c:	2100      	movs	r1, #0
 801003e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010042:	4620      	mov	r0, r4
 8010044:	4798      	blx	r3
 8010046:	2000      	movs	r0, #0
 8010048:	e7e0      	b.n	801000c <_raise_r+0x12>
	...

0801004c <raise>:
 801004c:	4b02      	ldr	r3, [pc, #8]	@ (8010058 <raise+0xc>)
 801004e:	4601      	mov	r1, r0
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	f7ff bfd2 	b.w	800fffa <_raise_r>
 8010056:	bf00      	nop
 8010058:	20000450 	.word	0x20000450

0801005c <_kill_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	@ (801007c <_kill_r+0x20>)
 8010060:	2300      	movs	r3, #0
 8010062:	4604      	mov	r4, r0
 8010064:	4608      	mov	r0, r1
 8010066:	4611      	mov	r1, r2
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	f7f2 fbbd 	bl	80027e8 <_kill>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	d102      	bne.n	8010078 <_kill_r+0x1c>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b103      	cbz	r3, 8010078 <_kill_r+0x1c>
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop
 801007c:	20001314 	.word	0x20001314

08010080 <_getpid_r>:
 8010080:	f7f2 bbaa 	b.w	80027d8 <_getpid>

08010084 <sqrtf>:
 8010084:	b508      	push	{r3, lr}
 8010086:	ed2d 8b02 	vpush	{d8}
 801008a:	eeb0 8a40 	vmov.f32	s16, s0
 801008e:	f000 f817 	bl	80100c0 <__ieee754_sqrtf>
 8010092:	eeb4 8a48 	vcmp.f32	s16, s16
 8010096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801009a:	d60c      	bvs.n	80100b6 <sqrtf+0x32>
 801009c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80100bc <sqrtf+0x38>
 80100a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80100a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a8:	d505      	bpl.n	80100b6 <sqrtf+0x32>
 80100aa:	f7fd fb15 	bl	800d6d8 <__errno>
 80100ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80100b2:	2321      	movs	r3, #33	@ 0x21
 80100b4:	6003      	str	r3, [r0, #0]
 80100b6:	ecbd 8b02 	vpop	{d8}
 80100ba:	bd08      	pop	{r3, pc}
 80100bc:	00000000 	.word	0x00000000

080100c0 <__ieee754_sqrtf>:
 80100c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80100c4:	4770      	bx	lr
	...

080100c8 <_init>:
 80100c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ca:	bf00      	nop
 80100cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ce:	bc08      	pop	{r3}
 80100d0:	469e      	mov	lr, r3
 80100d2:	4770      	bx	lr

080100d4 <_fini>:
 80100d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d6:	bf00      	nop
 80100d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100da:	bc08      	pop	{r3}
 80100dc:	469e      	mov	lr, r3
 80100de:	4770      	bx	lr
