
RangeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  0800fef8  0800fef8  00010ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010828  08010828  00012494  2**0
                  CONTENTS
  4 .ARM          00000008  08010828  08010828  00011828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010830  08010830  00012494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010830  08010830  00011830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010834  08010834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  08010838  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000df0  20000494  08010ccc  00012494  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001284  08010ccc  00013284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c27b  00000000  00000000  000124c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003653  00000000  00000000  0002e73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117c  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2ee  00000000  00000000  0003456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd1d  00000000  00000000  0004f85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a0e5  00000000  00000000  0006d577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010765c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000757c  00000000  00000000  001076a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  0010ec1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fee0 	.word	0x0800fee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	0800fee0 	.word	0x0800fee0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]

}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	if(htim->Instance== TIM10){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d102      	bne.n	8001024 <HAL_TIM_PeriodElapsedCallback+0x18>
		 //printf("Inter \n");
		 //fflush(stdout);


		 read_encoder(&sys);
 800101e:	4804      	ldr	r0, [pc, #16]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001020:	f000 f972 	bl	8001308 <read_encoder>


	}
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40014400 	.word	0x40014400
 8001030:	200004b4 	.word	0x200004b4

08001034 <setupReadingTimer>:


void setupReadingTimer(TIM_HandleTypeDef *htim){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

	uint16_t ARR=52500;
 800103c:	f64c 5314 	movw	r3, #52500	@ 0xcd14
 8001040:	81fb      	strh	r3, [r7, #14]

    //ARR=(Read_TS*clock_freq)/Prescaler_lidar;
	__HAL_TIM_SET_PRESCALER(htim, Prescaler_lidar);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2210      	movs	r2, #16
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	89fa      	ldrh	r2, [r7, #14]
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001052:	89fa      	ldrh	r2, [r7, #14]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f009 f8c1 	bl	800a1e0 <HAL_TIM_Base_Start_IT>

	htim->Instance->EGR = TIM_EGR_UG;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2201      	movs	r2, #1
 8001064:	615a      	str	r2, [r3, #20]
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <system_init>:



void system_init(system_t *sys, uint8_t dir,uint32_t ts, TIM_HandleTypeDef *htim1){
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	460b      	mov	r3, r1
 800107c:	72fb      	strb	r3, [r7, #11]

	uint8_t i;

	for (i=0; i<5; i++){
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]
 8001082:	e00c      	b.n	800109e <system_init+0x30>

		rbclear( (((ringbuffer_t *) sys)+i ) );
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 f972 	bl	800237c <rbclear>
	for (i=0; i<5; i++){
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	3301      	adds	r3, #1
 800109c:	75fb      	strb	r3, [r7, #23]
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d9ef      	bls.n	8001084 <system_init+0x16>

	//initializing lidar sensor

	//lidar_init( dir);

  	cont_lidar_init( dir, ts);// continuous reading inizializzation
 80010a4:	7afb      	ldrb	r3, [r7, #11]
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fd63 	bl	8007b74 <cont_lidar_init>

  	sys->htim_encoder1=htim1;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4



}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <ball_estimation>:
	//mill=pos;

}


void ball_estimation(system_t *sys){
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	float pos;
	float prec, succ;
	float vel=0;
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
	float vel_est;
	float acc=0;
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
	float acc_est;

	float pos_1,pos_2;

	uint8_t i=0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	for(i=0; i<5;i++){
 80010da:	2300      	movs	r3, #0
 80010dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80010e0:	e016      	b.n	8001110 <ball_estimation+0x50>

		rbget(&sys->Ball_pos,i,&pos);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80010e8:	f997 102b 	ldrsb.w	r1, [r7, #43]	@ 0x2b
 80010ec:	f107 021c 	add.w	r2, r7, #28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f903 	bl	80022fc <rbget>
		prec+=pos;
 80010f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80010fa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001102:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	for(i=0; i<5;i++){
 8001106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800110a:	3301      	adds	r3, #1
 800110c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001114:	2b04      	cmp	r3, #4
 8001116:	d9e4      	bls.n	80010e2 <ball_estimation+0x22>
	}

	prec /=5; //  mean of the last 5 values of position in the buffer
 8001118:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800111c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8001120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001124:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	rblast(&sys->Ball_pos,&pos_2);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f001 f8b1 	bl	800229c <rblast>
	rbget(&sys->Ball_pos, ((&sys->Ball_pos.tail)-1),&pos_1);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001146:	3b01      	subs	r3, #1
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f107 0210 	add.w	r2, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	f001 f8d4 	bl	80022fc <rbget>

	pos=0.60*pos_2+(1-0.60)*prec; // Poors man Kalman filter
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9fe 	bl	8000558 <__aeabi_f2d>
 800115c:	a363      	add	r3, pc, #396	@ (adr r3, 80012ec <ball_estimation+0x22c>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa51 	bl	8000608 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4614      	mov	r4, r2
 800116c:	461d      	mov	r5, r3
 800116e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001170:	f7ff f9f2 	bl	8000558 <__aeabi_f2d>
 8001174:	a35f      	add	r3, pc, #380	@ (adr r3, 80012f4 <ball_estimation+0x234>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa45 	bl	8000608 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4620      	mov	r0, r4
 8001184:	4629      	mov	r1, r5
 8001186:	f7ff f889 	bl	800029c <__adddf3>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd31 	bl	8000bf8 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	61fb      	str	r3, [r7, #28]
	rbpush(&sys->Ball_pos_filtered,pos);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 80011a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f82f 	bl	800220c <rbpush>


    rblast(&sys->Ball_vel,&vel);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 80011b4:	f107 0218 	add.w	r2, r7, #24
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 f86e 	bl	800229c <rblast>

	vel_est=0.30*vel+(1-0.30)*((pos_2-pos_1)/Read_TS);
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9c8 	bl	8000558 <__aeabi_f2d>
 80011c8:	a34c      	add	r3, pc, #304	@ (adr r3, 80012fc <ball_estimation+0x23c>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fa1b 	bl	8000608 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4614      	mov	r4, r2
 80011d8:	461d      	mov	r5, r3
 80011da:	ed97 7a03 	vldr	s14, [r7, #12]
 80011de:	edd7 7a04 	vldr	s15, [r7, #16]
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 80012e8 <ball_estimation+0x228>
 80011ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ee:	ee16 0a90 	vmov	r0, s13
 80011f2:	f7ff f9b1 	bl	8000558 <__aeabi_f2d>
 80011f6:	a336      	add	r3, pc, #216	@ (adr r3, 80012d0 <ball_estimation+0x210>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fa04 	bl	8000608 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f848 	bl	800029c <__adddf3>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcf0 	bl	8000bf8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    //vel_est=0.80*vel+(1-0.8)*((pos-pos_1)/Read_TS);
	rbpush(&sys->Ball_vel,vel_est);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8001222:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fff0 	bl	800220c <rbpush>


	rblast(&sys->Ball_acc,&acc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8001232:	f107 0214 	add.w	r2, r7, #20
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 f82f 	bl	800229c <rblast>

	rbget(&sys->Ball_vel, (&sys->Ball_vel.tail)-1,&vel);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f203 40bc 	addw	r0, r3, #1212	@ 0x4bc
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 800124a:	3b01      	subs	r3, #1
 800124c:	b25b      	sxtb	r3, r3
 800124e:	f107 0218 	add.w	r2, r7, #24
 8001252:	4619      	mov	r1, r3
 8001254:	f001 f852 	bl	80022fc <rbget>

	acc_est=0.80*acc+(1+0.8)*((vel_est-vel)/Read_TS);
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f97c 	bl	8000558 <__aeabi_f2d>
 8001260:	a31d      	add	r3, pc, #116	@ (adr r3, 80012d8 <ball_estimation+0x218>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9cf 	bl	8000608 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	461d      	mov	r5, r3
 8001272:	edd7 7a06 	vldr	s15, [r7, #24]
 8001276:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80012e8 <ball_estimation+0x228>
 8001282:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001286:	ee16 0a90 	vmov	r0, s13
 800128a:	f7ff f965 	bl	8000558 <__aeabi_f2d>
 800128e:	a314      	add	r3, pc, #80	@ (adr r3, 80012e0 <ball_estimation+0x220>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9b8 	bl	8000608 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7fe fffc 	bl	800029c <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fca4 	bl	8000bf8 <__aeabi_d2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	623b      	str	r3, [r7, #32]

	rbpush(&sys->Ball_acc, acc_est);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80012ba:	ed97 0a08 	vldr	s0, [r7, #32]
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 ffa4 	bl	800220c <rbpush>



}
 80012c4:	bf00      	nop
 80012c6:	3730      	adds	r7, #48	@ 0x30
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}
 80012cc:	f3af 8000 	nop.w
 80012d0:	66666666 	.word	0x66666666
 80012d4:	3fe66666 	.word	0x3fe66666
 80012d8:	9999999a 	.word	0x9999999a
 80012dc:	3fe99999 	.word	0x3fe99999
 80012e0:	cccccccd 	.word	0xcccccccd
 80012e4:	3ffccccc 	.word	0x3ffccccc
 80012e8:	42dc0000 	.word	0x42dc0000
 80012ec:	33333333 	.word	0x33333333
 80012f0:	3fe33333 	.word	0x3fe33333
 80012f4:	9999999a 	.word	0x9999999a
 80012f8:	3fd99999 	.word	0x3fd99999
 80012fc:	33333333 	.word	0x33333333
 8001300:	3fd33333 	.word	0x3fd33333
 8001304:	00000000 	.word	0x00000000

08001308 <read_encoder>:


void read_encoder(system_t *sys){
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	uint16_t counter ;
	TIM_HandleTypeDef *htim1;
	float displacement;

	htim1=sys->htim_encoder1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d3 37e4 	ldr.w	r3, [r3, #2020]	@ 0x7e4
 8001316:	60fb      	str	r3, [r7, #12]

	 counter = (htim1->Instance->CNT);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	82fb      	strh	r3, [r7, #22]
	    if(counter >= htim1->Instance->ARR){
 8001320:	8afa      	ldrh	r2, [r7, #22]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001328:	429a      	cmp	r2, r3
 800132a:	d309      	bcc.n	8001340 <read_encoder+0x38>
	        counter = (htim1->Instance->ARR-1) - (counter % 1<<16); /* handle underflow */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	82fb      	strh	r3, [r7, #22]
	        htim1->Instance->CNT = counter; /* correct cnt value */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	8afa      	ldrh	r2, [r7, #22]
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24
	    }


	    displacement = (float) (2*M_PI*counter/(htim1->Instance->ARR)-offset_encoder);
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8f6 	bl	8000534 <__aeabi_i2d>
 8001348:	a32f      	add	r3, pc, #188	@ (adr r3, 8001408 <read_encoder+0x100>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f95b 	bl	8000608 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8d7 	bl	8000514 <__aeabi_ui2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4620      	mov	r0, r4
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff fa75 	bl	800085c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <read_encoder+0x110>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8ea 	bl	8000558 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7fe ff84 	bl	8000298 <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc2e 	bl	8000bf8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	613b      	str	r3, [r7, #16]

	    if(displacement > 2*M_PI){
 80013a0:	6938      	ldr	r0, [r7, #16]
 80013a2:	f7ff f8d9 	bl	8000558 <__aeabi_f2d>
 80013a6:	a318      	add	r3, pc, #96	@ (adr r3, 8001408 <read_encoder+0x100>)
 80013a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ac:	f7ff fbbc 	bl	8000b28 <__aeabi_dcmpgt>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <read_encoder+0xb2>
	       	displacement = 2*M_PI; /* clamping */
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <read_encoder+0x114>)
 80013b8:	613b      	str	r3, [r7, #16]
	   	}

	    if(displacement > M_PI){
 80013ba:	6938      	ldr	r0, [r7, #16]
 80013bc:	f7ff f8cc 	bl	8000558 <__aeabi_f2d>
 80013c0:	a313      	add	r3, pc, #76	@ (adr r3, 8001410 <read_encoder+0x108>)
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7ff fbaf 	bl	8000b28 <__aeabi_dcmpgt>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00f      	beq.n	80013f0 <read_encoder+0xe8>
			displacement = displacement - (2*M_PI); // redefining the domain between -PI and +PI
 80013d0:	6938      	ldr	r0, [r7, #16]
 80013d2:	f7ff f8c1 	bl	8000558 <__aeabi_f2d>
 80013d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001408 <read_encoder+0x100>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7fe ff5c 	bl	8000298 <__aeabi_dsub>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc06 	bl	8000bf8 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]
		}

	    rbpush(&sys->q0,displacement);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	ed97 0a04 	vldr	s0, [r7, #16]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 ff08 	bl	800220c <rbpush>


}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	f3af 8000 	nop.w
 8001408:	54442d18 	.word	0x54442d18
 800140c:	401921fb 	.word	0x401921fb
 8001410:	54442d18 	.word	0x54442d18
 8001414:	400921fb 	.word	0x400921fb
 8001418:	20000c9c 	.word	0x20000c9c
 800141c:	40c90fdb 	.word	0x40c90fdb

08001420 <apply_velocity_input>:



void apply_velocity_input(TIM_HandleTypeDef *htim1){
 8001420:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]


   //dir = u_ref > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
   //HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, dir);

   prescaler1= (uint16_t) 42000;//12000 ;//8400;
 800142a:	f24a 4310 	movw	r3, #42000	@ 0xa410
 800142e:	82fb      	strh	r3, [r7, #22]
   f=HAL_RCC_GetPCLK1Freq()*2;
 8001430:	f008 fe5e 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 8001434:	4603      	mov	r3, r0
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	613b      	str	r3, [r7, #16]
   ARR= fabs(u_ref) < 0.01 ? 0:(uint32_t)(RESOLUTION*f/(fabs(u_ref)*16*prescaler1));
 800143a:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <apply_velocity_input+0xf8>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	eef0 7ae7 	vabs.f32	s15, s15
 8001444:	ee17 0a90 	vmov	r0, s15
 8001448:	f7ff f886 	bl	8000558 <__aeabi_f2d>
 800144c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001508 <apply_velocity_input+0xe8>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff fb4b 	bl	8000aec <__aeabi_dcmplt>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <apply_velocity_input+0x40>
 800145c:	2300      	movs	r3, #0
 800145e:	e034      	b.n	80014ca <apply_velocity_input+0xaa>
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff f857 	bl	8000514 <__aeabi_ui2d>
 8001466:	a32a      	add	r3, pc, #168	@ (adr r3, 8001510 <apply_velocity_input+0xf0>)
 8001468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146c:	f7ff f8cc 	bl	8000608 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <apply_velocity_input+0xf8>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	eef0 7ae7 	vabs.f32	s15, s15
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f867 	bl	8000558 <__aeabi_f2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b23      	ldr	r3, [pc, #140]	@ (800151c <apply_velocity_input+0xfc>)
 8001490:	f7ff f8ba 	bl	8000608 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
 800149c:	8afb      	ldrh	r3, [r7, #22]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f848 	bl	8000534 <__aeabi_i2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4640      	mov	r0, r8
 80014aa:	4649      	mov	r1, r9
 80014ac:	f7ff f8ac 	bl	8000608 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4620      	mov	r0, r4
 80014b6:	4629      	mov	r1, r5
 80014b8:	f7ff f9d0 	bl	800085c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fb78 	bl	8000bb8 <__aeabi_d2uiz>
 80014c8:	4603      	mov	r3, r0
 80014ca:	60fb      	str	r3, [r7, #12]
   CCR= ARR /2;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
   __HAL_TIM_SET_PRESCALER(htim1, prescaler1);//2625
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	8afa      	ldrh	r2, [r7, #22]
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
   __HAL_TIM_SET_AUTORELOAD(htim1, ARR);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	60da      	str	r2, [r3, #12]
   __HAL_TIM_SET_COMPARE(htim1, TIM_CHANNEL_1, CCR);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	635a      	str	r2, [r3, #52]	@ 0x34
   htim1->Instance->EGR = TIM_EGR_UG;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	615a      	str	r2, [r3, #20]


    return;
 80014f8:	bf00      	nop

}
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	47ae147b 	.word	0x47ae147b
 800150c:	3f847ae1 	.word	0x3f847ae1
 8001510:	ae261898 	.word	0xae261898
 8001514:	3fa015be 	.word	0x3fa015be
 8001518:	20000ca0 	.word	0x20000ca0
 800151c:	40300000 	.word	0x40300000

08001520 <PID_controller_position>:

*/



void PID_controller_position(system_t *sys, pid_controller_t *pid , float setpoint){
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	@ 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	ed87 0a01 	vstr	s0, [r7, #4]
	float set_point1,lidar_measure,encoder_measure,alpha, u0,tc0,u_star;
	float vcmi,vcme; //velocità del centro di massa della sfera

	float hi,hm,he,theta,x2;

	float alfa_star=0;
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28

	set_point1=setpoint;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24


	rblast(&sys->q0,&encoder_measure);// rappresenta l'angolo theta
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f107 0214 	add.w	r2, r7, #20
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 feab 	bl	800229c <rblast>
	//rblast(&sys->Ball_pos_filtered,&lidar_measure);// rappresenta la posizione misurata
	rblast(&sys->Ball_pos,&lidar_measure);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800154c:	f107 0218 	add.w	r2, r7, #24
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fea2 	bl	800229c <rblast>



	PID_update(pid,set_point1, lidar_measure,T_CONTROL);
 8001558:	edd7 7a06 	vldr	s15, [r7, #24]
 800155c:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 8001758 <PID_controller_position+0x238>
 8001560:	eef0 0a67 	vmov.f32	s1, s15
 8001564:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001568:	68b8      	ldr	r0, [r7, #8]
 800156a:	f000 fd61 	bl	8002030 <PID_update>

	u0=pid->out;
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001572:	623b      	str	r3, [r7, #32]




	//u0>0
    if(u0<0){
 8001574:	edd7 7a08 	vldr	s15, [r7, #32]
 8001578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	d533      	bpl.n	80015ea <PID_controller_position+0xca>

    	alfa_star= (u0-30)*(M_PI/6-0)/(400-30);
 8001582:	edd7 7a08 	vldr	s15, [r7, #32]
 8001586:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800158a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800158e:	ee17 0a90 	vmov	r0, s15
 8001592:	f7fe ffe1 	bl	8000558 <__aeabi_f2d>
 8001596:	a364      	add	r3, pc, #400	@ (adr r3, 8001728 <PID_controller_position+0x208>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f834 	bl	8000608 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	a361      	add	r3, pc, #388	@ (adr r3, 8001730 <PID_controller_position+0x210>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f955 	bl	800085c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fb1d 	bl	8000bf8 <__aeabi_d2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_WritePin( DirStepper_GPIO_Port, DirStepper_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2102      	movs	r1, #2
 80015c6:	4865      	ldr	r0, [pc, #404]	@ (800175c <PID_controller_position+0x23c>)
 80015c8:	f007 f8f6 	bl	80087b8 <HAL_GPIO_WritePin>
    	printf(" POS_Alfa %f\n",alfa_star);
 80015cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80015ce:	f7fe ffc3 	bl	8000558 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4862      	ldr	r0, [pc, #392]	@ (8001760 <PID_controller_position+0x240>)
 80015d8:	f00b f8b8 	bl	800c74c <iprintf>
    		 fflush(stdout);
 80015dc:	4b61      	ldr	r3, [pc, #388]	@ (8001764 <PID_controller_position+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00a ffdc 	bl	800c5a0 <fflush>
 80015e8:	e03b      	b.n	8001662 <PID_controller_position+0x142>

    }else{
    	alfa_star= (u0-30)*(0-M_PI/6)/(400-30)+(-M_PI/6);
 80015ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80015ee:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80015f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	f7fe ffad 	bl	8000558 <__aeabi_f2d>
 80015fe:	a34e      	add	r3, pc, #312	@ (adr r3, 8001738 <PID_controller_position+0x218>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f800 	bl	8000608 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	a347      	add	r3, pc, #284	@ (adr r3, 8001730 <PID_controller_position+0x210>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff f921 	bl	800085c <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a341      	add	r3, pc, #260	@ (adr r3, 8001728 <PID_controller_position+0x208>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe fe36 	bl	8000298 <__aeabi_dsub>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fae0 	bl	8000bf8 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_WritePin( DirStepper_GPIO_Port, DirStepper_Pin, GPIO_PIN_SET);//invertito
 800163c:	2201      	movs	r2, #1
 800163e:	2102      	movs	r1, #2
 8001640:	4846      	ldr	r0, [pc, #280]	@ (800175c <PID_controller_position+0x23c>)
 8001642:	f007 f8b9 	bl	80087b8 <HAL_GPIO_WritePin>
    	printf(" NEG_Alfa %f\n",alfa_star);
 8001646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001648:	f7fe ff86 	bl	8000558 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4845      	ldr	r0, [pc, #276]	@ (8001768 <PID_controller_position+0x248>)
 8001652:	f00b f87b 	bl	800c74c <iprintf>
    	    		 fflush(stdout);
 8001656:	4b43      	ldr	r3, [pc, #268]	@ (8001764 <PID_controller_position+0x244>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f00a ff9f 	bl	800c5a0 <fflush>

    }

    u_star=(alfa_star*BEAM_LENGTH)/MOTOR_ARM_LENGTH;
 8001662:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001666:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800176c <PID_controller_position+0x24c>
 800166a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800166e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001770 <PID_controller_position+0x250>
 8001672:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001676:	edc7 7a07 	vstr	s15, [r7, #28]

   // dir = u0 > 0 ?  GPIO_PIN_SET : GPIO_PIN_RESET;
  // HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, dir);


    if (fabs(u_star-encoder_measure)<0.01){
 800167a:	edd7 7a05 	vldr	s15, [r7, #20]
 800167e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001686:	eef0 7ae7 	vabs.f32	s15, s15
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	a32b      	add	r3, pc, #172	@ (adr r3, 8001740 <PID_controller_position+0x220>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff fa28 	bl	8000aec <__aeabi_dcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d002      	beq.n	80016a8 <PID_controller_position+0x188>
    	tc0= 1000000;
 80016a2:	4b34      	ldr	r3, [pc, #208]	@ (8001774 <PID_controller_position+0x254>)
 80016a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016a6:	e026      	b.n	80016f6 <PID_controller_position+0x1d6>
    }else{
    tc0 = sqrtf(2*M_PI*fabs(u_star-encoder_measure)/0.1);//0.4   1.05
 80016a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	eef0 7ae7 	vabs.f32	s15, s15
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f7fe ff4c 	bl	8000558 <__aeabi_f2d>
 80016c0:	a321      	add	r3, pc, #132	@ (adr r3, 8001748 <PID_controller_position+0x228>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff9f 	bl	8000608 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001750 <PID_controller_position+0x230>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7ff f8c0 	bl	800085c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa88 	bl	8000bf8 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	ee00 3a10 	vmov	s0, r3
 80016ee:	f00e fbd5 	bl	800fe9c <sqrtf>
 80016f2:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
    }

    u0=(u_star-encoder_measure)/tc0;
 80016f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80016fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001702:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170a:	edc7 7a08 	vstr	s15, [r7, #32]

    disp1=u0;
 800170e:	4a1a      	ldr	r2, [pc, #104]	@ (8001778 <PID_controller_position+0x258>)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	6013      	str	r3, [r2, #0]

    u_ref=u0;
 8001714:	4a19      	ldr	r2, [pc, #100]	@ (800177c <PID_controller_position+0x25c>)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	6013      	str	r3, [r2, #0]




}
 800171a:	bf00      	nop
 800171c:	3730      	adds	r7, #48	@ 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	382d7365 	.word	0x382d7365
 800172c:	3fe0c152 	.word	0x3fe0c152
 8001730:	00000000 	.word	0x00000000
 8001734:	40772000 	.word	0x40772000
 8001738:	382d7365 	.word	0x382d7365
 800173c:	bfe0c152 	.word	0xbfe0c152
 8001740:	47ae147b 	.word	0x47ae147b
 8001744:	3f847ae1 	.word	0x3f847ae1
 8001748:	54442d18 	.word	0x54442d18
 800174c:	401921fb 	.word	0x401921fb
 8001750:	9999999a 	.word	0x9999999a
 8001754:	3fb99999 	.word	0x3fb99999
 8001758:	3cac0831 	.word	0x3cac0831
 800175c:	40020800 	.word	0x40020800
 8001760:	0800fef8 	.word	0x0800fef8
 8001764:	200002d8 	.word	0x200002d8
 8001768:	0800ff08 	.word	0x0800ff08
 800176c:	43c80000 	.word	0x43c80000
 8001770:	42500000 	.word	0x42500000
 8001774:	49742400 	.word	0x49742400
 8001778:	20000e80 	.word	0x20000e80
 800177c:	20000ca0 	.word	0x20000ca0

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	@ (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db12      	blt.n	80017f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	490a      	ldr	r1, [pc, #40]	@ (8001800 <__NVIC_DisableIRQ+0x44>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	3320      	adds	r3, #32
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017e8:	f3bf 8f4f 	dsb	sy
}
 80017ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017ee:	f3bf 8f6f 	isb	sy
}
 80017f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100

08001804 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800180c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001810:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800181c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001820:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001824:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800182c:	e000      	b.n	8001830 <ITM_SendChar+0x2c>
    {
      __NOP();
 800182e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001830:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f9      	beq.n	800182e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800183a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	@ 0x38
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f006 fc81 	bl	8008160 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f8f1 	bl	8001a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f000 fad3 	bl	8001e0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001866:	f000 faa7 	bl	8001db8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800186a:	f000 f955 	bl	8001b18 <MX_I2C1_Init>
  MX_TIM1_Init();
 800186e:	f000 f981 	bl	8001b74 <MX_TIM1_Init>
  MX_TIM10_Init();
 8001872:	f000 fa7d 	bl	8001d70 <MX_TIM10_Init>
  MX_TIM3_Init();
 8001876:	f000 fa2d 	bl	8001cd4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800187a:	f000 f9d3 	bl	8001c24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
 // lidar_init(dir_s1);

  system_init( &sys , DIR_S,Read_TS, &htim1);
 800187e:	4b56      	ldr	r3, [pc, #344]	@ (80019d8 <main+0x184>)
 8001880:	226e      	movs	r2, #110	@ 0x6e
 8001882:	2152      	movs	r1, #82	@ 0x52
 8001884:	4855      	ldr	r0, [pc, #340]	@ (80019dc <main+0x188>)
 8001886:	f7ff fbf2 	bl	800106e <system_init>
  HAL_TIM_Base_Start_IT(&htim1); // Start the encoder reading timer
 800188a:	4853      	ldr	r0, [pc, #332]	@ (80019d8 <main+0x184>)
 800188c:	f008 fca8 	bl	800a1e0 <HAL_TIM_Base_Start_IT>
  setupReadingTimer(&htim10); // Start the  encoder sampling timer
 8001890:	4853      	ldr	r0, [pc, #332]	@ (80019e0 <main+0x18c>)
 8001892:	f7ff fbcf 	bl	8001034 <setupReadingTimer>
  /* start PWM */
    if(HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK){
 8001896:	2100      	movs	r1, #0
 8001898:	4852      	ldr	r0, [pc, #328]	@ (80019e4 <main+0x190>)
 800189a:	f008 fd53 	bl	800a344 <HAL_TIM_PWM_Start>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <main+0x54>
        HardFault_Handler();
 80018a4:	f000 ff3a 	bl	800271c <HardFault_Handler>
    }
  HAL_Delay(100);
 80018a8:	2064      	movs	r0, #100	@ 0x64
 80018aa:	f006 fccb 	bl	8008244 <HAL_Delay>

  //startMeasurement();

  pid_controller_t pid_pos;
  PID_init(&pid_pos,KP,TI,TD,N,1);
 80018ae:	463b      	mov	r3, r7
 80018b0:	2101      	movs	r1, #1
 80018b2:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 80019e8 <main+0x194>
 80018b6:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 80019ec <main+0x198>
 80018ba:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 80019f0 <main+0x19c>
 80018be:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fb51 	bl	8001f6a <PID_init>
  //set_limit(&pid_pos,-M_PI/3,M_PI/3,-M_PI/2,M_PI/2);
  set_limit(&pid_pos,-50,50,-M_PI/2,M_PI/2);
 80018c8:	463b      	mov	r3, r7
 80018ca:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 80019f4 <main+0x1a0>
 80018ce:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80019f8 <main+0x1a4>
 80018d2:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 80019fc <main+0x1a8>
 80018d6:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8001a00 <main+0x1ac>
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 fb88 	bl	8001ff0 <set_limit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      ready=0;
 80018e0:	4b48      	ldr	r3, [pc, #288]	@ (8001a04 <main+0x1b0>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]

      NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80018e6:	2019      	movs	r0, #25
 80018e8:	f7ff ff68 	bl	80017bc <__NVIC_DisableIRQ>
	  millimeter =getRangeData();
 80018ec:	f006 f9f4 	bl	8007cd8 <getRangeData>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <main+0x1b4>)
 80018f6:	801a      	strh	r2, [r3, #0]
      distance=(float) millimeter;
 80018f8:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <main+0x1b4>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001904:	4b41      	ldr	r3, [pc, #260]	@ (8001a0c <main+0x1b8>)
 8001906:	edc3 7a00 	vstr	s15, [r3]
	 printf(" DISTNCE %f\n",distance);
 800190a:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <main+0x1b8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fe22 	bl	8000558 <__aeabi_f2d>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	483d      	ldr	r0, [pc, #244]	@ (8001a10 <main+0x1bc>)
 800191a:	f00a ff17 	bl	800c74c <iprintf>
	 fflush(stdout);
 800191e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <main+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4618      	mov	r0, r3
 8001926:	f00a fe3b 	bl	800c5a0 <fflush>
	 NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800192a:	2019      	movs	r0, #25
 800192c:	f7ff ff28 	bl	8001780 <__NVIC_EnableIRQ>

	 if(!isFirstReading==0){
 8001930:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <main+0x1c4>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <main+0x114>
		 rblast(&sys.Ball_pos,&lastreading);
 8001938:	4938      	ldr	r1, [pc, #224]	@ (8001a1c <main+0x1c8>)
 800193a:	4839      	ldr	r0, [pc, #228]	@ (8001a20 <main+0x1cc>)
 800193c:	f000 fcae 	bl	800229c <rblast>
		 if(!(lastreading==distance)){
 8001940:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <main+0x1c8>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b31      	ldr	r3, [pc, #196]	@ (8001a0c <main+0x1b8>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	d00b      	beq.n	800196e <main+0x11a>
			 rbpush(&sys.Ball_pos, distance); // questo metodo non funziona perche satura la velocità ad un valore fisso
 8001956:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <main+0x1b8>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eeb0 0a67 	vmov.f32	s0, s15
 8001960:	482f      	ldr	r0, [pc, #188]	@ (8001a20 <main+0x1cc>)
 8001962:	f000 fc53 	bl	800220c <rbpush>
 8001966:	e002      	b.n	800196e <main+0x11a>
		 }

	 }else{
		  isFirstReading=1;// evita d'inserire nel buffer il primo valore che proviene dal sensore poich è sempre errato
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <main+0x1c4>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]

	 }
     ball_estimation(&sys);
 800196e:	481b      	ldr	r0, [pc, #108]	@ (80019dc <main+0x188>)
 8001970:	f7ff fba6 	bl	80010c0 <ball_estimation>


     // display purpose
     rblast(&sys.Ball_pos_filtered,&filteredpos);
 8001974:	492b      	ldr	r1, [pc, #172]	@ (8001a24 <main+0x1d0>)
 8001976:	482c      	ldr	r0, [pc, #176]	@ (8001a28 <main+0x1d4>)
 8001978:	f000 fc90 	bl	800229c <rblast>

     filteredpos=filteredpos;
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <main+0x1d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a28      	ldr	r2, [pc, #160]	@ (8001a24 <main+0x1d0>)
 8001982:	6013      	str	r3, [r2, #0]

     rblast(&sys.Ball_vel,&vel);
 8001984:	4929      	ldr	r1, [pc, #164]	@ (8001a2c <main+0x1d8>)
 8001986:	482a      	ldr	r0, [pc, #168]	@ (8001a30 <main+0x1dc>)
 8001988:	f000 fc88 	bl	800229c <rblast>

     vel=vel;
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <main+0x1d8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a26      	ldr	r2, [pc, #152]	@ (8001a2c <main+0x1d8>)
 8001992:	6013      	str	r3, [r2, #0]

     //read_encoder(&sys);

     rblast(&sys.q0,&q0e);
 8001994:	4927      	ldr	r1, [pc, #156]	@ (8001a34 <main+0x1e0>)
 8001996:	4811      	ldr	r0, [pc, #68]	@ (80019dc <main+0x188>)
 8001998:	f000 fc80 	bl	800229c <rblast>
     q0e=q0e;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <main+0x1e0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a24      	ldr	r2, [pc, #144]	@ (8001a34 <main+0x1e0>)
 80019a2:	6013      	str	r3, [r2, #0]

    // printf(" VEL %f\n",vel);
    fflush(stdout);
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <main+0x1c0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f00a fdf8 	bl	800c5a0 <fflush>

     rblast(&sys.Ball_acc,&acc);
 80019b0:	4921      	ldr	r1, [pc, #132]	@ (8001a38 <main+0x1e4>)
 80019b2:	4822      	ldr	r0, [pc, #136]	@ (8001a3c <main+0x1e8>)
 80019b4:	f000 fc72 	bl	800229c <rblast>

     acc=acc;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <main+0x1e4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <main+0x1e4>)
 80019be:	6013      	str	r3, [r2, #0]

	//HAL_Delay(20);

     PID_controller_position(&sys,&pid_pos, 80);
 80019c0:	463b      	mov	r3, r7
 80019c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001a40 <main+0x1ec>
 80019c6:	4619      	mov	r1, r3
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <main+0x188>)
 80019ca:	f7ff fda9 	bl	8001520 <PID_controller_position>
     apply_velocity_input(&htim2);
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <main+0x190>)
 80019d0:	f7ff fd26 	bl	8001420 <apply_velocity_input>
  {
 80019d4:	e784      	b.n	80018e0 <main+0x8c>
 80019d6:	bf00      	nop
 80019d8:	20000cfc 	.word	0x20000cfc
 80019dc:	200004b4 	.word	0x200004b4
 80019e0:	20000dd4 	.word	0x20000dd4
 80019e4:	20000d44 	.word	0x20000d44
 80019e8:	430cdecc 	.word	0x430cdecc
 80019ec:	c11c7b4a 	.word	0xc11c7b4a
 80019f0:	00000000 	.word	0x00000000
 80019f4:	3fc90fdb 	.word	0x3fc90fdb
 80019f8:	bfc90fdb 	.word	0xbfc90fdb
 80019fc:	42480000 	.word	0x42480000
 8001a00:	c2480000 	.word	0xc2480000
 8001a04:	200004b0 	.word	0x200004b0
 8001a08:	20000e64 	.word	0x20000e64
 8001a0c:	20000ca4 	.word	0x20000ca4
 8001a10:	0800ff18 	.word	0x0800ff18
 8001a14:	200002d8 	.word	0x200002d8
 8001a18:	20000e78 	.word	0x20000e78
 8001a1c:	20000e7c 	.word	0x20000e7c
 8001a20:	20000648 	.word	0x20000648
 8001a24:	20000e68 	.word	0x20000e68
 8001a28:	200007dc 	.word	0x200007dc
 8001a2c:	20000e6c 	.word	0x20000e6c
 8001a30:	20000970 	.word	0x20000970
 8001a34:	20000e74 	.word	0x20000e74
 8001a38:	20000e70 	.word	0x20000e70
 8001a3c:	20000b04 	.word	0x20000b04
 8001a40:	42a00000 	.word	0x42a00000

08001a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b094      	sub	sp, #80	@ 0x50
 8001a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	2230      	movs	r2, #48	@ 0x30
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f00a feef 	bl	800c836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <SystemClock_Config+0xcc>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <SystemClock_Config+0xcc>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a78:	4b25      	ldr	r3, [pc, #148]	@ (8001b10 <SystemClock_Config+0xcc>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <SystemClock_Config+0xd0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a21      	ldr	r2, [pc, #132]	@ (8001b14 <SystemClock_Config+0xd0>)
 8001a8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <SystemClock_Config+0xd0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa8:	2310      	movs	r3, #16
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aac:	2302      	movs	r3, #2
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ab4:	2310      	movs	r3, #16
 8001ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ab8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001abc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	4618      	mov	r0, r3
 8001acc:	f007 fea0 	bl	8009810 <HAL_RCC_OscConfig>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ad6:	f000 fa42 	bl	8001f5e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ada:	230f      	movs	r3, #15
 8001adc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f008 f902 	bl	8009d00 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b02:	f000 fa2c 	bl	8001f5e <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3750      	adds	r7, #80	@ 0x50
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	@ (8001b6c <MX_I2C1_Init+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b24:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <MX_I2C1_Init+0x58>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_I2C1_Init+0x50>)
 8001b56:	f006 fe61 	bl	800881c <HAL_I2C_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b60:	f000 f9fd 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000ca8 	.word	0x20000ca8
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	000186a0 	.word	0x000186a0

08001b74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00a fe57 	bl	800c836 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b90:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001b92:	4a23      	ldr	r2, [pc, #140]	@ (8001c20 <MX_TIM1_Init+0xac>)
 8001b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b96:	4b21      	ldr	r3, [pc, #132]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001ba4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001baa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	4619      	mov	r1, r3
 8001be6:	480d      	ldr	r0, [pc, #52]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001be8:	f008 fc5c 	bl	800a4a4 <HAL_TIM_Encoder_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001bf2:	f000 f9b4 	bl	8001f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_TIM1_Init+0xa8>)
 8001c04:	f009 fa6e 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c0e:	f000 f9a6 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000cfc 	.word	0x20000cfc
 8001c20:	40010000 	.word	0x40010000

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c46:	4b22      	ldr	r3, [pc, #136]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c6e:	4818      	ldr	r0, [pc, #96]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c70:	f008 fb18 	bl	800a2a4 <HAL_TIM_PWM_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c7a:	f000 f970 	bl	8001f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4810      	ldr	r0, [pc, #64]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001c8e:	f009 fa29 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c98:	f000 f961 	bl	8001f5e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9c:	2360      	movs	r3, #96	@ 0x60
 8001c9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001cb4:	f008 fd8c 	bl	800a7d0 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001cbe:	f000 f94e 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cc2:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <MX_TIM2_Init+0xac>)
 8001cc4:	f000 fca6 	bl	8002614 <HAL_TIM_MspPostInit>

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000d44 	.word	0x20000d44

08001cd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <MX_TIM3_Init+0x98>)
 8001cf4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1343;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001cf8:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001cfc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 8001d04:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d06:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001d0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b16      	ldr	r3, [pc, #88]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d18:	4813      	ldr	r0, [pc, #76]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d1a:	f008 fa11 	bl	800a140 <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d24:	f000 f91b 	bl	8001f5e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d2e:	f107 0308 	add.w	r3, r7, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	480c      	ldr	r0, [pc, #48]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d36:	f008 fe0d 	bl	800a954 <HAL_TIM_ConfigClockSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d40:	f000 f90d 	bl	8001f5e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <MX_TIM3_Init+0x94>)
 8001d52:	f009 f9c7 	bl	800b0e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001d5c:	f000 f8ff 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000d8c 	.word	0x20000d8c
 8001d6c:	40000400 	.word	0x40000400

08001d70 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <MX_TIM10_Init+0x44>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1343;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d7c:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001d80:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 62499;
 8001d88:	4b09      	ldr	r3, [pc, #36]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d8a:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8001d8e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_TIM10_Init+0x40>)
 8001d9e:	f008 f9cf 	bl	800a140 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001da8:	f000 f8d9 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000dd4 	.word	0x20000dd4
 8001db4:	40014400 	.word	0x40014400

08001db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <MX_USART2_UART_Init+0x50>)
 8001dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dde:	220c      	movs	r2, #12
 8001de0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de8:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dee:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f009 f9fa 	bl	800b1e8 <HAL_UART_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dfa:	f000 f8b0 	bl	8001f5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000e1c 	.word	0x20000e1c
 8001e08:	40004400 	.word	0x40004400

08001e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a43      	ldr	r2, [pc, #268]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a3c      	ldr	r2, [pc, #240]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <MX_GPIO_Init+0x12c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2101      	movs	r1, #1
 8001e96:	4829      	ldr	r0, [pc, #164]	@ (8001f3c <MX_GPIO_Init+0x130>)
 8001e98:	f006 fc8e 	bl	80087b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirStepper_GPIO_Port, DirStepper_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	4826      	ldr	r0, [pc, #152]	@ (8001f3c <MX_GPIO_Init+0x130>)
 8001ea2:	f006 fc89 	bl	80087b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2120      	movs	r1, #32
 8001eaa:	4825      	ldr	r0, [pc, #148]	@ (8001f40 <MX_GPIO_Init+0x134>)
 8001eac:	f006 fc84 	bl	80087b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	481d      	ldr	r0, [pc, #116]	@ (8001f3c <MX_GPIO_Init+0x130>)
 8001ec8:	f006 faf2 	bl	80084b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StepperDir_Pin */
  GPIO_InitStruct.Pin = StepperDir_Pin;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepperDir_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4816      	ldr	r0, [pc, #88]	@ (8001f3c <MX_GPIO_Init+0x130>)
 8001ee4:	f006 fae4 	bl	80084b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DirStepper_Pin */
  GPIO_InitStruct.Pin = DirStepper_Pin;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DirStepper_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	480f      	ldr	r0, [pc, #60]	@ (8001f3c <MX_GPIO_Init+0x130>)
 8001f00:	f006 fad6 	bl	80084b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f04:	2320      	movs	r3, #32
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4809      	ldr	r0, [pc, #36]	@ (8001f40 <MX_GPIO_Init+0x134>)
 8001f1c:	f006 fac8 	bl	80084b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2100      	movs	r1, #0
 8001f24:	2028      	movs	r0, #40	@ 0x28
 8001f26:	f006 fa8c 	bl	8008442 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2a:	2028      	movs	r0, #40	@ 0x28
 8001f2c:	f006 faa5 	bl	800847a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020000 	.word	0x40020000

08001f44 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fc58 	bl	8001804 <ITM_SendChar>
    return ch;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f62:	b672      	cpsid	i
}
 8001f64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f66:	bf00      	nop
 8001f68:	e7fd      	b.n	8001f66 <Error_Handler+0x8>

08001f6a <PID_init>:

*/



int PID_init(pid_controller_t *pid, float KP,float TI, float TD, float N,int Controller_type){
 8001f6a:	b480      	push	{r7}
 8001f6c:	b087      	sub	sp, #28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6178      	str	r0, [r7, #20]
 8001f72:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f76:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f7a:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f7e:	edc7 1a01 	vstr	s3, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]


	pid->type=Controller_type;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	601a      	str	r2, [r3, #0]
	pid->Kp= KP;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	605a      	str	r2, [r3, #4]
	pid->Ti=TI;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	609a      	str	r2, [r3, #8]
	pid->Td=TD;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
	pid->N=N;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	611a      	str	r2, [r3, #16]

	pid->integrator=0.f;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
	pid->derivative=0.f;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
	pid->prev_err=0.f;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]

	pid->out=0.f;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	635a      	str	r2, [r3, #52]	@ 0x34


	/*NB the limit must be set using the proper method */
	pid->lim_out_min=0.f;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->lim_out_max=0.f;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->lim_integ_min=0.f;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->lim_integ_max=0.f;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	631a      	str	r2, [r3, #48]	@ 0x30




	return 0;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <set_limit>:
- float lim_out_max;
- float lim_integ_min;
- float lim_integ_max ;

*/
int set_limit(pid_controller_t *pid, float lim_out_min, float lim_out_max, float lim_integ_min,float lim_integ_max ){
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6178      	str	r0, [r7, #20]
 8001ff8:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ffc:	edc7 0a03 	vstr	s1, [r7, #12]
 8002000:	ed87 1a02 	vstr	s2, [r7, #8]
 8002004:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->lim_out_min=lim_out_min;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->lim_out_max=lim_out_max;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->lim_integ_min=lim_integ_min;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->lim_integ_max=lim_integ_max;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	631a      	str	r2, [r3, #48]	@ 0x30


	return 0;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <PID_update>:
@outputs:
pid->out: contain the value calculated by the controller

*/

int PID_update(pid_controller_t *pid, float set_point , float measure, float T_C){
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	ed87 0a02 	vstr	s0, [r7, #8]
 800203c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002040:	ed87 1a00 	vstr	s2, [r7]

	float u=0.f;
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
	float error=0.f;
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
	float proportional=0.f;
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
	float alpha= pid->Td/T_C;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	edd3 6a03 	vldr	s13, [r3, #12]
 800205c:	ed97 7a00 	vldr	s14, [r7]
 8002060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002064:	edc7 7a04 	vstr	s15, [r7, #16]


    /* calculate the error*/
	error=set_point-measure;
 8002068:	ed97 7a02 	vldr	s14, [r7, #8]
 800206c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002074:	edc7 7a06 	vstr	s15, [r7, #24]



	/* proportional contribute*/

	proportional= pid->Kp*error;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	edd3 7a01 	vldr	s15, [r3, #4]
 800207e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002086:	edc7 7a05 	vstr	s15, [r7, #20]

	/*integral contribute*/



	pid->integrator+=(pid->Kp/pid->Ti)*0.5f*T_C*(error-pid->prev_err);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	ed93 6a01 	vldr	s12, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	edd3 6a02 	vldr	s13, [r3, #8]
 800209c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020a0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80020a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020a8:	edd7 7a00 	vldr	s15, [r7]
 80020ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80020b6:	ed97 6a06 	vldr	s12, [r7, #24]
 80020ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80020be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a07 	vstr	s15, [r3, #28]

	/* try of anti wind-up*/

	if(pid->integrator > pid->lim_integ_max){
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	ed93 7a07 	vldr	s14, [r3, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80020d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	dd04      	ble.n	80020ec <PID_update+0xbc>

		pid->integrator=pid->lim_integ_max;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	61da      	str	r2, [r3, #28]
 80020ea:	e00e      	b.n	800210a <PID_update+0xda>

	}else if(pid->integrator < pid->lim_integ_min)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	ed93 7a07 	vldr	s14, [r3, #28]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80020f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d503      	bpl.n	800210a <PID_update+0xda>
	{
		pid->integrator=pid->lim_integ_min;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	61da      	str	r2, [r3, #28]


	/* output  */


	if (pid->type>0){
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	dd02      	ble.n	8002118 <PID_update+0xe8>

	//u=proportional+pid->integrator;
		u=proportional;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e048      	b.n	80021aa <PID_update+0x17a>

	}else{

	/*derivative contribute*/
	pid->derivative= (2*(pid->Kp)*alpha*error - pid->derivative*(1-(2*alpha)/pid->N))/(1+(2*alpha)/pid->N);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	edd3 7a01 	vldr	s15, [r3, #4]
 800211e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002122:	edd7 7a04 	vldr	s15, [r7, #16]
 8002126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212a:	edd7 7a06 	vldr	s15, [r7, #24]
 800212e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 6a08 	vldr	s13, [r3, #32]
 8002138:	edd7 7a04 	vldr	s15, [r7, #16]
 800213c:	ee77 5aa7 	vadd.f32	s11, s15, s15
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	ed93 6a04 	vldr	s12, [r3, #16]
 8002146:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800214a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800214e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002152:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002156:	ee77 6a67 	vsub.f32	s13, s14, s15
 800215a:	edd7 7a04 	vldr	s15, [r7, #16]
 800215e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	ed93 7a04 	vldr	s14, [r3, #16]
 8002168:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800216c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	edc3 7a08 	vstr	s15, [r3, #32]
	u=proportional+0*pid->integrator+0*pid->derivative;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	edd3 7a07 	vldr	s15, [r3, #28]
 8002184:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002208 <PID_update+0x1d8>
 8002188:	ee27 7a87 	vmul.f32	s14, s15, s14
 800218c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	edd3 7a08 	vldr	s15, [r3, #32]
 800219a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002208 <PID_update+0x1d8>
 800219e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a6:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if(u>pid->lim_out_max)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80021b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80021b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	dd04      	ble.n	80021c8 <PID_update+0x198>
	{
		pid->out=pid->lim_out_max;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021c6:	e011      	b.n	80021ec <PID_update+0x1bc>
	}else if(u<pid->lim_out_min){
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80021ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80021d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	d504      	bpl.n	80021e6 <PID_update+0x1b6>

		pid->out=pid->lim_out_min;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e4:	e002      	b.n	80021ec <PID_update+0x1bc>

	}else{
		pid->out=u;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
	}


	pid->prev_err=error;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	615a      	str	r2, [r3, #20]
	pid->prev_meas=measure;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]

	return 0;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	@ 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	00000000 	.word	0x00000000

0800220c <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3304      	adds	r3, #4
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3301      	adds	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <rbpush+0x8c>)
 800223a:	fba2 1203 	umull	r1, r2, r2, r3
 800223e:	0952      	lsrs	r2, r2, #5
 8002240:	2164      	movs	r1, #100	@ 0x64
 8002242:	fb01 f202 	mul.w	r2, r1, r2
 8002246:	1a9b      	subs	r3, r3, r2
 8002248:	b2da      	uxtb	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	789b      	ldrb	r3, [r3, #2]
 8002252:	2b64      	cmp	r3, #100	@ 0x64
 8002254:	d113      	bne.n	800227e <rbpush+0x72>
        /* overwriting data: also move head forward */
        buffer->head++;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	3301      	adds	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	4a0c      	ldr	r2, [pc, #48]	@ (8002298 <rbpush+0x8c>)
 8002268:	fba2 1203 	umull	r1, r2, r2, r3
 800226c:	0952      	lsrs	r2, r2, #5
 800226e:	2164      	movs	r1, #100	@ 0x64
 8002270:	fb01 f202 	mul.w	r2, r1, r2
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	b2da      	uxtb	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	705a      	strb	r2, [r3, #1]
 800227c:	e005      	b.n	800228a <rbpush+0x7e>
    }else{
        buffer->length++;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	51eb851f 	.word	0x51eb851f

0800229c <rblast>:
- rbelement_t \*data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	789b      	ldrb	r3, [r3, #2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 80022c0:	2300      	movs	r3, #0
 80022c2:	e015      	b.n	80022f0 <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da03      	bge.n	80022de <rblast+0x42>
        index += RBUF_SZ;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	3364      	adds	r3, #100	@ 0x64
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	3304      	adds	r3, #4
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	601a      	str	r2, [r3, #0]
    return 1;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	460b      	mov	r3, r1
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 800230a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db05      	blt.n	800231e <rbget+0x22>
 8002312:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	7892      	ldrb	r2, [r2, #2]
 800231a:	4293      	cmp	r3, r2
 800231c:	db0a      	blt.n	8002334 <rbget+0x38>
        /* out of bounds */
        *data =  buffer->buffer[buffer->head];
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3304      	adds	r3, #4
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	601a      	str	r2, [r3, #0]
        return 0;
 8002330:	2300      	movs	r3, #0
 8002332:	e01a      	b.n	800236a <rbget+0x6e>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	785b      	ldrb	r3, [r3, #1]
 8002338:	461a      	mov	r2, r3
 800233a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800233e:	4413      	add	r3, r2
 8002340:	4a0d      	ldr	r2, [pc, #52]	@ (8002378 <rbget+0x7c>)
 8002342:	fb82 1203 	smull	r1, r2, r2, r3
 8002346:	1151      	asrs	r1, r2, #5
 8002348:	17da      	asrs	r2, r3, #31
 800234a:	1a8a      	subs	r2, r1, r2
 800234c:	2164      	movs	r1, #100	@ 0x64
 800234e:	fb01 f202 	mul.w	r2, r1, r2
 8002352:	1a9a      	subs	r2, r3, r2
 8002354:	4613      	mov	r3, r2
 8002356:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	601a      	str	r2, [r3, #0]
    return 1;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	51eb851f 	.word	0x51eb851f

0800237c <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e00a      	b.n	80023a4 <rbclear+0x28>
        buffer->buffer[i] = 0;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b63      	cmp	r3, #99	@ 0x63
 80023a8:	d9f1      	bls.n	800238e <rbclear+0x12>
    }
    buffer->length = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002414 <HAL_MspInit+0x4c>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <HAL_MspInit+0x4c>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_MspInit+0x4c>)
 80023f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_MspInit+0x4c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002406:	2007      	movs	r0, #7
 8002408:	f006 f810 	bl	800842c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_I2C_MspInit+0x84>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d12b      	bne.n	8002492 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	4b18      	ldr	r3, [pc, #96]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002456:	23c0      	movs	r3, #192	@ 0xc0
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245a:	2312      	movs	r3, #18
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002466:	2304      	movs	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <HAL_I2C_MspInit+0x8c>)
 8002472:	f006 f81d 	bl	80084b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 8002480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_I2C_MspInit+0x88>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	@ 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40005400 	.word	0x40005400
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020400 	.word	0x40020400

080024a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	@ 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_TIM_Encoder_MspInit+0x94>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d134      	bne.n	8002534 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a14      	ldr	r2, [pc, #80]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <HAL_TIM_Encoder_MspInit+0x98>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4619      	mov	r1, r3
 800251e:	4809      	ldr	r0, [pc, #36]	@ (8002544 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002520:	f005 ffc6 	bl	80084b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8002524:	2201      	movs	r2, #1
 8002526:	2100      	movs	r1, #0
 8002528:	2019      	movs	r0, #25
 800252a:	f005 ff8a 	bl	8008442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800252e:	2019      	movs	r0, #25
 8002530:	f005 ffa3 	bl	800847a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	@ 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010000 	.word	0x40010000
 8002540:	40023800 	.word	0x40023800
 8002544:	40020000 	.word	0x40020000

08002548 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002558:	d10d      	bne.n	8002576 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_TIM_PWM_MspInit+0x3c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_TIM_Base_MspInit+0x80>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d116      	bne.n	80025c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b1b      	ldr	r3, [pc, #108]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	201d      	movs	r0, #29
 80025bc:	f005 ff41 	bl	8008442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025c0:	201d      	movs	r0, #29
 80025c2:	f005 ff5a 	bl	800847a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80025c6:	e01a      	b.n	80025fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a10      	ldr	r2, [pc, #64]	@ (8002610 <HAL_TIM_Base_MspInit+0x88>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d115      	bne.n	80025fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <HAL_TIM_Base_MspInit+0x84>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 80025ee:	2201      	movs	r2, #1
 80025f0:	2100      	movs	r1, #0
 80025f2:	2019      	movs	r0, #25
 80025f4:	f005 ff25 	bl	8008442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025f8:	2019      	movs	r0, #25
 80025fa:	f005 ff3e 	bl	800847a <HAL_NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40000400 	.word	0x40000400
 800260c:	40023800 	.word	0x40023800
 8002610:	40014400 	.word	0x40014400

08002614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d11d      	bne.n	8002672 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	4b10      	ldr	r3, [pc, #64]	@ (800267c <HAL_TIM_MspPostInit+0x68>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	4a0f      	ldr	r2, [pc, #60]	@ (800267c <HAL_TIM_MspPostInit+0x68>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	@ 0x30
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_TIM_MspPostInit+0x68>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002652:	2301      	movs	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002662:	2301      	movs	r3, #1
 8002664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 030c 	add.w	r3, r7, #12
 800266a:	4619      	mov	r1, r3
 800266c:	4804      	ldr	r0, [pc, #16]	@ (8002680 <HAL_TIM_MspPostInit+0x6c>)
 800266e:	f005 ff1f 	bl	80084b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002672:	bf00      	nop
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40020000 	.word	0x40020000

08002684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_UART_MspInit+0x84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12b      	bne.n	80026fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a10      	ldr	r2, [pc, #64]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_UART_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026de:	230c      	movs	r3, #12
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ee:	2307      	movs	r3, #7
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	@ (8002710 <HAL_UART_MspInit+0x8c>)
 80026fa:	f005 fed9 	bl	80084b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	@ 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276a:	f005 fd4b 	bl	8008204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002778:	4803      	ldr	r0, [pc, #12]	@ (8002788 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800277a:	f007 ff39 	bl	800a5f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800277e:	4803      	ldr	r0, [pc, #12]	@ (800278c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002780:	f007 ff36 	bl	800a5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000cfc 	.word	0x20000cfc
 800278c:	20000dd4 	.word	0x20000dd4

08002790 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <TIM3_IRQHandler+0x10>)
 8002796:	f007 ff2b 	bl	800a5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000d8c 	.word	0x20000d8c

080027a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027a8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027ac:	f006 f81e 	bl	80087ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_kill>:

int _kill(int pid, int sig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027ce:	f00a f885 	bl	800c8dc <__errno>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2216      	movs	r2, #22
 80027d6:	601a      	str	r2, [r3, #0]
  return -1;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <_exit>:

void _exit (int status)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ffe7 	bl	80027c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027f6:	bf00      	nop
 80027f8:	e7fd      	b.n	80027f6 <_exit+0x12>

080027fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e00a      	b.n	8002822 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800280c:	f3af 8000 	nop.w
 8002810:	4601      	mov	r1, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	60ba      	str	r2, [r7, #8]
 8002818:	b2ca      	uxtb	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	3301      	adds	r3, #1
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	dbf0      	blt.n	800280c <_read+0x12>
  }

  return len;
 800282a:	687b      	ldr	r3, [r7, #4]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e009      	b.n	800285a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	60ba      	str	r2, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fb78 	bl	8001f44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	dbf1      	blt.n	8002846 <_write+0x12>
  }
  return len;
 8002862:	687b      	ldr	r3, [r7, #4]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_close>:

int _close(int file)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002894:	605a      	str	r2, [r3, #4]
  return 0;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <_isatty>:

int _isatty(int file)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <_sbrk+0x5c>)
 80028de:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <_sbrk+0x60>)
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e8:	4b13      	ldr	r3, [pc, #76]	@ (8002938 <_sbrk+0x64>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f0:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <_sbrk+0x64>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <_sbrk+0x68>)
 80028f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f6:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	429a      	cmp	r2, r3
 8002902:	d207      	bcs.n	8002914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002904:	f009 ffea 	bl	800c8dc <__errno>
 8002908:	4603      	mov	r3, r0
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e009      	b.n	8002928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	4a05      	ldr	r2, [pc, #20]	@ (8002938 <_sbrk+0x64>)
 8002924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20020000 	.word	0x20020000
 8002934:	00000400 	.word	0x00000400
 8002938:	20000e84 	.word	0x20000e84
 800293c:	20001288 	.word	0x20001288

08002940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <SystemInit+0x20>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <SystemInit+0x20>)
 800294c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800299c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002968:	f7ff ffea 	bl	8002940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800296c:	480c      	ldr	r0, [pc, #48]	@ (80029a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296e:	490d      	ldr	r1, [pc, #52]	@ (80029a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002970:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002974:	e002      	b.n	800297c <LoopCopyDataInit>

08002976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297a:	3304      	adds	r3, #4

0800297c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800297c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002980:	d3f9      	bcc.n	8002976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002984:	4c0a      	ldr	r4, [pc, #40]	@ (80029b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002988:	e001      	b.n	800298e <LoopFillZerobss>

0800298a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800298c:	3204      	adds	r2, #4

0800298e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002990:	d3fb      	bcc.n	800298a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002992:	f009 ffa9 	bl	800c8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002996:	f7fe ff5d 	bl	8001854 <main>
  bx  lr    
 800299a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800299c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 80029a8:	08010838 	.word	0x08010838
  ldr r2, =_sbss
 80029ac:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 80029b0:	20001284 	.word	0x20001284

080029b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC_IRQHandler>

080029b6 <VL53L0X_GetPalErrorString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	6039      	str	r1, [r7, #0]
 80029c0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fecf 	bl	8007770 <VL53L0X_get_pal_error_string>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f001 fd9d 	bl	8004532 <VL53L0X_get_offset_calibration_data_micro_meter>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80029fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0a4      	sub	sp, #144	@ 0x90
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002a16:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2188      	movs	r1, #136	@ 0x88
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f005 fa3c 	bl	8007ea0 <VL53L0X_WrByte>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a3c:	f8a3 217e 	strh.w	r2, [r3, #382]	@ 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4aae      	ldr	r2, [pc, #696]	@ (8002cfc <VL53L0X_DataInit+0x2f4>)
 8002a44:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4619      	mov	r1, r3
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 fadf 	bl	8003018 <VL53L0X_GetDeviceParameters>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 8002a60:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d130      	bne.n	8002aca <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8002a68:	2300      	movs	r3, #0
 8002a6a:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8002a70:	2300      	movs	r3, #0
 8002a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8002a74:	f04f 6396 	mov.w	r3, #78643200	@ 0x4b00000
 8002a78:	66bb      	str	r3, [r7, #104]	@ 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8002a7a:	f24b 3333 	movw	r3, #45875	@ 0xb333
 8002a7e:	653b      	str	r3, [r7, #80]	@ 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8002a80:	4b9f      	ldr	r3, [pc, #636]	@ (8002d00 <VL53L0X_DataInit+0x2f8>)
 8002a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8002a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a88:	657b      	str	r3, [r7, #84]	@ 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8002a8a:	f04f 7361 	mov.w	r3, #58982400	@ 0x3840000
 8002a8e:	673b      	str	r3, [r7, #112]	@ 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8002a90:	4b9c      	ldr	r3, [pc, #624]	@ (8002d04 <VL53L0X_DataInit+0x2fc>)
 8002a92:	65bb      	str	r3, [r7, #88]	@ 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8002a94:	4b9c      	ldr	r3, [pc, #624]	@ (8002d08 <VL53L0X_DataInit+0x300>)
 8002a96:	677b      	str	r3, [r7, #116]	@ 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 8002a98:	4b9c      	ldr	r3, [pc, #624]	@ (8002d0c <VL53L0X_DataInit+0x304>)
 8002a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8002a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002d10 <VL53L0X_DataInit+0x308>)
 8002a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8002aa0:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8002aa4:	663b      	str	r3, [r7, #96]	@ 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 8002aa6:	f04f 73fa 	mov.w	r3, #32768000	@ 0x1f40000
 8002aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8002aac:	f44f 2370 	mov.w	r3, #983040	@ 0xf0000
 8002ab0:	667b      	str	r3, [r7, #100]	@ 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8002ab2:	f04f 73c8 	mov.w	r3, #26214400	@ 0x1900000
 8002ab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3308      	adds	r3, #8
 8002abe:	f107 0110 	add.w	r1, r7, #16
 8002ac2:	2278      	movs	r2, #120	@ 0x78
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f009 ff3e 	bl	800c946 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2264      	movs	r2, #100	@ 0x64
 8002ace:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8002ad8:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ae2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8002aec:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 217c 	strb.w	r2, [r3, #380]	@ 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002af8:	2201      	movs	r2, #1
 8002afa:	2180      	movs	r1, #128	@ 0x80
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f005 f9cf 	bl	8007ea0 <VL53L0X_WrByte>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b10:	2201      	movs	r2, #1
 8002b12:	21ff      	movs	r1, #255	@ 0xff
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 f9c3 	bl	8007ea0 <VL53L0X_WrByte>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f005 f9b7 	bl	8007ea0 <VL53L0X_WrByte>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002b40:	f107 030f 	add.w	r3, r7, #15
 8002b44:	461a      	mov	r2, r3
 8002b46:	2191      	movs	r1, #145	@ 0x91
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 fa5d 	bl	8008008 <VL53L0X_RdByte>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f883 2166 	strb.w	r2, [r3, #358]	@ 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2100      	movs	r1, #0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 f999 	bl	8007ea0 <VL53L0X_WrByte>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	21ff      	movs	r1, #255	@ 0xff
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f005 f98d 	bl	8007ea0 <VL53L0X_WrByte>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	@ 0x80
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f005 f981 	bl	8007ea0 <VL53L0X_WrByte>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb2:	e017      	b.n	8002be4 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8002bb4:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d118      	bne.n	8002bee <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fd8a 	bl	80036e0 <VL53L0X_SetLimitCheckEnable>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bde:	3301      	adds	r3, #1
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	dde3      	ble.n	8002bb4 <VL53L0X_DataInit+0x1ac>
 8002bec:	e000      	b.n	8002bf0 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8002bee:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002bf0:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d107      	bne.n	8002c08 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fd6f 	bl	80036e0 <VL53L0X_SetLimitCheckEnable>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c08:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c10:	2200      	movs	r2, #0
 8002c12:	2103      	movs	r1, #3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fd63 	bl	80036e0 <VL53L0X_SetLimitCheckEnable>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c20:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fd57 	bl	80036e0 <VL53L0X_SetLimitCheckEnable>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002c38:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002c40:	2200      	movs	r2, #0
 8002c42:	2105      	movs	r1, #5
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fd4b 	bl	80036e0 <VL53L0X_SetLimitCheckEnable>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002c50:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d108      	bne.n	8002c6a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c58:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fdee 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002c6a:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c76:	2101      	movs	r1, #1
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fde1 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c84:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002c8c:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8002c90:	2102      	movs	r1, #2
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fdd4 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c9e:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2103      	movs	r1, #3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fdc8 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002cb6:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10f      	bne.n	8002cde <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	22ff      	movs	r2, #255	@ 0xff
 8002cc2:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002cc6:	22ff      	movs	r2, #255	@ 0xff
 8002cc8:	2101      	movs	r1, #1
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f005 f8e8 	bl	8007ea0 <VL53L0X_WrByte>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002cde:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8002cee:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3790      	adds	r7, #144	@ 0x90
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	000970a4 	.word	0x000970a4
 8002d00:	044c0000 	.word	0x044c0000
 8002d04:	0003cccc 	.word	0x0003cccc
 8002d08:	02ee0000 	.word	0x02ee0000
 8002d0c:	00074ccc 	.word	0x00074ccc
 8002d10:	02260000 	.word	0x02260000

08002d14 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b0ac      	sub	sp, #176	@ 0xb0
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002d22:	f107 031c 	add.w	r3, r7, #28
 8002d26:	2278      	movs	r2, #120	@ 0x78
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f009 fd83 	bl	800c836 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	uint32_t count = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	uint8_t isApertureSpads = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002d52:	2101      	movs	r1, #1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f002 fb42 	bl	80053de <VL53L0X_get_info_from_device>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 313f 	ldrb.w	r3, [r3, #319]	@ 0x13f
 8002d66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8002d70:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002d74:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d80f      	bhi.n	8002d9c <VL53L0X_StaticInit+0x88>
 8002d7c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d103      	bne.n	8002d8c <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8002d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d807      	bhi.n	8002d9c <VL53L0X_StaticInit+0x88>
 8002d8c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10f      	bne.n	8002db4 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8002d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d90b      	bls.n	8002db4 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002d9c:	f107 0218 	add.w	r2, r7, #24
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f001 fdbe 	bl	8004928 <VL53L0X_perform_ref_spad_management>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002db2:	e00a      	b.n	8002dca <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002db4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002db8:	461a      	mov	r2, r3
 8002dba:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 ffbe 	bl	8004d40 <VL53L0X_set_reference_spads>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002dca:	4b92      	ldr	r3, [pc, #584]	@ (8003014 <VL53L0X_StaticInit+0x300>)
 8002dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8002dd0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d111      	bne.n	8002dfc <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 317c 	ldrb.w	r3, [r3, #380]	@ 0x17c
 8002dde:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002de2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002df0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002df4:	e002      	b.n	8002dfc <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002df6:	4b87      	ldr	r3, [pc, #540]	@ (8003014 <VL53L0X_StaticInit+0x300>)
 8002df8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002dfc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8002e04:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f003 fe7d 	bl	8006b08 <VL53L0X_load_tuning_settings>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e14:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	2304      	movs	r3, #4
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f001 f9b6 	bl	8004198 <VL53L0X_SetGpioConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e32:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	21ff      	movs	r1, #255	@ 0xff
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f005 f82e 	bl	8007ea0 <VL53L0X_WrByte>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002e4a:	f107 031a 	add.w	r3, r7, #26
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2184      	movs	r1, #132	@ 0x84
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f005 f902 	bl	800805c <VL53L0X_RdWord>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002e66:	2200      	movs	r2, #0
 8002e68:	21ff      	movs	r1, #255	@ 0xff
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f005 f818 	bl	8007ea0 <VL53L0X_WrByte>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e7e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d104      	bne.n	8002e90 <VL53L0X_StaticInit+0x17c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8002e86:	8b7b      	ldrh	r3, [r7, #26]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002e90:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8ba 	bl	8003018 <VL53L0X_GetDeviceParameters>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8002eaa:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d110      	bne.n	8002ed4 <VL53L0X_StaticInit+0x1c0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002eb2:	f107 0319 	add.w	r3, r7, #25
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9a2 	bl	8003202 <VL53L0X_GetFractionEnable>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8002ec4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <VL53L0X_StaticInit+0x1c0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8002ecc:	7e7a      	ldrb	r2, [r7, #25]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f883 215d 	strb.w	r2, [r3, #349]	@ 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002ed4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d107      	bne.n	8002eec <VL53L0X_StaticInit+0x1d8>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f107 011c 	add.w	r1, r7, #28
 8002ee4:	2278      	movs	r2, #120	@ 0x78
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f009 fd2d 	bl	800c946 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8002eec:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <VL53L0X_StaticInit+0x204>
		Status = VL53L0X_RdByte(Dev,
 8002ef4:	f107 0319 	add.w	r3, r7, #25
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2101      	movs	r1, #1
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f005 f883 	bl	8008008 <VL53L0X_RdByte>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8002f08:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <VL53L0X_StaticInit+0x204>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002f10:	7e7a      	ldrb	r2, [r7, #25]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8002f18:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <VL53L0X_StaticInit+0x21c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f9e1 	bl	80032ec <VL53L0X_SetSequenceStepEnable>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002f30:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <VL53L0X_StaticInit+0x234>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9d5 	bl	80032ec <VL53L0X_SetSequenceStepEnable>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8002f48:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d103      	bne.n	8002f58 <VL53L0X_StaticInit+0x244>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2203      	movs	r2, #3
 8002f54:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f58:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <VL53L0X_StaticInit+0x260>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002f60:	f107 0313 	add.w	r3, r7, #19
 8002f64:	461a      	mov	r2, r3
 8002f66:	2100      	movs	r1, #0
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9a7 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f74:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d103      	bne.n	8002f84 <VL53L0X_StaticInit+0x270>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002f7c:	7cfa      	ldrb	r2, [r7, #19]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002f84:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <VL53L0X_StaticInit+0x28c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002f8c:	f107 0313 	add.w	r3, r7, #19
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f991 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fa0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d103      	bne.n	8002fb0 <VL53L0X_StaticInit+0x29c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fa8:	7cfa      	ldrb	r2, [r7, #19]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fb0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <VL53L0X_StaticInit+0x2b8>
		Status = get_sequence_step_timeout(
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f002 ff8d 	bl	8005ee0 <get_sequence_step_timeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002fcc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <VL53L0X_StaticInit+0x2c8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8002fdc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <VL53L0X_StaticInit+0x2e4>
		Status = get_sequence_step_timeout(
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2104      	movs	r1, #4
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f002 ff77 	bl	8005ee0 <get_sequence_step_timeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002ff8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <VL53L0X_StaticInit+0x2f4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003008:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
}
 800300c:	4618      	mov	r0, r3
 800300e:	37a8      	adds	r7, #168	@ 0xa8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000004 	.word	0x20000004

08003018 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8d6 	bl	80031dc <VL53L0X_GetDeviceMode>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	3308      	adds	r3, #8
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fad0 	bl	80035e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800304c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2200      	movs	r2, #0
 8003058:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	3310      	adds	r3, #16
 8003066:	4619      	mov	r1, r3
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb06 	bl	800367a <VL53L0X_GetXTalkCompensationRateMegaCps>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3314      	adds	r3, #20
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fcae 	bl	80029e2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800308a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d134      	bne.n	80030fc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	e02a      	b.n	80030ee <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d12a      	bne.n	80030f6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	b299      	uxth	r1, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3308      	adds	r3, #8
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	3304      	adds	r3, #4
 80030b0:	461a      	mov	r2, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fc26 	bl	8003904 <VL53L0X_GetLimitCheckValue>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	7bfb      	ldrb	r3, [r7, #15]
 80030be:	4313      	orrs	r3, r2
 80030c0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d117      	bne.n	80030fa <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	b299      	uxth	r1, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3318      	adds	r3, #24
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	461a      	mov	r2, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb8d 	bl	80037f8 <VL53L0X_GetLimitCheckEnable>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	3301      	adds	r3, #1
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	ddd1      	ble.n	8003098 <VL53L0X_GetDeviceParameters+0x80>
 80030f4:	e002      	b.n	80030fc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80030fa:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80030fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d107      	bne.n	8003114 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	3374      	adds	r3, #116	@ 0x74
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fc88 	bl	8003a20 <VL53L0X_GetWrapAroundCheckEnable>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	3304      	adds	r3, #4
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f89f 	bl	8003266 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8003128:	4603      	mov	r3, r0
 800312a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800312c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d120      	bne.n	8003176 <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e01a      	b.n	8003170 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	3310      	adds	r3, #16
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	330e      	adds	r3, #14
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	3316      	adds	r3, #22
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 800315e:	6839      	ldr	r1, [r7, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3314      	adds	r3, #20
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3301      	adds	r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b06      	cmp	r3, #6
 8003174:	dde1      	ble.n	800313a <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	2b15      	cmp	r3, #21
 8003198:	bf8c      	ite	hi
 800319a:	2201      	movhi	r2, #1
 800319c:	2200      	movls	r2, #0
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	2a00      	cmp	r2, #0
 80031a2:	d10f      	bne.n	80031c4 <VL53L0X_SetDeviceMode+0x40>
 80031a4:	4a0c      	ldr	r2, [pc, #48]	@ (80031d8 <VL53L0X_SetDeviceMode+0x54>)
 80031a6:	fa22 f303 	lsr.w	r3, r2, r3
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	721a      	strb	r2, [r3, #8]
		break;
 80031c2:	e001      	b.n	80031c8 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80031c4:	23f8      	movs	r3, #248	@ 0xf8
 80031c6:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80031c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	0030000b 	.word	0x0030000b

080031dc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7a1a      	ldrb	r2, [r3, #8]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80031f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	2109      	movs	r1, #9
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f004 fef7 	bl	8008008 <VL53L0X_RdByte>
 800321a:	4603      	mov	r3, r0
 800321c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800324a:	2300      	movs	r3, #0
 800324c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800324e:	6839      	ldr	r1, [r7, #0]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f003 fad5 	bl	8006800 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003256:	4603      	mov	r3, r0
 8003258:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800325a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f003 fb95 	bl	80069a6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003280:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
 8003298:	4613      	mov	r3, r2
 800329a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80032a0:	78ba      	ldrb	r2, [r7, #2]
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	4619      	mov	r1, r3
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f002 ffec 	bl	8006284 <VL53L0X_set_vcsel_pulse_period>
 80032ac:	4603      	mov	r3, r0
 80032ae:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80032b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	460b      	mov	r3, r1
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4619      	mov	r1, r3
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f003 fa5c 	bl	8006792 <VL53L0X_get_vcsel_pulse_period>
 80032da:	4603      	mov	r3, r0
 80032dc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80032de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
	...

080032ec <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
 80032f8:	4613      	mov	r3, r2
 80032fa:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032fc:	2300      	movs	r3, #0
 80032fe:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003308:	f107 030f 	add.w	r3, r7, #15
 800330c:	461a      	mov	r2, r3
 800330e:	2101      	movs	r1, #1
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f004 fe79 	bl	8008008 <VL53L0X_RdByte>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800331e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d159      	bne.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8003326:	78bb      	ldrb	r3, [r7, #2]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d12b      	bne.n	8003384 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d825      	bhi.n	800337e <VL53L0X_SetSequenceStepEnable+0x92>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800334d 	.word	0x0800334d
 800333c:	08003357 	.word	0x08003357
 8003340:	08003361 	.word	0x08003361
 8003344:	0800336b 	.word	0x0800336b
 8003348:	08003375 	.word	0x08003375
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800334c:	7dbb      	ldrb	r3, [r7, #22]
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	75bb      	strb	r3, [r7, #22]
				break;
 8003354:	e041      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003356:	7dbb      	ldrb	r3, [r7, #22]
 8003358:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800335c:	75bb      	strb	r3, [r7, #22]
				break;
 800335e:	e03c      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003360:	7dbb      	ldrb	r3, [r7, #22]
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	75bb      	strb	r3, [r7, #22]
				break;
 8003368:	e037      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800336a:	7dbb      	ldrb	r3, [r7, #22]
 800336c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003370:	75bb      	strb	r3, [r7, #22]
				break;
 8003372:	e032      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8003374:	7dbb      	ldrb	r3, [r7, #22]
 8003376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800337a:	75bb      	strb	r3, [r7, #22]
				break;
 800337c:	e02d      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800337e:	23fc      	movs	r3, #252	@ 0xfc
 8003380:	75fb      	strb	r3, [r7, #23]
 8003382:	e02a      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b04      	cmp	r3, #4
 8003388:	d825      	bhi.n	80033d6 <VL53L0X_SetSequenceStepEnable+0xea>
 800338a:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800338c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003390:	080033a5 	.word	0x080033a5
 8003394:	080033af 	.word	0x080033af
 8003398:	080033b9 	.word	0x080033b9
 800339c:	080033c3 	.word	0x080033c3
 80033a0:	080033cd 	.word	0x080033cd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80033a4:	7dbb      	ldrb	r3, [r7, #22]
 80033a6:	f023 0310 	bic.w	r3, r3, #16
 80033aa:	75bb      	strb	r3, [r7, #22]
				break;
 80033ac:	e015      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80033ae:	7dbb      	ldrb	r3, [r7, #22]
 80033b0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80033b4:	75bb      	strb	r3, [r7, #22]
				break;
 80033b6:	e010      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80033b8:	7dbb      	ldrb	r3, [r7, #22]
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	75bb      	strb	r3, [r7, #22]
				break;
 80033c0:	e00b      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80033c2:	7dbb      	ldrb	r3, [r7, #22]
 80033c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033c8:	75bb      	strb	r3, [r7, #22]
				break;
 80033ca:	e006      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80033cc:	7dbb      	ldrb	r3, [r7, #22]
 80033ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d2:	75bb      	strb	r3, [r7, #22]
				break;
 80033d4:	e001      	b.n	80033da <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80033d6:	23fc      	movs	r3, #252	@ 0xfc
 80033d8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	7dba      	ldrb	r2, [r7, #22]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d01e      	beq.n	8003420 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80033e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80033ea:	7dbb      	ldrb	r3, [r7, #22]
 80033ec:	461a      	mov	r2, r3
 80033ee:	2101      	movs	r1, #1
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f004 fd55 	bl	8007ea0 <VL53L0X_WrByte>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80033fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7dba      	ldrb	r2, [r7, #22]
 8003406:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ff10 	bl	8003240 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003420:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	72fb      	strb	r3, [r7, #11]
 800343a:	4613      	mov	r3, r2
 800343c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d836      	bhi.n	80034bc <sequence_step_enabled+0x90>
 800344e:	a201      	add	r2, pc, #4	@ (adr r2, 8003454 <sequence_step_enabled+0x28>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	08003469 	.word	0x08003469
 8003458:	0800347b 	.word	0x0800347b
 800345c:	0800348d 	.word	0x0800348d
 8003460:	0800349f 	.word	0x0800349f
 8003464:	080034b1 	.word	0x080034b1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003468:	7abb      	ldrb	r3, [r7, #10]
 800346a:	111b      	asrs	r3, r3, #4
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	701a      	strb	r2, [r3, #0]
		break;
 8003478:	e022      	b.n	80034c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800347a:	7abb      	ldrb	r3, [r7, #10]
 800347c:	10db      	asrs	r3, r3, #3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	701a      	strb	r2, [r3, #0]
		break;
 800348a:	e019      	b.n	80034c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800348c:	7abb      	ldrb	r3, [r7, #10]
 800348e:	109b      	asrs	r3, r3, #2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	701a      	strb	r2, [r3, #0]
		break;
 800349c:	e010      	b.n	80034c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800349e:	7abb      	ldrb	r3, [r7, #10]
 80034a0:	119b      	asrs	r3, r3, #6
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	701a      	strb	r2, [r3, #0]
		break;
 80034ae:	e007      	b.n	80034c0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80034b0:	7abb      	ldrb	r3, [r7, #10]
 80034b2:	09db      	lsrs	r3, r3, #7
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	701a      	strb	r2, [r3, #0]
		break;
 80034ba:	e001      	b.n	80034c0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80034bc:	23fc      	movs	r3, #252	@ 0xfc
 80034be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80034c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034e2:	f107 030e 	add.w	r3, r7, #14
 80034e6:	461a      	mov	r2, r3
 80034e8:	2101      	movs	r1, #1
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f004 fd8c 	bl	8008008 <VL53L0X_RdByte>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80034f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d107      	bne.n	800350c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80034fc:	7bba      	ldrb	r2, [r7, #14]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff92 	bl	800342c <sequence_step_enabled>
 8003508:	4603      	mov	r3, r0
 800350a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800350c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d108      	bne.n	8003526 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003514:	7bba      	ldrb	r2, [r7, #14]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3302      	adds	r3, #2
 800351a:	2101      	movs	r1, #1
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff85 	bl	800342c <sequence_step_enabled>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800352e:	7bba      	ldrb	r2, [r7, #14]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	2102      	movs	r1, #2
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff78 	bl	800342c <sequence_step_enabled>
 800353c:	4603      	mov	r3, r0
 800353e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003548:	7bba      	ldrb	r2, [r7, #14]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	3303      	adds	r3, #3
 800354e:	2103      	movs	r1, #3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff6b 	bl	800342c <sequence_step_enabled>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d108      	bne.n	8003574 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8003562:	7bba      	ldrb	r2, [r7, #14]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	3304      	adds	r3, #4
 8003568:	2104      	movs	r1, #4
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff5e 	bl	800342c <sequence_step_enabled>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800358e:	f107 030e 	add.w	r3, r7, #14
 8003592:	461a      	mov	r2, r3
 8003594:	21f8      	movs	r1, #248	@ 0xf8
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f004 fd60 	bl	800805c <VL53L0X_RdWord>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80035a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d112      	bne.n	80035ce <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	e001      	b.n	80035c0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	2104      	movs	r1, #4
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f004 fcb9 	bl	8007f3c <VL53L0X_WrDWord>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80035ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	461a      	mov	r2, r3
 80035fc:	21f8      	movs	r1, #248	@ 0xf8
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f004 fd2c 	bl	800805c <VL53L0X_RdWord>
 8003604:	4603      	mov	r3, r0
 8003606:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8003608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d108      	bne.n	8003622 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	461a      	mov	r2, r3
 8003616:	2104      	movs	r1, #4
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f004 fd55 	bl	80080c8 <VL53L0X_RdDWord>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10c      	bne.n	8003644 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800362a:	89bb      	ldrh	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	89ba      	ldrh	r2, [r7, #12]
 8003634:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7d1b      	ldrb	r3, [r3, #20]
 8003662:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	7bba      	ldrb	r2, [r7, #14]
 8003668:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003688:	f107 030e 	add.w	r3, r7, #14
 800368c:	461a      	mov	r2, r3
 800368e:	2120      	movs	r1, #32
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f004 fce3 	bl	800805c <VL53L0X_RdWord>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800369a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80036a2:	89fb      	ldrh	r3, [r7, #14]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	751a      	strb	r2, [r3, #20]
 80036ba:	e00b      	b.n	80036d4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80036d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	2b05      	cmp	r3, #5
 8003704:	d902      	bls.n	800370c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003706:	23fc      	movs	r3, #252	@ 0xfc
 8003708:	75fb      	strb	r3, [r7, #23]
 800370a:	e05b      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	73bb      	strb	r3, [r7, #14]
 800371e:	e00a      	b.n	8003736 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	330a      	adds	r3, #10
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d841      	bhi.n	80037c0 <VL53L0X_SetLimitCheckEnable+0xe0>
 800373c:	a201      	add	r2, pc, #4	@ (adr r2, 8003744 <VL53L0X_SetLimitCheckEnable+0x64>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003767 	.word	0x08003767
 800374c:	0800377d 	.word	0x0800377d
 8003750:	08003787 	.word	0x08003787
 8003754:	08003791 	.word	0x08003791
 8003758:	080037a9 	.word	0x080037a9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003764:	e02e      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800376a:	b29b      	uxth	r3, r3
 800376c:	461a      	mov	r2, r3
 800376e:	2144      	movs	r1, #68	@ 0x44
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f004 fbb9 	bl	8007ee8 <VL53L0X_WrWord>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]

			break;
 800377a:	e023      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003784:	e01e      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7bfa      	ldrb	r2, [r7, #15]
 800378a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800378e:	e019      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003790:	7bbb      	ldrb	r3, [r7, #14]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003796:	7b7b      	ldrb	r3, [r7, #13]
 8003798:	22fe      	movs	r2, #254	@ 0xfe
 800379a:	2160      	movs	r1, #96	@ 0x60
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f004 fbff 	bl	8007fa0 <VL53L0X_UpdateByte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80037a6:	e00d      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80037a8:	7bbb      	ldrb	r3, [r7, #14]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80037ae:	7b7b      	ldrb	r3, [r7, #13]
 80037b0:	22ef      	movs	r2, #239	@ 0xef
 80037b2:	2160      	movs	r1, #96	@ 0x60
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f004 fbf3 	bl	8007fa0 <VL53L0X_UpdateByte>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80037be:	e001      	b.n	80037c4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80037c0:	23fc      	movs	r3, #252	@ 0xfc
 80037c2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10f      	bne.n	80037ec <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80037cc:	787b      	ldrb	r3, [r7, #1]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037d2:	887b      	ldrh	r3, [r7, #2]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2020 	strb.w	r2, [r3, #32]
 80037de:	e005      	b.n	80037ec <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	460b      	mov	r3, r1
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d905      	bls.n	800381c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003810:	23fc      	movs	r3, #252	@ 0xfc
 8003812:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e008      	b.n	800382e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003826:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	7dba      	ldrb	r2, [r7, #22]
 800382c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800382e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	460b      	mov	r3, r1
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003864:	897b      	ldrh	r3, [r7, #10]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	330a      	adds	r3, #10
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e040      	b.n	80038f6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003874:	897b      	ldrh	r3, [r7, #10]
 8003876:	2b05      	cmp	r3, #5
 8003878:	d830      	bhi.n	80038dc <VL53L0X_SetLimitCheckValue+0x9c>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <VL53L0X_SetLimitCheckValue+0x40>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	08003899 	.word	0x08003899
 8003884:	080038a1 	.word	0x080038a1
 8003888:	080038b7 	.word	0x080038b7
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038c7 	.word	0x080038c7
 8003894:	080038c7 	.word	0x080038c7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	62da      	str	r2, [r3, #44]	@ 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800389e:	e01f      	b.n	80038e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	2144      	movs	r1, #68	@ 0x44
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f004 fb1c 	bl	8007ee8 <VL53L0X_WrWord>
 80038b0:	4603      	mov	r3, r0
 80038b2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80038b4:	e014      	b.n	80038e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80038bc:	e010      	b.n	80038e0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80038c4:	e00c      	b.n	80038e0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	2164      	movs	r1, #100	@ 0x64
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f004 fb09 	bl	8007ee8 <VL53L0X_WrWord>
 80038d6:	4603      	mov	r3, r0
 80038d8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80038da:	e001      	b.n	80038e0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80038dc:	23fc      	movs	r3, #252	@ 0xfc
 80038de:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80038e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038e8:	897b      	ldrh	r3, [r7, #10]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	330a      	adds	r3, #10
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80038f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	460b      	mov	r3, r1
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003912:	2300      	movs	r3, #0
 8003914:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800391a:	897b      	ldrh	r3, [r7, #10]
 800391c:	2b05      	cmp	r3, #5
 800391e:	d847      	bhi.n	80039b0 <VL53L0X_GetLimitCheckValue+0xac>
 8003920:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <VL53L0X_GetLimitCheckValue+0x24>)
 8003922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003926:	bf00      	nop
 8003928:	08003941 	.word	0x08003941
 800392c:	0800394d 	.word	0x0800394d
 8003930:	08003973 	.word	0x08003973
 8003934:	0800397f 	.word	0x0800397f
 8003938:	0800398b 	.word	0x0800398b
 800393c:	0800398b 	.word	0x0800398b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	77bb      	strb	r3, [r7, #30]
		break;
 800394a:	e033      	b.n	80039b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800394c:	f107 0316 	add.w	r3, r7, #22
 8003950:	461a      	mov	r2, r3
 8003952:	2144      	movs	r1, #68	@ 0x44
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f004 fb81 	bl	800805c <VL53L0X_RdWord>
 800395a:	4603      	mov	r3, r0
 800395c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800395e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	025b      	lsls	r3, r3, #9
 800396a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800396c:	2301      	movs	r3, #1
 800396e:	77bb      	strb	r3, [r7, #30]
		break;
 8003970:	e020      	b.n	80039b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003976:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	77bb      	strb	r3, [r7, #30]
		break;
 800397c:	e01a      	b.n	80039b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003982:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	77bb      	strb	r3, [r7, #30]
		break;
 8003988:	e014      	b.n	80039b4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800398a:	f107 0316 	add.w	r3, r7, #22
 800398e:	461a      	mov	r2, r3
 8003990:	2164      	movs	r1, #100	@ 0x64
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f004 fb62 	bl	800805c <VL53L0X_RdWord>
 8003998:	4603      	mov	r3, r0
 800399a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800399c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d102      	bne.n	80039aa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	77bb      	strb	r3, [r7, #30]
		break;
 80039ae:	e001      	b.n	80039b4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039b0:	23fc      	movs	r3, #252	@ 0xfc
 80039b2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d12a      	bne.n	8003a12 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80039bc:	7fbb      	ldrb	r3, [r7, #30]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d124      	bne.n	8003a0c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d110      	bne.n	80039ea <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80039c8:	897b      	ldrh	r3, [r7, #10]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	330a      	adds	r3, #10
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80039dc:	897b      	ldrh	r3, [r7, #10]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4413      	add	r3, r2
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2020 	strb.w	r2, [r3, #32]
 80039e8:	e013      	b.n	8003a12 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	330a      	adds	r3, #10
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2020 	strb.w	r2, [r3, #32]
 8003a0a:	e002      	b.n	8003a12 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a12:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop

08003a20 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003a2e:	f107 030e 	add.w	r3, r7, #14
 8003a32:	461a      	mov	r2, r3
 8003a34:	2101      	movs	r1, #1
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f004 fae6 	bl	8008008 <VL53L0X_RdByte>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10e      	bne.n	8003a66 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003a48:	7bba      	ldrb	r2, [r7, #14]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
		if (data & (0x01 << 7))
 8003a50:	7bbb      	ldrb	r3, [r7, #14]
 8003a52:	b25b      	sxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da03      	bge.n	8003a60 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e002      	b.n	8003a66 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003a90:	f107 030e 	add.w	r3, r7, #14
 8003a94:	4619      	mov	r1, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fba0 	bl	80031dc <VL53L0X_GetDeviceMode>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8003aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f924 	bl	8003cfc <VL53L0X_StartMeasurement>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d104      	bne.n	8003aca <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 fbbf 	bl	8005244 <VL53L0X_measurement_poll_for_completion>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003ad2:	7bbb      	ldrb	r3, [r7, #14]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d103      	bne.n	8003ae0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2203      	movs	r2, #3
 8003adc:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8003ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003afc:	2301      	movs	r3, #1
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 fb61 	bl	80051ca <VL53L0X_perform_ref_calibration>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003b0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003b2e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8003b30:	7dbb      	ldrb	r3, [r7, #22]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	f000 8093 	beq.w	8003c5e <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8003b38:	2b03      	cmp	r3, #3
 8003b3a:	f300 80d6 	bgt.w	8003cea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d002      	beq.n	8003b48 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d047      	beq.n	8003bd6 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8003b46:	e0d0      	b.n	8003cea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	f107 0210 	add.w	r2, r7, #16
 8003b50:	2101      	movs	r1, #1
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fc42 	bl	80043dc <VL53L0X_GetInterruptThresholds>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003b62:	f240 80bd 	bls.w	8003ce0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8003b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 80b8 	bne.w	8003ce0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003b76:	4960      	ldr	r1, [pc, #384]	@ (8003cf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f002 ffc5 	bl	8006b08 <VL53L0X_load_tuning_settings>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003b82:	e0ad      	b.n	8003ce0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003b84:	2204      	movs	r2, #4
 8003b86:	21ff      	movs	r1, #255	@ 0xff
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f004 f989 	bl	8007ea0 <VL53L0X_WrByte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2170      	movs	r1, #112	@ 0x70
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f004 f97f 	bl	8007ea0 <VL53L0X_WrByte>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003bac:	2200      	movs	r2, #0
 8003bae:	21ff      	movs	r1, #255	@ 0xff
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f004 f975 	bl	8007ea0 <VL53L0X_WrByte>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	461a      	mov	r2, r3
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	@ 0x80
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f004 f96b 	bl	8007ea0 <VL53L0X_WrByte>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	461a      	mov	r2, r3
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	75fb      	strb	r3, [r7, #23]
		break;
 8003bd4:	e084      	b.n	8003ce0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	f107 0210 	add.w	r2, r7, #16
 8003bde:	2101      	movs	r1, #1
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fbfb 	bl	80043dc <VL53L0X_GetInterruptThresholds>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d079      	beq.n	8003ce4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8003bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d175      	bne.n	8003ce4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003bfe:	493e      	ldr	r1, [pc, #248]	@ (8003cf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f002 ff81 	bl	8006b08 <VL53L0X_load_tuning_settings>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003c0a:	e06b      	b.n	8003ce4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	21ff      	movs	r1, #255	@ 0xff
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f004 f945 	bl	8007ea0 <VL53L0X_WrByte>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2170      	movs	r1, #112	@ 0x70
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f004 f93b 	bl	8007ea0 <VL53L0X_WrByte>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c34:	2200      	movs	r2, #0
 8003c36:	21ff      	movs	r1, #255	@ 0xff
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f004 f931 	bl	8007ea0 <VL53L0X_WrByte>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2180      	movs	r1, #128	@ 0x80
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f004 f927 	bl	8007ea0 <VL53L0X_WrByte>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	75fb      	strb	r3, [r7, #23]
		break;
 8003c5c:	e042      	b.n	8003ce4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	f107 0210 	add.w	r2, r7, #16
 8003c66:	2101      	movs	r1, #1
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fbb7 	bl	80043dc <VL53L0X_GetInterruptThresholds>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8003c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d136      	bne.n	8003ce8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d006      	beq.n	8003c8e <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003c80:	491d      	ldr	r1, [pc, #116]	@ (8003cf8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f002 ff40 	bl	8006b08 <VL53L0X_load_tuning_settings>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8003c8c:	e02c      	b.n	8003ce8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003c8e:	2204      	movs	r2, #4
 8003c90:	21ff      	movs	r1, #255	@ 0xff
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f004 f904 	bl	8007ea0 <VL53L0X_WrByte>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2170      	movs	r1, #112	@ 0x70
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f004 f8fa 	bl	8007ea0 <VL53L0X_WrByte>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	21ff      	movs	r1, #255	@ 0xff
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f004 f8f0 	bl	8007ea0 <VL53L0X_WrByte>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2180      	movs	r1, #128	@ 0x80
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f004 f8e6 	bl	8007ea0 <VL53L0X_WrByte>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	75fb      	strb	r3, [r7, #23]
		break;
 8003cde:	e003      	b.n	8003ce8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8003ce0:	bf00      	nop
 8003ce2:	e002      	b.n	8003cea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8003ce4:	bf00      	nop
 8003ce6:	e000      	b.n	8003cea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8003ce8:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200000f8 	.word	0x200000f8

08003cfc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003d0c:	f107 030e 	add.w	r3, r7, #14
 8003d10:	4619      	mov	r1, r3
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff fa62 	bl	80031dc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2180      	movs	r1, #128	@ 0x80
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f004 f8bf 	bl	8007ea0 <VL53L0X_WrByte>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d26:	2201      	movs	r2, #1
 8003d28:	21ff      	movs	r1, #255	@ 0xff
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f004 f8b8 	bl	8007ea0 <VL53L0X_WrByte>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003d34:	2200      	movs	r2, #0
 8003d36:	2100      	movs	r1, #0
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f004 f8b1 	bl	8007ea0 <VL53L0X_WrByte>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3166 	ldrb.w	r3, [r3, #358]	@ 0x166
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2191      	movs	r1, #145	@ 0x91
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f004 f8a7 	bl	8007ea0 <VL53L0X_WrByte>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003d56:	2201      	movs	r2, #1
 8003d58:	2100      	movs	r1, #0
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f004 f8a0 	bl	8007ea0 <VL53L0X_WrByte>
 8003d60:	4603      	mov	r3, r0
 8003d62:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d64:	2200      	movs	r2, #0
 8003d66:	21ff      	movs	r1, #255	@ 0xff
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f004 f899 	bl	8007ea0 <VL53L0X_WrByte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003d72:	2200      	movs	r2, #0
 8003d74:	2180      	movs	r1, #128	@ 0x80
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f004 f892 	bl	8007ea0 <VL53L0X_WrByte>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8003d80:	7bbb      	ldrb	r3, [r7, #14]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d054      	beq.n	8003e30 <VL53L0X_StartMeasurement+0x134>
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	dc6c      	bgt.n	8003e64 <VL53L0X_StartMeasurement+0x168>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <VL53L0X_StartMeasurement+0x98>
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d034      	beq.n	8003dfc <VL53L0X_StartMeasurement+0x100>
 8003d92:	e067      	b.n	8003e64 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003d94:	2201      	movs	r2, #1
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f004 f881 	bl	8007ea0 <VL53L0X_WrByte>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d15d      	bne.n	8003e6a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003db8:	f107 030d 	add.w	r3, r7, #13
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f004 f921 	bl	8008008 <VL53L0X_RdByte>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003dd0:	7b7a      	ldrb	r2, [r7, #13]
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d107      	bne.n	8003dee <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8003dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003dec:	d3e1      	bcc.n	8003db2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003df4:	d339      	bcc.n	8003e6a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003df6:	23f9      	movs	r3, #249	@ 0xf9
 8003df8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003dfa:	e036      	b.n	8003e6a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003dfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e04:	2101      	movs	r1, #1
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fe86 	bl	8003b18 <VL53L0X_CheckAndLoadInterruptSettings>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e10:	2202      	movs	r2, #2
 8003e12:	2100      	movs	r1, #0
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f004 f843 	bl	8007ea0 <VL53L0X_WrByte>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d123      	bne.n	8003e6e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
		}
		break;
 8003e2e:	e01e      	b.n	8003e6e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e38:	2101      	movs	r1, #1
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff fe6c 	bl	8003b18 <VL53L0X_CheckAndLoadInterruptSettings>
 8003e40:	4603      	mov	r3, r0
 8003e42:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e44:	2204      	movs	r2, #4
 8003e46:	2100      	movs	r1, #0
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f004 f829 	bl	8007ea0 <VL53L0X_WrByte>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	f883 215e 	strb.w	r2, [r3, #350]	@ 0x15e
		}
		break;
 8003e62:	e006      	b.n	8003e72 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003e64:	23f8      	movs	r3, #248	@ 0xf8
 8003e66:	75fb      	strb	r3, [r7, #23]
 8003e68:	e004      	b.n	8003e74 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <VL53L0X_StartMeasurement+0x178>
		break;
 8003e72:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003e74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8003e94:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003e96:	7bbb      	ldrb	r3, [r7, #14]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d112      	bne.n	8003ec2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fb0e 	bl	80044c4 <VL53L0X_GetInterruptMaskStatus>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d103      	bne.n	8003eba <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e01c      	b.n	8003ef4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e018      	b.n	8003ef4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003ec2:	f107 030d 	add.w	r3, r7, #13
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2114      	movs	r1, #20
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f004 f89c 	bl	8008008 <VL53L0X_RdByte>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10b      	bne.n	8003ef4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003edc:	7b7b      	ldrb	r3, [r7, #13]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e002      	b.n	8003ef4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	b096      	sub	sp, #88	@ 0x58
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003f10:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003f14:	230c      	movs	r3, #12
 8003f16:	2114      	movs	r1, #20
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f003 ff95 	bl	8007e48 <VL53L0X_ReadMulti>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003f24:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 80c8 	bne.w	80040be <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8003f3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003f46:	4413      	add	r3, r2
 8003f48:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003f52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003f5e:	4413      	add	r3, r2
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f6a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8003f6c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003f70:	021b      	lsls	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003f78:	4413      	add	r3, r2
 8003f7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003f7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003f82:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003f88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003f94:	4413      	add	r3, r2
 8003f96:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003fa0:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8003fa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 317e 	ldrh.w	r3, [r3, #382]	@ 0x17e
 8003fb0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 315d 	ldrb.w	r3, [r3, #349]	@ 0x15d
 8003fb8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003fbc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fc2:	d046      	beq.n	8004052 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003fc4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003fc6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8003fd2:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <VL53L0X_GetRangingMeasurementData+0x234>)
 8003fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd8:	1192      	asrs	r2, r2, #6
 8003fda:	17db      	asrs	r3, r3, #31
 8003fdc:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8003fde:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	7d1b      	ldrb	r3, [r3, #20]
 8003fec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8003ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d02c      	beq.n	8004052 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8003ff8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003ffa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8004006:	429a      	cmp	r2, r3
 8004008:	d10d      	bne.n	8004026 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800400a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8004012:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004016:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800401a:	e016      	b.n	800404a <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800401c:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8004020:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004024:	e011      	b.n	800404a <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004026:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800402a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800402c:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004030:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004032:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004036:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800403a:	121b      	asrs	r3, r3, #8
 800403c:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800403e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004040:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004046:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800404a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800404e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004052:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00d      	beq.n	8004076 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800405a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004066:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800406a:	b2db      	uxtb	r3, r3
 800406c:	019b      	lsls	r3, r3, #6
 800406e:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	75da      	strb	r2, [r3, #23]
 8004074:	e006      	b.n	8004084 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800407c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004084:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004088:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800408c:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8004090:	9301      	str	r3, [sp, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4613      	mov	r3, r2
 8004098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f003 f986 	bl	80073ac <VL53L0X_get_pal_range_status>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80040ae:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80040b6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040be:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d12f      	bne.n	8004126 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f107 040c 	add.w	r4, r7, #12
 80040cc:	f103 0580 	add.w	r5, r3, #128	@ 0x80
 80040d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80040e0:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80040ee:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80040f4:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80040fa:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004100:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004106:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800410c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8004116:	f107 050c 	add.w	r5, r7, #12
 800411a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800411c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800411e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004126:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800412a:	4618      	mov	r0, r3
 800412c:	3750      	adds	r7, #80	@ 0x50
 800412e:	46bd      	mov	sp, r7
 8004130:	bdb0      	pop	{r4, r5, r7, pc}
 8004132:	bf00      	nop
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff f81b 	bl	8003184 <VL53L0X_SetDeviceMode>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d104      	bne.n	8004164 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fc92 	bl	8003a84 <VL53L0X_PerformSingleMeasurement>
 8004160:	4603      	mov	r3, r0
 8004162:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800416c:	6839      	ldr	r1, [r7, #0]
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fec6 	bl	8003f00 <VL53L0X_GetRangingMeasurementData>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8004178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004180:	2100      	movs	r1, #0
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f95e 	bl	8004444 <VL53L0X_ClearInterruptMask>
 8004188:	4603      	mov	r3, r0
 800418a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800418c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	70fb      	strb	r3, [r7, #3]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70bb      	strb	r3, [r7, #2]
 80041ae:	4613      	mov	r3, r2
 80041b0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80041bc:	23f6      	movs	r3, #246	@ 0xf6
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e105      	b.n	80043ce <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80041c2:	78bb      	ldrb	r3, [r7, #2]
 80041c4:	2b14      	cmp	r3, #20
 80041c6:	d110      	bne.n	80041ea <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80041c8:	7e3b      	ldrb	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d102      	bne.n	80041d4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80041ce:	2310      	movs	r3, #16
 80041d0:	73bb      	strb	r3, [r7, #14]
 80041d2:	e001      	b.n	80041d8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	461a      	mov	r2, r3
 80041dc:	2184      	movs	r1, #132	@ 0x84
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f003 fe5e 	bl	8007ea0 <VL53L0X_WrByte>
 80041e4:	4603      	mov	r3, r0
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e0f1      	b.n	80043ce <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80041ea:	78bb      	ldrb	r3, [r7, #2]
 80041ec:	2b15      	cmp	r3, #21
 80041ee:	f040 8097 	bne.w	8004320 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80041f2:	2201      	movs	r2, #1
 80041f4:	21ff      	movs	r1, #255	@ 0xff
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f003 fe52 	bl	8007ea0 <VL53L0X_WrByte>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	4313      	orrs	r3, r2
 8004204:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004206:	2200      	movs	r2, #0
 8004208:	2100      	movs	r1, #0
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f003 fe48 	bl	8007ea0 <VL53L0X_WrByte>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	4313      	orrs	r3, r2
 8004218:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800421a:	2200      	movs	r2, #0
 800421c:	21ff      	movs	r1, #255	@ 0xff
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f003 fe3e 	bl	8007ea0 <VL53L0X_WrByte>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	4313      	orrs	r3, r2
 800422c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800422e:	2201      	movs	r2, #1
 8004230:	2180      	movs	r1, #128	@ 0x80
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f003 fe34 	bl	8007ea0 <VL53L0X_WrByte>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	4313      	orrs	r3, r2
 8004240:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004242:	2202      	movs	r2, #2
 8004244:	2185      	movs	r1, #133	@ 0x85
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f003 fe2a 	bl	8007ea0 <VL53L0X_WrByte>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	4313      	orrs	r3, r2
 8004254:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8004256:	2204      	movs	r2, #4
 8004258:	21ff      	movs	r1, #255	@ 0xff
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f003 fe20 	bl	8007ea0 <VL53L0X_WrByte>
 8004260:	4603      	mov	r3, r0
 8004262:	461a      	mov	r2, r3
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	4313      	orrs	r3, r2
 8004268:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800426a:	2200      	movs	r2, #0
 800426c:	21cd      	movs	r1, #205	@ 0xcd
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f003 fe16 	bl	8007ea0 <VL53L0X_WrByte>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	4313      	orrs	r3, r2
 800427c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800427e:	2211      	movs	r2, #17
 8004280:	21cc      	movs	r1, #204	@ 0xcc
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f003 fe0c 	bl	8007ea0 <VL53L0X_WrByte>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	4313      	orrs	r3, r2
 8004290:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004292:	2207      	movs	r2, #7
 8004294:	21ff      	movs	r1, #255	@ 0xff
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f003 fe02 	bl	8007ea0 <VL53L0X_WrByte>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80042a6:	2200      	movs	r2, #0
 80042a8:	21be      	movs	r1, #190	@ 0xbe
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f003 fdf8 	bl	8007ea0 <VL53L0X_WrByte>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80042ba:	2206      	movs	r2, #6
 80042bc:	21ff      	movs	r1, #255	@ 0xff
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f003 fdee 	bl	8007ea0 <VL53L0X_WrByte>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80042ce:	2209      	movs	r2, #9
 80042d0:	21cc      	movs	r1, #204	@ 0xcc
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f003 fde4 	bl	8007ea0 <VL53L0X_WrByte>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	4313      	orrs	r3, r2
 80042e0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80042e2:	2200      	movs	r2, #0
 80042e4:	21ff      	movs	r1, #255	@ 0xff
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f003 fdda 	bl	8007ea0 <VL53L0X_WrByte>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80042f6:	2201      	movs	r2, #1
 80042f8:	21ff      	movs	r1, #255	@ 0xff
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f003 fdd0 	bl	8007ea0 <VL53L0X_WrByte>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	4313      	orrs	r3, r2
 8004308:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f003 fdc6 	bl	8007ea0 <VL53L0X_WrByte>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	4313      	orrs	r3, r2
 800431c:	73fb      	strb	r3, [r7, #15]
 800431e:	e056      	b.n	80043ce <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d120      	bne.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b04      	cmp	r3, #4
 800432c:	d81b      	bhi.n	8004366 <VL53L0X_SetGpioConfig+0x1ce>
 800432e:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <VL53L0X_SetGpioConfig+0x19c>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004349 	.word	0x08004349
 8004338:	0800434f 	.word	0x0800434f
 800433c:	08004355 	.word	0x08004355
 8004340:	0800435b 	.word	0x0800435b
 8004344:	08004361 	.word	0x08004361
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8004348:	2300      	movs	r3, #0
 800434a:	73bb      	strb	r3, [r7, #14]
				break;
 800434c:	e00d      	b.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800434e:	2301      	movs	r3, #1
 8004350:	73bb      	strb	r3, [r7, #14]
				break;
 8004352:	e00a      	b.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004354:	2302      	movs	r3, #2
 8004356:	73bb      	strb	r3, [r7, #14]
				break;
 8004358:	e007      	b.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800435a:	2303      	movs	r3, #3
 800435c:	73bb      	strb	r3, [r7, #14]
				break;
 800435e:	e004      	b.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004360:	2304      	movs	r3, #4
 8004362:	73bb      	strb	r3, [r7, #14]
				break;
 8004364:	e001      	b.n	800436a <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8004366:	23f5      	movs	r3, #245	@ 0xf5
 8004368:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800436a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8004372:	7bbb      	ldrb	r3, [r7, #14]
 8004374:	461a      	mov	r2, r3
 8004376:	210a      	movs	r1, #10
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f003 fd91 	bl	8007ea0 <VL53L0X_WrByte>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8004382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800438a:	7e3b      	ldrb	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d102      	bne.n	8004396 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	73bb      	strb	r3, [r7, #14]
 8004394:	e001      	b.n	800439a <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8004396:	2310      	movs	r3, #16
 8004398:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800439a:	7bbb      	ldrb	r3, [r7, #14]
 800439c:	22ef      	movs	r2, #239	@ 0xef
 800439e:	2184      	movs	r1, #132	@ 0x84
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f003 fdfd 	bl	8007fa0 <VL53L0X_UpdateByte>
 80043a6:	4603      	mov	r3, r0
 80043a8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	787a      	ldrb	r2, [r7, #1]
 80043b6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80043ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80043c2:	2100      	movs	r1, #0
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f83d 	bl	8004444 <VL53L0X_ClearInterruptMask>
 80043ca:	4603      	mov	r3, r0
 80043cc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop

080043dc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	460b      	mov	r3, r1
 80043ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 80043f0:	f107 0314 	add.w	r3, r7, #20
 80043f4:	461a      	mov	r2, r3
 80043f6:	210e      	movs	r1, #14
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f003 fe2f 	bl	800805c <VL53L0X_RdWord>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004402:	8abb      	ldrh	r3, [r7, #20]
 8004404:	045a      	lsls	r2, r3, #17
 8004406:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <VL53L0X_GetInterruptThresholds+0x64>)
 8004408:	4013      	ands	r3, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800440e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10e      	bne.n	8004434 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8004416:	f107 0314 	add.w	r3, r7, #20
 800441a:	461a      	mov	r2, r3
 800441c:	210c      	movs	r1, #12
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f003 fe1c 	bl	800805c <VL53L0X_RdWord>
 8004424:	4603      	mov	r3, r0
 8004426:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004428:	8abb      	ldrh	r3, [r7, #20]
 800442a:	045a      	lsls	r2, r3, #17
 800442c:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <VL53L0X_GetInterruptThresholds+0x64>)
 800442e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	1ffe0000 	.word	0x1ffe0000

08004444 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004456:	2201      	movs	r2, #1
 8004458:	210b      	movs	r1, #11
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f003 fd20 	bl	8007ea0 <VL53L0X_WrByte>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004464:	2200      	movs	r2, #0
 8004466:	210b      	movs	r1, #11
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f003 fd19 	bl	8007ea0 <VL53L0X_WrByte>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	7bfb      	ldrb	r3, [r7, #15]
 8004474:	4313      	orrs	r3, r2
 8004476:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004478:	f107 030d 	add.w	r3, r7, #13
 800447c:	461a      	mov	r2, r3
 800447e:	2113      	movs	r1, #19
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f003 fdc1 	bl	8008008 <VL53L0X_RdByte>
 8004486:	4603      	mov	r3, r0
 8004488:	461a      	mov	r2, r3
 800448a:	7bfb      	ldrb	r3, [r7, #15]
 800448c:	4313      	orrs	r3, r2
 800448e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	3301      	adds	r3, #1
 8004494:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004496:	7b7b      	ldrb	r3, [r7, #13]
 8004498:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80044a0:	7bbb      	ldrb	r3, [r7, #14]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d803      	bhi.n	80044ae <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80044a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0d3      	beq.n	8004456 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80044ae:	7bbb      	ldrb	r3, [r7, #14]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80044b4:	23f4      	movs	r3, #244	@ 0xf4
 80044b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80044b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 80044d2:	f107 030e 	add.w	r3, r7, #14
 80044d6:	461a      	mov	r2, r3
 80044d8:	2113      	movs	r1, #19
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f003 fd94 	bl	8008008 <VL53L0X_RdByte>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 80044e4:	7bbb      	ldrb	r3, [r7, #14]
 80044e6:	f003 0207 	and.w	r2, r3, #7
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	f003 0318 	and.w	r3, r3, #24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80044f8:	23fa      	movs	r3, #250	@ 0xfa
 80044fa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80044fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004514:	2300      	movs	r3, #0
 8004516:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa03 	bl	8004928 <VL53L0X_perform_ref_spad_management>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004526:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8004540:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004544:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800454a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800454c:	f107 0308 	add.w	r3, r7, #8
 8004550:	461a      	mov	r2, r3
 8004552:	2128      	movs	r1, #40	@ 0x28
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f003 fd81 	bl	800805c <VL53L0X_RdWord>
 800455a:	4603      	mov	r3, r0
 800455c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800455e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11e      	bne.n	80045a4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004566:	893b      	ldrh	r3, [r7, #8]
 8004568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456c:	b29b      	uxth	r3, r3
 800456e:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	461a      	mov	r2, r3
 8004574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004578:	429a      	cmp	r2, r3
 800457a:	dd0b      	ble.n	8004594 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800457c:	893a      	ldrh	r2, [r7, #8]
 800457e:	897b      	ldrh	r3, [r7, #10]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	b29b      	uxth	r3, r3
 8004584:	b21b      	sxth	r3, r3
 8004586:	461a      	mov	r2, r3
					* 250;
 8004588:	23fa      	movs	r3, #250	@ 0xfa
 800458a:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e007      	b.n	80045a4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	b21b      	sxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	23fa      	movs	r3, #250	@ 0xfa
 800459c:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80045a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b08b      	sub	sp, #44	@ 0x2c
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80045be:	2308      	movs	r3, #8
 80045c0:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	fb01 f202 	mul.w	r2, r1, r2
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ee:	e030      	b.n	8004652 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d11e      	bne.n	8004644 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8004606:	7ffa      	ldrb	r2, [r7, #31]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	fa42 f303 	asr.w	r3, r2, r3
 800460e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8004614:	e016      	b.n	8004644 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8004616:	7ffb      	ldrb	r3, [r7, #31]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00b      	beq.n	8004638 <get_next_good_spad+0x88>
				success = 1;
 8004620:	2301      	movs	r3, #1
 8004622:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	fb03 f202 	mul.w	r2, r3, r2
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	4413      	add	r3, r2
 8004630:	461a      	mov	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	601a      	str	r2, [r3, #0]
				break;
 8004636:	e009      	b.n	800464c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004638:	7ffb      	ldrb	r3, [r7, #31]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	3301      	adds	r3, #1
 8004642:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	429a      	cmp	r2, r3
 800464a:	d3e4      	bcc.n	8004616 <get_next_good_spad+0x66>
				coarseIndex++) {
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	3301      	adds	r3, #1
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	d202      	bcs.n	8004660 <get_next_good_spad+0xb0>
 800465a:	7fbb      	ldrb	r3, [r7, #30]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0c7      	beq.n	80045f0 <get_next_good_spad+0x40>
		}
	}
}
 8004660:	bf00      	nop
 8004662:	372c      	adds	r7, #44	@ 0x2c
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	099b      	lsrs	r3, r3, #6
 800467c:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800467e:	4a07      	ldr	r2, [pc, #28]	@ (800469c <is_aperture+0x30>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <is_aperture+0x22>
		isAperture = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800468e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	200002b0 	.word	0x200002b0

080046a0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	@ 0x24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80046b0:	2308      	movs	r3, #8
 80046b2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	fb01 f202 	mul.w	r2, r1, r2
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d302      	bcc.n	80046de <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80046d8:	23ce      	movs	r3, #206	@ 0xce
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e010      	b.n	8004700 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	4413      	add	r3, r2
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	2101      	movs	r1, #1
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	b25b      	sxtb	r3, r3
 80046f2:	4313      	orrs	r3, r2
 80046f4:	b259      	sxtb	r1, r3
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4413      	add	r3, r2
 80046fc:	b2ca      	uxtb	r2, r1
 80046fe:	701a      	strb	r2, [r3, #0]

	return status;
 8004700:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3724      	adds	r7, #36	@ 0x24
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800471a:	2306      	movs	r3, #6
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	21b0      	movs	r1, #176	@ 0xb0
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f003 fb61 	bl	8007de8 <VL53L0X_WriteMulti>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800472a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004740:	2306      	movs	r3, #6
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	21b0      	movs	r1, #176	@ 0xb0
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f003 fb7e 	bl	8007e48 <VL53L0X_ReadMulti>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	460b      	mov	r3, r1
 800476a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800476c:	2300      	movs	r3, #0
 800476e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004774:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8004776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004778:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800477a:	2300      	movs	r3, #0
 800477c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477e:	e02b      	b.n	80047d8 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004780:	f107 031c 	add.w	r3, r7, #28
 8004784:	6a3a      	ldr	r2, [r7, #32]
 8004786:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff11 	bl	80045b0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d103      	bne.n	800479e <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004796:	23ce      	movs	r3, #206	@ 0xce
 8004798:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800479c:	e020      	b.n	80047e0 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a4:	4413      	add	r3, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff60 	bl	800466c <is_aperture>
 80047ac:	4603      	mov	r3, r0
 80047ae:	461a      	mov	r2, r3
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80047b6:	23ce      	movs	r3, #206	@ 0xce
 80047b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 80047bc:	e010      	b.n	80047e0 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80047c2:	6a3a      	ldr	r2, [r7, #32]
 80047c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047c6:	6838      	ldr	r0, [r7, #0]
 80047c8:	f7ff ff6a 	bl	80046a0 <enable_spad_bit>
		currentSpad++;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	3301      	adds	r3, #1
 80047d0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	3301      	adds	r3, #1
 80047d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047dc:	429a      	cmp	r2, r3
 80047de:	d3cf      	bcc.n	8004780 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80047e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e2:	6a3a      	ldr	r2, [r7, #32]
 80047e4:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80047e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ff8d 	bl	8004710 <set_ref_spad_map>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80047fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004800:	2b00      	cmp	r3, #0
 8004802:	d121      	bne.n	8004848 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff93 	bl	8004736 <get_ref_spad_map>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800481a:	e011      	b.n	8004840 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	4413      	add	r3, r2
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	f107 0114 	add.w	r1, r7, #20
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	440b      	add	r3, r1
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d003      	beq.n	800483a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004832:	23ce      	movs	r3, #206	@ 0xce
 8004834:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8004838:	e006      	b.n	8004848 <enable_ref_spads+0xec>
			}
			i++;
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	3301      	adds	r3, #1
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8004840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	429a      	cmp	r2, r3
 8004846:	d3e9      	bcc.n	800481c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004848:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800484c:	4618      	mov	r0, r3
 800484e:	3730      	adds	r7, #48	@ 0x30
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	@ 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8004870:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004874:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004878:	2b00      	cmp	r3, #0
 800487a:	d107      	bne.n	800488c <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800487c:	22c0      	movs	r2, #192	@ 0xc0
 800487e:	2101      	movs	r1, #1
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f003 fb0d 	bl	8007ea0 <VL53L0X_WrByte>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800488c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004890:	2b00      	cmp	r3, #0
 8004892:	d108      	bne.n	80048a6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004894:	f107 0308 	add.w	r3, r7, #8
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff fc4c 	bl	8004138 <VL53L0X_PerformSingleRangingMeasurement>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80048a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80048ae:	2201      	movs	r2, #1
 80048b0:	21ff      	movs	r1, #255	@ 0xff
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f003 faf4 	bl	8007ea0 <VL53L0X_WrByte>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 80048be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d107      	bne.n	80048d6 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	21b6      	movs	r1, #182	@ 0xb6
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f003 fbc6 	bl	800805c <VL53L0X_RdWord>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80048d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d107      	bne.n	80048ee <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80048de:	2200      	movs	r2, #0
 80048e0:	21ff      	movs	r1, #255	@ 0xff
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f003 fadc 	bl	8007ea0 <VL53L0X_WrByte>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 80048ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d112      	bne.n	800491c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80048f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80048fa:	461a      	mov	r2, r3
 80048fc:	2101      	movs	r1, #1
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f003 face 	bl	8007ea0 <VL53L0X_WrByte>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800490a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004918:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c
	}

	return status;
 800491c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004920:	4618      	mov	r0, r3
 8004922:	3728      	adds	r7, #40	@ 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b09d      	sub	sp, #116	@ 0x74
 800492c:	af06      	add	r7, sp, #24
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004934:	2300      	movs	r3, #0
 8004936:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800493a:	23b4      	movs	r3, #180	@ 0xb4
 800493c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8004940:	2303      	movs	r3, #3
 8004942:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8004944:	232c      	movs	r3, #44	@ 0x2c
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004954:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004958:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800495a:	2300      	movs	r3, #0
 800495c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8004962:	2306      	movs	r3, #6
 8004964:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800496a:	2300      	movs	r3, #0
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 800498c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800498e:	2300      	movs	r3, #0
 8004990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004992:	e009      	b.n	80049a8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004998:	4413      	add	r3, r2
 800499a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80049a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a4:	3301      	adds	r3, #1
 80049a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3f1      	bcc.n	8004994 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80049b0:	2201      	movs	r2, #1
 80049b2:	21ff      	movs	r1, #255	@ 0xff
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f003 fa73 	bl	8007ea0 <VL53L0X_WrByte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80049c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80049c8:	2200      	movs	r2, #0
 80049ca:	214f      	movs	r1, #79	@ 0x4f
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f003 fa67 	bl	8007ea0 <VL53L0X_WrByte>
 80049d2:	4603      	mov	r3, r0
 80049d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80049d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80049e0:	222c      	movs	r2, #44	@ 0x2c
 80049e2:	214e      	movs	r1, #78	@ 0x4e
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f003 fa5b 	bl	8007ea0 <VL53L0X_WrByte>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80049f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d107      	bne.n	8004a08 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80049f8:	2200      	movs	r2, #0
 80049fa:	21ff      	movs	r1, #255	@ 0xff
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f003 fa4f 	bl	8007ea0 <VL53L0X_WrByte>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a08:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004a10:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004a14:	461a      	mov	r2, r3
 8004a16:	21b6      	movs	r1, #182	@ 0xb6
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f003 fa41 	bl	8007ea0 <VL53L0X_WrByte>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004a24:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2180      	movs	r1, #128	@ 0x80
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f003 fa35 	bl	8007ea0 <VL53L0X_WrByte>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004a3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004a44:	f107 0210 	add.w	r2, r7, #16
 8004a48:	f107 0111 	add.w	r1, r7, #17
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fbbb 	bl	80051ca <VL53L0X_perform_ref_calibration>
 8004a54:	4603      	mov	r3, r0
 8004a56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004a5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d121      	bne.n	8004aa6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8004a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a68:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8004a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a70:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
		Status = enable_ref_spads(Dev,
 8004a7e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004a82:	f107 0218 	add.w	r2, r7, #24
 8004a86:	9204      	str	r2, [sp, #16]
 8004a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a8a:	9203      	str	r2, [sp, #12]
 8004a8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a8e:	9202      	str	r2, [sp, #8]
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4623      	mov	r3, r4
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f7ff fe5e 	bl	800475c <enable_ref_spads>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004aa6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d174      	bne.n	8004b98 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004ab2:	f107 0312 	add.w	r3, r7, #18
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f7ff fecb 	bl	8004854 <perform_ref_signal_measurement>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004ac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d161      	bne.n	8004b90 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004acc:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004ace:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d25d      	bcs.n	8004b90 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad8:	e009      	b.n	8004aee <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aea:	3301      	adds	r3, #1
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d3f1      	bcc.n	8004ada <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004af6:	e002      	b.n	8004afe <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afa:	3301      	adds	r3, #1
 8004afc:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004afe:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8004b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b04:	4413      	add	r3, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fdb0 	bl	800466c <is_aperture>
 8004b0c:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <VL53L0X_perform_ref_spad_management+0x1f2>
 8004b12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3ee      	bcc.n	8004af8 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b20:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
			Status = enable_ref_spads(Dev,
 8004b2e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004b32:	f107 0218 	add.w	r2, r7, #24
 8004b36:	9204      	str	r2, [sp, #16]
 8004b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b3e:	9202      	str	r2, [sp, #8]
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4623      	mov	r3, r4
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fe06 	bl	800475c <enable_ref_spads>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004b56:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11b      	bne.n	8004b96 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004b62:	f107 0312 	add.w	r3, r7, #18
 8004b66:	4619      	mov	r1, r3
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fe73 	bl	8004854 <perform_ref_signal_measurement>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004b74:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10c      	bne.n	8004b96 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004b7c:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004b7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d208      	bcs.n	8004b96 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004b8e:	e002      	b.n	8004b96 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b94:	e000      	b.n	8004b98 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004b96:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004b98:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 80af 	bne.w	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004ba2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004ba4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	f240 80aa 	bls.w	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 8004bbc:	f107 031c 	add.w	r3, r7, #28
 8004bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f007 febf 	bl	800c946 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004bc8:	8a7b      	ldrh	r3, [r7, #18]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bfb8      	it	lt
 8004bd4:	425b      	neglt	r3, r3
 8004bd6:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8004bde:	e086      	b.n	8004cee <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
			get_next_good_spad(
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bee:	f7ff fcdf 	bl	80045b0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d103      	bne.n	8004c02 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004bfa:	23ce      	movs	r3, #206	@ 0xce
 8004bfc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8004c00:	e07e      	b.n	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004c02:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fd2e 	bl	800466c <is_aperture>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8004c20:	e06e      	b.n	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	3301      	adds	r3, #1
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
			Status = enable_spad_bit(
 8004c32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fd32 	bl	80046a0 <enable_spad_bit>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004c42:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10c      	bne.n	8004c64 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
				Status = set_ref_spad_map(Dev,
 8004c56:	4619      	mov	r1, r3
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff fd59 	bl	8004710 <set_ref_spad_map>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004c64:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d146      	bne.n	8004cfa <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004c6c:	f107 0312 	add.w	r3, r7, #18
 8004c70:	4619      	mov	r1, r3
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f7ff fdee 	bl	8004854 <perform_ref_signal_measurement>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004c7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d13b      	bne.n	8004cfe <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004c86:	8a7b      	ldrh	r3, [r7, #18]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfb8      	it	lt
 8004c92:	425b      	neglt	r3, r3
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004c96:	8a7b      	ldrh	r3, [r7, #18]
 8004c98:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d21c      	bcs.n	8004cd8 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d914      	bls.n	8004cd0 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	4619      	mov	r1, r3
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f7ff fd2f 	bl	8004710 <set_ref_spad_map>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
					memcpy(
 8004cbe:	f107 011c 	add.w	r1, r7, #28
 8004cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f007 fe3e 	bl	800c946 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e00a      	b.n	8004cee <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
				memcpy(lastSpadArray,
 8004ce2:	f107 031c 	add.w	r3, r7, #28
 8004ce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f007 fe2c 	bl	800c946 <memcpy>
		while (!complete) {
 8004cee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f43f af74 	beq.w	8004be0 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004cf8:	e002      	b.n	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004cfe:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d00:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d115      	bne.n	8004d34 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d0c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004d14:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004d34:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	375c      	adds	r7, #92	@ 0x5c
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd90      	pop	{r4, r7, pc}

08004d40 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b093      	sub	sp, #76	@ 0x4c
 8004d44:	af06      	add	r7, sp, #24
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8004d58:	23b4      	movs	r3, #180	@ 0xb4
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8004d5e:	2306      	movs	r3, #6
 8004d60:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004d62:	232c      	movs	r3, #44	@ 0x2c
 8004d64:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004d66:	2201      	movs	r2, #1
 8004d68:	21ff      	movs	r1, #255	@ 0xff
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f003 f898 	bl	8007ea0 <VL53L0X_WrByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004d76:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d107      	bne.n	8004d8e <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004d7e:	2200      	movs	r2, #0
 8004d80:	214f      	movs	r1, #79	@ 0x4f
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f003 f88c 	bl	8007ea0 <VL53L0X_WrByte>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004d8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004d96:	222c      	movs	r2, #44	@ 0x2c
 8004d98:	214e      	movs	r1, #78	@ 0x4e
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f003 f880 	bl	8007ea0 <VL53L0X_WrByte>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004da6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004dae:	2200      	movs	r2, #0
 8004db0:	21ff      	movs	r1, #255	@ 0xff
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f003 f874 	bl	8007ea0 <VL53L0X_WrByte>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004dbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dca:	461a      	mov	r2, r3
 8004dcc:	21b6      	movs	r1, #182	@ 0xb6
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f003 f866 	bl	8007ea0 <VL53L0X_WrByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dde:	e009      	b.n	8004df4 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	3301      	adds	r3, #1
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d3f1      	bcc.n	8004de0 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d011      	beq.n	8004e26 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e02:	e002      	b.n	8004e0a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	3301      	adds	r3, #1
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	4413      	add	r3, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fc2a 	bl	800466c <is_aperture>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d103      	bne.n	8004e26 <VL53L0X_set_reference_spads+0xe6>
 8004e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d3ee      	bcc.n	8004e04 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 70ab 	add.w	r0, r3, #342	@ 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 74a8 	add.w	r4, r3, #336	@ 0x150
	Status = enable_ref_spads(Dev,
 8004e32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e36:	79f9      	ldrb	r1, [r7, #7]
 8004e38:	f107 0214 	add.w	r2, r7, #20
 8004e3c:	9204      	str	r2, [sp, #16]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	9203      	str	r2, [sp, #12]
 8004e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e44:	9202      	str	r2, [sp, #8]
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff fc83 	bl	800475c <enable_ref_spads>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10c      	bne.n	8004e7e <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	79fa      	ldrb	r2, [r7, #7]
 8004e7a:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004e7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3734      	adds	r7, #52	@ 0x34
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}

08004e8a <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2100      	movs	r1, #0
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f002 fff6 	bl	8007ea0 <VL53L0X_WrByte>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9bf 	bl	8005244 <VL53L0X_measurement_poll_for_completion>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff fab5 	bl	8004444 <VL53L0X_ClearInterruptMask>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2100      	movs	r1, #0
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f002 ffd8 	bl	8007ea0 <VL53L0X_WrByte>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	70fb      	strb	r3, [r7, #3]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70bb      	strb	r3, [r7, #2]
 8004f16:	4613      	mov	r3, r2
 8004f18:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f22:	2201      	movs	r2, #1
 8004f24:	21ff      	movs	r1, #255	@ 0xff
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 ffba 	bl	8007ea0 <VL53L0X_WrByte>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 ffb0 	bl	8007ea0 <VL53L0X_WrByte>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	21ff      	movs	r1, #255	@ 0xff
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 ffa6 	bl	8007ea0 <VL53L0X_WrByte>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01e      	beq.n	8004fa2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	21cb      	movs	r1, #203	@ 0xcb
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f003 f849 	bl	8008008 <VL53L0X_RdByte>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004f80:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02a      	beq.n	8004fde <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004f88:	f107 030e 	add.w	r3, r7, #14
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	21ee      	movs	r1, #238	@ 0xee
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f003 f839 	bl	8008008 <VL53L0X_RdByte>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	73fb      	strb	r3, [r7, #15]
 8004fa0:	e01d      	b.n	8004fde <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8004fa2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004faa:	78bb      	ldrb	r3, [r7, #2]
 8004fac:	461a      	mov	r2, r3
 8004fae:	21cb      	movs	r1, #203	@ 0xcb
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f002 ff75 	bl	8007ea0 <VL53L0X_WrByte>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004fc8:	787b      	ldrb	r3, [r7, #1]
 8004fca:	2280      	movs	r2, #128	@ 0x80
 8004fcc:	21ee      	movs	r1, #238	@ 0xee
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f002 ffe6 	bl	8007fa0 <VL53L0X_UpdateByte>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004fde:	2201      	movs	r2, #1
 8004fe0:	21ff      	movs	r1, #255	@ 0xff
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f002 ff5c 	bl	8007ea0 <VL53L0X_WrByte>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f002 ff52 	bl	8007ea0 <VL53L0X_WrByte>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	4313      	orrs	r3, r2
 8005004:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005006:	2200      	movs	r2, #0
 8005008:	21ff      	movs	r1, #255	@ 0xff
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f002 ff48 	bl	8007ea0 <VL53L0X_WrByte>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	4313      	orrs	r3, r2
 8005018:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800501a:	7bbb      	ldrb	r3, [r7, #14]
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	b2da      	uxtb	r2, r3
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	701a      	strb	r2, [r3, #0]

	return Status;
 8005026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b08a      	sub	sp, #40	@ 0x28
 8005036:	af04      	add	r7, sp, #16
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	4611      	mov	r1, r2
 800503e:	461a      	mov	r2, r3
 8005040:	460b      	mov	r3, r1
 8005042:	71fb      	strb	r3, [r7, #7]
 8005044:	4613      	mov	r3, r2
 8005046:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800505c:	79bb      	ldrb	r3, [r7, #6]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8005068:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800506a:	2201      	movs	r2, #1
 800506c:	2101      	movs	r1, #1
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f002 ff16 	bl	8007ea0 <VL53L0X_WrByte>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005078:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d105      	bne.n	800508c <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005080:	2140      	movs	r1, #64	@ 0x40
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff ff01 	bl	8004e8a <VL53L0X_perform_single_ref_calibration>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800508c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d115      	bne.n	80050c0 <VL53L0X_perform_vhv_calibration+0x8e>
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d112      	bne.n	80050c0 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800509a:	7d39      	ldrb	r1, [r7, #20]
 800509c:	7d7a      	ldrb	r2, [r7, #21]
 800509e:	2300      	movs	r3, #0
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	2301      	movs	r3, #1
 80050a4:	9302      	str	r3, [sp, #8]
 80050a6:	f107 0313 	add.w	r3, r7, #19
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	460b      	mov	r3, r1
 80050b2:	2101      	movs	r1, #1
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff ff23 	bl	8004f00 <VL53L0X_ref_calibration_io>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]
 80050be:	e002      	b.n	80050c6 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80050c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d112      	bne.n	80050f4 <VL53L0X_perform_vhv_calibration+0xc2>
 80050ce:	79bb      	ldrb	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00f      	beq.n	80050f4 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80050d4:	7dbb      	ldrb	r3, [r7, #22]
 80050d6:	461a      	mov	r2, r3
 80050d8:	2101      	movs	r1, #1
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f002 fee0 	bl	8007ea0 <VL53L0X_WrByte>
 80050e0:	4603      	mov	r3, r0
 80050e2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80050e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d103      	bne.n	80050f4 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	7dba      	ldrb	r2, [r7, #22]
 80050f0:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 80050f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af04      	add	r7, sp, #16
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	460b      	mov	r3, r1
 8005110:	71fb      	strb	r3, [r7, #7]
 8005112:	4613      	mov	r3, r2
 8005114:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005126:	79bb      	ldrb	r3, [r7, #6]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8005132:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005134:	2202      	movs	r2, #2
 8005136:	2101      	movs	r1, #1
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f002 feb1 	bl	8007ea0 <VL53L0X_WrByte>
 800513e:	4603      	mov	r3, r0
 8005140:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005142:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d105      	bne.n	8005156 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800514a:	2100      	movs	r1, #0
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff fe9c 	bl	8004e8a <VL53L0X_perform_single_ref_calibration>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005156:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d115      	bne.n	800518a <VL53L0X_perform_phase_calibration+0x8a>
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d112      	bne.n	800518a <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005164:	7d39      	ldrb	r1, [r7, #20]
 8005166:	7d7a      	ldrb	r2, [r7, #21]
 8005168:	2301      	movs	r3, #1
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	2300      	movs	r3, #0
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	f107 0313 	add.w	r3, r7, #19
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	460b      	mov	r3, r1
 800517c:	2101      	movs	r1, #1
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff febe 	bl	8004f00 <VL53L0X_ref_calibration_io>
 8005184:	4603      	mov	r3, r0
 8005186:	75fb      	strb	r3, [r7, #23]
 8005188:	e002      	b.n	8005190 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d112      	bne.n	80051be <VL53L0X_perform_phase_calibration+0xbe>
 8005198:	79bb      	ldrb	r3, [r7, #6]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00f      	beq.n	80051be <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800519e:	7dbb      	ldrb	r3, [r7, #22]
 80051a0:	461a      	mov	r2, r3
 80051a2:	2101      	movs	r1, #1
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f002 fe7b 	bl	8007ea0 <VL53L0X_WrByte>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80051ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	7dba      	ldrb	r2, [r7, #22]
 80051ba:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 80051be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 80051e6:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	2300      	movs	r3, #0
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff ff1f 	bl	8005032 <VL53L0X_perform_vhv_calibration>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80051f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	2300      	movs	r3, #0
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff ff7a 	bl	8005100 <VL53L0X_perform_phase_calibration>
 800520c:	4603      	mov	r3, r0
 800520e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005210:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10f      	bne.n	8005238 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005218:	7dbb      	ldrb	r3, [r7, #22]
 800521a:	461a      	mov	r2, r3
 800521c:	2101      	movs	r1, #1
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f002 fe3e 	bl	8007ea0 <VL53L0X_WrByte>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	7dba      	ldrb	r2, [r7, #22]
 8005234:	f883 215c 	strb.w	r2, [r3, #348]	@ 0x15c

	}

	return Status;
 8005238:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800524c:	2300      	movs	r3, #0
 800524e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005258:	f107 030f 	add.w	r3, r7, #15
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fe fe0e 	bl	8003e80 <VL53L0X_GetMeasurementDataReady>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d110      	bne.n	8005292 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d00f      	beq.n	8005296 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005282:	d302      	bcc.n	800528a <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005284:	23f9      	movs	r3, #249	@ 0xf9
 8005286:	75fb      	strb	r3, [r7, #23]
			break;
 8005288:	e006      	b.n	8005298 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f002 ff58 	bl	8008140 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005290:	e7e2      	b.n	8005258 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005296:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	4603      	mov	r3, r0
 80052d2:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80052fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005300:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005302:	e002      	b.n	800530a <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d8f8      	bhi.n	8005304 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005312:	e017      	b.n	8005344 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4413      	add	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d30b      	bcc.n	8005338 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4413      	add	r3, r2
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	085b      	lsrs	r3, r3, #1
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	4413      	add	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e002      	b.n	800533e <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	085b      	lsrs	r3, r3, #1
 800533c:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e4      	bne.n	8005314 <VL53L0X_isqrt+0x24>
	}

	return res;
 800534a:	68fb      	ldr	r3, [r7, #12]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
 8005362:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005364:	2200      	movs	r2, #0
 8005366:	2183      	movs	r1, #131	@ 0x83
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f002 fd99 	bl	8007ea0 <VL53L0X_WrByte>
 800536e:	4603      	mov	r3, r0
 8005370:	461a      	mov	r2, r3
 8005372:	7dfb      	ldrb	r3, [r7, #23]
 8005374:	4313      	orrs	r3, r2
 8005376:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8005378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11e      	bne.n	80053be <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005384:	f107 030f 	add.w	r3, r7, #15
 8005388:	461a      	mov	r2, r3
 800538a:	2183      	movs	r1, #131	@ 0x83
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f002 fe3b 	bl	8008008 <VL53L0X_RdByte>
 8005392:	4603      	mov	r3, r0
 8005394:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <VL53L0X_device_read_strobe+0x5a>
 800539c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	3301      	adds	r3, #1
 80053a8:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80053b0:	d3e8      	bcc.n	8005384 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80053b8:	d301      	bcc.n	80053be <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80053ba:	23f9      	movs	r3, #249	@ 0xf9
 80053bc:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80053be:	2201      	movs	r2, #1
 80053c0:	2183      	movs	r1, #131	@ 0x83
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f002 fd6c 	bl	8007ea0 <VL53L0X_WrByte>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	7dfb      	ldrb	r3, [r7, #23]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80053d2:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b098      	sub	sp, #96	@ 0x60
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800540e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8005412:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8005426:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 800542a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800542e:	2b07      	cmp	r3, #7
 8005430:	f000 8408 	beq.w	8005c44 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005434:	2201      	movs	r2, #1
 8005436:	2180      	movs	r1, #128	@ 0x80
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f002 fd31 	bl	8007ea0 <VL53L0X_WrByte>
 800543e:	4603      	mov	r3, r0
 8005440:	461a      	mov	r2, r3
 8005442:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005446:	4313      	orrs	r3, r2
 8005448:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800544c:	2201      	movs	r2, #1
 800544e:	21ff      	movs	r1, #255	@ 0xff
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f002 fd25 	bl	8007ea0 <VL53L0X_WrByte>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800545e:	4313      	orrs	r3, r2
 8005460:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005464:	2200      	movs	r2, #0
 8005466:	2100      	movs	r1, #0
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 fd19 	bl	8007ea0 <VL53L0X_WrByte>
 800546e:	4603      	mov	r3, r0
 8005470:	461a      	mov	r2, r3
 8005472:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005476:	4313      	orrs	r3, r2
 8005478:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800547c:	2206      	movs	r2, #6
 800547e:	21ff      	movs	r1, #255	@ 0xff
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f002 fd0d 	bl	8007ea0 <VL53L0X_WrByte>
 8005486:	4603      	mov	r3, r0
 8005488:	461a      	mov	r2, r3
 800548a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800548e:	4313      	orrs	r3, r2
 8005490:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005494:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005498:	461a      	mov	r2, r3
 800549a:	2183      	movs	r1, #131	@ 0x83
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f002 fdb3 	bl	8008008 <VL53L0X_RdByte>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80054b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054b4:	f043 0304 	orr.w	r3, r3, #4
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	2183      	movs	r1, #131	@ 0x83
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f002 fcee 	bl	8007ea0 <VL53L0X_WrByte>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054cc:	4313      	orrs	r3, r2
 80054ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80054d2:	2207      	movs	r2, #7
 80054d4:	21ff      	movs	r1, #255	@ 0xff
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f002 fce2 	bl	8007ea0 <VL53L0X_WrByte>
 80054dc:	4603      	mov	r3, r0
 80054de:	461a      	mov	r2, r3
 80054e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80054ea:	2201      	movs	r2, #1
 80054ec:	2181      	movs	r1, #129	@ 0x81
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f002 fcd6 	bl	8007ea0 <VL53L0X_WrByte>
 80054f4:	4603      	mov	r3, r0
 80054f6:	461a      	mov	r2, r3
 80054f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fe1c 	bl	8008140 <VL53L0X_PollingDelay>
 8005508:	4603      	mov	r3, r0
 800550a:	461a      	mov	r2, r3
 800550c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005510:	4313      	orrs	r3, r2
 8005512:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005516:	2201      	movs	r2, #1
 8005518:	2180      	movs	r1, #128	@ 0x80
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f002 fcc0 	bl	8007ea0 <VL53L0X_WrByte>
 8005520:	4603      	mov	r3, r0
 8005522:	461a      	mov	r2, r3
 8005524:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005528:	4313      	orrs	r3, r2
 800552a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8098 	beq.w	800566a <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800553a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800553e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 8091 	bne.w	800566a <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005548:	226b      	movs	r2, #107	@ 0x6b
 800554a:	2194      	movs	r1, #148	@ 0x94
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f002 fca7 	bl	8007ea0 <VL53L0X_WrByte>
 8005552:	4603      	mov	r3, r0
 8005554:	461a      	mov	r2, r3
 8005556:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800555a:	4313      	orrs	r3, r2
 800555c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fef9 	bl	8005358 <VL53L0X_device_read_strobe>
 8005566:	4603      	mov	r3, r0
 8005568:	461a      	mov	r2, r3
 800556a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800556e:	4313      	orrs	r3, r2
 8005570:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005574:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005578:	461a      	mov	r2, r3
 800557a:	2190      	movs	r1, #144	@ 0x90
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 fda3 	bl	80080c8 <VL53L0X_RdDWord>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800558a:	4313      	orrs	r3, r2
 800558c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800559a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	0bdb      	lsrs	r3, r3, #15
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80055ac:	2224      	movs	r2, #36	@ 0x24
 80055ae:	2194      	movs	r1, #148	@ 0x94
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fc75 	bl	8007ea0 <VL53L0X_WrByte>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055be:	4313      	orrs	r3, r2
 80055c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fec7 	bl	8005358 <VL53L0X_device_read_strobe>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80055dc:	461a      	mov	r2, r3
 80055de:	2190      	movs	r1, #144	@ 0x90
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f002 fd71 	bl	80080c8 <VL53L0X_RdDWord>
 80055e6:	4603      	mov	r3, r0
 80055e8:	461a      	mov	r2, r3
 80055ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	0e1b      	lsrs	r3, r3, #24
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	b2db      	uxtb	r3, r3
 8005602:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	b2db      	uxtb	r3, r3
 800560a:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	b2db      	uxtb	r3, r3
 8005610:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005612:	2225      	movs	r2, #37	@ 0x25
 8005614:	2194      	movs	r1, #148	@ 0x94
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f002 fc42 	bl	8007ea0 <VL53L0X_WrByte>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005624:	4313      	orrs	r3, r2
 8005626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fe94 	bl	8005358 <VL53L0X_device_read_strobe>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005638:	4313      	orrs	r3, r2
 800563a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800563e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005642:	461a      	mov	r2, r3
 8005644:	2190      	movs	r1, #144	@ 0x90
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f002 fd3e 	bl	80080c8 <VL53L0X_RdDWord>
 800564c:	4603      	mov	r3, r0
 800564e:	461a      	mov	r2, r3
 8005650:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005654:	4313      	orrs	r3, r2
 8005656:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	0e1b      	lsrs	r3, r3, #24
 800565e:	b2db      	uxtb	r3, r3
 8005660:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	b2db      	uxtb	r3, r3
 8005668:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8189 	beq.w	8005988 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005676:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800567a:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800567e:	2b00      	cmp	r3, #0
 8005680:	f040 8182 	bne.w	8005988 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005684:	2202      	movs	r2, #2
 8005686:	2194      	movs	r1, #148	@ 0x94
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f002 fc09 	bl	8007ea0 <VL53L0X_WrByte>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005696:	4313      	orrs	r3, r2
 8005698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fe5b 	bl	8005358 <VL53L0X_device_read_strobe>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80056b0:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80056b4:	461a      	mov	r2, r3
 80056b6:	2190      	movs	r1, #144	@ 0x90
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f002 fca5 	bl	8008008 <VL53L0X_RdByte>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80056cc:	227b      	movs	r2, #123	@ 0x7b
 80056ce:	2194      	movs	r1, #148	@ 0x94
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f002 fbe5 	bl	8007ea0 <VL53L0X_WrByte>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056de:	4313      	orrs	r3, r2
 80056e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff fe37 	bl	8005358 <VL53L0X_device_read_strobe>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80056f8:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80056fc:	461a      	mov	r2, r3
 80056fe:	2190      	movs	r1, #144	@ 0x90
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 fc81 	bl	8008008 <VL53L0X_RdByte>
 8005706:	4603      	mov	r3, r0
 8005708:	461a      	mov	r2, r3
 800570a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800570e:	4313      	orrs	r3, r2
 8005710:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005714:	2277      	movs	r2, #119	@ 0x77
 8005716:	2194      	movs	r1, #148	@ 0x94
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f002 fbc1 	bl	8007ea0 <VL53L0X_WrByte>
 800571e:	4603      	mov	r3, r0
 8005720:	461a      	mov	r2, r3
 8005722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005726:	4313      	orrs	r3, r2
 8005728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fe13 	bl	8005358 <VL53L0X_device_read_strobe>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800573a:	4313      	orrs	r3, r2
 800573c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005740:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005744:	461a      	mov	r2, r3
 8005746:	2190      	movs	r1, #144	@ 0x90
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f002 fcbd 	bl	80080c8 <VL53L0X_RdDWord>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005756:	4313      	orrs	r3, r2
 8005758:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	0e5b      	lsrs	r3, r3, #25
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005766:	b2db      	uxtb	r3, r3
 8005768:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	0c9b      	lsrs	r3, r3, #18
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005774:	b2db      	uxtb	r3, r3
 8005776:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	0adb      	lsrs	r3, r3, #11
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005782:	b2db      	uxtb	r3, r3
 8005784:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005790:	b2db      	uxtb	r3, r3
 8005792:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	b2db      	uxtb	r3, r3
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80057a6:	2278      	movs	r2, #120	@ 0x78
 80057a8:	2194      	movs	r1, #148	@ 0x94
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f002 fb78 	bl	8007ea0 <VL53L0X_WrByte>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff fdca 	bl	8005358 <VL53L0X_device_read_strobe>
 80057c4:	4603      	mov	r3, r0
 80057c6:	461a      	mov	r2, r3
 80057c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80057d6:	461a      	mov	r2, r3
 80057d8:	2190      	movs	r1, #144	@ 0x90
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f002 fc74 	bl	80080c8 <VL53L0X_RdDWord>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	0f5b      	lsrs	r3, r3, #29
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057f8:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80057fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80057fe:	4413      	add	r3, r2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005806:	0d9b      	lsrs	r3, r3, #22
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800580e:	b2db      	uxtb	r3, r3
 8005810:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	0bdb      	lsrs	r3, r3, #15
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800581c:	b2db      	uxtb	r3, r3
 800581e:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800582a:	b2db      	uxtb	r3, r3
 800582c:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005838:	b2db      	uxtb	r3, r3
 800583a:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	b2db      	uxtb	r3, r3
 8005840:	019b      	lsls	r3, r3, #6
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800584e:	2279      	movs	r2, #121	@ 0x79
 8005850:	2194      	movs	r1, #148	@ 0x94
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f002 fb24 	bl	8007ea0 <VL53L0X_WrByte>
 8005858:	4603      	mov	r3, r0
 800585a:	461a      	mov	r2, r3
 800585c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005860:	4313      	orrs	r3, r2
 8005862:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff fd76 	bl	8005358 <VL53L0X_device_read_strobe>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005874:	4313      	orrs	r3, r2
 8005876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800587a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800587e:	461a      	mov	r2, r3
 8005880:	2190      	movs	r1, #144	@ 0x90
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f002 fc20 	bl	80080c8 <VL53L0X_RdDWord>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005890:	4313      	orrs	r3, r2
 8005892:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	0e9b      	lsrs	r3, r3, #26
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80058a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80058a6:	4413      	add	r3, r2
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80058ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ae:	0cdb      	lsrs	r3, r3, #19
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	0b1b      	lsrs	r3, r3, #12
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80058c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80058e8:	227a      	movs	r2, #122	@ 0x7a
 80058ea:	2194      	movs	r1, #148	@ 0x94
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f002 fad7 	bl	8007ea0 <VL53L0X_WrByte>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fd29 	bl	8005358 <VL53L0X_device_read_strobe>
 8005906:	4603      	mov	r3, r0
 8005908:	461a      	mov	r2, r3
 800590a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800590e:	4313      	orrs	r3, r2
 8005910:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005914:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005918:	461a      	mov	r2, r3
 800591a:	2190      	movs	r1, #144	@ 0x90
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f002 fbd3 	bl	80080c8 <VL53L0X_RdDWord>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800592a:	4313      	orrs	r3, r2
 800592c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	0f9b      	lsrs	r3, r3, #30
 8005934:	b2db      	uxtb	r3, r3
 8005936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593a:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800593c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005940:	4413      	add	r3, r2
 8005942:	b2db      	uxtb	r3, r3
 8005944:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	0ddb      	lsrs	r3, r3, #23
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005950:	b2db      	uxtb	r3, r3
 8005952:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	b2db      	uxtb	r3, r3
 8005960:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	0a5b      	lsrs	r3, r3, #9
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800596c:	b2db      	uxtb	r3, r3
 800596e:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800597c:	b2db      	uxtb	r3, r3
 800597e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8005982:	2300      	movs	r3, #0
 8005984:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80f1 	beq.w	8005b76 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005994:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005998:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800599c:	2b00      	cmp	r3, #0
 800599e:	f040 80ea 	bne.w	8005b76 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80059a2:	227b      	movs	r2, #123	@ 0x7b
 80059a4:	2194      	movs	r1, #148	@ 0x94
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f002 fa7a 	bl	8007ea0 <VL53L0X_WrByte>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fccc 	bl	8005358 <VL53L0X_device_read_strobe>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80059ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80059d2:	461a      	mov	r2, r3
 80059d4:	2190      	movs	r1, #144	@ 0x90
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f002 fb76 	bl	80080c8 <VL53L0X_RdDWord>
 80059dc:	4603      	mov	r3, r0
 80059de:	461a      	mov	r2, r3
 80059e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80059ea:	227c      	movs	r2, #124	@ 0x7c
 80059ec:	2194      	movs	r1, #148	@ 0x94
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f002 fa56 	bl	8007ea0 <VL53L0X_WrByte>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff fca8 	bl	8005358 <VL53L0X_device_read_strobe>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2190      	movs	r1, #144	@ 0x90
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f002 fb52 	bl	80080c8 <VL53L0X_RdDWord>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005a32:	2273      	movs	r2, #115	@ 0x73
 8005a34:	2194      	movs	r1, #148	@ 0x94
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 fa32 	bl	8007ea0 <VL53L0X_WrByte>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	461a      	mov	r2, r3
 8005a40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fc84 	bl	8005358 <VL53L0X_device_read_strobe>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005a62:	461a      	mov	r2, r3
 8005a64:	2190      	movs	r1, #144	@ 0x90
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f002 fb2e 	bl	80080c8 <VL53L0X_RdDWord>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005a82:	2274      	movs	r2, #116	@ 0x74
 8005a84:	2194      	movs	r1, #148	@ 0x94
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f002 fa0a 	bl	8007ea0 <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fc5c 	bl	8005358 <VL53L0X_device_read_strobe>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005aae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2190      	movs	r1, #144	@ 0x90
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fb06 	bl	80080c8 <VL53L0X_RdDWord>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005ace:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005ad4:	2275      	movs	r2, #117	@ 0x75
 8005ad6:	2194      	movs	r1, #148	@ 0x94
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f002 f9e1 	bl	8007ea0 <VL53L0X_WrByte>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff fc33 	bl	8005358 <VL53L0X_device_read_strobe>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b04:	461a      	mov	r2, r3
 8005b06:	2190      	movs	r1, #144	@ 0x90
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f002 fadd 	bl	80080c8 <VL53L0X_RdDWord>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	461a      	mov	r2, r3
 8005b12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005b24:	2276      	movs	r2, #118	@ 0x76
 8005b26:	2194      	movs	r1, #148	@ 0x94
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f002 f9b9 	bl	8007ea0 <VL53L0X_WrByte>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fc0b 	bl	8005358 <VL53L0X_device_read_strobe>
 8005b42:	4603      	mov	r3, r0
 8005b44:	461a      	mov	r2, r3
 8005b46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b50:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005b54:	461a      	mov	r2, r3
 8005b56:	2190      	movs	r1, #144	@ 0x90
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 fab5 	bl	80080c8 <VL53L0X_RdDWord>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6e:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005b70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b72:	4313      	orrs	r3, r2
 8005b74:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005b76:	2200      	movs	r2, #0
 8005b78:	2181      	movs	r1, #129	@ 0x81
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f002 f990 	bl	8007ea0 <VL53L0X_WrByte>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005b8e:	2206      	movs	r2, #6
 8005b90:	21ff      	movs	r1, #255	@ 0xff
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 f984 	bl	8007ea0 <VL53L0X_WrByte>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005ba6:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005baa:	461a      	mov	r2, r3
 8005bac:	2183      	movs	r1, #131	@ 0x83
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f002 fa2a 	bl	8008008 <VL53L0X_RdByte>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005bc6:	f023 0304 	bic.w	r3, r3, #4
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	2183      	movs	r1, #131	@ 0x83
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f002 f965 	bl	8007ea0 <VL53L0X_WrByte>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005be4:	2201      	movs	r2, #1
 8005be6:	21ff      	movs	r1, #255	@ 0xff
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f002 f959 	bl	8007ea0 <VL53L0X_WrByte>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f002 f94d 	bl	8007ea0 <VL53L0X_WrByte>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c14:	2200      	movs	r2, #0
 8005c16:	21ff      	movs	r1, #255	@ 0xff
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 f941 	bl	8007ea0 <VL53L0X_WrByte>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2180      	movs	r1, #128	@ 0x80
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f002 f935 	bl	8007ea0 <VL53L0X_WrByte>
 8005c36:	4603      	mov	r3, r0
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005c44:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8090 	bne.w	8005d6e <VL53L0X_get_info_from_device+0x990>
 8005c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c52:	2b07      	cmp	r3, #7
 8005c54:	f000 808b 	beq.w	8005d6e <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d024      	beq.n	8005cac <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005c62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c66:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11e      	bne.n	8005cac <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8005c74:	f883 213f 	strb.w	r2, [r3, #319]	@ 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8005c7e:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c86:	e00e      	b.n	8005ca6 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005c88:	f107 0208 	add.w	r2, r7, #8
 8005c8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c8e:	4413      	add	r3, r2
 8005c90:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8005c9c:	460a      	mov	r2, r1
 8005c9e:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca8:	2b05      	cmp	r3, #5
 8005caa:	dded      	ble.n	8005c88 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005cac:	78fb      	ldrb	r3, [r7, #3]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d019      	beq.n	8005cea <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cba:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cc2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ccc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f203 131f 	addw	r3, r3, #287	@ 0x11f
 8005cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005cde:	f107 0310 	add.w	r3, r7, #16
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ce6:	f006 fe26 	bl	800c936 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d030      	beq.n	8005d56 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cf8:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d12a      	bne.n	8005d56 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005d10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d12:	025b      	lsls	r3, r3, #9
 8005d14:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d1a:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d011      	beq.n	8005d4e <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8005d2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	64bb      	str	r3, [r7, #72]	@ 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8005d3e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
				OffsetMicroMeters *= -1;
 8005d42:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005d46:	425b      	negs	r3, r3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8005d4e:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005d56:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005d64:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d6e:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3760      	adds	r7, #96	@ 0x60
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b087      	sub	sp, #28
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8005d86:	f240 6277 	movw	r2, #1655	@ 0x677
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005d92:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005d96:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005da8:	68bb      	ldr	r3, [r7, #8]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b087      	sub	sp, #28
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005dd6:	e005      	b.n	8005de4 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005dde:	89fb      	ldrh	r3, [r7, #14]
 8005de0:	3301      	adds	r3, #1
 8005de2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2bff      	cmp	r3, #255	@ 0xff
 8005de8:	d8f6      	bhi.n	8005dd8 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005dea:	89fb      	ldrh	r3, [r7, #14]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005df8:	4413      	add	r3, r2
 8005dfa:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005dfc:	8afb      	ldrh	r3, [r7, #22]

}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	4603      	mov	r3, r0
 8005e12:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005e1c:	88fa      	ldrh	r2, [r7, #6]
 8005e1e:	0a12      	lsrs	r2, r2, #8
 8005e20:	b292      	uxth	r2, r2
 8005e22:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005e28:	68fb      	ldr	r3, [r7, #12]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f7ff ff93 	bl	8005d7a <VL53L0X_calc_macro_period_ps>
 8005e54:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e88 <VL53L0X_calc_timeout_mclks+0x50>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	099b      	lsrs	r3, r3, #6
 8005e64:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e6c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	441a      	add	r2, r3
	timeout_period_mclks =
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	10624dd3 	.word	0x10624dd3

08005e8c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005ea0:	787b      	ldrb	r3, [r7, #1]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff68 	bl	8005d7a <VL53L0X_calc_macro_period_ps>
 8005eaa:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <VL53L0X_calc_timeout_us+0x50>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8005ec8:	4a04      	ldr	r2, [pc, #16]	@ (8005edc <VL53L0X_calc_timeout_us+0x50>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	099b      	lsrs	r3, r3, #6
 8005ed0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	10624dd3 	.word	0x10624dd3

08005ee0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	@ 0x30
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <get_sequence_step_timeout+0x38>
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d002      	beq.n	8005f18 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d127      	bne.n	8005f68 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f18:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2100      	movs	r1, #0
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7fd f9cb 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005f2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005f34:	f107 0320 	add.w	r3, r7, #32
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2146      	movs	r1, #70	@ 0x46
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f002 f863 	bl	8008008 <VL53L0X_RdByte>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005f48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff ff5c 	bl	8005e0a <VL53L0X_decode_timeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005f56:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005f5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff ff94 	bl	8005e8c <VL53L0X_calc_timeout_us>
 8005f64:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005f66:	e092      	b.n	800608e <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005f68:	7afb      	ldrb	r3, [r7, #11]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d135      	bne.n	8005fda <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f6e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f72:	461a      	mov	r2, r3
 8005f74:	2100      	movs	r1, #0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f7fd f9a0 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005f82:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f040 8081 	bne.w	800608e <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f8c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005f90:	461a      	mov	r2, r3
 8005f92:	2100      	movs	r1, #0
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7fd f991 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005fa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8005fa8:	f107 031e 	add.w	r3, r7, #30
 8005fac:	461a      	mov	r2, r3
 8005fae:	2151      	movs	r1, #81	@ 0x51
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f002 f853 	bl	800805c <VL53L0X_RdWord>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005fbc:	8bfb      	ldrh	r3, [r7, #30]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff ff23 	bl	8005e0a <VL53L0X_decode_timeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005fc8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005fcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fce:	4619      	mov	r1, r3
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff5b 	bl	8005e8c <VL53L0X_calc_timeout_us>
 8005fd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005fd8:	e059      	b.n	800608e <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d156      	bne.n	800608e <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7fd fa72 	bl	80034d0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01d      	beq.n	8006032 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ff6:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fd f95c 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800600a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8006012:	f107 031e 	add.w	r3, r7, #30
 8006016:	461a      	mov	r2, r3
 8006018:	2151      	movs	r1, #81	@ 0x51
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f002 f81e 	bl	800805c <VL53L0X_RdWord>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff feee 	bl	8005e0a <VL53L0X_decode_timeout>
 800602e:	4603      	mov	r3, r0
 8006030:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006032:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006036:	2b00      	cmp	r3, #0
 8006038:	d109      	bne.n	800604e <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800603a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800603e:	461a      	mov	r2, r3
 8006040:	2101      	movs	r1, #1
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7fd f93a 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8006048:	4603      	mov	r3, r0
 800604a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800604e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10f      	bne.n	8006076 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8006056:	f107 031c 	add.w	r3, r7, #28
 800605a:	461a      	mov	r2, r3
 800605c:	2171      	movs	r1, #113	@ 0x71
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f001 fffc 	bl	800805c <VL53L0X_RdWord>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800606a:	8bbb      	ldrh	r3, [r7, #28]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fecc 	bl	8005e0a <VL53L0X_decode_timeout>
 8006072:	4603      	mov	r3, r0
 8006074:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006076:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006078:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800607e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8006082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006084:	4619      	mov	r1, r3
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff ff00 	bl	8005e8c <VL53L0X_calc_timeout_us>
 800608c:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006092:	601a      	str	r2, [r3, #0]

	return Status;
 8006094:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8006098:	4618      	mov	r0, r3
 800609a:	3730      	adds	r7, #48	@ 0x30
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	@ 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	460b      	mov	r3, r1
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80060b4:	7afb      	ldrb	r3, [r7, #11]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <set_sequence_step_timeout+0x26>
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80060c0:	7afb      	ldrb	r3, [r7, #11]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d138      	bne.n	8006138 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060c6:	f107 031b 	add.w	r3, r7, #27
 80060ca:	461a      	mov	r2, r3
 80060cc:	2100      	movs	r1, #0
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7fd f8f4 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80060da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11a      	bne.n	8006118 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80060e2:	7efb      	ldrb	r3, [r7, #27]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fea5 	bl	8005e38 <VL53L0X_calc_timeout_mclks>
 80060ee:	4603      	mov	r3, r0
 80060f0:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80060f2:	8bbb      	ldrh	r3, [r7, #28]
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f8:	d903      	bls.n	8006102 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80060fa:	23ff      	movs	r3, #255	@ 0xff
 80060fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006100:	e004      	b.n	800610c <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8006102:	8bbb      	ldrh	r3, [r7, #28]
 8006104:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006106:	3b01      	subs	r3, #1
 8006108:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800610c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006118:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800611c:	2b00      	cmp	r3, #0
 800611e:	f040 80ab 	bne.w	8006278 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006126:	461a      	mov	r2, r3
 8006128:	2146      	movs	r1, #70	@ 0x46
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 feb8 	bl	8007ea0 <VL53L0X_WrByte>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006136:	e09f      	b.n	8006278 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d135      	bne.n	80061aa <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800613e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11b      	bne.n	800617e <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006146:	f107 031b 	add.w	r3, r7, #27
 800614a:	461a      	mov	r2, r3
 800614c:	2100      	movs	r1, #0
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7fd f8b4 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800615a:	7efb      	ldrb	r3, [r7, #27]
 800615c:	461a      	mov	r2, r3
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fe69 	bl	8005e38 <VL53L0X_calc_timeout_mclks>
 8006166:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006168:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800616a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fe22 	bl	8005db6 <VL53L0X_encode_timeout>
 8006172:	4603      	mov	r3, r0
 8006174:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006176:	8b3a      	ldrh	r2, [r7, #24]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800617e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006182:	2b00      	cmp	r3, #0
 8006184:	d108      	bne.n	8006198 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006186:	8b3b      	ldrh	r3, [r7, #24]
 8006188:	461a      	mov	r2, r3
 800618a:	2151      	movs	r1, #81	@ 0x51
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f001 feab 	bl	8007ee8 <VL53L0X_WrWord>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006198:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800619c:	2b00      	cmp	r3, #0
 800619e:	d16b      	bne.n	8006278 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 80061a8:	e066      	b.n	8006278 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d160      	bne.n	8006272 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80061b0:	f107 0310 	add.w	r3, r7, #16
 80061b4:	4619      	mov	r1, r3
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7fd f98a 	bl	80034d0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80061c0:	7cfb      	ldrb	r3, [r7, #19]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01d      	beq.n	8006202 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80061c6:	f107 031b 	add.w	r3, r7, #27
 80061ca:	461a      	mov	r2, r3
 80061cc:	2100      	movs	r1, #0
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7fd f874 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 80061da:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80061e2:	f107 0318 	add.w	r3, r7, #24
 80061e6:	461a      	mov	r2, r3
 80061e8:	2151      	movs	r1, #81	@ 0x51
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f001 ff36 	bl	800805c <VL53L0X_RdWord>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80061f6:	8b3b      	ldrh	r3, [r7, #24]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fe06 	bl	8005e0a <VL53L0X_decode_timeout>
 80061fe:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8006200:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006202:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800620a:	f107 031b 	add.w	r3, r7, #27
 800620e:	461a      	mov	r2, r3
 8006210:	2101      	movs	r1, #1
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fd f852 	bl	80032bc <VL53L0X_GetVcselPulsePeriod>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800621e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006222:	2b00      	cmp	r3, #0
 8006224:	d128      	bne.n	8006278 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006226:	7efb      	ldrb	r3, [r7, #27]
 8006228:	461a      	mov	r2, r3
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fe03 	bl	8005e38 <VL53L0X_calc_timeout_mclks>
 8006232:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006234:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	4413      	add	r3, r2
 800623a:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800623c:	6a38      	ldr	r0, [r7, #32]
 800623e:	f7ff fdba 	bl	8005db6 <VL53L0X_encode_timeout>
 8006242:	4603      	mov	r3, r0
 8006244:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006246:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800624a:	2b00      	cmp	r3, #0
 800624c:	d108      	bne.n	8006260 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800624e:	8bfb      	ldrh	r3, [r7, #30]
 8006250:	461a      	mov	r2, r3
 8006252:	2171      	movs	r1, #113	@ 0x71
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fe47 	bl	8007ee8 <VL53L0X_WrWord>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8006260:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 8006270:	e002      	b.n	8006278 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006272:	23fc      	movs	r3, #252	@ 0xfc
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8006278:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800627c:	4618      	mov	r0, r3
 800627e:	3728      	adds	r7, #40	@ 0x28
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	@ 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	460b      	mov	r3, r1
 800628e:	70fb      	strb	r3, [r7, #3]
 8006290:	4613      	mov	r3, r2
 8006292:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800629a:	230c      	movs	r3, #12
 800629c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80062a0:	2312      	movs	r3, #18
 80062a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80062a6:	2308      	movs	r3, #8
 80062a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80062ac:	230e      	movs	r3, #14
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80062b6:	78bb      	ldrb	r3, [r7, #2]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062c2:	23fc      	movs	r3, #252	@ 0xfc
 80062c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062c8:	e020      	b.n	800630c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10d      	bne.n	80062ec <VL53L0X_set_vcsel_pulse_period+0x68>
 80062d0:	78ba      	ldrb	r2, [r7, #2]
 80062d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d304      	bcc.n	80062e4 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80062da:	78ba      	ldrb	r2, [r7, #2]
 80062dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d903      	bls.n	80062ec <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062e4:	23fc      	movs	r3, #252	@ 0xfc
 80062e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062ea:	e00f      	b.n	800630c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10c      	bne.n	800630c <VL53L0X_set_vcsel_pulse_period+0x88>
 80062f2:	78ba      	ldrb	r2, [r7, #2]
 80062f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d304      	bcc.n	8006306 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80062fc:	78ba      	ldrb	r2, [r7, #2]
 80062fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006302:	429a      	cmp	r2, r3
 8006304:	d902      	bls.n	800630c <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006306:	23fc      	movs	r3, #252	@ 0xfc
 8006308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800630c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006314:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006318:	e237      	b.n	800678a <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d150      	bne.n	80063c2 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8006320:	78bb      	ldrb	r3, [r7, #2]
 8006322:	2b0c      	cmp	r3, #12
 8006324:	d110      	bne.n	8006348 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006326:	2218      	movs	r2, #24
 8006328:	2157      	movs	r1, #87	@ 0x57
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f001 fdb8 	bl	8007ea0 <VL53L0X_WrByte>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006336:	2208      	movs	r2, #8
 8006338:	2156      	movs	r1, #86	@ 0x56
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fdb0 	bl	8007ea0 <VL53L0X_WrByte>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006346:	e17f      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006348:	78bb      	ldrb	r3, [r7, #2]
 800634a:	2b0e      	cmp	r3, #14
 800634c:	d110      	bne.n	8006370 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800634e:	2230      	movs	r2, #48	@ 0x30
 8006350:	2157      	movs	r1, #87	@ 0x57
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f001 fda4 	bl	8007ea0 <VL53L0X_WrByte>
 8006358:	4603      	mov	r3, r0
 800635a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800635e:	2208      	movs	r2, #8
 8006360:	2156      	movs	r1, #86	@ 0x56
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fd9c 	bl	8007ea0 <VL53L0X_WrByte>
 8006368:	4603      	mov	r3, r0
 800636a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800636e:	e16b      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8006370:	78bb      	ldrb	r3, [r7, #2]
 8006372:	2b10      	cmp	r3, #16
 8006374:	d110      	bne.n	8006398 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006376:	2240      	movs	r2, #64	@ 0x40
 8006378:	2157      	movs	r1, #87	@ 0x57
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 fd90 	bl	8007ea0 <VL53L0X_WrByte>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006386:	2208      	movs	r2, #8
 8006388:	2156      	movs	r1, #86	@ 0x56
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fd88 	bl	8007ea0 <VL53L0X_WrByte>
 8006390:	4603      	mov	r3, r0
 8006392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006396:	e157      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006398:	78bb      	ldrb	r3, [r7, #2]
 800639a:	2b12      	cmp	r3, #18
 800639c:	f040 8154 	bne.w	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80063a0:	2250      	movs	r2, #80	@ 0x50
 80063a2:	2157      	movs	r1, #87	@ 0x57
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 fd7b 	bl	8007ea0 <VL53L0X_WrByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80063b0:	2208      	movs	r2, #8
 80063b2:	2156      	movs	r1, #86	@ 0x56
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 fd73 	bl	8007ea0 <VL53L0X_WrByte>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063c0:	e142      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f040 813f 	bne.w	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80063ca:	78bb      	ldrb	r3, [r7, #2]
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d14c      	bne.n	800646a <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80063d0:	2210      	movs	r2, #16
 80063d2:	2148      	movs	r1, #72	@ 0x48
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fd63 	bl	8007ea0 <VL53L0X_WrByte>
 80063da:	4603      	mov	r3, r0
 80063dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80063e0:	2208      	movs	r2, #8
 80063e2:	2147      	movs	r1, #71	@ 0x47
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fd5b 	bl	8007ea0 <VL53L0X_WrByte>
 80063ea:	4603      	mov	r3, r0
 80063ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80063f0:	2202      	movs	r2, #2
 80063f2:	2132      	movs	r1, #50	@ 0x32
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fd53 	bl	8007ea0 <VL53L0X_WrByte>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006402:	4313      	orrs	r3, r2
 8006404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006408:	220c      	movs	r2, #12
 800640a:	2130      	movs	r1, #48	@ 0x30
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 fd47 	bl	8007ea0 <VL53L0X_WrByte>
 8006412:	4603      	mov	r3, r0
 8006414:	461a      	mov	r2, r3
 8006416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800641a:	4313      	orrs	r3, r2
 800641c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006420:	2201      	movs	r2, #1
 8006422:	21ff      	movs	r1, #255	@ 0xff
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 fd3b 	bl	8007ea0 <VL53L0X_WrByte>
 800642a:	4603      	mov	r3, r0
 800642c:	461a      	mov	r2, r3
 800642e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006432:	4313      	orrs	r3, r2
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006438:	2230      	movs	r2, #48	@ 0x30
 800643a:	2130      	movs	r1, #48	@ 0x30
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fd2f 	bl	8007ea0 <VL53L0X_WrByte>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800644a:	4313      	orrs	r3, r2
 800644c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006450:	2200      	movs	r2, #0
 8006452:	21ff      	movs	r1, #255	@ 0xff
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 fd23 	bl	8007ea0 <VL53L0X_WrByte>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006462:	4313      	orrs	r3, r2
 8006464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006468:	e0ee      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800646a:	78bb      	ldrb	r3, [r7, #2]
 800646c:	2b0a      	cmp	r3, #10
 800646e:	d14c      	bne.n	800650a <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8006470:	2228      	movs	r2, #40	@ 0x28
 8006472:	2148      	movs	r1, #72	@ 0x48
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 fd13 	bl	8007ea0 <VL53L0X_WrByte>
 800647a:	4603      	mov	r3, r0
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8006480:	2208      	movs	r2, #8
 8006482:	2147      	movs	r1, #71	@ 0x47
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 fd0b 	bl	8007ea0 <VL53L0X_WrByte>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006490:	2203      	movs	r2, #3
 8006492:	2132      	movs	r1, #50	@ 0x32
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fd03 	bl	8007ea0 <VL53L0X_WrByte>
 800649a:	4603      	mov	r3, r0
 800649c:	461a      	mov	r2, r3
 800649e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80064a8:	2209      	movs	r2, #9
 80064aa:	2130      	movs	r1, #48	@ 0x30
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 fcf7 	bl	8007ea0 <VL53L0X_WrByte>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ba:	4313      	orrs	r3, r2
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80064c0:	2201      	movs	r2, #1
 80064c2:	21ff      	movs	r1, #255	@ 0xff
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f001 fceb 	bl	8007ea0 <VL53L0X_WrByte>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80064d8:	2220      	movs	r2, #32
 80064da:	2130      	movs	r1, #48	@ 0x30
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 fcdf 	bl	8007ea0 <VL53L0X_WrByte>
 80064e2:	4603      	mov	r3, r0
 80064e4:	461a      	mov	r2, r3
 80064e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80064f0:	2200      	movs	r2, #0
 80064f2:	21ff      	movs	r1, #255	@ 0xff
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f001 fcd3 	bl	8007ea0 <VL53L0X_WrByte>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006502:	4313      	orrs	r3, r2
 8006504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006508:	e09e      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800650a:	78bb      	ldrb	r3, [r7, #2]
 800650c:	2b0c      	cmp	r3, #12
 800650e:	d14c      	bne.n	80065aa <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8006510:	2238      	movs	r2, #56	@ 0x38
 8006512:	2148      	movs	r1, #72	@ 0x48
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fcc3 	bl	8007ea0 <VL53L0X_WrByte>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8006520:	2208      	movs	r2, #8
 8006522:	2147      	movs	r1, #71	@ 0x47
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fcbb 	bl	8007ea0 <VL53L0X_WrByte>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8006530:	2203      	movs	r2, #3
 8006532:	2132      	movs	r1, #50	@ 0x32
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 fcb3 	bl	8007ea0 <VL53L0X_WrByte>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006542:	4313      	orrs	r3, r2
 8006544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006548:	2208      	movs	r2, #8
 800654a:	2130      	movs	r1, #48	@ 0x30
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fca7 	bl	8007ea0 <VL53L0X_WrByte>
 8006552:	4603      	mov	r3, r0
 8006554:	461a      	mov	r2, r3
 8006556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655a:	4313      	orrs	r3, r2
 800655c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006560:	2201      	movs	r2, #1
 8006562:	21ff      	movs	r1, #255	@ 0xff
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fc9b 	bl	8007ea0 <VL53L0X_WrByte>
 800656a:	4603      	mov	r3, r0
 800656c:	461a      	mov	r2, r3
 800656e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006572:	4313      	orrs	r3, r2
 8006574:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006578:	2220      	movs	r2, #32
 800657a:	2130      	movs	r1, #48	@ 0x30
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fc8f 	bl	8007ea0 <VL53L0X_WrByte>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800658a:	4313      	orrs	r3, r2
 800658c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006590:	2200      	movs	r2, #0
 8006592:	21ff      	movs	r1, #255	@ 0xff
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fc83 	bl	8007ea0 <VL53L0X_WrByte>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a2:	4313      	orrs	r3, r2
 80065a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065a8:	e04e      	b.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80065aa:	78bb      	ldrb	r3, [r7, #2]
 80065ac:	2b0e      	cmp	r3, #14
 80065ae:	d14b      	bne.n	8006648 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80065b0:	2248      	movs	r2, #72	@ 0x48
 80065b2:	2148      	movs	r1, #72	@ 0x48
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fc73 	bl	8007ea0 <VL53L0X_WrByte>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80065c0:	2208      	movs	r2, #8
 80065c2:	2147      	movs	r1, #71	@ 0x47
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fc6b 	bl	8007ea0 <VL53L0X_WrByte>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80065d0:	2203      	movs	r2, #3
 80065d2:	2132      	movs	r1, #50	@ 0x32
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fc63 	bl	8007ea0 <VL53L0X_WrByte>
 80065da:	4603      	mov	r3, r0
 80065dc:	461a      	mov	r2, r3
 80065de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80065e8:	2207      	movs	r2, #7
 80065ea:	2130      	movs	r1, #48	@ 0x30
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 fc57 	bl	8007ea0 <VL53L0X_WrByte>
 80065f2:	4603      	mov	r3, r0
 80065f4:	461a      	mov	r2, r3
 80065f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006600:	2201      	movs	r2, #1
 8006602:	21ff      	movs	r1, #255	@ 0xff
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fc4b 	bl	8007ea0 <VL53L0X_WrByte>
 800660a:	4603      	mov	r3, r0
 800660c:	461a      	mov	r2, r3
 800660e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006612:	4313      	orrs	r3, r2
 8006614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006618:	2220      	movs	r2, #32
 800661a:	2130      	movs	r1, #48	@ 0x30
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fc3f 	bl	8007ea0 <VL53L0X_WrByte>
 8006622:	4603      	mov	r3, r0
 8006624:	461a      	mov	r2, r3
 8006626:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800662a:	4313      	orrs	r3, r2
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006630:	2200      	movs	r2, #0
 8006632:	21ff      	movs	r1, #255	@ 0xff
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f001 fc33 	bl	8007ea0 <VL53L0X_WrByte>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006642:	4313      	orrs	r3, r2
 8006644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006648:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d17e      	bne.n	800674e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8006650:	78bb      	ldrb	r3, [r7, #2]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fe39 	bl	80052ca <VL53L0X_encode_vcsel_period>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006664:	2b01      	cmp	r3, #1
 8006666:	d045      	beq.n	80066f4 <VL53L0X_set_vcsel_pulse_period+0x470>
 8006668:	e06e      	b.n	8006748 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800666a:	f107 0314 	add.w	r3, r7, #20
 800666e:	461a      	mov	r2, r3
 8006670:	2103      	movs	r1, #3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fc34 	bl	8005ee0 <get_sequence_step_timeout>
 8006678:	4603      	mov	r3, r0
 800667a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800667e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006686:	f107 0310 	add.w	r3, r7, #16
 800668a:	461a      	mov	r2, r3
 800668c:	2102      	movs	r1, #2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7ff fc26 	bl	8005ee0 <get_sequence_step_timeout>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800669a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d109      	bne.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 80066a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80066a6:	461a      	mov	r2, r3
 80066a8:	2150      	movs	r1, #80	@ 0x50
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fbf8 	bl	8007ea0 <VL53L0X_WrByte>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80066b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d108      	bne.n	80066d0 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	461a      	mov	r2, r3
 80066c2:	2103      	movs	r1, #3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fceb 	bl	80060a0 <set_sequence_step_timeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80066d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d108      	bne.n	80066ea <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	461a      	mov	r2, r3
 80066dc:	2102      	movs	r1, #2
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fcde 	bl	80060a0 <set_sequence_step_timeout>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	78ba      	ldrb	r2, [r7, #2]
 80066ee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80066f2:	e02c      	b.n	800674e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80066f4:	f107 0318 	add.w	r3, r7, #24
 80066f8:	461a      	mov	r2, r3
 80066fa:	2104      	movs	r1, #4
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fbef 	bl	8005ee0 <get_sequence_step_timeout>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8006710:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006714:	461a      	mov	r2, r3
 8006716:	2170      	movs	r1, #112	@ 0x70
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fbc1 	bl	8007ea0 <VL53L0X_WrByte>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006724:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006728:	2b00      	cmp	r3, #0
 800672a:	d108      	bne.n	800673e <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	461a      	mov	r2, r3
 8006730:	2104      	movs	r1, #4
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fcb4 	bl	80060a0 <set_sequence_step_timeout>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	78ba      	ldrb	r2, [r7, #2]
 8006742:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006746:	e002      	b.n	800674e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006748:	23fc      	movs	r3, #252	@ 0xfc
 800674a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800674e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800675c:	69f9      	ldr	r1, [r7, #28]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fc fd6e 	bl	8003240 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800676a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8006772:	f107 010f 	add.w	r1, r7, #15
 8006776:	2301      	movs	r3, #1
 8006778:	2200      	movs	r2, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fe fcc0 	bl	8005100 <VL53L0X_perform_phase_calibration>
 8006780:	4603      	mov	r3, r0
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006786:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800678a:	4618      	mov	r0, r3
 800678c:	3728      	adds	r7, #40	@ 0x28
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	460b      	mov	r3, r1
 800679c:	607a      	str	r2, [r7, #4]
 800679e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80067a4:	7afb      	ldrb	r3, [r7, #11]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d00a      	beq.n	80067c4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80067ae:	e013      	b.n	80067d8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80067b0:	f107 0316 	add.w	r3, r7, #22
 80067b4:	461a      	mov	r2, r3
 80067b6:	2150      	movs	r1, #80	@ 0x50
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 fc25 	bl	8008008 <VL53L0X_RdByte>
 80067be:	4603      	mov	r3, r0
 80067c0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80067c2:	e00b      	b.n	80067dc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80067c4:	f107 0316 	add.w	r3, r7, #22
 80067c8:	461a      	mov	r2, r3
 80067ca:	2170      	movs	r1, #112	@ 0x70
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f001 fc1b 	bl	8008008 <VL53L0X_RdByte>
 80067d2:	4603      	mov	r3, r0
 80067d4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80067d6:	e001      	b.n	80067dc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067d8:	23fc      	movs	r3, #252	@ 0xfc
 80067da:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80067dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80067e4:	7dbb      	ldrb	r3, [r7, #22]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fd5c 	bl	80052a4 <VL53L0X_decode_vcsel_period>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	701a      	strb	r2, [r3, #0]

	return Status;
 80067f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b090      	sub	sp, #64	@ 0x40
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800680a:	2300      	movs	r3, #0
 800680c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006810:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006814:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006816:	f240 7376 	movw	r3, #1910	@ 0x776
 800681a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800681c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8006820:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006822:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006826:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8006828:	f240 234e 	movw	r3, #590	@ 0x24e
 800682c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 800682e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006834:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8006838:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800683a:	f240 2326 	movw	r3, #550	@ 0x226
 800683e:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006840:	2300      	movs	r3, #0
 8006842:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	63bb      	str	r3, [r7, #56]	@ 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fc fe38 	bl	80034d0 <VL53L0X_GetSequenceStepEnables>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8006866:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800686a:	2b00      	cmp	r3, #0
 800686c:	d15b      	bne.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 800686e:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006874:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 800687a:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 800687c:	2b00      	cmp	r3, #0
 800687e:	d052      	beq.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	461a      	mov	r2, r3
 8006886:	2102      	movs	r1, #2
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fb29 	bl	8005ee0 <get_sequence_step_timeout>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8006894:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800689c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068a0:	e07d      	b.n	800699e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80068a2:	7c3b      	ldrb	r3, [r7, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00f      	beq.n	80068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80068a8:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80068aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068ac:	4413      	add	r3, r2
 80068ae:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d204      	bcs.n	80068c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80068b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068c0:	e002      	b.n	80068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068c2:	23fc      	movs	r3, #252	@ 0xfc
 80068c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80068c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 80068d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80068d4:	e063      	b.n	800699e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 80068d6:	7cbb      	ldrb	r3, [r7, #18]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d011      	beq.n	8006900 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	4413      	add	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d204      	bcs.n	80068f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80068ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f6:	e016      	b.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068f8:	23fc      	movs	r3, #252	@ 0xfc
 80068fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80068fe:	e012      	b.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006900:	7c7b      	ldrb	r3, [r7, #17]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00f      	beq.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800690a:	4413      	add	r3, r2
 800690c:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	429a      	cmp	r2, r3
 8006914:	d204      	bcs.n	8006920 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006916:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800691e:	e002      	b.n	8006926 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006920:	23fc      	movs	r3, #252	@ 0xfc
 8006922:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006926:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 800692e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006932:	e034      	b.n	800699e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d019      	beq.n	800696e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800693a:	f107 0308 	add.w	r3, r7, #8
 800693e:	461a      	mov	r2, r3
 8006940:	2103      	movs	r1, #3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff facc 	bl	8005ee0 <get_sequence_step_timeout>
 8006948:	4603      	mov	r3, r0
 800694a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	4413      	add	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	429a      	cmp	r2, r3
 800695c:	d204      	bcs.n	8006968 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800695e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006966:	e002      	b.n	800696e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006968:	23fc      	movs	r3, #252	@ 0xfc
 800696a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800696e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006972:	2b00      	cmp	r3, #0
 8006974:	d111      	bne.n	800699a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006976:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 800697c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006986:	2104      	movs	r1, #4
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fb89 	bl	80060a0 <set_sequence_step_timeout>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800699a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3740      	adds	r7, #64	@ 0x40
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b090      	sub	sp, #64	@ 0x40
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80069b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80069ba:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80069bc:	f240 7376 	movw	r3, #1910	@ 0x776
 80069c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80069c2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80069c6:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80069c8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80069cc:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80069ce:	f240 234e 	movw	r3, #590	@ 0x24e
 80069d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80069d4:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80069d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80069da:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80069de:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80069e0:	f240 2326 	movw	r3, #550	@ 0x226
 80069e4:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80069ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ee:	441a      	add	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80069f4:	f107 0318 	add.w	r3, r7, #24
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fc fd68 	bl	80034d0 <VL53L0X_GetSequenceStepEnables>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006a06:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a12:	e075      	b.n	8006b00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006a14:	7e3b      	ldrb	r3, [r7, #24]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006a1a:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006a20:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d030      	beq.n	8006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006a26:	f107 0310 	add.w	r3, r7, #16
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	2102      	movs	r1, #2
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fa56 	bl	8005ee0 <get_sequence_step_timeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006a3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d122      	bne.n	8006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006a42:	7e3b      	ldrb	r3, [r7, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006a4c:	6939      	ldr	r1, [r7, #16]
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a52:	441a      	add	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006a58:	7ebb      	ldrb	r3, [r7, #26]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d009      	beq.n	8006a72 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006a62:	6939      	ldr	r1, [r7, #16]
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	440b      	add	r3, r1
 8006a68:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a6a:	441a      	add	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e00a      	b.n	8006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006a72:	7e7b      	ldrb	r3, [r7, #25]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006a7c:	6939      	ldr	r1, [r7, #16]
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006a82:	441a      	add	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a88:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d114      	bne.n	8006aba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006a90:	7efb      	ldrb	r3, [r7, #27]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d011      	beq.n	8006aba <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2103      	movs	r1, #3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fa1e 	bl	8005ee0 <get_sequence_step_timeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006aae:	68f9      	ldr	r1, [r7, #12]
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab2:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006ab4:	441a      	add	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aba:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d114      	bne.n	8006aec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006ac2:	7f3b      	ldrb	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d011      	beq.n	8006aec <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	461a      	mov	r2, r3
 8006ace:	2104      	movs	r1, #4
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fa05 	bl	8005ee0 <get_sequence_step_timeout>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006ae0:	6979      	ldr	r1, [r7, #20]
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006ae6:	441a      	add	r2, r3
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006aec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006afc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3740      	adds	r7, #64	@ 0x40
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b088      	sub	sp, #32
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006b1a:	e0c6      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	4413      	add	r3, r2
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	2bff      	cmp	r3, #255	@ 0xff
 8006b30:	f040 808d 	bne.w	8006c4e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4413      	add	r3, r2
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	747b      	strb	r3, [r7, #17]
			Index++;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	3301      	adds	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006b44:	7c7b      	ldrb	r3, [r7, #17]
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d87e      	bhi.n	8006c48 <VL53L0X_load_tuning_settings+0x140>
 8006b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <VL53L0X_load_tuning_settings+0x48>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b61 	.word	0x08006b61
 8006b54:	08006b9b 	.word	0x08006b9b
 8006b58:	08006bd5 	.word	0x08006bd5
 8006b5c:	08006c0f 	.word	0x08006c0f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	743b      	strb	r3, [r7, #16]
				Index++;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4413      	add	r3, r2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006b80:	7c3b      	ldrb	r3, [r7, #16]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	89ba      	ldrh	r2, [r7, #12]
 8006b94:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
				break;
 8006b98:	e087      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	743b      	strb	r3, [r7, #16]
				Index++;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bba:	7c3b      	ldrb	r3, [r7, #16]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	89ba      	ldrh	r2, [r7, #12]
 8006bce:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
					Temp16);
				break;
 8006bd2:	e06a      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	4413      	add	r3, r2
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	743b      	strb	r3, [r7, #16]
				Index++;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	3301      	adds	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006bf4:	7c3b      	ldrb	r3, [r7, #16]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	89ba      	ldrh	r2, [r7, #12]
 8006c08:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
				break;
 8006c0c:	e04d      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	4413      	add	r3, r2
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	4413      	add	r3, r2
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c2e:	7c3b      	ldrb	r3, [r7, #16]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	89ba      	ldrh	r2, [r7, #12]
 8006c42:	f8a3 2168 	strh.w	r2, [r3, #360]	@ 0x168
				break;
 8006c46:	e030      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c48:	23fc      	movs	r3, #252	@ 0xfc
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e02d      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006c4e:	7cfb      	ldrb	r3, [r7, #19]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d828      	bhi.n	8006ca6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	4413      	add	r3, r2
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	3301      	adds	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	e00f      	b.n	8006c8a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	4413      	add	r3, r2
 8006c70:	7819      	ldrb	r1, [r3, #0]
 8006c72:	f107 0208 	add.w	r2, r7, #8
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	4413      	add	r3, r2
 8006c7a:	460a      	mov	r2, r1
 8006c7c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	3301      	adds	r3, #1
 8006c82:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61bb      	str	r3, [r7, #24]
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	dbeb      	blt.n	8006c6a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	f107 0208 	add.w	r2, r7, #8
 8006c98:	7cb9      	ldrb	r1, [r7, #18]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f8a4 	bl	8007de8 <VL53L0X_WriteMulti>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e001      	b.n	8006caa <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ca6:	23fc      	movs	r3, #252	@ 0xfc
 8006ca8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <VL53L0X_load_tuning_settings+0x1b8>
 8006cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f43f af2e 	beq.w	8006b1c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006ce2:	f107 0313 	add.w	r3, r7, #19
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7fc fcb1 	bl	8003650 <VL53L0X_GetXTalkCompensationEnable>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006cf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d111      	bne.n	8006d1e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006cfa:	7cfb      	ldrb	r3, [r7, #19]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	8a9b      	ldrh	r3, [r3, #20]
 8006d0a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3380      	adds	r3, #128	@ 0x80
 8006d18:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006d1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b086      	sub	sp, #24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006d42:	f107 0310 	add.w	r3, r7, #16
 8006d46:	461a      	mov	r2, r3
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ffbe 	bl	8006ccc <VL53L0X_get_total_xtalk_rate>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	441a      	add	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	601a      	str	r2, [r3, #0]

	return Status;
 8006d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8006d74:	b084      	sub	sp, #16
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	f107 0c18 	add.w	ip, r7, #24
 8006d80:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8006d94:	2300      	movs	r3, #0
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	e00d      	b.n	8006db6 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f107 0218 	add.w	r2, r7, #24
 8006da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d802      	bhi.n	8006db0 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60bb      	str	r3, [r7, #8]
			break;
 8006dae:	e006      	b.n	8006dbe <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d8ed      	bhi.n	8006d9a <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d105      	bne.n	8006dd2 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8006dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	e008      	b.n	8006de4 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e002      	b.n	8006de4 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	3b01      	subs	r3, #1
 8006de2:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006de8:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dee:	601a      	str	r2, [r3, #0]

	return Status;
 8006df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	b004      	add	sp, #16
 8006e00:	4770      	bx	lr

08006e02 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8006e02:	b5b0      	push	{r4, r5, r7, lr}
 8006e04:	b0ba      	sub	sp, #232	@ 0xe8
 8006e06:	af0e      	add	r7, sp, #56	@ 0x38
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006e1c:	f107 031c 	add.w	r3, r7, #28
 8006e20:	4619      	mov	r1, r3
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7fc f8f8 	bl	8003018 <VL53L0X_GetDeviceParameters>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8006e2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d803      	bhi.n	8006e3e <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 8006e36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e3c:	e07c      	b.n	8006f38 <VL53L0X_calc_dmax+0x136>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8006e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
	} else if (ambRateMeas >=
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d304      	bcc.n	8006e50 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 8006e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e4e:	e073      	b.n	8006f38 <VL53L0X_calc_dmax+0x136>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8006e50:	f107 0314 	add.w	r3, r7, #20
 8006e54:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e56:	f107 0318 	add.w	r3, r7, #24
 8006e5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e60:	2307      	movs	r3, #7
 8006e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e64:	466d      	mov	r5, sp
 8006e66:	f107 0468 	add.w	r4, r7, #104	@ 0x68
 8006e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006e76:	e885 0003 	stmia.w	r5, {r0, r1}
 8006e7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8006e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e80:	f7ff ff78 	bl	8006d74 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d109      	bne.n	8006ea0 <VL53L0X_calc_dmax+0x9e>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	3314      	adds	r3, #20
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	33b0      	adds	r3, #176	@ 0xb0
 8006e94:	443b      	add	r3, r7
 8006e96:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e9e:	e04b      	b.n	8006f38 <VL53L0X_calc_dmax+0x136>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	330e      	adds	r3, #14
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	33b0      	adds	r3, #176	@ 0xb0
 8006ea8:	443b      	add	r3, r7
 8006eaa:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006eae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	330e      	adds	r3, #14
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	33b0      	adds	r3, #176	@ 0xb0
 8006eba:	443b      	add	r3, r7
 8006ebc:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8006ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	33b0      	adds	r3, #176	@ 0xb0
 8006ecc:	443b      	add	r3, r7
 8006ece:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006ed2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	3314      	adds	r3, #20
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	33b0      	adds	r3, #176	@ 0xb0
 8006ede:	443b      	add	r3, r7
 8006ee0:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8006ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			if ((amb1 - amb0) != 0) {
 8006ee8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006eec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d01d      	beq.n	8006f30 <VL53L0X_calc_dmax+0x12e>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8006ef4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8006ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006efc:	1ad2      	subs	r2, r2, r3
 8006efe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8006f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f06:	1acb      	subs	r3, r1, r3
 8006f08:	0a1b      	lsrs	r3, r3, #8
 8006f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8006f12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f20:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8006f24:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8006f28:	4413      	add	r3, r2
 8006f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f2e:	e003      	b.n	8006f38 <VL53L0X_calc_dmax+0x136>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8006f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8006f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f3c:	0c1a      	lsrs	r2, r3, #16
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8006f42:	f997 30ab 	ldrsb.w	r3, [r7, #171]	@ 0xab
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	37b0      	adds	r7, #176	@ 0xb0
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f50 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b0b0      	sub	sp, #192	@ 0xc0
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8006f5c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006f64:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8006f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8006f6c:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 8006f70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006f74:	f241 235c 	movw	r3, #4700	@ 0x125c
 8006f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8006f7c:	4b98      	ldr	r3, [pc, #608]	@ (80071e0 <VL53L0X_calc_sigma_estimate+0x290>)
 8006f7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8006f82:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8006f86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8006f8a:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8006f8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8006f9a:	4b92      	ldr	r3, [pc, #584]	@ (80071e4 <VL53L0X_calc_sigma_estimate+0x294>)
 8006f9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fa2:	67bb      	str	r3, [r7, #120]	@ 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8006fa4:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8006fa8:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8006faa:	f240 6377 	movw	r3, #1655	@ 0x677
 8006fae:	673b      	str	r3, [r7, #112]	@ 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006fc4:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	66bb      	str	r3, [r7, #104]	@ 0x68

	Status = VL53L0X_get_total_signal_rate(
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fea8 	bl	8006d2a <VL53L0X_get_total_signal_rate>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006fe0:	f107 0318 	add.w	r3, r7, #24
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fe6f 	bl	8006ccc <VL53L0X_get_total_xtalk_rate>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	667b      	str	r3, [r7, #100]	@ 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007002:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	667b      	str	r3, [r7, #100]	@ 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007010:	fb02 f303 	mul.w	r3, r2, r3
 8007014:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007018:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800701c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800701e:	429a      	cmp	r2, r3
 8007020:	d902      	bls.n	8007028 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007028:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800702c:	2b00      	cmp	r3, #0
 800702e:	d160      	bne.n	80070f2 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007036:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 8007040:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007044:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7fe fef2 	bl	8005e38 <VL53L0X_calc_timeout_mclks>
 8007054:	65f8      	str	r0, [r7, #92]	@ 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800705c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8007066:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800706a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f7fe fedf 	bl	8005e38 <VL53L0X_calc_timeout_mclks>
 800707a:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800707c:	2303      	movs	r3, #3
 800707e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		if (finalRangeVcselPCLKS == 8)
 8007082:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8007086:	2b08      	cmp	r3, #8
 8007088:	d102      	bne.n	8007090 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800708a:	2302      	movs	r3, #2
 800708c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007090:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007094:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007096:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	02db      	lsls	r3, r3, #11
 80070a0:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070a4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80070a8:	4a4f      	ldr	r2, [pc, #316]	@ (80071e8 <VL53L0X_calc_sigma_estimate+0x298>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	099b      	lsrs	r3, r3, #6
 80070b0:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 80070b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	653b      	str	r3, [r7, #80]	@ 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80070bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070be:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80070c2:	4a49      	ldr	r2, [pc, #292]	@ (80071e8 <VL53L0X_calc_sigma_estimate+0x298>)
 80070c4:	fba2 2303 	umull	r2, r3, r2, r3
 80070c8:	099b      	lsrs	r3, r3, #6
 80070ca:	653b      	str	r3, [r7, #80]	@ 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3380      	adds	r3, #128	@ 0x80
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80070e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80070e4:	3380      	adds	r3, #128	@ 0x80
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80070f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 80070fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80070fe:	e14a      	b.n	8007396 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8007100:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007102:	2b00      	cmp	r3, #0
 8007104:	d109      	bne.n	800711a <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800710c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007114:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007118:	e13b      	b.n	8007392 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800711a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800712c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800712e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007130:	041a      	lsls	r2, r3, #16
 8007132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800713c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007140:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007144:	429a      	cmp	r2, r3
 8007146:	d903      	bls.n	8007150 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007148:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800714c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007150:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007154:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007160:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8007164:	4613      	mov	r3, r2
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	4413      	add	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe f8bf 	bl	80052f0 <VL53L0X_isqrt>
 8007172:	4603      	mov	r3, r0
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	891b      	ldrh	r3, [r3, #8]
 800717c:	461a      	mov	r2, r3
 800717e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	647b      	str	r3, [r7, #68]	@ 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007188:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800718a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800718e:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007190:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007192:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007196:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <VL53L0X_calc_sigma_estimate+0x298>)
 8007198:	fba2 2303 	umull	r2, r3, r2, r3
 800719c:	099b      	lsrs	r3, r3, #6
 800719e:	643b      	str	r3, [r7, #64]	@ 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80071a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80071a8:	4a0f      	ldr	r2, [pc, #60]	@ (80071e8 <VL53L0X_calc_sigma_estimate+0x298>)
 80071aa:	fba2 2303 	umull	r2, r3, r2, r3
 80071ae:	099b      	lsrs	r3, r3, #6
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 80071b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	643b      	str	r3, [r7, #64]	@ 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80071b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb8      	it	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	63bb      	str	r3, [r7, #56]	@ 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	7e1b      	ldrb	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 80071d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071de:	e032      	b.n	8007246 <VL53L0X_calc_sigma_estimate+0x2f6>
 80071e0:	028f87ae 	.word	0x028f87ae
 80071e4:	0006999a 	.word	0x0006999a
 80071e8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 80071ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8007200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007204:	fb02 f303 	mul.w	r3, r2, r3
 8007208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800720c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007210:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007212:	4413      	add	r3, r2
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800721a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800721e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8007222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8007226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007234:	fb03 f303 	mul.w	r3, r3, r3
 8007238:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800723c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007240:	0b9b      	lsrs	r3, r3, #14
 8007242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800724a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007254:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007258:	0c1b      	lsrs	r3, r3, #16
 800725a:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800725c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725e:	fb03 f303 	mul.w	r3, r3, r3
 8007262:	637b      	str	r3, [r7, #52]	@ 0x34

		sqr2 = sigmaEstimateP2;
 8007264:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007268:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800726a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	fb03 f303 	mul.w	r3, r3, r3
 800727a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800727c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	4413      	add	r3, r2
 8007282:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007286:	f7fe f833 	bl	80052f0 <VL53L0X_isqrt>
 800728a:	62b8      	str	r0, [r7, #40]	@ 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	3332      	adds	r3, #50	@ 0x32
 8007296:	4a42      	ldr	r2, [pc, #264]	@ (80073a0 <VL53L0X_calc_sigma_estimate+0x450>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095a      	lsrs	r2, r3, #5
 800729e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80072a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072ac:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 80072b0:	fb02 f303 	mul.w	r3, r2, r3
 80072b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80072b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072bc:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80072c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072ca:	4a36      	ldr	r2, [pc, #216]	@ (80073a4 <VL53L0X_calc_sigma_estimate+0x454>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	0b5b      	lsrs	r3, r3, #13
 80072d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80072d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072de:	429a      	cmp	r2, r3
 80072e0:	d903      	bls.n	80072ea <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 80072e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 80072ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80072ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80072f8:	4a2b      	ldr	r2, [pc, #172]	@ (80073a8 <VL53L0X_calc_sigma_estimate+0x458>)
 80072fa:	fba2 2303 	umull	r2, r3, r2, r3
 80072fe:	099b      	lsrs	r3, r3, #6
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007306:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800730a:	441a      	add	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007312:	4618      	mov	r0, r3
 8007314:	f7fd ffec 	bl	80052f0 <VL53L0X_isqrt>
 8007318:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007326:	4a20      	ldr	r2, [pc, #128]	@ (80073a8 <VL53L0X_calc_sigma_estimate+0x458>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	099b      	lsrs	r3, r3, #6
 800732e:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007334:	fb03 f303 	mul.w	r3, r3, r3
 8007338:	637b      	str	r3, [r7, #52]	@ 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	fb03 f303 	mul.w	r3, r3, r3
 8007340:	633b      	str	r3, [r7, #48]	@ 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	4413      	add	r3, r2
 8007348:	4618      	mov	r0, r3
 800734a:	f7fd ffd1 	bl	80052f0 <VL53L0X_isqrt>
 800734e:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800735e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <VL53L0X_calc_sigma_estimate+0x428>
 8007364:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <VL53L0X_calc_sigma_estimate+0x428>
 800736c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007374:	429a      	cmp	r2, r3
 8007376:	d903      	bls.n	8007380 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8007378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800737c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007386:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007392:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8007396:	4618      	mov	r0, r3
 8007398:	37c0      	adds	r7, #192	@ 0xc0
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	51eb851f 	.word	0x51eb851f
 80073a4:	d1b71759 	.word	0xd1b71759
 80073a8:	10624dd3 	.word	0x10624dd3

080073ac <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b090      	sub	sp, #64	@ 0x40
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	607a      	str	r2, [r7, #4]
 80073b6:	461a      	mov	r2, r3
 80073b8:	460b      	mov	r3, r1
 80073ba:	72fb      	strb	r3, [r7, #11]
 80073bc:	4613      	mov	r3, r2
 80073be:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	10db      	asrs	r3, r3, #3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800740c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
 8007414:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007418:	2b05      	cmp	r3, #5
 800741a:	d013      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800741c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007420:	2b07      	cmp	r3, #7
 8007422:	d00f      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007424:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007428:	2b0c      	cmp	r3, #12
 800742a:	d00b      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800742c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007430:	2b0d      	cmp	r3, #13
 8007432:	d007      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007434:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007438:	2b0e      	cmp	r3, #14
 800743a:	d003      	beq.n	8007444 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800743c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007440:	2b0f      	cmp	r3, #15
 8007442:	d103      	bne.n	800744c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007444:	2301      	movs	r3, #1
 8007446:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800744a:	e002      	b.n	8007452 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800744c:	2300      	movs	r3, #0
 800744e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007452:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800745a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800745e:	461a      	mov	r2, r3
 8007460:	2100      	movs	r1, #0
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f7fc f9c8 	bl	80037f8 <VL53L0X_GetLimitCheckEnable>
 8007468:	4603      	mov	r3, r0
 800746a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800746e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007472:	2b00      	cmp	r3, #0
 8007474:	d03c      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x144>
 8007476:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800747a:	2b00      	cmp	r3, #0
 800747c:	d138      	bne.n	80074f0 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800747e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007482:	461a      	mov	r2, r3
 8007484:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f7ff fd62 	bl	8006f50 <VL53L0X_calc_sigma_estimate>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8007492:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10a      	bne.n	80074b0 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 800749a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f107 0210 	add.w	r2, r7, #16
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff fcac 	bl	8006e02 <VL53L0X_calc_dmax>
 80074aa:	4603      	mov	r3, r0
 80074ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80074b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074be:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80074c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d113      	bne.n	80074f0 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80074c8:	f107 0320 	add.w	r3, r7, #32
 80074cc:	461a      	mov	r2, r3
 80074ce:	2100      	movs	r1, #0
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7fc fa17 	bl	8003904 <VL53L0X_GetLimitCheckValue>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d006      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 80074e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d902      	bls.n	80074f0 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80074f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80074f8:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80074fc:	461a      	mov	r2, r3
 80074fe:	2102      	movs	r1, #2
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7fc f979 	bl	80037f8 <VL53L0X_GetLimitCheckEnable>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800750c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007510:	2b00      	cmp	r3, #0
 8007512:	d044      	beq.n	800759e <VL53L0X_get_pal_range_status+0x1f2>
 8007514:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007518:	2b00      	cmp	r3, #0
 800751a:	d140      	bne.n	800759e <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800751c:	f107 031c 	add.w	r3, r7, #28
 8007520:	461a      	mov	r2, r3
 8007522:	2102      	movs	r1, #2
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7fc f9ed 	bl	8003904 <VL53L0X_GetLimitCheckValue>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007530:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007538:	2201      	movs	r2, #1
 800753a:	21ff      	movs	r1, #255	@ 0xff
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 fcaf 	bl	8007ea0 <VL53L0X_WrByte>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8007548:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8007550:	f107 0316 	add.w	r3, r7, #22
 8007554:	461a      	mov	r2, r3
 8007556:	21b6      	movs	r1, #182	@ 0xb6
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fd7f 	bl	800805c <VL53L0X_RdWord>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8007564:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007568:	2b00      	cmp	r3, #0
 800756a:	d107      	bne.n	800757c <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800756c:	2200      	movs	r2, #0
 800756e:	21ff      	movs	r1, #255	@ 0xff
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fc95 	bl	8007ea0 <VL53L0X_WrByte>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800757c:	8afb      	ldrh	r3, [r7, #22]
 800757e:	025b      	lsls	r3, r3, #9
 8007580:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007586:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

		if ((SignalRefClipValue > 0) &&
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d006      	beq.n	800759e <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007590:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d902      	bls.n	800759e <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800759e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80075aa:	461a      	mov	r2, r3
 80075ac:	2103      	movs	r1, #3
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7fc f922 	bl	80037f8 <VL53L0X_GetLimitCheckEnable>
 80075b4:	4603      	mov	r3, r0
 80075b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80075ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d023      	beq.n	800760a <VL53L0X_get_pal_range_status+0x25e>
 80075c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d11f      	bne.n	800760a <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 80075ca:	893b      	ldrh	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075d4:	e005      	b.n	80075e2 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	021a      	lsls	r2, r3, #8
 80075da:	893b      	ldrh	r3, [r7, #8]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	461a      	mov	r2, r3
 80075e8:	2103      	movs	r1, #3
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7fc f98a 	bl	8003904 <VL53L0X_GetLimitCheckValue>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d006      	beq.n	800760a <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80075fc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80075fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007600:	429a      	cmp	r2, r3
 8007602:	d202      	bcs.n	800760a <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800760a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800760e:	2b00      	cmp	r3, #0
 8007610:	d14a      	bne.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8007612:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007616:	2b01      	cmp	r3, #1
 8007618:	d103      	bne.n	8007622 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 800761a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800761c:	22ff      	movs	r2, #255	@ 0xff
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	e042      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007622:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007626:	2b01      	cmp	r3, #1
 8007628:	d007      	beq.n	800763a <VL53L0X_get_pal_range_status+0x28e>
 800762a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800762e:	2b02      	cmp	r3, #2
 8007630:	d003      	beq.n	800763a <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8007632:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007636:	2b03      	cmp	r3, #3
 8007638:	d103      	bne.n	8007642 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800763a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763c:	2205      	movs	r2, #5
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e032      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007642:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007646:	2b06      	cmp	r3, #6
 8007648:	d003      	beq.n	8007652 <VL53L0X_get_pal_range_status+0x2a6>
 800764a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800764e:	2b09      	cmp	r3, #9
 8007650:	d103      	bne.n	800765a <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8007652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007654:	2204      	movs	r2, #4
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e026      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 800765a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800765e:	2b08      	cmp	r3, #8
 8007660:	d007      	beq.n	8007672 <VL53L0X_get_pal_range_status+0x2c6>
 8007662:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007666:	2b0a      	cmp	r3, #10
 8007668:	d003      	beq.n	8007672 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 800766a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d103      	bne.n	800767a <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007674:	2203      	movs	r2, #3
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	e016      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 800767a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800767e:	2b04      	cmp	r3, #4
 8007680:	d003      	beq.n	800768a <VL53L0X_get_pal_range_status+0x2de>
 8007682:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007686:	2b01      	cmp	r3, #1
 8007688:	d103      	bne.n	8007692 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800768a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768c:	2202      	movs	r2, #2
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	e00a      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8007692:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8007696:	2b01      	cmp	r3, #1
 8007698:	d103      	bne.n	80076a2 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800769a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
 80076a0:	e002      	b.n	80076a8 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80076a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80076a8:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80076ac:	461a      	mov	r2, r3
 80076ae:	2101      	movs	r1, #1
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7fc f8a1 	bl	80037f8 <VL53L0X_GetLimitCheckEnable>
 80076b6:	4603      	mov	r3, r0
 80076b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80076bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d14f      	bne.n	8007764 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80076c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <VL53L0X_get_pal_range_status+0x328>
 80076cc:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80076da:	e002      	b.n	80076e2 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80076e8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80076ec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d003      	beq.n	80076fc <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80076f4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007702:	e002      	b.n	800770a <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007710:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007714:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <VL53L0X_get_pal_range_status+0x378>
 800771c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d103      	bne.n	800772c <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007724:	2301      	movs	r3, #1
 8007726:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800772a:	e002      	b.n	8007732 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007738:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800773c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <VL53L0X_get_pal_range_status+0x3a0>
 8007744:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007748:	2b01      	cmp	r3, #1
 800774a:	d103      	bne.n	8007754 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007752:	e002      	b.n	800775a <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007760:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007764:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8007768:	4618      	mov	r0, r3
 800776a:	3740      	adds	r7, #64	@ 0x40
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <VL53L0X_get_pal_error_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 8007770:	b4b0      	push	{r4, r5, r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800777c:	2300      	movs	r3, #0
 800777e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 8007780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007784:	3363      	adds	r3, #99	@ 0x63
 8007786:	2b63      	cmp	r3, #99	@ 0x63
 8007788:	f200 81b9 	bhi.w	8007afe <VL53L0X_get_pal_error_string+0x38e>
 800778c:	a201      	add	r2, pc, #4	@ (adr r2, 8007794 <VL53L0X_get_pal_error_string+0x24>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	08007ae3 	.word	0x08007ae3
 8007798:	08007aff 	.word	0x08007aff
 800779c:	08007aff 	.word	0x08007aff
 80077a0:	08007aff 	.word	0x08007aff
 80077a4:	08007aff 	.word	0x08007aff
 80077a8:	08007aff 	.word	0x08007aff
 80077ac:	08007aff 	.word	0x08007aff
 80077b0:	08007aff 	.word	0x08007aff
 80077b4:	08007aff 	.word	0x08007aff
 80077b8:	08007aff 	.word	0x08007aff
 80077bc:	08007aff 	.word	0x08007aff
 80077c0:	08007aff 	.word	0x08007aff
 80077c4:	08007aff 	.word	0x08007aff
 80077c8:	08007aff 	.word	0x08007aff
 80077cc:	08007aff 	.word	0x08007aff
 80077d0:	08007aff 	.word	0x08007aff
 80077d4:	08007aff 	.word	0x08007aff
 80077d8:	08007aff 	.word	0x08007aff
 80077dc:	08007aff 	.word	0x08007aff
 80077e0:	08007aff 	.word	0x08007aff
 80077e4:	08007aff 	.word	0x08007aff
 80077e8:	08007aff 	.word	0x08007aff
 80077ec:	08007aff 	.word	0x08007aff
 80077f0:	08007aff 	.word	0x08007aff
 80077f4:	08007aff 	.word	0x08007aff
 80077f8:	08007aff 	.word	0x08007aff
 80077fc:	08007aff 	.word	0x08007aff
 8007800:	08007aff 	.word	0x08007aff
 8007804:	08007aff 	.word	0x08007aff
 8007808:	08007aff 	.word	0x08007aff
 800780c:	08007aff 	.word	0x08007aff
 8007810:	08007aff 	.word	0x08007aff
 8007814:	08007aff 	.word	0x08007aff
 8007818:	08007aff 	.word	0x08007aff
 800781c:	08007aff 	.word	0x08007aff
 8007820:	08007aff 	.word	0x08007aff
 8007824:	08007aff 	.word	0x08007aff
 8007828:	08007aff 	.word	0x08007aff
 800782c:	08007aff 	.word	0x08007aff
 8007830:	08007aff 	.word	0x08007aff
 8007834:	08007aff 	.word	0x08007aff
 8007838:	08007aff 	.word	0x08007aff
 800783c:	08007aff 	.word	0x08007aff
 8007840:	08007aff 	.word	0x08007aff
 8007844:	08007aff 	.word	0x08007aff
 8007848:	08007aff 	.word	0x08007aff
 800784c:	08007aff 	.word	0x08007aff
 8007850:	08007aff 	.word	0x08007aff
 8007854:	08007aff 	.word	0x08007aff
 8007858:	08007ac5 	.word	0x08007ac5
 800785c:	08007aff 	.word	0x08007aff
 8007860:	08007aff 	.word	0x08007aff
 8007864:	08007aff 	.word	0x08007aff
 8007868:	08007aff 	.word	0x08007aff
 800786c:	08007aff 	.word	0x08007aff
 8007870:	08007aff 	.word	0x08007aff
 8007874:	08007aff 	.word	0x08007aff
 8007878:	08007aff 	.word	0x08007aff
 800787c:	08007aff 	.word	0x08007aff
 8007880:	08007aa3 	.word	0x08007aa3
 8007884:	08007aff 	.word	0x08007aff
 8007888:	08007aff 	.word	0x08007aff
 800788c:	08007aff 	.word	0x08007aff
 8007890:	08007aff 	.word	0x08007aff
 8007894:	08007aff 	.word	0x08007aff
 8007898:	08007aff 	.word	0x08007aff
 800789c:	08007aff 	.word	0x08007aff
 80078a0:	08007aff 	.word	0x08007aff
 80078a4:	08007aff 	.word	0x08007aff
 80078a8:	08007a87 	.word	0x08007a87
 80078ac:	08007aff 	.word	0x08007aff
 80078b0:	08007aff 	.word	0x08007aff
 80078b4:	08007aff 	.word	0x08007aff
 80078b8:	08007aff 	.word	0x08007aff
 80078bc:	08007aff 	.word	0x08007aff
 80078c0:	08007aff 	.word	0x08007aff
 80078c4:	08007aff 	.word	0x08007aff
 80078c8:	08007aff 	.word	0x08007aff
 80078cc:	08007aff 	.word	0x08007aff
 80078d0:	08007a6d 	.word	0x08007a6d
 80078d4:	08007aff 	.word	0x08007aff
 80078d8:	08007aff 	.word	0x08007aff
 80078dc:	08007aff 	.word	0x08007aff
 80078e0:	08007aff 	.word	0x08007aff
 80078e4:	08007aff 	.word	0x08007aff
 80078e8:	08007aff 	.word	0x08007aff
 80078ec:	08007aff 	.word	0x08007aff
 80078f0:	080079b9 	.word	0x080079b9
 80078f4:	08007a4f 	.word	0x08007a4f
 80078f8:	08007a37 	.word	0x08007a37
 80078fc:	08007a1f 	.word	0x08007a1f
 8007900:	08007a01 	.word	0x08007a01
 8007904:	080079e7 	.word	0x080079e7
 8007908:	080079d5 	.word	0x080079d5
 800790c:	080079a1 	.word	0x080079a1
 8007910:	08007983 	.word	0x08007983
 8007914:	0800796f 	.word	0x0800796f
 8007918:	08007957 	.word	0x08007957
 800791c:	08007939 	.word	0x08007939
 8007920:	08007925 	.word	0x08007925
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	4980      	ldr	r1, [pc, #512]	@ (8007b28 <VL53L0X_get_pal_error_string+0x3b8>)
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	cb03      	ldmia	r3!, {r0, r1}
 800792e:	6010      	str	r0, [r2, #0]
 8007930:	6051      	str	r1, [r2, #4]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 8007936:	e0f0      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	4a7c      	ldr	r2, [pc, #496]	@ (8007b2c <VL53L0X_get_pal_error_string+0x3bc>)
 800793c:	461d      	mov	r5, r3
 800793e:	4614      	mov	r4, r2
 8007940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007942:	6028      	str	r0, [r5, #0]
 8007944:	6069      	str	r1, [r5, #4]
 8007946:	60aa      	str	r2, [r5, #8]
 8007948:	60eb      	str	r3, [r5, #12]
 800794a:	cc03      	ldmia	r4!, {r0, r1}
 800794c:	6128      	str	r0, [r5, #16]
 800794e:	6169      	str	r1, [r5, #20]
 8007950:	8823      	ldrh	r3, [r4, #0]
 8007952:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 8007954:	e0e1      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	4a75      	ldr	r2, [pc, #468]	@ (8007b30 <VL53L0X_get_pal_error_string+0x3c0>)
 800795a:	461d      	mov	r5, r3
 800795c:	4614      	mov	r4, r2
 800795e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007960:	6028      	str	r0, [r5, #0]
 8007962:	6069      	str	r1, [r5, #4]
 8007964:	60aa      	str	r2, [r5, #8]
 8007966:	60eb      	str	r3, [r5, #12]
 8007968:	8823      	ldrh	r3, [r4, #0]
 800796a:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800796c:	e0d5      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	4a70      	ldr	r2, [pc, #448]	@ (8007b34 <VL53L0X_get_pal_error_string+0x3c4>)
 8007972:	461c      	mov	r4, r3
 8007974:	4615      	mov	r5, r2
 8007976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007978:	6020      	str	r0, [r4, #0]
 800797a:	6061      	str	r1, [r4, #4]
 800797c:	60a2      	str	r2, [r4, #8]
 800797e:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 8007980:	e0cb      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	4a6c      	ldr	r2, [pc, #432]	@ (8007b38 <VL53L0X_get_pal_error_string+0x3c8>)
 8007986:	461d      	mov	r5, r3
 8007988:	4614      	mov	r4, r2
 800798a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800798c:	6028      	str	r0, [r5, #0]
 800798e:	6069      	str	r1, [r5, #4]
 8007990:	60aa      	str	r2, [r5, #8]
 8007992:	60eb      	str	r3, [r5, #12]
 8007994:	cc03      	ldmia	r4!, {r0, r1}
 8007996:	6128      	str	r0, [r5, #16]
 8007998:	6169      	str	r1, [r5, #20]
 800799a:	7823      	ldrb	r3, [r4, #0]
 800799c:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800799e:	e0bc      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	4a66      	ldr	r2, [pc, #408]	@ (8007b3c <VL53L0X_get_pal_error_string+0x3cc>)
 80079a4:	461d      	mov	r5, r3
 80079a6:	4614      	mov	r4, r2
 80079a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079aa:	6028      	str	r0, [r5, #0]
 80079ac:	6069      	str	r1, [r5, #4]
 80079ae:	60aa      	str	r2, [r5, #8]
 80079b0:	60eb      	str	r3, [r5, #12]
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 80079b6:	e0b0      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	4a61      	ldr	r2, [pc, #388]	@ (8007b40 <VL53L0X_get_pal_error_string+0x3d0>)
 80079bc:	461d      	mov	r5, r3
 80079be:	4614      	mov	r4, r2
 80079c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079c2:	6028      	str	r0, [r5, #0]
 80079c4:	6069      	str	r1, [r5, #4]
 80079c6:	60aa      	str	r2, [r5, #8]
 80079c8:	60eb      	str	r3, [r5, #12]
 80079ca:	6820      	ldr	r0, [r4, #0]
 80079cc:	6128      	str	r0, [r5, #16]
 80079ce:	88a3      	ldrh	r3, [r4, #4]
 80079d0:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 80079d2:	e0a2      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b44 <VL53L0X_get_pal_error_string+0x3d4>)
 80079d8:	461c      	mov	r4, r3
 80079da:	4613      	mov	r3, r2
 80079dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079de:	6020      	str	r0, [r4, #0]
 80079e0:	6061      	str	r1, [r4, #4]
 80079e2:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 80079e4:	e099      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	4a57      	ldr	r2, [pc, #348]	@ (8007b48 <VL53L0X_get_pal_error_string+0x3d8>)
 80079ea:	461c      	mov	r4, r3
 80079ec:	4613      	mov	r3, r2
 80079ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079f0:	6020      	str	r0, [r4, #0]
 80079f2:	6061      	str	r1, [r4, #4]
 80079f4:	60a2      	str	r2, [r4, #8]
 80079f6:	881a      	ldrh	r2, [r3, #0]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	81a2      	strh	r2, [r4, #12]
 80079fc:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 80079fe:	e08c      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	4a52      	ldr	r2, [pc, #328]	@ (8007b4c <VL53L0X_get_pal_error_string+0x3dc>)
 8007a04:	461d      	mov	r5, r3
 8007a06:	4614      	mov	r4, r2
 8007a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a0a:	6028      	str	r0, [r5, #0]
 8007a0c:	6069      	str	r1, [r5, #4]
 8007a0e:	60aa      	str	r2, [r5, #8]
 8007a10:	60eb      	str	r3, [r5, #12]
 8007a12:	cc03      	ldmia	r4!, {r0, r1}
 8007a14:	6128      	str	r0, [r5, #16]
 8007a16:	6169      	str	r1, [r5, #20]
 8007a18:	7823      	ldrb	r3, [r4, #0]
 8007a1a:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 8007a1c:	e07d      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	4a4b      	ldr	r2, [pc, #300]	@ (8007b50 <VL53L0X_get_pal_error_string+0x3e0>)
 8007a22:	461d      	mov	r5, r3
 8007a24:	4614      	mov	r4, r2
 8007a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a28:	6028      	str	r0, [r5, #0]
 8007a2a:	6069      	str	r1, [r5, #4]
 8007a2c:	60aa      	str	r2, [r5, #8]
 8007a2e:	60eb      	str	r3, [r5, #12]
 8007a30:	7823      	ldrb	r3, [r4, #0]
 8007a32:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 8007a34:	e071      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	4a46      	ldr	r2, [pc, #280]	@ (8007b54 <VL53L0X_get_pal_error_string+0x3e4>)
 8007a3a:	461d      	mov	r5, r3
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a40:	6028      	str	r0, [r5, #0]
 8007a42:	6069      	str	r1, [r5, #4]
 8007a44:	60aa      	str	r2, [r5, #8]
 8007a46:	60eb      	str	r3, [r5, #12]
 8007a48:	8823      	ldrh	r3, [r4, #0]
 8007a4a:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 8007a4c:	e065      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	4a41      	ldr	r2, [pc, #260]	@ (8007b58 <VL53L0X_get_pal_error_string+0x3e8>)
 8007a52:	461d      	mov	r5, r3
 8007a54:	4614      	mov	r4, r2
 8007a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a58:	6028      	str	r0, [r5, #0]
 8007a5a:	6069      	str	r1, [r5, #4]
 8007a5c:	60aa      	str	r2, [r5, #8]
 8007a5e:	60eb      	str	r3, [r5, #12]
 8007a60:	cc03      	ldmia	r4!, {r0, r1}
 8007a62:	6128      	str	r0, [r5, #16]
 8007a64:	6169      	str	r1, [r5, #20]
 8007a66:	7823      	ldrb	r3, [r4, #0]
 8007a68:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 8007a6a:	e056      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8007b5c <VL53L0X_get_pal_error_string+0x3ec>)
 8007a70:	461d      	mov	r5, r3
 8007a72:	4614      	mov	r4, r2
 8007a74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a76:	6028      	str	r0, [r5, #0]
 8007a78:	6069      	str	r1, [r5, #4]
 8007a7a:	60aa      	str	r2, [r5, #8]
 8007a7c:	60eb      	str	r3, [r5, #12]
 8007a7e:	cc03      	ldmia	r4!, {r0, r1}
 8007a80:	6128      	str	r0, [r5, #16]
 8007a82:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 8007a84:	e049      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	4a35      	ldr	r2, [pc, #212]	@ (8007b60 <VL53L0X_get_pal_error_string+0x3f0>)
 8007a8a:	461d      	mov	r5, r3
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a90:	6028      	str	r0, [r5, #0]
 8007a92:	6069      	str	r1, [r5, #4]
 8007a94:	60aa      	str	r2, [r5, #8]
 8007a96:	60eb      	str	r3, [r5, #12]
 8007a98:	6820      	ldr	r0, [r4, #0]
 8007a9a:	6128      	str	r0, [r5, #16]
 8007a9c:	88a3      	ldrh	r3, [r4, #4]
 8007a9e:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 8007aa0:	e03b      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8007b64 <VL53L0X_get_pal_error_string+0x3f4>)
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	4615      	mov	r5, r2
 8007aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007aac:	6020      	str	r0, [r4, #0]
 8007aae:	6061      	str	r1, [r4, #4]
 8007ab0:	60a2      	str	r2, [r4, #8]
 8007ab2:	60e3      	str	r3, [r4, #12]
 8007ab4:	6828      	ldr	r0, [r5, #0]
 8007ab6:	6120      	str	r0, [r4, #16]
 8007ab8:	88ab      	ldrh	r3, [r5, #4]
 8007aba:	79aa      	ldrb	r2, [r5, #6]
 8007abc:	82a3      	strh	r3, [r4, #20]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 8007ac2:	e02a      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	4a28      	ldr	r2, [pc, #160]	@ (8007b68 <VL53L0X_get_pal_error_string+0x3f8>)
 8007ac8:	461d      	mov	r5, r3
 8007aca:	4614      	mov	r4, r2
 8007acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ace:	6028      	str	r0, [r5, #0]
 8007ad0:	6069      	str	r1, [r5, #4]
 8007ad2:	60aa      	str	r2, [r5, #8]
 8007ad4:	60eb      	str	r3, [r5, #12]
 8007ad6:	cc03      	ldmia	r4!, {r0, r1}
 8007ad8:	6128      	str	r0, [r5, #16]
 8007ada:	6169      	str	r1, [r5, #20]
 8007adc:	8823      	ldrh	r3, [r4, #0]
 8007ade:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 8007ae0:	e01b      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	4a21      	ldr	r2, [pc, #132]	@ (8007b6c <VL53L0X_get_pal_error_string+0x3fc>)
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	4614      	mov	r4, r2
 8007aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aec:	6028      	str	r0, [r5, #0]
 8007aee:	6069      	str	r1, [r5, #4]
 8007af0:	60aa      	str	r2, [r5, #8]
 8007af2:	60eb      	str	r3, [r5, #12]
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	6128      	str	r0, [r5, #16]
 8007af8:	88a3      	ldrh	r3, [r4, #4]
 8007afa:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 8007afc:	e00d      	b.n	8007b1a <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <VL53L0X_get_pal_error_string+0x400>)
 8007b02:	461d      	mov	r5, r3
 8007b04:	4614      	mov	r4, r2
 8007b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b08:	6028      	str	r0, [r5, #0]
 8007b0a:	6069      	str	r1, [r5, #4]
 8007b0c:	60aa      	str	r2, [r5, #8]
 8007b0e:	60eb      	str	r3, [r5, #12]
 8007b10:	8823      	ldrh	r3, [r4, #0]
 8007b12:	78a2      	ldrb	r2, [r4, #2]
 8007b14:	822b      	strh	r3, [r5, #16]
 8007b16:	4613      	mov	r3, r2
 8007b18:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bcb0      	pop	{r4, r5, r7}
 8007b26:	4770      	bx	lr
 8007b28:	08010124 	.word	0x08010124
 8007b2c:	08010130 	.word	0x08010130
 8007b30:	0801014c 	.word	0x0801014c
 8007b34:	08010160 	.word	0x08010160
 8007b38:	08010170 	.word	0x08010170
 8007b3c:	0801018c 	.word	0x0801018c
 8007b40:	080101a0 	.word	0x080101a0
 8007b44:	080101b8 	.word	0x080101b8
 8007b48:	080101c4 	.word	0x080101c4
 8007b4c:	080101d4 	.word	0x080101d4
 8007b50:	080101f0 	.word	0x080101f0
 8007b54:	08010204 	.word	0x08010204
 8007b58:	08010218 	.word	0x08010218
 8007b5c:	08010234 	.word	0x08010234
 8007b60:	0801024c 	.word	0x0801024c
 8007b64:	08010264 	.word	0x08010264
 8007b68:	0801027c 	.word	0x0801027c
 8007b6c:	08010298 	.word	0x08010298
 8007b70:	080100c0 	.word	0x080100c0

08007b74 <cont_lidar_init>:
	  VL53L0X_SetRangeFractionEnable( Dev, 1);

}

void cont_lidar_init(uint8_t dir, uint32_t ts)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	6039      	str	r1, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]

	  Dev->I2cHandle = &hi2c1;// i2c port to be used
 8007b84:	4b4e      	ldr	r3, [pc, #312]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a4e      	ldr	r2, [pc, #312]	@ (8007cc4 <cont_lidar_init+0x150>)
 8007b8a:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
	  Dev->I2cDevAddr = dir;
 8007b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	79fa      	ldrb	r2, [r7, #7]
 8007b94:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
      Dev->comms_type=1;
 8007b98:	4b49      	ldr	r3, [pc, #292]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
      Dev->comms_speed_khz=100;//  i2c a 400khz prima era 400  variato a 100
 8007ba2:	4b47      	ldr	r3, [pc, #284]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2264      	movs	r2, #100	@ 0x64
 8007ba8:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186



      //Status = VL53L0X_WaitDeviceBooted( Dev );
      Status = VL53L0X_DataInit( Dev );
 8007bac:	4b44      	ldr	r3, [pc, #272]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fa ff29 	bl	8002a08 <VL53L0X_DataInit>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_StaticInit( Dev );
 8007bba:	4b41      	ldr	r3, [pc, #260]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fb f8a8 	bl	8002d14 <VL53L0X_StaticInit>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

      //Status = VL53L0X_ResetDevice(Dev);
      print_pal_error(Status);
 8007bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f8ad 	bl	8007d2c <print_pal_error>

      HAL_Delay(100);
 8007bd2:	2064      	movs	r0, #100	@ 0x64
 8007bd4:	f000 fb36 	bl	8008244 <HAL_Delay>

      Status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8007bd8:	4b39      	ldr	r3, [pc, #228]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc8 <cont_lidar_init+0x154>)
 8007bde:	493b      	ldr	r1, [pc, #236]	@ (8007ccc <cont_lidar_init+0x158>)
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fb ff83 	bl	8003aec <VL53L0X_PerformRefCalibration>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(12); // delay preso dal datasheet +20%
 8007bea:	200c      	movs	r0, #12
 8007bec:	f000 fb2a 	bl	8008244 <HAL_Delay>
      Status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8007bf0:	4b33      	ldr	r3, [pc, #204]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a36      	ldr	r2, [pc, #216]	@ (8007cd0 <cont_lidar_init+0x15c>)
 8007bf6:	4937      	ldr	r1, [pc, #220]	@ (8007cd4 <cont_lidar_init+0x160>)
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fc fc85 	bl	8004508 <VL53L0X_PerformRefSpadManagement>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(48);
 8007c02:	2030      	movs	r0, #48	@ 0x30
 8007c04:	f000 fb1e 	bl	8008244 <HAL_Delay>

      print_pal_error(Status);
 8007c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f88d 	bl	8007d2c <print_pal_error>

      // High speed  (review del 17-05 )
      Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));//0.18
 8007c12:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f641 1299 	movw	r2, #6553	@ 0x1999
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fb fe0f 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(35*65536));//35
 8007c26:	4b26      	ldr	r3, [pc, #152]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fb fe05 	bl	8003840 <VL53L0X_SetLimitCheckValue>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]


      Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8007c3a:	4b21      	ldr	r3, [pc, #132]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2103      	movs	r1, #3
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fb fa9f 	bl	8003184 <VL53L0X_SetDeviceMode>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, 200);//50
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	21c8      	movs	r1, #200	@ 0xc8
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fb fc95 	bl	8003580 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 20000 ); //   33000 200000
 8007c5a:	4b19      	ldr	r3, [pc, #100]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fb faec 	bl	8003240 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	73fb      	strb	r3, [r7, #15]

      print_pal_error(Status);
 8007c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 f85b 	bl	8007d2c <print_pal_error>

      Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8007c76:	4b12      	ldr	r3, [pc, #72]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2212      	movs	r2, #18
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fb fb04 	bl	800328c <VL53L0X_SetVcselPulsePeriod>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
      Status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8007c88:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	220e      	movs	r2, #14
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fb fafb 	bl	800328c <VL53L0X_SetVcselPulsePeriod>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]

      //Status =  VL53L0X_SetGpioConfig(Dev,LidarTrigger_Pin, VL53L0X_HISTOGRAMMODE_DISABLED,VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,VL53L0X_INTERRUPTPOLARITY_HIGH);
	 // VL53L0X_SetRangeFractionEnable( Dev, 1);


      Status= VL53L0X_StartMeasurement( Dev);
 8007c9a:	4b09      	ldr	r3, [pc, #36]	@ (8007cc0 <cont_lidar_init+0x14c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7fc f82c 	bl	8003cfc <VL53L0X_StartMeasurement>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]

      print_pal_error(Status);
 8007ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 f83d 	bl	8007d2c <print_pal_error>


      HAL_Delay(100);
 8007cb2:	2064      	movs	r0, #100	@ 0x64
 8007cb4:	f000 fac6 	bl	8008244 <HAL_Delay>
}
 8007cb8:	bf00      	nop
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	200002c0 	.word	0x200002c0
 8007cc4:	20000ca8 	.word	0x20000ca8
 8007cc8:	20001032 	.word	0x20001032
 8007ccc:	20001031 	.word	0x20001031
 8007cd0:	20001030 	.word	0x20001030
 8007cd4:	2000102c 	.word	0x2000102c

08007cd8 <getRangeData>:
	 HAL_Delay(100);

}


uint16_t getRangeData(){
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0

	uint16_t lidarmill=0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	80fb      	strh	r3, [r7, #6]


		Dev->I2cDevAddr = DIR_S;
 8007ce2:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <getRangeData+0x4c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2252      	movs	r2, #82	@ 0x52
 8007ce8:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8007cec:	4b0d      	ldr	r3, [pc, #52]	@ (8007d24 <getRangeData+0x4c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	490d      	ldr	r1, [pc, #52]	@ (8007d28 <getRangeData+0x50>)
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fc f904 	bl	8003f00 <VL53L0X_GetRangingMeasurementData>
	    lidarmill=RangingData.RangeMilliMeter;
 8007cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d28 <getRangeData+0x50>)
 8007cfa:	891b      	ldrh	r3, [r3, #8]
 8007cfc:	80fb      	strh	r3, [r7, #6]
	   if (lidarmill>lidar_max_mm) lidarmill=lidar_max_mm;
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8007d04:	d902      	bls.n	8007d0c <getRangeData+0x34>
 8007d06:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007d0a:	80fb      	strh	r3, [r7, #6]
	    VL53L0X_ClearInterruptMask(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 8007d0c:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <getRangeData+0x4c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2104      	movs	r1, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fc fb96 	bl	8004444 <VL53L0X_ClearInterruptMask>

	 	return(lidarmill);
 8007d18:	88fb      	ldrh	r3, [r7, #6]


}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200002c0 	.word	0x200002c0
 8007d28:	20000e88 	.word	0x20000e88

08007d2c <print_pal_error>:


void print_pal_error(VL53L0X_Error Status){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	@ 0x28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 8007d36:	f107 0208 	add.w	r2, r7, #8
 8007d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fa fe38 	bl	80029b6 <VL53L0X_GetPalErrorString>
    printf("API Status: %i : %s\n", Status, buf);
 8007d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d4a:	f107 0208 	add.w	r2, r7, #8
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4803      	ldr	r0, [pc, #12]	@ (8007d60 <print_pal_error+0x34>)
 8007d52:	f004 fcfb 	bl	800c74c <iprintf>
}
 8007d56:	bf00      	nop
 8007d58:	3728      	adds	r7, #40	@ 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	080103cc 	.word	0x080103cc

08007d64 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3332      	adds	r3, #50	@ 0x32
 8007d74:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007d82:	4619      	mov	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	f000 fe88 	bl	8008aa4 <HAL_I2C_Master_Transmit>
 8007d94:	4603      	mov	r3, r0
 8007d96:	613b      	str	r3, [r7, #16]

    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007d98:	693b      	ldr	r3, [r7, #16]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b088      	sub	sp, #32
 8007da6:	af02      	add	r7, sp, #8
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3332      	adds	r3, #50	@ 0x32
 8007db2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8d3 0180 	ldr.w	r0, [r3, #384]	@ 0x180
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	9300      	str	r3, [sp, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	f000 ff64 	bl	8008ca0 <HAL_I2C_Master_Receive>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007ddc:	693b      	ldr	r3, [r7, #16]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
	...

08007de8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	460b      	mov	r3, r1
 8007df6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2bff      	cmp	r3, #255	@ 0xff
 8007e00:	d902      	bls.n	8007e08 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007e02:	f06f 0303 	mvn.w	r3, #3
 8007e06:	e016      	b.n	8007e36 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007e08:	4a0d      	ldr	r2, [pc, #52]	@ (8007e40 <VL53L0X_WriteMulti+0x58>)
 8007e0a:	7afb      	ldrb	r3, [r7, #11]
 8007e0c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	480c      	ldr	r0, [pc, #48]	@ (8007e44 <VL53L0X_WriteMulti+0x5c>)
 8007e14:	f004 fd97 	bl	800c946 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4908      	ldr	r1, [pc, #32]	@ (8007e40 <VL53L0X_WriteMulti+0x58>)
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff ff9f 	bl	8007d64 <_I2CWrite>
 8007e26:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e2e:	23ec      	movs	r3, #236	@ 0xec
 8007e30:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20001034 	.word	0x20001034
 8007e44:	20001035 	.word	0x20001035

08007e48 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	460b      	mov	r3, r1
 8007e56:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007e5c:	f107 030b 	add.w	r3, r7, #11
 8007e60:	2201      	movs	r2, #1
 8007e62:	4619      	mov	r1, r3
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff ff7d 	bl	8007d64 <_I2CWrite>
 8007e6a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e72:	23ec      	movs	r3, #236	@ 0xec
 8007e74:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007e76:	e00c      	b.n	8007e92 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	68f8      	ldr	r0, [r7, #12]
 8007e7e:	f7ff ff90 	bl	8007da2 <_I2CRead>
 8007e82:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e8a:	23ec      	movs	r3, #236	@ 0xec
 8007e8c:	75fb      	strb	r3, [r7, #23]
 8007e8e:	e000      	b.n	8007e92 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007e90:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
 8007eac:	4613      	mov	r3, r2
 8007eae:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee4 <VL53L0X_WrByte+0x44>)
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8007eba:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee4 <VL53L0X_WrByte+0x44>)
 8007ebc:	78bb      	ldrb	r3, [r7, #2]
 8007ebe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	4908      	ldr	r1, [pc, #32]	@ (8007ee4 <VL53L0X_WrByte+0x44>)
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff4d 	bl	8007d64 <_I2CWrite>
 8007eca:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ed2:	23ec      	movs	r3, #236	@ 0xec
 8007ed4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20001034 	.word	0x20001034

08007ee8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007efc:	4a0e      	ldr	r2, [pc, #56]	@ (8007f38 <VL53L0X_WrWord+0x50>)
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007f02:	883b      	ldrh	r3, [r7, #0]
 8007f04:	0a1b      	lsrs	r3, r3, #8
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f38 <VL53L0X_WrWord+0x50>)
 8007f0c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007f0e:	883b      	ldrh	r3, [r7, #0]
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	4b09      	ldr	r3, [pc, #36]	@ (8007f38 <VL53L0X_WrWord+0x50>)
 8007f14:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007f16:	2203      	movs	r2, #3
 8007f18:	4907      	ldr	r1, [pc, #28]	@ (8007f38 <VL53L0X_WrWord+0x50>)
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ff22 	bl	8007d64 <_I2CWrite>
 8007f20:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f28:	23ec      	movs	r3, #236	@ 0xec
 8007f2a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20001034 	.word	0x20001034

08007f3c <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	460b      	mov	r3, r1
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8007f4e:	4a13      	ldr	r2, [pc, #76]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	0e1b      	lsrs	r3, r3, #24
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	4b10      	ldr	r3, [pc, #64]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f5c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	0c1b      	lsrs	r3, r3, #16
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	4b0d      	ldr	r3, [pc, #52]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f66:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f70:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	4b09      	ldr	r3, [pc, #36]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f78:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8007f7a:	2205      	movs	r2, #5
 8007f7c:	4907      	ldr	r1, [pc, #28]	@ (8007f9c <VL53L0X_WrDWord+0x60>)
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f7ff fef0 	bl	8007d64 <_I2CWrite>
 8007f84:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007f8c:	23ec      	movs	r3, #236	@ 0xec
 8007f8e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3718      	adds	r7, #24
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20001034 	.word	0x20001034

08007fa0 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	461a      	mov	r2, r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	70fb      	strb	r3, [r7, #3]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70bb      	strb	r3, [r7, #2]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007fbe:	f107 020e 	add.w	r2, r7, #14
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f81e 	bl	8008008 <VL53L0X_RdByte>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d110      	bne.n	8007ffa <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007fd8:	7bba      	ldrb	r2, [r7, #14]
 8007fda:	78bb      	ldrb	r3, [r7, #2]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	787b      	ldrb	r3, [r7, #1]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007fe8:	7bba      	ldrb	r2, [r7, #14]
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7ff ff56 	bl	8007ea0 <VL53L0X_WrByte>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	e000      	b.n	8007ffc <VL53L0X_UpdateByte+0x5c>
        goto done;
 8007ffa:	bf00      	nop
done:
    return Status;
 8007ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	460b      	mov	r3, r1
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800801a:	f107 030b 	add.w	r3, r7, #11
 800801e:	2201      	movs	r2, #1
 8008020:	4619      	mov	r1, r3
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7ff fe9e 	bl	8007d64 <_I2CWrite>
 8008028:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008030:	23ec      	movs	r3, #236	@ 0xec
 8008032:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008034:	e00c      	b.n	8008050 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008036:	2201      	movs	r2, #1
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f7ff feb1 	bl	8007da2 <_I2CRead>
 8008040:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008048:	23ec      	movs	r3, #236	@ 0xec
 800804a:	75fb      	strb	r3, [r7, #23]
 800804c:	e000      	b.n	8008050 <VL53L0X_RdByte+0x48>
    }
done:
 800804e:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	460b      	mov	r3, r1
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800806e:	f107 030b 	add.w	r3, r7, #11
 8008072:	2201      	movs	r2, #1
 8008074:	4619      	mov	r1, r3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fe74 	bl	8007d64 <_I2CWrite>
 800807c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008084:	23ec      	movs	r3, #236	@ 0xec
 8008086:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008088:	e015      	b.n	80080b6 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800808a:	2202      	movs	r2, #2
 800808c:	490d      	ldr	r1, [pc, #52]	@ (80080c4 <VL53L0X_RdWord+0x68>)
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff fe87 	bl	8007da2 <_I2CRead>
 8008094:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d002      	beq.n	80080a2 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800809c:	23ec      	movs	r3, #236	@ 0xec
 800809e:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080a0:	e009      	b.n	80080b6 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80080a2:	4b08      	ldr	r3, [pc, #32]	@ (80080c4 <VL53L0X_RdWord+0x68>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	4a06      	ldr	r2, [pc, #24]	@ (80080c4 <VL53L0X_RdWord+0x68>)
 80080ac:	7852      	ldrb	r2, [r2, #1]
 80080ae:	4413      	add	r3, r2
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80080b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20001034 	.word	0x20001034

080080c8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80080da:	f107 030b 	add.w	r3, r7, #11
 80080de:	2201      	movs	r2, #1
 80080e0:	4619      	mov	r1, r3
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fe3e 	bl	8007d64 <_I2CWrite>
 80080e8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80080f0:	23ec      	movs	r3, #236	@ 0xec
 80080f2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80080f4:	e01b      	b.n	800812e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80080f6:	2204      	movs	r2, #4
 80080f8:	4910      	ldr	r1, [pc, #64]	@ (800813c <VL53L0X_RdDWord+0x74>)
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fe51 	bl	8007da2 <_I2CRead>
 8008100:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008108:	23ec      	movs	r3, #236	@ 0xec
 800810a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800810c:	e00f      	b.n	800812e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800810e:	4b0b      	ldr	r3, [pc, #44]	@ (800813c <VL53L0X_RdDWord+0x74>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	061a      	lsls	r2, r3, #24
 8008114:	4b09      	ldr	r3, [pc, #36]	@ (800813c <VL53L0X_RdDWord+0x74>)
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	441a      	add	r2, r3
 800811c:	4b07      	ldr	r3, [pc, #28]	@ (800813c <VL53L0X_RdDWord+0x74>)
 800811e:	789b      	ldrb	r3, [r3, #2]
 8008120:	021b      	lsls	r3, r3, #8
 8008122:	4413      	add	r3, r2
 8008124:	4a05      	ldr	r2, [pc, #20]	@ (800813c <VL53L0X_RdDWord+0x74>)
 8008126:	78d2      	ldrb	r2, [r2, #3]
 8008128:	441a      	add	r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800812e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3718      	adds	r7, #24
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20001034 	.word	0x20001034

08008140 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800814c:	2002      	movs	r0, #2
 800814e:	f000 f879 	bl	8008244 <HAL_Delay>
    return status;
 8008152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008164:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <HAL_Init+0x40>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a0d      	ldr	r2, [pc, #52]	@ (80081a0 <HAL_Init+0x40>)
 800816a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800816e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008170:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <HAL_Init+0x40>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	@ (80081a0 <HAL_Init+0x40>)
 8008176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800817a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HAL_Init+0x40>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a07      	ldr	r2, [pc, #28]	@ (80081a0 <HAL_Init+0x40>)
 8008182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008188:	2003      	movs	r0, #3
 800818a:	f000 f94f 	bl	800842c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800818e:	2000      	movs	r0, #0
 8008190:	f000 f808 	bl	80081a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008194:	f7fa f918 	bl	80023c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00

080081a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <HAL_InitTick+0x54>)
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	4b12      	ldr	r3, [pc, #72]	@ (80081fc <HAL_InitTick+0x58>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f967 	bl	8008496 <HAL_SYSTICK_Config>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00e      	b.n	80081f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b0f      	cmp	r3, #15
 80081d6:	d80a      	bhi.n	80081ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081d8:	2200      	movs	r2, #0
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	f000 f92f 	bl	8008442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081e4:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <HAL_InitTick+0x5c>)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	20000000 	.word	0x20000000
 80081fc:	200002c8 	.word	0x200002c8
 8008200:	200002c4 	.word	0x200002c4

08008204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <HAL_IncTick+0x20>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	461a      	mov	r2, r3
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <HAL_IncTick+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4413      	add	r3, r2
 8008214:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <HAL_IncTick+0x24>)
 8008216:	6013      	str	r3, [r2, #0]
}
 8008218:	bf00      	nop
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200002c8 	.word	0x200002c8
 8008228:	20001134 	.word	0x20001134

0800822c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  return uwTick;
 8008230:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <HAL_GetTick+0x14>)
 8008232:	681b      	ldr	r3, [r3, #0]
}
 8008234:	4618      	mov	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	20001134 	.word	0x20001134

08008244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800824c:	f7ff ffee 	bl	800822c <HAL_GetTick>
 8008250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d005      	beq.n	800826a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800825e:	4b0a      	ldr	r3, [pc, #40]	@ (8008288 <HAL_Delay+0x44>)
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800826a:	bf00      	nop
 800826c:	f7ff ffde 	bl	800822c <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	429a      	cmp	r2, r3
 800827a:	d8f7      	bhi.n	800826c <HAL_Delay+0x28>
  {
  }
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200002c8 	.word	0x200002c8

0800828c <__NVIC_SetPriorityGrouping>:
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800829c:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <__NVIC_SetPriorityGrouping+0x44>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80082a8:	4013      	ands	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80082b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082be:	4a04      	ldr	r2, [pc, #16]	@ (80082d0 <__NVIC_SetPriorityGrouping+0x44>)
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	60d3      	str	r3, [r2, #12]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <__NVIC_GetPriorityGrouping>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082d8:	4b04      	ldr	r3, [pc, #16]	@ (80082ec <__NVIC_GetPriorityGrouping+0x18>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	0a1b      	lsrs	r3, r3, #8
 80082de:	f003 0307 	and.w	r3, r3, #7
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	e000ed00 	.word	0xe000ed00

080082f0 <__NVIC_EnableIRQ>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	db0b      	blt.n	800831a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008302:	79fb      	ldrb	r3, [r7, #7]
 8008304:	f003 021f 	and.w	r2, r3, #31
 8008308:	4907      	ldr	r1, [pc, #28]	@ (8008328 <__NVIC_EnableIRQ+0x38>)
 800830a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	2001      	movs	r0, #1
 8008312:	fa00 f202 	lsl.w	r2, r0, r2
 8008316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	e000e100 	.word	0xe000e100

0800832c <__NVIC_SetPriority>:
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800833c:	2b00      	cmp	r3, #0
 800833e:	db0a      	blt.n	8008356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	490c      	ldr	r1, [pc, #48]	@ (8008378 <__NVIC_SetPriority+0x4c>)
 8008346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834a:	0112      	lsls	r2, r2, #4
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	440b      	add	r3, r1
 8008350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008354:	e00a      	b.n	800836c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4908      	ldr	r1, [pc, #32]	@ (800837c <__NVIC_SetPriority+0x50>)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	3b04      	subs	r3, #4
 8008364:	0112      	lsls	r2, r2, #4
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	440b      	add	r3, r1
 800836a:	761a      	strb	r2, [r3, #24]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	e000e100 	.word	0xe000e100
 800837c:	e000ed00 	.word	0xe000ed00

08008380 <NVIC_EncodePriority>:
{
 8008380:	b480      	push	{r7}
 8008382:	b089      	sub	sp, #36	@ 0x24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f1c3 0307 	rsb	r3, r3, #7
 800839a:	2b04      	cmp	r3, #4
 800839c:	bf28      	it	cs
 800839e:	2304      	movcs	r3, #4
 80083a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	3304      	adds	r3, #4
 80083a6:	2b06      	cmp	r3, #6
 80083a8:	d902      	bls.n	80083b0 <NVIC_EncodePriority+0x30>
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	3b03      	subs	r3, #3
 80083ae:	e000      	b.n	80083b2 <NVIC_EncodePriority+0x32>
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	43da      	mvns	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	401a      	ands	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083c8:	f04f 31ff 	mov.w	r1, #4294967295
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	43d9      	mvns	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083d8:	4313      	orrs	r3, r2
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3724      	adds	r7, #36	@ 0x24
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <SysTick_Config>:
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80083f8:	d301      	bcc.n	80083fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80083fa:	2301      	movs	r3, #1
 80083fc:	e00f      	b.n	800841e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008428 <SysTick_Config+0x40>)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3b01      	subs	r3, #1
 8008404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008406:	210f      	movs	r1, #15
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	f7ff ff8e 	bl	800832c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008410:	4b05      	ldr	r3, [pc, #20]	@ (8008428 <SysTick_Config+0x40>)
 8008412:	2200      	movs	r2, #0
 8008414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008416:	4b04      	ldr	r3, [pc, #16]	@ (8008428 <SysTick_Config+0x40>)
 8008418:	2207      	movs	r2, #7
 800841a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	e000e010 	.word	0xe000e010

0800842c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff29 	bl	800828c <__NVIC_SetPriorityGrouping>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008442:	b580      	push	{r7, lr}
 8008444:	b086      	sub	sp, #24
 8008446:	af00      	add	r7, sp, #0
 8008448:	4603      	mov	r3, r0
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	607a      	str	r2, [r7, #4]
 800844e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008454:	f7ff ff3e 	bl	80082d4 <__NVIC_GetPriorityGrouping>
 8008458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f7ff ff8e 	bl	8008380 <NVIC_EncodePriority>
 8008464:	4602      	mov	r2, r0
 8008466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff ff5d 	bl	800832c <__NVIC_SetPriority>
}
 8008472:	bf00      	nop
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	4603      	mov	r3, r0
 8008482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff ff31 	bl	80082f0 <__NVIC_EnableIRQ>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ffa2 	bl	80083e8 <SysTick_Config>
 80084a4:	4603      	mov	r3, r0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b089      	sub	sp, #36	@ 0x24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
 80084ca:	e159      	b.n	8008780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084cc:	2201      	movs	r2, #1
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4013      	ands	r3, r2
 80084de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	f040 8148 	bne.w	800877a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d005      	beq.n	8008502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d130      	bne.n	8008564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	2203      	movs	r2, #3
 800850e:	fa02 f303 	lsl.w	r3, r2, r3
 8008512:	43db      	mvns	r3, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4013      	ands	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	4313      	orrs	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008538:	2201      	movs	r2, #1
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	fa02 f303 	lsl.w	r3, r2, r3
 8008540:	43db      	mvns	r3, r3
 8008542:	69ba      	ldr	r2, [r7, #24]
 8008544:	4013      	ands	r3, r2
 8008546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	f003 0201 	and.w	r2, r3, #1
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	4313      	orrs	r3, r2
 800855c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69ba      	ldr	r2, [r7, #24]
 8008562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f003 0303 	and.w	r3, r3, #3
 800856c:	2b03      	cmp	r3, #3
 800856e:	d017      	beq.n	80085a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	2203      	movs	r2, #3
 800857c:	fa02 f303 	lsl.w	r3, r2, r3
 8008580:	43db      	mvns	r3, r3
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	4013      	ands	r3, r2
 8008586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	689a      	ldr	r2, [r3, #8]
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	fa02 f303 	lsl.w	r3, r2, r3
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	4313      	orrs	r3, r2
 8008598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	69ba      	ldr	r2, [r7, #24]
 800859e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f003 0303 	and.w	r3, r3, #3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d123      	bne.n	80085f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	08da      	lsrs	r2, r3, #3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	3208      	adds	r2, #8
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	220f      	movs	r2, #15
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	43db      	mvns	r3, r3
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	4013      	ands	r3, r2
 80085ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	08da      	lsrs	r2, r3, #3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3208      	adds	r2, #8
 80085ee:	69b9      	ldr	r1, [r7, #24]
 80085f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	2203      	movs	r2, #3
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	43db      	mvns	r3, r3
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	4013      	ands	r3, r2
 800860a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	f003 0203 	and.w	r2, r3, #3
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	4313      	orrs	r3, r2
 8008620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80a2 	beq.w	800877a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	4b57      	ldr	r3, [pc, #348]	@ (8008798 <HAL_GPIO_Init+0x2e8>)
 800863c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863e:	4a56      	ldr	r2, [pc, #344]	@ (8008798 <HAL_GPIO_Init+0x2e8>)
 8008640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008644:	6453      	str	r3, [r2, #68]	@ 0x44
 8008646:	4b54      	ldr	r3, [pc, #336]	@ (8008798 <HAL_GPIO_Init+0x2e8>)
 8008648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800864a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008652:	4a52      	ldr	r2, [pc, #328]	@ (800879c <HAL_GPIO_Init+0x2ec>)
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	089b      	lsrs	r3, r3, #2
 8008658:	3302      	adds	r3, #2
 800865a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	220f      	movs	r2, #15
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	43db      	mvns	r3, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4013      	ands	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a49      	ldr	r2, [pc, #292]	@ (80087a0 <HAL_GPIO_Init+0x2f0>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d019      	beq.n	80086b2 <HAL_GPIO_Init+0x202>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a48      	ldr	r2, [pc, #288]	@ (80087a4 <HAL_GPIO_Init+0x2f4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d013      	beq.n	80086ae <HAL_GPIO_Init+0x1fe>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a47      	ldr	r2, [pc, #284]	@ (80087a8 <HAL_GPIO_Init+0x2f8>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00d      	beq.n	80086aa <HAL_GPIO_Init+0x1fa>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a46      	ldr	r2, [pc, #280]	@ (80087ac <HAL_GPIO_Init+0x2fc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d007      	beq.n	80086a6 <HAL_GPIO_Init+0x1f6>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a45      	ldr	r2, [pc, #276]	@ (80087b0 <HAL_GPIO_Init+0x300>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <HAL_GPIO_Init+0x1f2>
 800869e:	2304      	movs	r3, #4
 80086a0:	e008      	b.n	80086b4 <HAL_GPIO_Init+0x204>
 80086a2:	2307      	movs	r3, #7
 80086a4:	e006      	b.n	80086b4 <HAL_GPIO_Init+0x204>
 80086a6:	2303      	movs	r3, #3
 80086a8:	e004      	b.n	80086b4 <HAL_GPIO_Init+0x204>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e002      	b.n	80086b4 <HAL_GPIO_Init+0x204>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <HAL_GPIO_Init+0x204>
 80086b2:	2300      	movs	r3, #0
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	f002 0203 	and.w	r2, r2, #3
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	4093      	lsls	r3, r2
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086c4:	4935      	ldr	r1, [pc, #212]	@ (800879c <HAL_GPIO_Init+0x2ec>)
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	089b      	lsrs	r3, r3, #2
 80086ca:	3302      	adds	r3, #2
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086d2:	4b38      	ldr	r3, [pc, #224]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	43db      	mvns	r3, r3
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	4013      	ands	r3, r2
 80086e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086f6:	4a2f      	ldr	r2, [pc, #188]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086fc:	4b2d      	ldr	r3, [pc, #180]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	43db      	mvns	r3, r3
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4013      	ands	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d003      	beq.n	8008720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008720:	4a24      	ldr	r2, [pc, #144]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008726:	4b23      	ldr	r3, [pc, #140]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	43db      	mvns	r3, r3
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	4013      	ands	r3, r2
 8008734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4313      	orrs	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800874a:	4a1a      	ldr	r2, [pc, #104]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008750:	4b18      	ldr	r3, [pc, #96]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	43db      	mvns	r3, r3
 800875a:	69ba      	ldr	r2, [r7, #24]
 800875c:	4013      	ands	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008774:	4a0f      	ldr	r2, [pc, #60]	@ (80087b4 <HAL_GPIO_Init+0x304>)
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	3301      	adds	r3, #1
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b0f      	cmp	r3, #15
 8008784:	f67f aea2 	bls.w	80084cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	3724      	adds	r7, #36	@ 0x24
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40023800 	.word	0x40023800
 800879c:	40013800 	.word	0x40013800
 80087a0:	40020000 	.word	0x40020000
 80087a4:	40020400 	.word	0x40020400
 80087a8:	40020800 	.word	0x40020800
 80087ac:	40020c00 	.word	0x40020c00
 80087b0:	40021000 	.word	0x40021000
 80087b4:	40013c00 	.word	0x40013c00

080087b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	807b      	strh	r3, [r7, #2]
 80087c4:	4613      	mov	r3, r2
 80087c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087c8:	787b      	ldrb	r3, [r7, #1]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087ce:	887a      	ldrh	r2, [r7, #2]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80087d4:	e003      	b.n	80087de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087d6:	887b      	ldrh	r3, [r7, #2]
 80087d8:	041a      	lsls	r2, r3, #16
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	619a      	str	r2, [r3, #24]
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80087f6:	4b08      	ldr	r3, [pc, #32]	@ (8008818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80087f8:	695a      	ldr	r2, [r3, #20]
 80087fa:	88fb      	ldrh	r3, [r7, #6]
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d006      	beq.n	8008810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008802:	4a05      	ldr	r2, [pc, #20]	@ (8008818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008804:	88fb      	ldrh	r3, [r7, #6]
 8008806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	4618      	mov	r0, r3
 800880c:	f7f8 fbf2 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	40013c00 	.word	0x40013c00

0800881c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e12b      	b.n	8008a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7f9 fde8 	bl	8002418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2224      	movs	r2, #36	@ 0x24
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0201 	bic.w	r2, r2, #1
 800885e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800886e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800887e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008880:	f001 fc36 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 8008884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	4a81      	ldr	r2, [pc, #516]	@ (8008a90 <HAL_I2C_Init+0x274>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d807      	bhi.n	80088a0 <HAL_I2C_Init+0x84>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a80      	ldr	r2, [pc, #512]	@ (8008a94 <HAL_I2C_Init+0x278>)
 8008894:	4293      	cmp	r3, r2
 8008896:	bf94      	ite	ls
 8008898:	2301      	movls	r3, #1
 800889a:	2300      	movhi	r3, #0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	e006      	b.n	80088ae <HAL_I2C_Init+0x92>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a7d      	ldr	r2, [pc, #500]	@ (8008a98 <HAL_I2C_Init+0x27c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	bf94      	ite	ls
 80088a8:	2301      	movls	r3, #1
 80088aa:	2300      	movhi	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e0e7      	b.n	8008a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a78      	ldr	r2, [pc, #480]	@ (8008a9c <HAL_I2C_Init+0x280>)
 80088ba:	fba2 2303 	umull	r2, r3, r2, r3
 80088be:	0c9b      	lsrs	r3, r3, #18
 80088c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	4a6a      	ldr	r2, [pc, #424]	@ (8008a90 <HAL_I2C_Init+0x274>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d802      	bhi.n	80088f0 <HAL_I2C_Init+0xd4>
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	3301      	adds	r3, #1
 80088ee:	e009      	b.n	8008904 <HAL_I2C_Init+0xe8>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	4a69      	ldr	r2, [pc, #420]	@ (8008aa0 <HAL_I2C_Init+0x284>)
 80088fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008900:	099b      	lsrs	r3, r3, #6
 8008902:	3301      	adds	r3, #1
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	430b      	orrs	r3, r1
 800890a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008916:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	495c      	ldr	r1, [pc, #368]	@ (8008a90 <HAL_I2C_Init+0x274>)
 8008920:	428b      	cmp	r3, r1
 8008922:	d819      	bhi.n	8008958 <HAL_I2C_Init+0x13c>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	1e59      	subs	r1, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008932:	1c59      	adds	r1, r3, #1
 8008934:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008938:	400b      	ands	r3, r1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <HAL_I2C_Init+0x138>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1e59      	subs	r1, r3, #1
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	fbb1 f3f3 	udiv	r3, r1, r3
 800894c:	3301      	adds	r3, #1
 800894e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008952:	e051      	b.n	80089f8 <HAL_I2C_Init+0x1dc>
 8008954:	2304      	movs	r3, #4
 8008956:	e04f      	b.n	80089f8 <HAL_I2C_Init+0x1dc>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d111      	bne.n	8008984 <HAL_I2C_Init+0x168>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1e58      	subs	r0, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6859      	ldr	r1, [r3, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	440b      	add	r3, r1
 800896e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008972:	3301      	adds	r3, #1
 8008974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008978:	2b00      	cmp	r3, #0
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	e012      	b.n	80089aa <HAL_I2C_Init+0x18e>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	1e58      	subs	r0, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6859      	ldr	r1, [r3, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	0099      	lsls	r1, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	fbb0 f3f3 	udiv	r3, r0, r3
 800899a:	3301      	adds	r3, #1
 800899c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2301      	moveq	r3, #1
 80089a6:	2300      	movne	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <HAL_I2C_Init+0x196>
 80089ae:	2301      	movs	r3, #1
 80089b0:	e022      	b.n	80089f8 <HAL_I2C_Init+0x1dc>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10e      	bne.n	80089d8 <HAL_I2C_Init+0x1bc>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1e58      	subs	r0, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6859      	ldr	r1, [r3, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	440b      	add	r3, r1
 80089c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80089cc:	3301      	adds	r3, #1
 80089ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089d6:	e00f      	b.n	80089f8 <HAL_I2C_Init+0x1dc>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	1e58      	subs	r0, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6859      	ldr	r1, [r3, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	440b      	add	r3, r1
 80089e6:	0099      	lsls	r1, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	6809      	ldr	r1, [r1, #0]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	69da      	ldr	r2, [r3, #28]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008a26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6911      	ldr	r1, [r2, #16]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	68d2      	ldr	r2, [r2, #12]
 8008a32:	4311      	orrs	r1, r2
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6812      	ldr	r2, [r2, #0]
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	431a      	orrs	r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f042 0201 	orr.w	r2, r2, #1
 8008a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	000186a0 	.word	0x000186a0
 8008a94:	001e847f 	.word	0x001e847f
 8008a98:	003d08ff 	.word	0x003d08ff
 8008a9c:	431bde83 	.word	0x431bde83
 8008aa0:	10624dd3 	.word	0x10624dd3

08008aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	817b      	strh	r3, [r7, #10]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ab8:	f7ff fbb8 	bl	800822c <HAL_GetTick>
 8008abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	f040 80e0 	bne.w	8008c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	2319      	movs	r3, #25
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4970      	ldr	r1, [pc, #448]	@ (8008c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fc64 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e0d3      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_I2C_Master_Transmit+0x50>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e0cc      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d007      	beq.n	8008b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f042 0201 	orr.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2221      	movs	r2, #33	@ 0x21
 8008b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2210      	movs	r2, #16
 8008b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	893a      	ldrh	r2, [r7, #8]
 8008b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4a50      	ldr	r2, [pc, #320]	@ (8008c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8008b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b5c:	8979      	ldrh	r1, [r7, #10]
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6a3a      	ldr	r2, [r7, #32]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 face 	bl	8009104 <I2C_MasterRequestWrite>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e08d      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b72:	2300      	movs	r3, #0
 8008b74:	613b      	str	r3, [r7, #16]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	695b      	ldr	r3, [r3, #20]
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008b88:	e066      	b.n	8008c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	6a39      	ldr	r1, [r7, #32]
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fd22 	bl	80095d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00d      	beq.n	8008bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d107      	bne.n	8008bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e06b      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	f003 0304 	and.w	r3, r3, #4
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	d11b      	bne.n	8008c2c <HAL_I2C_Master_Transmit+0x188>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d017      	beq.n	8008c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c24:	3b01      	subs	r3, #1
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	6a39      	ldr	r1, [r7, #32]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fd19 	bl	8009668 <I2C_WaitOnBTFFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00d      	beq.n	8008c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c40:	2b04      	cmp	r3, #4
 8008c42:	d107      	bne.n	8008c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e01a      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d194      	bne.n	8008b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	e000      	b.n	8008c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008c8c:	2302      	movs	r3, #2
  }
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	00100002 	.word	0x00100002
 8008c9c:	ffff0000 	.word	0xffff0000

08008ca0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b08c      	sub	sp, #48	@ 0x30
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	607a      	str	r2, [r7, #4]
 8008caa:	461a      	mov	r2, r3
 8008cac:	460b      	mov	r3, r1
 8008cae:	817b      	strh	r3, [r7, #10]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008cb4:	f7ff faba 	bl	800822c <HAL_GetTick>
 8008cb8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	f040 8217 	bne.w	80090f6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	2319      	movs	r3, #25
 8008cce:	2201      	movs	r2, #1
 8008cd0:	497c      	ldr	r1, [pc, #496]	@ (8008ec4 <HAL_I2C_Master_Receive+0x224>)
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 fb66 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e20a      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_I2C_Master_Receive+0x50>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e203      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d007      	beq.n	8008d16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2222      	movs	r2, #34	@ 0x22
 8008d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2210      	movs	r2, #16
 8008d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	893a      	ldrh	r2, [r7, #8]
 8008d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4a5c      	ldr	r2, [pc, #368]	@ (8008ec8 <HAL_I2C_Master_Receive+0x228>)
 8008d56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d58:	8979      	ldrh	r1, [r7, #10]
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f000 fa52 	bl	8009208 <I2C_MasterRequestRead>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e1c4      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d113      	bne.n	8008d9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d76:	2300      	movs	r3, #0
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	695b      	ldr	r3, [r3, #20]
 8008d80:	623b      	str	r3, [r7, #32]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	623b      	str	r3, [r7, #32]
 8008d8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	e198      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d11b      	bne.n	8008dde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008db4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008db6:	2300      	movs	r3, #0
 8008db8:	61fb      	str	r3, [r7, #28]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	61fb      	str	r3, [r7, #28]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	e178      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d11b      	bne.n	8008e1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008df4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e06:	2300      	movs	r3, #0
 8008e08:	61bb      	str	r3, [r7, #24]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	61bb      	str	r3, [r7, #24]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	61bb      	str	r3, [r7, #24]
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	e158      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e2e:	2300      	movs	r3, #0
 8008e30:	617b      	str	r3, [r7, #20]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e44:	e144      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	f200 80f1 	bhi.w	8009032 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d123      	bne.n	8008ea0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fc4b 	bl	80096f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e145      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008e9e:	e117      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d14e      	bne.n	8008f46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4906      	ldr	r1, [pc, #24]	@ (8008ecc <HAL_I2C_Master_Receive+0x22c>)
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f000 fa76 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e11a      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
 8008ec2:	bf00      	nop
 8008ec4:	00100002 	.word	0x00100002
 8008ec8:	ffff0000 	.word	0xffff0000
 8008ecc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	b29a      	uxth	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f44:	e0c4      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	496c      	ldr	r1, [pc, #432]	@ (8009100 <HAL_I2C_Master_Receive+0x460>)
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fa27 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0cb      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	2200      	movs	r2, #0
 8008faa:	4955      	ldr	r1, [pc, #340]	@ (8009100 <HAL_I2C_Master_Receive+0x460>)
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f9f9 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e09d      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691a      	ldr	r2, [r3, #16]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009030:	e04e      	b.n	80090d0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009034:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 fb5e 	bl	80096f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e058      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009050:	b2d2      	uxtb	r2, r2
 8009052:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	f003 0304 	and.w	r3, r3, #4
 8009082:	2b04      	cmp	r3, #4
 8009084:	d124      	bne.n	80090d0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800908a:	2b03      	cmp	r3, #3
 800908c:	d107      	bne.n	800909e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800909c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	b2d2      	uxtb	r2, r2
 80090aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f aeb6 	bne.w	8008e46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	e000      	b.n	80090f8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80090f6:	2302      	movs	r3, #2
  }
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3728      	adds	r7, #40	@ 0x28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	00010004 	.word	0x00010004

08009104 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af02      	add	r7, sp, #8
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	460b      	mov	r3, r1
 8009112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009118:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d006      	beq.n	800912e <I2C_MasterRequestWrite+0x2a>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d003      	beq.n	800912e <I2C_MasterRequestWrite+0x2a>
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800912c:	d108      	bne.n	8009140 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e00b      	b.n	8009158 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009144:	2b12      	cmp	r3, #18
 8009146:	d107      	bne.n	8009158 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009156:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f91d 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00d      	beq.n	800918c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800917a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800917e:	d103      	bne.n	8009188 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009186:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e035      	b.n	80091f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009194:	d108      	bne.n	80091a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009196:	897b      	ldrh	r3, [r7, #10]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80091a4:	611a      	str	r2, [r3, #16]
 80091a6:	e01b      	b.n	80091e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80091a8:	897b      	ldrh	r3, [r7, #10]
 80091aa:	11db      	asrs	r3, r3, #7
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0306 	and.w	r3, r3, #6
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f063 030f 	orn	r3, r3, #15
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	490e      	ldr	r1, [pc, #56]	@ (8009200 <I2C_MasterRequestWrite+0xfc>)
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f966 	bl	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e010      	b.n	80091f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80091d6:	897b      	ldrh	r3, [r7, #10]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4907      	ldr	r1, [pc, #28]	@ (8009204 <I2C_MasterRequestWrite+0x100>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f956 	bl	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3718      	adds	r7, #24
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	00010008 	.word	0x00010008
 8009204:	00010002 	.word	0x00010002

08009208 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af02      	add	r7, sp, #8
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	607a      	str	r2, [r7, #4]
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	460b      	mov	r3, r1
 8009216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800921c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800922c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b08      	cmp	r3, #8
 8009232:	d006      	beq.n	8009242 <I2C_MasterRequestRead+0x3a>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d003      	beq.n	8009242 <I2C_MasterRequestRead+0x3a>
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009240:	d108      	bne.n	8009254 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	e00b      	b.n	800926c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009258:	2b11      	cmp	r3, #17
 800925a:	d107      	bne.n	800926c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800926a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f893 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00d      	beq.n	80092a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800928e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009292:	d103      	bne.n	800929c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800929a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e079      	b.n	8009394 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092a8:	d108      	bne.n	80092bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092aa:	897b      	ldrh	r3, [r7, #10]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	611a      	str	r2, [r3, #16]
 80092ba:	e05f      	b.n	800937c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80092bc:	897b      	ldrh	r3, [r7, #10]
 80092be:	11db      	asrs	r3, r3, #7
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0306 	and.w	r3, r3, #6
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f063 030f 	orn	r3, r3, #15
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4930      	ldr	r1, [pc, #192]	@ (800939c <I2C_MasterRequestRead+0x194>)
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f8dc 	bl	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e054      	b.n	8009394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80092ea:	897b      	ldrh	r3, [r7, #10]
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	4929      	ldr	r1, [pc, #164]	@ (80093a0 <I2C_MasterRequestRead+0x198>)
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f8cc 	bl	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d001      	beq.n	800930a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e044      	b.n	8009394 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800930a:	2300      	movs	r3, #0
 800930c:	613b      	str	r3, [r7, #16]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	613b      	str	r3, [r7, #16]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800932e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	9300      	str	r3, [sp, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f831 	bl	80093a4 <I2C_WaitOnFlagUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00d      	beq.n	8009364 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009356:	d103      	bne.n	8009360 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800935e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e017      	b.n	8009394 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009364:	897b      	ldrh	r3, [r7, #10]
 8009366:	11db      	asrs	r3, r3, #7
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0306 	and.w	r3, r3, #6
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f063 030e 	orn	r3, r3, #14
 8009374:	b2da      	uxtb	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	4907      	ldr	r1, [pc, #28]	@ (80093a0 <I2C_MasterRequestRead+0x198>)
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 f888 	bl	8009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	00010008 	.word	0x00010008
 80093a0:	00010002 	.word	0x00010002

080093a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	4613      	mov	r3, r2
 80093b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093b4:	e048      	b.n	8009448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d044      	beq.n	8009448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093be:	f7fe ff35 	bl	800822c <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	683a      	ldr	r2, [r7, #0]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d302      	bcc.n	80093d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d139      	bne.n	8009448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d10d      	bne.n	80093fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	43da      	mvns	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	4013      	ands	r3, r2
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf0c      	ite	eq
 80093f0:	2301      	moveq	r3, #1
 80093f2:	2300      	movne	r3, #0
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	e00c      	b.n	8009414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	43da      	mvns	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4013      	ands	r3, r2
 8009406:	b29b      	uxth	r3, r3
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf0c      	ite	eq
 800940c:	2301      	moveq	r3, #1
 800940e:	2300      	movne	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	461a      	mov	r2, r3
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	429a      	cmp	r2, r3
 8009418:	d116      	bne.n	8009448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009434:	f043 0220 	orr.w	r2, r3, #32
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e023      	b.n	8009490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b01      	cmp	r3, #1
 8009450:	d10d      	bne.n	800946e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	43da      	mvns	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	4013      	ands	r3, r2
 800945e:	b29b      	uxth	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	bf0c      	ite	eq
 8009464:	2301      	moveq	r3, #1
 8009466:	2300      	movne	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	e00c      	b.n	8009488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	43da      	mvns	r2, r3
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4013      	ands	r3, r2
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	bf0c      	ite	eq
 8009480:	2301      	moveq	r3, #1
 8009482:	2300      	movne	r3, #0
 8009484:	b2db      	uxtb	r3, r3
 8009486:	461a      	mov	r2, r3
 8009488:	79fb      	ldrb	r3, [r7, #7]
 800948a:	429a      	cmp	r2, r3
 800948c:	d093      	beq.n	80093b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094a6:	e071      	b.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094b6:	d123      	bne.n	8009500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80094d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094ec:	f043 0204 	orr.w	r2, r3, #4
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e067      	b.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d041      	beq.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009508:	f7fe fe90 	bl	800822c <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d302      	bcc.n	800951e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d136      	bne.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b01      	cmp	r3, #1
 8009526:	d10c      	bne.n	8009542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	43da      	mvns	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	4013      	ands	r3, r2
 8009534:	b29b      	uxth	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	bf14      	ite	ne
 800953a:	2301      	movne	r3, #1
 800953c:	2300      	moveq	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	e00b      	b.n	800955a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	699b      	ldr	r3, [r3, #24]
 8009548:	43da      	mvns	r2, r3
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	4013      	ands	r3, r2
 800954e:	b29b      	uxth	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	bf14      	ite	ne
 8009554:	2301      	movne	r3, #1
 8009556:	2300      	moveq	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d016      	beq.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e021      	b.n	80095d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b01      	cmp	r3, #1
 8009594:	d10c      	bne.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	43da      	mvns	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf14      	ite	ne
 80095a8:	2301      	movne	r3, #1
 80095aa:	2300      	moveq	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	e00b      	b.n	80095c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	43da      	mvns	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4013      	ands	r3, r2
 80095bc:	b29b      	uxth	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bf14      	ite	ne
 80095c2:	2301      	movne	r3, #1
 80095c4:	2300      	moveq	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f af6d 	bne.w	80094a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095e4:	e034      	b.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f8e3 	bl	80097b2 <I2C_IsAcknowledgeFailed>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e034      	b.n	8009660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fc:	d028      	beq.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fe:	f7fe fe15 	bl	800822c <HAL_GetTick>
 8009602:	4602      	mov	r2, r0
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	1ad3      	subs	r3, r2, r3
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	429a      	cmp	r2, r3
 800960c:	d302      	bcc.n	8009614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d11d      	bne.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800961e:	2b80      	cmp	r3, #128	@ 0x80
 8009620:	d016      	beq.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2220      	movs	r2, #32
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	f043 0220 	orr.w	r2, r3, #32
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e007      	b.n	8009660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800965a:	2b80      	cmp	r3, #128	@ 0x80
 800965c:	d1c3      	bne.n	80095e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009674:	e034      	b.n	80096e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f89b 	bl	80097b2 <I2C_IsAcknowledgeFailed>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e034      	b.n	80096f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968c:	d028      	beq.n	80096e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968e:	f7fe fdcd 	bl	800822c <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	429a      	cmp	r2, r3
 800969c:	d302      	bcc.n	80096a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11d      	bne.n	80096e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	f003 0304 	and.w	r3, r3, #4
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d016      	beq.n	80096e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096cc:	f043 0220 	orr.w	r2, r3, #32
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e007      	b.n	80096f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d1c3      	bne.n	8009676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009704:	e049      	b.n	800979a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b10      	cmp	r3, #16
 8009712:	d119      	bne.n	8009748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f06f 0210 	mvn.w	r2, #16
 800971c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	e030      	b.n	80097aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009748:	f7fe fd70 	bl	800822c <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	429a      	cmp	r2, r3
 8009756:	d302      	bcc.n	800975e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d11d      	bne.n	800979a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009768:	2b40      	cmp	r3, #64	@ 0x40
 800976a:	d016      	beq.n	800979a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009786:	f043 0220 	orr.w	r2, r3, #32
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e007      	b.n	80097aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a4:	2b40      	cmp	r3, #64	@ 0x40
 80097a6:	d1ae      	bne.n	8009706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097c8:	d11b      	bne.n	8009802 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80097d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ee:	f043 0204 	orr.w	r2, r3, #4
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e000      	b.n	8009804 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e267      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d075      	beq.n	800991a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800982e:	4b88      	ldr	r3, [pc, #544]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	f003 030c 	and.w	r3, r3, #12
 8009836:	2b04      	cmp	r3, #4
 8009838:	d00c      	beq.n	8009854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800983a:	4b85      	ldr	r3, [pc, #532]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009842:	2b08      	cmp	r3, #8
 8009844:	d112      	bne.n	800986c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009846:	4b82      	ldr	r3, [pc, #520]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800984e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009852:	d10b      	bne.n	800986c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009854:	4b7e      	ldr	r3, [pc, #504]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d05b      	beq.n	8009918 <HAL_RCC_OscConfig+0x108>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d157      	bne.n	8009918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e242      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009874:	d106      	bne.n	8009884 <HAL_RCC_OscConfig+0x74>
 8009876:	4b76      	ldr	r3, [pc, #472]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a75      	ldr	r2, [pc, #468]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 800987c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	e01d      	b.n	80098c0 <HAL_RCC_OscConfig+0xb0>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800988c:	d10c      	bne.n	80098a8 <HAL_RCC_OscConfig+0x98>
 800988e:	4b70      	ldr	r3, [pc, #448]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a6f      	ldr	r2, [pc, #444]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	4b6d      	ldr	r3, [pc, #436]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a6c      	ldr	r2, [pc, #432]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098a4:	6013      	str	r3, [r2, #0]
 80098a6:	e00b      	b.n	80098c0 <HAL_RCC_OscConfig+0xb0>
 80098a8:	4b69      	ldr	r3, [pc, #420]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a68      	ldr	r2, [pc, #416]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	4b66      	ldr	r3, [pc, #408]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a65      	ldr	r2, [pc, #404]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80098be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d013      	beq.n	80098f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098c8:	f7fe fcb0 	bl	800822c <HAL_GetTick>
 80098cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098d0:	f7fe fcac 	bl	800822c <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b64      	cmp	r3, #100	@ 0x64
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e207      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0f0      	beq.n	80098d0 <HAL_RCC_OscConfig+0xc0>
 80098ee:	e014      	b.n	800991a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098f0:	f7fe fc9c 	bl	800822c <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098f8:	f7fe fc98 	bl	800822c <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b64      	cmp	r3, #100	@ 0x64
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e1f3      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990a:	4b51      	ldr	r3, [pc, #324]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f0      	bne.n	80098f8 <HAL_RCC_OscConfig+0xe8>
 8009916:	e000      	b.n	800991a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d063      	beq.n	80099ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009926:	4b4a      	ldr	r3, [pc, #296]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009932:	4b47      	ldr	r3, [pc, #284]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800993a:	2b08      	cmp	r3, #8
 800993c:	d11c      	bne.n	8009978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800993e:	4b44      	ldr	r3, [pc, #272]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d116      	bne.n	8009978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800994a:	4b41      	ldr	r3, [pc, #260]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0302 	and.w	r3, r3, #2
 8009952:	2b00      	cmp	r3, #0
 8009954:	d005      	beq.n	8009962 <HAL_RCC_OscConfig+0x152>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d001      	beq.n	8009962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e1c7      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009962:	4b3b      	ldr	r3, [pc, #236]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	4937      	ldr	r1, [pc, #220]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009972:	4313      	orrs	r3, r2
 8009974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009976:	e03a      	b.n	80099ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d020      	beq.n	80099c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009980:	4b34      	ldr	r3, [pc, #208]	@ (8009a54 <HAL_RCC_OscConfig+0x244>)
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009986:	f7fe fc51 	bl	800822c <HAL_GetTick>
 800998a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800998c:	e008      	b.n	80099a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800998e:	f7fe fc4d 	bl	800822c <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e1a8      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0f0      	beq.n	800998e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ac:	4b28      	ldr	r3, [pc, #160]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	00db      	lsls	r3, r3, #3
 80099ba:	4925      	ldr	r1, [pc, #148]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	600b      	str	r3, [r1, #0]
 80099c0:	e015      	b.n	80099ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099c2:	4b24      	ldr	r3, [pc, #144]	@ (8009a54 <HAL_RCC_OscConfig+0x244>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c8:	f7fe fc30 	bl	800822c <HAL_GetTick>
 80099cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099ce:	e008      	b.n	80099e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099d0:	f7fe fc2c 	bl	800822c <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d901      	bls.n	80099e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e187      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0302 	and.w	r3, r3, #2
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1f0      	bne.n	80099d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d036      	beq.n	8009a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d016      	beq.n	8009a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a02:	4b15      	ldr	r3, [pc, #84]	@ (8009a58 <HAL_RCC_OscConfig+0x248>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a08:	f7fe fc10 	bl	800822c <HAL_GetTick>
 8009a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a0e:	e008      	b.n	8009a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a10:	f7fe fc0c 	bl	800822c <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d901      	bls.n	8009a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e167      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a22:	4b0b      	ldr	r3, [pc, #44]	@ (8009a50 <HAL_RCC_OscConfig+0x240>)
 8009a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a26:	f003 0302 	and.w	r3, r3, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0f0      	beq.n	8009a10 <HAL_RCC_OscConfig+0x200>
 8009a2e:	e01b      	b.n	8009a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a30:	4b09      	ldr	r3, [pc, #36]	@ (8009a58 <HAL_RCC_OscConfig+0x248>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a36:	f7fe fbf9 	bl	800822c <HAL_GetTick>
 8009a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a3c:	e00e      	b.n	8009a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a3e:	f7fe fbf5 	bl	800822c <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d907      	bls.n	8009a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e150      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
 8009a50:	40023800 	.word	0x40023800
 8009a54:	42470000 	.word	0x42470000
 8009a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a5c:	4b88      	ldr	r3, [pc, #544]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a60:	f003 0302 	and.w	r3, r3, #2
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1ea      	bne.n	8009a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 8097 	beq.w	8009ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a76:	2300      	movs	r3, #0
 8009a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a7a:	4b81      	ldr	r3, [pc, #516]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d10f      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a86:	2300      	movs	r3, #0
 8009a88:	60bb      	str	r3, [r7, #8]
 8009a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8009a96:	4b7a      	ldr	r3, [pc, #488]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a9e:	60bb      	str	r3, [r7, #8]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aa6:	4b77      	ldr	r3, [pc, #476]	@ (8009c84 <HAL_RCC_OscConfig+0x474>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d118      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ab2:	4b74      	ldr	r3, [pc, #464]	@ (8009c84 <HAL_RCC_OscConfig+0x474>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a73      	ldr	r2, [pc, #460]	@ (8009c84 <HAL_RCC_OscConfig+0x474>)
 8009ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009abe:	f7fe fbb5 	bl	800822c <HAL_GetTick>
 8009ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac4:	e008      	b.n	8009ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ac6:	f7fe fbb1 	bl	800822c <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e10c      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8009c84 <HAL_RCC_OscConfig+0x474>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d106      	bne.n	8009afa <HAL_RCC_OscConfig+0x2ea>
 8009aec:	4b64      	ldr	r3, [pc, #400]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af0:	4a63      	ldr	r2, [pc, #396]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009af8:	e01c      	b.n	8009b34 <HAL_RCC_OscConfig+0x324>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCC_OscConfig+0x30c>
 8009b02:	4b5f      	ldr	r3, [pc, #380]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b06:	4a5e      	ldr	r2, [pc, #376]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b08:	f043 0304 	orr.w	r3, r3, #4
 8009b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b12:	4a5b      	ldr	r2, [pc, #364]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b1a:	e00b      	b.n	8009b34 <HAL_RCC_OscConfig+0x324>
 8009b1c:	4b58      	ldr	r3, [pc, #352]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b20:	4a57      	ldr	r2, [pc, #348]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b28:	4b55      	ldr	r3, [pc, #340]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b2c:	4a54      	ldr	r2, [pc, #336]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b2e:	f023 0304 	bic.w	r3, r3, #4
 8009b32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d015      	beq.n	8009b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b3c:	f7fe fb76 	bl	800822c <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b42:	e00a      	b.n	8009b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b44:	f7fe fb72 	bl	800822c <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e0cb      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b5a:	4b49      	ldr	r3, [pc, #292]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0ee      	beq.n	8009b44 <HAL_RCC_OscConfig+0x334>
 8009b66:	e014      	b.n	8009b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b68:	f7fe fb60 	bl	800822c <HAL_GetTick>
 8009b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b6e:	e00a      	b.n	8009b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b70:	f7fe fb5c 	bl	800822c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d901      	bls.n	8009b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e0b5      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b86:	4b3e      	ldr	r3, [pc, #248]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1ee      	bne.n	8009b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d105      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b98:	4b39      	ldr	r3, [pc, #228]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9c:	4a38      	ldr	r2, [pc, #224]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ba2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	699b      	ldr	r3, [r3, #24]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 80a1 	beq.w	8009cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bae:	4b34      	ldr	r3, [pc, #208]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	f003 030c 	and.w	r3, r3, #12
 8009bb6:	2b08      	cmp	r3, #8
 8009bb8:	d05c      	beq.n	8009c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d141      	bne.n	8009c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bc2:	4b31      	ldr	r3, [pc, #196]	@ (8009c88 <HAL_RCC_OscConfig+0x478>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bc8:	f7fe fb30 	bl	800822c <HAL_GetTick>
 8009bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bd0:	f7fe fb2c 	bl	800822c <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e087      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009be2:	4b27      	ldr	r3, [pc, #156]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1f0      	bne.n	8009bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	69da      	ldr	r2, [r3, #28]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bfc:	019b      	lsls	r3, r3, #6
 8009bfe:	431a      	orrs	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	085b      	lsrs	r3, r3, #1
 8009c06:	3b01      	subs	r3, #1
 8009c08:	041b      	lsls	r3, r3, #16
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c10:	061b      	lsls	r3, r3, #24
 8009c12:	491b      	ldr	r1, [pc, #108]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009c14:	4313      	orrs	r3, r2
 8009c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c18:	4b1b      	ldr	r3, [pc, #108]	@ (8009c88 <HAL_RCC_OscConfig+0x478>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c1e:	f7fe fb05 	bl	800822c <HAL_GetTick>
 8009c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c24:	e008      	b.n	8009c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c26:	f7fe fb01 	bl	800822c <HAL_GetTick>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	1ad3      	subs	r3, r2, r3
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d901      	bls.n	8009c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e05c      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c38:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0f0      	beq.n	8009c26 <HAL_RCC_OscConfig+0x416>
 8009c44:	e054      	b.n	8009cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c46:	4b10      	ldr	r3, [pc, #64]	@ (8009c88 <HAL_RCC_OscConfig+0x478>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c4c:	f7fe faee 	bl	800822c <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fe faea 	bl	800822c <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e045      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c66:	4b06      	ldr	r3, [pc, #24]	@ (8009c80 <HAL_RCC_OscConfig+0x470>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f0      	bne.n	8009c54 <HAL_RCC_OscConfig+0x444>
 8009c72:	e03d      	b.n	8009cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d107      	bne.n	8009c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e038      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
 8009c80:	40023800 	.word	0x40023800
 8009c84:	40007000 	.word	0x40007000
 8009c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8009cfc <HAL_RCC_OscConfig+0x4ec>)
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d028      	beq.n	8009cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d121      	bne.n	8009cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d11a      	bne.n	8009cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d111      	bne.n	8009cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd2:	085b      	lsrs	r3, r3, #1
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d107      	bne.n	8009cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d001      	beq.n	8009cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	40023800 	.word	0x40023800

08009d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e0cc      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d14:	4b68      	ldr	r3, [pc, #416]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d90c      	bls.n	8009d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d22:	4b65      	ldr	r3, [pc, #404]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	b2d2      	uxtb	r2, r2
 8009d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d2a:	4b63      	ldr	r3, [pc, #396]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d001      	beq.n	8009d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0b8      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d020      	beq.n	8009d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d005      	beq.n	8009d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d54:	4b59      	ldr	r3, [pc, #356]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	4a58      	ldr	r2, [pc, #352]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d005      	beq.n	8009d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d6c:	4b53      	ldr	r3, [pc, #332]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	4a52      	ldr	r2, [pc, #328]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d78:	4b50      	ldr	r3, [pc, #320]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	494d      	ldr	r1, [pc, #308]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009d86:	4313      	orrs	r3, r2
 8009d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d044      	beq.n	8009e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d107      	bne.n	8009dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d9e:	4b47      	ldr	r3, [pc, #284]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d119      	bne.n	8009dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e07f      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d003      	beq.n	8009dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	d107      	bne.n	8009dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e06f      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009dce:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e067      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009dde:	4b37      	ldr	r3, [pc, #220]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f023 0203 	bic.w	r2, r3, #3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	4934      	ldr	r1, [pc, #208]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009df0:	f7fe fa1c 	bl	800822c <HAL_GetTick>
 8009df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009df6:	e00a      	b.n	8009e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009df8:	f7fe fa18 	bl	800822c <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e04f      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 020c 	and.w	r2, r3, #12
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d1eb      	bne.n	8009df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e20:	4b25      	ldr	r3, [pc, #148]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d20c      	bcs.n	8009e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e2e:	4b22      	ldr	r3, [pc, #136]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	b2d2      	uxtb	r2, r2
 8009e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e36:	4b20      	ldr	r3, [pc, #128]	@ (8009eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d001      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e032      	b.n	8009eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d008      	beq.n	8009e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e54:	4b19      	ldr	r3, [pc, #100]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	4916      	ldr	r1, [pc, #88]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0308 	and.w	r3, r3, #8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e72:	4b12      	ldr	r3, [pc, #72]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	490e      	ldr	r1, [pc, #56]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e82:	4313      	orrs	r3, r2
 8009e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e86:	f000 f821 	bl	8009ecc <HAL_RCC_GetSysClockFreq>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <HAL_RCC_ClockConfig+0x1bc>)
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	091b      	lsrs	r3, r3, #4
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	490a      	ldr	r1, [pc, #40]	@ (8009ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8009e98:	5ccb      	ldrb	r3, [r1, r3]
 8009e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e9e:	4a09      	ldr	r2, [pc, #36]	@ (8009ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8009ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009ea2:	4b09      	ldr	r3, [pc, #36]	@ (8009ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe f97c 	bl	80081a4 <HAL_InitTick>

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40023c00 	.word	0x40023c00
 8009ebc:	40023800 	.word	0x40023800
 8009ec0:	080103e4 	.word	0x080103e4
 8009ec4:	20000000 	.word	0x20000000
 8009ec8:	200002c4 	.word	0x200002c4

08009ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ed0:	b094      	sub	sp, #80	@ 0x50
 8009ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ed8:	2300      	movs	r3, #0
 8009eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009edc:	2300      	movs	r3, #0
 8009ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ee4:	4b79      	ldr	r3, [pc, #484]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	f003 030c 	and.w	r3, r3, #12
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d00d      	beq.n	8009f0c <HAL_RCC_GetSysClockFreq+0x40>
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	f200 80e1 	bhi.w	800a0b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <HAL_RCC_GetSysClockFreq+0x34>
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d003      	beq.n	8009f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8009efe:	e0db      	b.n	800a0b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f00:	4b73      	ldr	r3, [pc, #460]	@ (800a0d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009f02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009f04:	e0db      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f06:	4b73      	ldr	r3, [pc, #460]	@ (800a0d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009f0a:	e0d8      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f0c:	4b6f      	ldr	r3, [pc, #444]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f16:	4b6d      	ldr	r3, [pc, #436]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d063      	beq.n	8009fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f22:	4b6a      	ldr	r3, [pc, #424]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	099b      	lsrs	r3, r3, #6
 8009f28:	2200      	movs	r2, #0
 8009f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f36:	2300      	movs	r3, #0
 8009f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009f3e:	4622      	mov	r2, r4
 8009f40:	462b      	mov	r3, r5
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f04f 0100 	mov.w	r1, #0
 8009f4a:	0159      	lsls	r1, r3, #5
 8009f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f50:	0150      	lsls	r0, r2, #5
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4621      	mov	r1, r4
 8009f58:	1a51      	subs	r1, r2, r1
 8009f5a:	6139      	str	r1, [r7, #16]
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f70:	4659      	mov	r1, fp
 8009f72:	018b      	lsls	r3, r1, #6
 8009f74:	4651      	mov	r1, sl
 8009f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	018a      	lsls	r2, r1, #6
 8009f7e:	4651      	mov	r1, sl
 8009f80:	ebb2 0801 	subs.w	r8, r2, r1
 8009f84:	4659      	mov	r1, fp
 8009f86:	eb63 0901 	sbc.w	r9, r3, r1
 8009f8a:	f04f 0200 	mov.w	r2, #0
 8009f8e:	f04f 0300 	mov.w	r3, #0
 8009f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f9e:	4690      	mov	r8, r2
 8009fa0:	4699      	mov	r9, r3
 8009fa2:	4623      	mov	r3, r4
 8009fa4:	eb18 0303 	adds.w	r3, r8, r3
 8009fa8:	60bb      	str	r3, [r7, #8]
 8009faa:	462b      	mov	r3, r5
 8009fac:	eb49 0303 	adc.w	r3, r9, r3
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	f04f 0200 	mov.w	r2, #0
 8009fb6:	f04f 0300 	mov.w	r3, #0
 8009fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	024b      	lsls	r3, r1, #9
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009fc8:	4621      	mov	r1, r4
 8009fca:	024a      	lsls	r2, r1, #9
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009fdc:	f7f6 fe5c 	bl	8000c98 <__aeabi_uldivmod>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fe8:	e058      	b.n	800a09c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fea:	4b38      	ldr	r3, [pc, #224]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	099b      	lsrs	r3, r3, #6
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009ffa:	623b      	str	r3, [r7, #32]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 800a000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	f04f 0000 	mov.w	r0, #0
 800a00c:	f04f 0100 	mov.w	r1, #0
 800a010:	0159      	lsls	r1, r3, #5
 800a012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a016:	0150      	lsls	r0, r2, #5
 800a018:	4602      	mov	r2, r0
 800a01a:	460b      	mov	r3, r1
 800a01c:	4641      	mov	r1, r8
 800a01e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a022:	4649      	mov	r1, r9
 800a024:	eb63 0b01 	sbc.w	fp, r3, r1
 800a028:	f04f 0200 	mov.w	r2, #0
 800a02c:	f04f 0300 	mov.w	r3, #0
 800a030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a03c:	ebb2 040a 	subs.w	r4, r2, sl
 800a040:	eb63 050b 	sbc.w	r5, r3, fp
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	f04f 0300 	mov.w	r3, #0
 800a04c:	00eb      	lsls	r3, r5, #3
 800a04e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a052:	00e2      	lsls	r2, r4, #3
 800a054:	4614      	mov	r4, r2
 800a056:	461d      	mov	r5, r3
 800a058:	4643      	mov	r3, r8
 800a05a:	18e3      	adds	r3, r4, r3
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	464b      	mov	r3, r9
 800a060:	eb45 0303 	adc.w	r3, r5, r3
 800a064:	607b      	str	r3, [r7, #4]
 800a066:	f04f 0200 	mov.w	r2, #0
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a072:	4629      	mov	r1, r5
 800a074:	028b      	lsls	r3, r1, #10
 800a076:	4621      	mov	r1, r4
 800a078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a07c:	4621      	mov	r1, r4
 800a07e:	028a      	lsls	r2, r1, #10
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a086:	2200      	movs	r2, #0
 800a088:	61bb      	str	r3, [r7, #24]
 800a08a:	61fa      	str	r2, [r7, #28]
 800a08c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a090:	f7f6 fe02 	bl	8000c98 <__aeabi_uldivmod>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4613      	mov	r3, r2
 800a09a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a09c:	4b0b      	ldr	r3, [pc, #44]	@ (800a0cc <HAL_RCC_GetSysClockFreq+0x200>)
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	005b      	lsls	r3, r3, #1
 800a0aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800a0ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a0b6:	e002      	b.n	800a0be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a0b8:	4b05      	ldr	r3, [pc, #20]	@ (800a0d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a0bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a0be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3750      	adds	r7, #80	@ 0x50
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0ca:	bf00      	nop
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	00f42400 	.word	0x00f42400
 800a0d4:	007a1200 	.word	0x007a1200

0800a0d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0dc:	4b03      	ldr	r3, [pc, #12]	@ (800a0ec <HAL_RCC_GetHCLKFreq+0x14>)
 800a0de:	681b      	ldr	r3, [r3, #0]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	20000000 	.word	0x20000000

0800a0f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0f4:	f7ff fff0 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	4b05      	ldr	r3, [pc, #20]	@ (800a110 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	0a9b      	lsrs	r3, r3, #10
 800a100:	f003 0307 	and.w	r3, r3, #7
 800a104:	4903      	ldr	r1, [pc, #12]	@ (800a114 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a106:	5ccb      	ldrb	r3, [r1, r3]
 800a108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40023800 	.word	0x40023800
 800a114:	080103f4 	.word	0x080103f4

0800a118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a11c:	f7ff ffdc 	bl	800a0d8 <HAL_RCC_GetHCLKFreq>
 800a120:	4602      	mov	r2, r0
 800a122:	4b05      	ldr	r3, [pc, #20]	@ (800a138 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	0b5b      	lsrs	r3, r3, #13
 800a128:	f003 0307 	and.w	r3, r3, #7
 800a12c:	4903      	ldr	r1, [pc, #12]	@ (800a13c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a12e:	5ccb      	ldrb	r3, [r1, r3]
 800a130:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a134:	4618      	mov	r0, r3
 800a136:	bd80      	pop	{r7, pc}
 800a138:	40023800 	.word	0x40023800
 800a13c:	080103f4 	.word	0x080103f4

0800a140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e041      	b.n	800a1d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7f8 fa0e 	bl	8002588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3304      	adds	r3, #4
 800a17c:	4619      	mov	r1, r3
 800a17e:	4610      	mov	r0, r2
 800a180:	f000 fcd8 	bl	800ab34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d001      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e044      	b.n	800a282 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <HAL_TIM_Base_Start_IT+0xb0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d018      	beq.n	800a24c <HAL_TIM_Base_Start_IT+0x6c>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a222:	d013      	beq.n	800a24c <HAL_TIM_Base_Start_IT+0x6c>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a1a      	ldr	r2, [pc, #104]	@ (800a294 <HAL_TIM_Base_Start_IT+0xb4>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00e      	beq.n	800a24c <HAL_TIM_Base_Start_IT+0x6c>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a19      	ldr	r2, [pc, #100]	@ (800a298 <HAL_TIM_Base_Start_IT+0xb8>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d009      	beq.n	800a24c <HAL_TIM_Base_Start_IT+0x6c>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a17      	ldr	r2, [pc, #92]	@ (800a29c <HAL_TIM_Base_Start_IT+0xbc>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d004      	beq.n	800a24c <HAL_TIM_Base_Start_IT+0x6c>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a16      	ldr	r2, [pc, #88]	@ (800a2a0 <HAL_TIM_Base_Start_IT+0xc0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d111      	bne.n	800a270 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b06      	cmp	r3, #6
 800a25c:	d010      	beq.n	800a280 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f042 0201 	orr.w	r2, r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26e:	e007      	b.n	800a280 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40010000 	.word	0x40010000
 800a294:	40000400 	.word	0x40000400
 800a298:	40000800 	.word	0x40000800
 800a29c:	40000c00 	.word	0x40000c00
 800a2a0:	40014000 	.word	0x40014000

0800a2a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b082      	sub	sp, #8
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e041      	b.n	800a33a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d106      	bne.n	800a2d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7f8 f93c 	bl	8002548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	3304      	adds	r3, #4
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	f000 fc26 	bl	800ab34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <HAL_TIM_PWM_Start+0x24>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	bf14      	ite	ne
 800a360:	2301      	movne	r3, #1
 800a362:	2300      	moveq	r3, #0
 800a364:	b2db      	uxtb	r3, r3
 800a366:	e022      	b.n	800a3ae <HAL_TIM_PWM_Start+0x6a>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2b04      	cmp	r3, #4
 800a36c:	d109      	bne.n	800a382 <HAL_TIM_PWM_Start+0x3e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b01      	cmp	r3, #1
 800a378:	bf14      	ite	ne
 800a37a:	2301      	movne	r3, #1
 800a37c:	2300      	moveq	r3, #0
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	e015      	b.n	800a3ae <HAL_TIM_PWM_Start+0x6a>
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b08      	cmp	r3, #8
 800a386:	d109      	bne.n	800a39c <HAL_TIM_PWM_Start+0x58>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b01      	cmp	r3, #1
 800a392:	bf14      	ite	ne
 800a394:	2301      	movne	r3, #1
 800a396:	2300      	moveq	r3, #0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	e008      	b.n	800a3ae <HAL_TIM_PWM_Start+0x6a>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	bf14      	ite	ne
 800a3a8:	2301      	movne	r3, #1
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e068      	b.n	800a488 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <HAL_TIM_PWM_Start+0x82>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2202      	movs	r2, #2
 800a3c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3c4:	e013      	b.n	800a3ee <HAL_TIM_PWM_Start+0xaa>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d104      	bne.n	800a3d6 <HAL_TIM_PWM_Start+0x92>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3d4:	e00b      	b.n	800a3ee <HAL_TIM_PWM_Start+0xaa>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d104      	bne.n	800a3e6 <HAL_TIM_PWM_Start+0xa2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3e4:	e003      	b.n	800a3ee <HAL_TIM_PWM_Start+0xaa>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 fe4e 	bl	800b098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a23      	ldr	r2, [pc, #140]	@ (800a490 <HAL_TIM_PWM_Start+0x14c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d107      	bne.n	800a416 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a414:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a1d      	ldr	r2, [pc, #116]	@ (800a490 <HAL_TIM_PWM_Start+0x14c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d018      	beq.n	800a452 <HAL_TIM_PWM_Start+0x10e>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a428:	d013      	beq.n	800a452 <HAL_TIM_PWM_Start+0x10e>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a19      	ldr	r2, [pc, #100]	@ (800a494 <HAL_TIM_PWM_Start+0x150>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d00e      	beq.n	800a452 <HAL_TIM_PWM_Start+0x10e>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a17      	ldr	r2, [pc, #92]	@ (800a498 <HAL_TIM_PWM_Start+0x154>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d009      	beq.n	800a452 <HAL_TIM_PWM_Start+0x10e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a16      	ldr	r2, [pc, #88]	@ (800a49c <HAL_TIM_PWM_Start+0x158>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d004      	beq.n	800a452 <HAL_TIM_PWM_Start+0x10e>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a14      	ldr	r2, [pc, #80]	@ (800a4a0 <HAL_TIM_PWM_Start+0x15c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d111      	bne.n	800a476 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b06      	cmp	r3, #6
 800a462:	d010      	beq.n	800a486 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a474:	e007      	b.n	800a486 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f042 0201 	orr.w	r2, r2, #1
 800a484:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	40010000 	.word	0x40010000
 800a494:	40000400 	.word	0x40000400
 800a498:	40000800 	.word	0x40000800
 800a49c:	40000c00 	.word	0x40000c00
 800a4a0:	40014000 	.word	0x40014000

0800a4a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e097      	b.n	800a5e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7f7 ffeb 	bl	80024a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4e8:	f023 0307 	bic.w	r3, r3, #7
 800a4ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4610      	mov	r0, r2
 800a4fa:	f000 fb1b 	bl	800ab34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a526:	f023 0303 	bic.w	r3, r3, #3
 800a52a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	699b      	ldr	r3, [r3, #24]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	4313      	orrs	r3, r2
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a544:	f023 030c 	bic.w	r3, r3, #12
 800a548:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a550:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	021b      	lsls	r3, r3, #8
 800a560:	4313      	orrs	r3, r2
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	4313      	orrs	r3, r2
 800a566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	011a      	lsls	r2, r3, #4
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	031b      	lsls	r3, r3, #12
 800a574:	4313      	orrs	r3, r2
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4313      	orrs	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a582:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a58a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	4313      	orrs	r3, r2
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f003 0302 	and.w	r3, r3, #2
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d020      	beq.n	800a654 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d01b      	beq.n	800a654 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f06f 0202 	mvn.w	r2, #2
 800a624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa5b 	bl	800aaf6 <HAL_TIM_IC_CaptureCallback>
 800a640:	e005      	b.n	800a64e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa4d 	bl	800aae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fa5e 	bl	800ab0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d020      	beq.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d01b      	beq.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f06f 0204 	mvn.w	r2, #4
 800a670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fa35 	bl	800aaf6 <HAL_TIM_IC_CaptureCallback>
 800a68c:	e005      	b.n	800a69a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fa27 	bl	800aae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fa38 	bl	800ab0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d020      	beq.n	800a6ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01b      	beq.n	800a6ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f06f 0208 	mvn.w	r2, #8
 800a6bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	69db      	ldr	r3, [r3, #28]
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fa0f 	bl	800aaf6 <HAL_TIM_IC_CaptureCallback>
 800a6d8:	e005      	b.n	800a6e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fa01 	bl	800aae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fa12 	bl	800ab0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f003 0310 	and.w	r3, r3, #16
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d020      	beq.n	800a738 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f003 0310 	and.w	r3, r3, #16
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01b      	beq.n	800a738 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f06f 0210 	mvn.w	r2, #16
 800a708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2208      	movs	r2, #8
 800a70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9e9 	bl	800aaf6 <HAL_TIM_IC_CaptureCallback>
 800a724:	e005      	b.n	800a732 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f9db 	bl	800aae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f9ec 	bl	800ab0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00c      	beq.n	800a75c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f06f 0201 	mvn.w	r2, #1
 800a754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7f6 fc58 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00c      	beq.n	800a780 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d007      	beq.n	800a780 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fd2a 	bl	800b1d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00c      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a790:	2b00      	cmp	r3, #0
 800a792:	d007      	beq.n	800a7a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f9bd 	bl	800ab1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00c      	beq.n	800a7c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f003 0320 	and.w	r3, r3, #32
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d007      	beq.n	800a7c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f06f 0220 	mvn.w	r2, #32
 800a7c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fcfc 	bl	800b1c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d101      	bne.n	800a7ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	e0ae      	b.n	800a94c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b0c      	cmp	r3, #12
 800a7fa:	f200 809f 	bhi.w	800a93c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a7fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a804:	0800a839 	.word	0x0800a839
 800a808:	0800a93d 	.word	0x0800a93d
 800a80c:	0800a93d 	.word	0x0800a93d
 800a810:	0800a93d 	.word	0x0800a93d
 800a814:	0800a879 	.word	0x0800a879
 800a818:	0800a93d 	.word	0x0800a93d
 800a81c:	0800a93d 	.word	0x0800a93d
 800a820:	0800a93d 	.word	0x0800a93d
 800a824:	0800a8bb 	.word	0x0800a8bb
 800a828:	0800a93d 	.word	0x0800a93d
 800a82c:	0800a93d 	.word	0x0800a93d
 800a830:	0800a93d 	.word	0x0800a93d
 800a834:	0800a8fb 	.word	0x0800a8fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fa04 	bl	800ac4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0208 	orr.w	r2, r2, #8
 800a852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0204 	bic.w	r2, r2, #4
 800a862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6999      	ldr	r1, [r3, #24]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691a      	ldr	r2, [r3, #16]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	430a      	orrs	r2, r1
 800a874:	619a      	str	r2, [r3, #24]
      break;
 800a876:	e064      	b.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fa4a 	bl	800ad18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	699a      	ldr	r2, [r3, #24]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	699a      	ldr	r2, [r3, #24]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6999      	ldr	r1, [r3, #24]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	021a      	lsls	r2, r3, #8
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	619a      	str	r2, [r3, #24]
      break;
 800a8b8:	e043      	b.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fa95 	bl	800adf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69da      	ldr	r2, [r3, #28]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f042 0208 	orr.w	r2, r2, #8
 800a8d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69da      	ldr	r2, [r3, #28]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0204 	bic.w	r2, r2, #4
 800a8e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69d9      	ldr	r1, [r3, #28]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	691a      	ldr	r2, [r3, #16]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	61da      	str	r2, [r3, #28]
      break;
 800a8f8:	e023      	b.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fadf 	bl	800aec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	69da      	ldr	r2, [r3, #28]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69da      	ldr	r2, [r3, #28]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69d9      	ldr	r1, [r3, #28]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	021a      	lsls	r2, r3, #8
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	61da      	str	r2, [r3, #28]
      break;
 800a93a:	e002      	b.n	800a942 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	75fb      	strb	r3, [r7, #23]
      break;
 800a940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_TIM_ConfigClockSource+0x1c>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e0b4      	b.n	800aada <HAL_TIM_ConfigClockSource+0x186>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a98e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a996:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9a8:	d03e      	beq.n	800aa28 <HAL_TIM_ConfigClockSource+0xd4>
 800a9aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9ae:	f200 8087 	bhi.w	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9b6:	f000 8086 	beq.w	800aac6 <HAL_TIM_ConfigClockSource+0x172>
 800a9ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9be:	d87f      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9c0:	2b70      	cmp	r3, #112	@ 0x70
 800a9c2:	d01a      	beq.n	800a9fa <HAL_TIM_ConfigClockSource+0xa6>
 800a9c4:	2b70      	cmp	r3, #112	@ 0x70
 800a9c6:	d87b      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9c8:	2b60      	cmp	r3, #96	@ 0x60
 800a9ca:	d050      	beq.n	800aa6e <HAL_TIM_ConfigClockSource+0x11a>
 800a9cc:	2b60      	cmp	r3, #96	@ 0x60
 800a9ce:	d877      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9d0:	2b50      	cmp	r3, #80	@ 0x50
 800a9d2:	d03c      	beq.n	800aa4e <HAL_TIM_ConfigClockSource+0xfa>
 800a9d4:	2b50      	cmp	r3, #80	@ 0x50
 800a9d6:	d873      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9d8:	2b40      	cmp	r3, #64	@ 0x40
 800a9da:	d058      	beq.n	800aa8e <HAL_TIM_ConfigClockSource+0x13a>
 800a9dc:	2b40      	cmp	r3, #64	@ 0x40
 800a9de:	d86f      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9e0:	2b30      	cmp	r3, #48	@ 0x30
 800a9e2:	d064      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0x15a>
 800a9e4:	2b30      	cmp	r3, #48	@ 0x30
 800a9e6:	d86b      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9e8:	2b20      	cmp	r3, #32
 800a9ea:	d060      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0x15a>
 800a9ec:	2b20      	cmp	r3, #32
 800a9ee:	d867      	bhi.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d05c      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0x15a>
 800a9f4:	2b10      	cmp	r3, #16
 800a9f6:	d05a      	beq.n	800aaae <HAL_TIM_ConfigClockSource+0x15a>
 800a9f8:	e062      	b.n	800aac0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa0a:	f000 fb25 	bl	800b058 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	609a      	str	r2, [r3, #8]
      break;
 800aa26:	e04f      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa38:	f000 fb0e 	bl	800b058 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa4a:	609a      	str	r2, [r3, #8]
      break;
 800aa4c:	e03c      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f000 fa82 	bl	800af64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2150      	movs	r1, #80	@ 0x50
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fadb 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800aa6c:	e02c      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f000 faa1 	bl	800afc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2160      	movs	r1, #96	@ 0x60
 800aa86:	4618      	mov	r0, r3
 800aa88:	f000 facb 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800aa8c:	e01c      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f000 fa62 	bl	800af64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2140      	movs	r1, #64	@ 0x40
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fabb 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800aaac:	e00c      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f000 fab2 	bl	800b022 <TIM_ITRx_SetConfig>
      break;
 800aabe:	e003      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	73fb      	strb	r3, [r7, #15]
      break;
 800aac4:	e000      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aac6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b083      	sub	sp, #12
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aafe:	bf00      	nop
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b083      	sub	sp, #12
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab12:	bf00      	nop
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b083      	sub	sp, #12
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
	...

0800ab34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a3a      	ldr	r2, [pc, #232]	@ (800ac30 <TIM_Base_SetConfig+0xfc>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_Base_SetConfig+0x38>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab52:	d00b      	beq.n	800ab6c <TIM_Base_SetConfig+0x38>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a37      	ldr	r2, [pc, #220]	@ (800ac34 <TIM_Base_SetConfig+0x100>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_Base_SetConfig+0x38>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a36      	ldr	r2, [pc, #216]	@ (800ac38 <TIM_Base_SetConfig+0x104>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_Base_SetConfig+0x38>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a35      	ldr	r2, [pc, #212]	@ (800ac3c <TIM_Base_SetConfig+0x108>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d108      	bne.n	800ab7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a2b      	ldr	r2, [pc, #172]	@ (800ac30 <TIM_Base_SetConfig+0xfc>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d01b      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8c:	d017      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a28      	ldr	r2, [pc, #160]	@ (800ac34 <TIM_Base_SetConfig+0x100>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d013      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a27      	ldr	r2, [pc, #156]	@ (800ac38 <TIM_Base_SetConfig+0x104>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d00f      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a26      	ldr	r2, [pc, #152]	@ (800ac3c <TIM_Base_SetConfig+0x108>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d00b      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a25      	ldr	r2, [pc, #148]	@ (800ac40 <TIM_Base_SetConfig+0x10c>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d007      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a24      	ldr	r2, [pc, #144]	@ (800ac44 <TIM_Base_SetConfig+0x110>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d003      	beq.n	800abbe <TIM_Base_SetConfig+0x8a>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a23      	ldr	r2, [pc, #140]	@ (800ac48 <TIM_Base_SetConfig+0x114>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d108      	bne.n	800abd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800abc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a0e      	ldr	r2, [pc, #56]	@ (800ac30 <TIM_Base_SetConfig+0xfc>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d103      	bne.n	800ac04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	f003 0301 	and.w	r3, r3, #1
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d105      	bne.n	800ac22 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f023 0201 	bic.w	r2, r3, #1
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	611a      	str	r2, [r3, #16]
  }
}
 800ac22:	bf00      	nop
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40010000 	.word	0x40010000
 800ac34:	40000400 	.word	0x40000400
 800ac38:	40000800 	.word	0x40000800
 800ac3c:	40000c00 	.word	0x40000c00
 800ac40:	40014000 	.word	0x40014000
 800ac44:	40014400 	.word	0x40014400
 800ac48:	40014800 	.word	0x40014800

0800ac4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f023 0201 	bic.w	r2, r3, #1
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f023 0302 	bic.w	r3, r3, #2
 800ac94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a1c      	ldr	r2, [pc, #112]	@ (800ad14 <TIM_OC1_SetConfig+0xc8>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d10c      	bne.n	800acc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f023 0308 	bic.w	r3, r3, #8
 800acae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f023 0304 	bic.w	r3, r3, #4
 800acc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a13      	ldr	r2, [pc, #76]	@ (800ad14 <TIM_OC1_SetConfig+0xc8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d111      	bne.n	800acee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800acd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	699b      	ldr	r3, [r3, #24]
 800ace8:	693a      	ldr	r2, [r7, #16]
 800acea:	4313      	orrs	r3, r2
 800acec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	621a      	str	r2, [r3, #32]
}
 800ad08:	bf00      	nop
 800ad0a:	371c      	adds	r7, #28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	40010000 	.word	0x40010000

0800ad18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	f023 0210 	bic.w	r2, r3, #16
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	f023 0320 	bic.w	r3, r3, #32
 800ad62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a1e      	ldr	r2, [pc, #120]	@ (800adec <TIM_OC2_SetConfig+0xd4>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d10d      	bne.n	800ad94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	011b      	lsls	r3, r3, #4
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a15      	ldr	r2, [pc, #84]	@ (800adec <TIM_OC2_SetConfig+0xd4>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d113      	bne.n	800adc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ada2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800adaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	695b      	ldr	r3, [r3, #20]
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	699b      	ldr	r3, [r3, #24]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	693a      	ldr	r2, [r7, #16]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	621a      	str	r2, [r3, #32]
}
 800adde:	bf00      	nop
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	40010000 	.word	0x40010000

0800adf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b087      	sub	sp, #28
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6a1b      	ldr	r3, [r3, #32]
 800ae04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f023 0303 	bic.w	r3, r3, #3
 800ae26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a1d      	ldr	r2, [pc, #116]	@ (800aec0 <TIM_OC3_SetConfig+0xd0>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d10d      	bne.n	800ae6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	021b      	lsls	r3, r3, #8
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a14      	ldr	r2, [pc, #80]	@ (800aec0 <TIM_OC3_SetConfig+0xd0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d113      	bne.n	800ae9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	697a      	ldr	r2, [r7, #20]
 800aeb2:	621a      	str	r2, [r3, #32]
}
 800aeb4:	bf00      	nop
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	40010000 	.word	0x40010000

0800aec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	69db      	ldr	r3, [r3, #28]
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	031b      	lsls	r3, r3, #12
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	4313      	orrs	r3, r2
 800af1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a10      	ldr	r2, [pc, #64]	@ (800af60 <TIM_OC4_SetConfig+0x9c>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d109      	bne.n	800af38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	019b      	lsls	r3, r3, #6
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	621a      	str	r2, [r3, #32]
}
 800af52:	bf00      	nop
 800af54:	371c      	adds	r7, #28
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	40010000 	.word	0x40010000

0800af64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	f023 0201 	bic.w	r2, r3, #1
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	4313      	orrs	r3, r2
 800af98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f023 030a 	bic.w	r3, r3, #10
 800afa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	693a      	ldr	r2, [r7, #16]
 800afae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	621a      	str	r2, [r3, #32]
}
 800afb6:	bf00      	nop
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b087      	sub	sp, #28
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	f023 0210 	bic.w	r2, r3, #16
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800afec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	031b      	lsls	r3, r3, #12
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800affe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	011b      	lsls	r3, r3, #4
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	4313      	orrs	r3, r2
 800b008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	621a      	str	r2, [r3, #32]
}
 800b016:	bf00      	nop
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	4313      	orrs	r3, r2
 800b040:	f043 0307 	orr.w	r3, r3, #7
 800b044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	609a      	str	r2, [r3, #8]
}
 800b04c:	bf00      	nop
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b058:	b480      	push	{r7}
 800b05a:	b087      	sub	sp, #28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b072:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	021a      	lsls	r2, r3, #8
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	4313      	orrs	r3, r2
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	4313      	orrs	r3, r2
 800b084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	609a      	str	r2, [r3, #8]
}
 800b08c:	bf00      	nop
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	f003 031f 	and.w	r3, r3, #31
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	43db      	mvns	r3, r3
 800b0ba:	401a      	ands	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1a      	ldr	r2, [r3, #32]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f003 031f 	and.w	r3, r3, #31
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
}
 800b0d6:	bf00      	nop
 800b0d8:	371c      	adds	r7, #28
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e050      	b.n	800b19e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a1c      	ldr	r2, [pc, #112]	@ (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d018      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b148:	d013      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a18      	ldr	r2, [pc, #96]	@ (800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d00e      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a16      	ldr	r2, [pc, #88]	@ (800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d009      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4a15      	ldr	r2, [pc, #84]	@ (800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d004      	beq.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a13      	ldr	r2, [pc, #76]	@ (800b1bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d10c      	bne.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	4313      	orrs	r3, r2
 800b182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr
 800b1aa:	bf00      	nop
 800b1ac:	40010000 	.word	0x40010000
 800b1b0:	40000400 	.word	0x40000400
 800b1b4:	40000800 	.word	0x40000800
 800b1b8:	40000c00 	.word	0x40000c00
 800b1bc:	40014000 	.word	0x40014000

0800b1c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d101      	bne.n	800b1fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e042      	b.n	800b280 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7f7 fa38 	bl	8002684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2224      	movs	r2, #36	@ 0x24
 800b218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b22a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f82b 	bl	800b288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	691a      	ldr	r2, [r3, #16]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	695a      	ldr	r2, [r3, #20]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68da      	ldr	r2, [r3, #12]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2220      	movs	r2, #32
 800b26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b28c:	b0c0      	sub	sp, #256	@ 0x100
 800b28e:	af00      	add	r7, sp, #0
 800b290:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2a4:	68d9      	ldr	r1, [r3, #12]
 800b2a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	ea40 0301 	orr.w	r3, r0, r1
 800b2b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b2e0:	f021 010c 	bic.w	r1, r1, #12
 800b2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b2ee:	430b      	orrs	r3, r1
 800b2f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b302:	6999      	ldr	r1, [r3, #24]
 800b304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	ea40 0301 	orr.w	r3, r0, r1
 800b30e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	4b8f      	ldr	r3, [pc, #572]	@ (800b554 <UART_SetConfig+0x2cc>)
 800b318:	429a      	cmp	r2, r3
 800b31a:	d005      	beq.n	800b328 <UART_SetConfig+0xa0>
 800b31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	4b8d      	ldr	r3, [pc, #564]	@ (800b558 <UART_SetConfig+0x2d0>)
 800b324:	429a      	cmp	r2, r3
 800b326:	d104      	bne.n	800b332 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b328:	f7fe fef6 	bl	800a118 <HAL_RCC_GetPCLK2Freq>
 800b32c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b330:	e003      	b.n	800b33a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b332:	f7fe fedd 	bl	800a0f0 <HAL_RCC_GetPCLK1Freq>
 800b336:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b33a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b344:	f040 810c 	bne.w	800b560 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b352:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b356:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b35a:	4622      	mov	r2, r4
 800b35c:	462b      	mov	r3, r5
 800b35e:	1891      	adds	r1, r2, r2
 800b360:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b362:	415b      	adcs	r3, r3
 800b364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b366:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b36a:	4621      	mov	r1, r4
 800b36c:	eb12 0801 	adds.w	r8, r2, r1
 800b370:	4629      	mov	r1, r5
 800b372:	eb43 0901 	adc.w	r9, r3, r1
 800b376:	f04f 0200 	mov.w	r2, #0
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b38a:	4690      	mov	r8, r2
 800b38c:	4699      	mov	r9, r3
 800b38e:	4623      	mov	r3, r4
 800b390:	eb18 0303 	adds.w	r3, r8, r3
 800b394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b398:	462b      	mov	r3, r5
 800b39a:	eb49 0303 	adc.w	r3, r9, r3
 800b39e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b3a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b3b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	18db      	adds	r3, r3, r3
 800b3ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3bc:	4613      	mov	r3, r2
 800b3be:	eb42 0303 	adc.w	r3, r2, r3
 800b3c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b3c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b3cc:	f7f5 fc64 	bl	8000c98 <__aeabi_uldivmod>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4b61      	ldr	r3, [pc, #388]	@ (800b55c <UART_SetConfig+0x2d4>)
 800b3d6:	fba3 2302 	umull	r2, r3, r3, r2
 800b3da:	095b      	lsrs	r3, r3, #5
 800b3dc:	011c      	lsls	r4, r3, #4
 800b3de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b3ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	1891      	adds	r1, r2, r2
 800b3f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b3f8:	415b      	adcs	r3, r3
 800b3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b400:	4641      	mov	r1, r8
 800b402:	eb12 0a01 	adds.w	sl, r2, r1
 800b406:	4649      	mov	r1, r9
 800b408:	eb43 0b01 	adc.w	fp, r3, r1
 800b40c:	f04f 0200 	mov.w	r2, #0
 800b410:	f04f 0300 	mov.w	r3, #0
 800b414:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b418:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b41c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b420:	4692      	mov	sl, r2
 800b422:	469b      	mov	fp, r3
 800b424:	4643      	mov	r3, r8
 800b426:	eb1a 0303 	adds.w	r3, sl, r3
 800b42a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b42e:	464b      	mov	r3, r9
 800b430:	eb4b 0303 	adc.w	r3, fp, r3
 800b434:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b444:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b448:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b44c:	460b      	mov	r3, r1
 800b44e:	18db      	adds	r3, r3, r3
 800b450:	643b      	str	r3, [r7, #64]	@ 0x40
 800b452:	4613      	mov	r3, r2
 800b454:	eb42 0303 	adc.w	r3, r2, r3
 800b458:	647b      	str	r3, [r7, #68]	@ 0x44
 800b45a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b45e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b462:	f7f5 fc19 	bl	8000c98 <__aeabi_uldivmod>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4611      	mov	r1, r2
 800b46c:	4b3b      	ldr	r3, [pc, #236]	@ (800b55c <UART_SetConfig+0x2d4>)
 800b46e:	fba3 2301 	umull	r2, r3, r3, r1
 800b472:	095b      	lsrs	r3, r3, #5
 800b474:	2264      	movs	r2, #100	@ 0x64
 800b476:	fb02 f303 	mul.w	r3, r2, r3
 800b47a:	1acb      	subs	r3, r1, r3
 800b47c:	00db      	lsls	r3, r3, #3
 800b47e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b482:	4b36      	ldr	r3, [pc, #216]	@ (800b55c <UART_SetConfig+0x2d4>)
 800b484:	fba3 2302 	umull	r2, r3, r3, r2
 800b488:	095b      	lsrs	r3, r3, #5
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b490:	441c      	add	r4, r3
 800b492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b496:	2200      	movs	r2, #0
 800b498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b49c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b4a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b4a4:	4642      	mov	r2, r8
 800b4a6:	464b      	mov	r3, r9
 800b4a8:	1891      	adds	r1, r2, r2
 800b4aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b4ac:	415b      	adcs	r3, r3
 800b4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	1851      	adds	r1, r2, r1
 800b4b8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	414b      	adcs	r3, r1
 800b4be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b4cc:	4659      	mov	r1, fp
 800b4ce:	00cb      	lsls	r3, r1, #3
 800b4d0:	4651      	mov	r1, sl
 800b4d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4d6:	4651      	mov	r1, sl
 800b4d8:	00ca      	lsls	r2, r1, #3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	189b      	adds	r3, r3, r2
 800b4e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	460a      	mov	r2, r1
 800b4ec:	eb42 0303 	adc.w	r3, r2, r3
 800b4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b500:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b504:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b508:	460b      	mov	r3, r1
 800b50a:	18db      	adds	r3, r3, r3
 800b50c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b50e:	4613      	mov	r3, r2
 800b510:	eb42 0303 	adc.w	r3, r2, r3
 800b514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b516:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b51a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b51e:	f7f5 fbbb 	bl	8000c98 <__aeabi_uldivmod>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4b0d      	ldr	r3, [pc, #52]	@ (800b55c <UART_SetConfig+0x2d4>)
 800b528:	fba3 1302 	umull	r1, r3, r3, r2
 800b52c:	095b      	lsrs	r3, r3, #5
 800b52e:	2164      	movs	r1, #100	@ 0x64
 800b530:	fb01 f303 	mul.w	r3, r1, r3
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	3332      	adds	r3, #50	@ 0x32
 800b53a:	4a08      	ldr	r2, [pc, #32]	@ (800b55c <UART_SetConfig+0x2d4>)
 800b53c:	fba2 2303 	umull	r2, r3, r2, r3
 800b540:	095b      	lsrs	r3, r3, #5
 800b542:	f003 0207 	and.w	r2, r3, #7
 800b546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4422      	add	r2, r4
 800b54e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b550:	e106      	b.n	800b760 <UART_SetConfig+0x4d8>
 800b552:	bf00      	nop
 800b554:	40011000 	.word	0x40011000
 800b558:	40011400 	.word	0x40011400
 800b55c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b564:	2200      	movs	r2, #0
 800b566:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b56a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b56e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b572:	4642      	mov	r2, r8
 800b574:	464b      	mov	r3, r9
 800b576:	1891      	adds	r1, r2, r2
 800b578:	6239      	str	r1, [r7, #32]
 800b57a:	415b      	adcs	r3, r3
 800b57c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b57e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b582:	4641      	mov	r1, r8
 800b584:	1854      	adds	r4, r2, r1
 800b586:	4649      	mov	r1, r9
 800b588:	eb43 0501 	adc.w	r5, r3, r1
 800b58c:	f04f 0200 	mov.w	r2, #0
 800b590:	f04f 0300 	mov.w	r3, #0
 800b594:	00eb      	lsls	r3, r5, #3
 800b596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b59a:	00e2      	lsls	r2, r4, #3
 800b59c:	4614      	mov	r4, r2
 800b59e:	461d      	mov	r5, r3
 800b5a0:	4643      	mov	r3, r8
 800b5a2:	18e3      	adds	r3, r4, r3
 800b5a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	eb45 0303 	adc.w	r3, r5, r3
 800b5ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b5b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b5be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5c2:	f04f 0200 	mov.w	r2, #0
 800b5c6:	f04f 0300 	mov.w	r3, #0
 800b5ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	008b      	lsls	r3, r1, #2
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5d8:	4621      	mov	r1, r4
 800b5da:	008a      	lsls	r2, r1, #2
 800b5dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b5e0:	f7f5 fb5a 	bl	8000c98 <__aeabi_uldivmod>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4b60      	ldr	r3, [pc, #384]	@ (800b76c <UART_SetConfig+0x4e4>)
 800b5ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ee:	095b      	lsrs	r3, r3, #5
 800b5f0:	011c      	lsls	r4, r3, #4
 800b5f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b5fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b600:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b604:	4642      	mov	r2, r8
 800b606:	464b      	mov	r3, r9
 800b608:	1891      	adds	r1, r2, r2
 800b60a:	61b9      	str	r1, [r7, #24]
 800b60c:	415b      	adcs	r3, r3
 800b60e:	61fb      	str	r3, [r7, #28]
 800b610:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b614:	4641      	mov	r1, r8
 800b616:	1851      	adds	r1, r2, r1
 800b618:	6139      	str	r1, [r7, #16]
 800b61a:	4649      	mov	r1, r9
 800b61c:	414b      	adcs	r3, r1
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	f04f 0300 	mov.w	r3, #0
 800b628:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b62c:	4659      	mov	r1, fp
 800b62e:	00cb      	lsls	r3, r1, #3
 800b630:	4651      	mov	r1, sl
 800b632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b636:	4651      	mov	r1, sl
 800b638:	00ca      	lsls	r2, r1, #3
 800b63a:	4610      	mov	r0, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	4603      	mov	r3, r0
 800b640:	4642      	mov	r2, r8
 800b642:	189b      	adds	r3, r3, r2
 800b644:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b648:	464b      	mov	r3, r9
 800b64a:	460a      	mov	r2, r1
 800b64c:	eb42 0303 	adc.w	r3, r2, r3
 800b650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b65e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	f04f 0300 	mov.w	r3, #0
 800b668:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b66c:	4649      	mov	r1, r9
 800b66e:	008b      	lsls	r3, r1, #2
 800b670:	4641      	mov	r1, r8
 800b672:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b676:	4641      	mov	r1, r8
 800b678:	008a      	lsls	r2, r1, #2
 800b67a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b67e:	f7f5 fb0b 	bl	8000c98 <__aeabi_uldivmod>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4611      	mov	r1, r2
 800b688:	4b38      	ldr	r3, [pc, #224]	@ (800b76c <UART_SetConfig+0x4e4>)
 800b68a:	fba3 2301 	umull	r2, r3, r3, r1
 800b68e:	095b      	lsrs	r3, r3, #5
 800b690:	2264      	movs	r2, #100	@ 0x64
 800b692:	fb02 f303 	mul.w	r3, r2, r3
 800b696:	1acb      	subs	r3, r1, r3
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	3332      	adds	r3, #50	@ 0x32
 800b69c:	4a33      	ldr	r2, [pc, #204]	@ (800b76c <UART_SetConfig+0x4e4>)
 800b69e:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a2:	095b      	lsrs	r3, r3, #5
 800b6a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6a8:	441c      	add	r4, r3
 800b6aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b6b2:	677a      	str	r2, [r7, #116]	@ 0x74
 800b6b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	1891      	adds	r1, r2, r2
 800b6be:	60b9      	str	r1, [r7, #8]
 800b6c0:	415b      	adcs	r3, r3
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b6c8:	4641      	mov	r1, r8
 800b6ca:	1851      	adds	r1, r2, r1
 800b6cc:	6039      	str	r1, [r7, #0]
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	414b      	adcs	r3, r1
 800b6d2:	607b      	str	r3, [r7, #4]
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6e0:	4659      	mov	r1, fp
 800b6e2:	00cb      	lsls	r3, r1, #3
 800b6e4:	4651      	mov	r1, sl
 800b6e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6ea:	4651      	mov	r1, sl
 800b6ec:	00ca      	lsls	r2, r1, #3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	4642      	mov	r2, r8
 800b6f6:	189b      	adds	r3, r3, r2
 800b6f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	460a      	mov	r2, r1
 800b6fe:	eb42 0303 	adc.w	r3, r2, r3
 800b702:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b70e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b710:	f04f 0200 	mov.w	r2, #0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b71c:	4649      	mov	r1, r9
 800b71e:	008b      	lsls	r3, r1, #2
 800b720:	4641      	mov	r1, r8
 800b722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b726:	4641      	mov	r1, r8
 800b728:	008a      	lsls	r2, r1, #2
 800b72a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b72e:	f7f5 fab3 	bl	8000c98 <__aeabi_uldivmod>
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <UART_SetConfig+0x4e4>)
 800b738:	fba3 1302 	umull	r1, r3, r3, r2
 800b73c:	095b      	lsrs	r3, r3, #5
 800b73e:	2164      	movs	r1, #100	@ 0x64
 800b740:	fb01 f303 	mul.w	r3, r1, r3
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	011b      	lsls	r3, r3, #4
 800b748:	3332      	adds	r3, #50	@ 0x32
 800b74a:	4a08      	ldr	r2, [pc, #32]	@ (800b76c <UART_SetConfig+0x4e4>)
 800b74c:	fba2 2303 	umull	r2, r3, r2, r3
 800b750:	095b      	lsrs	r3, r3, #5
 800b752:	f003 020f 	and.w	r2, r3, #15
 800b756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4422      	add	r2, r4
 800b75e:	609a      	str	r2, [r3, #8]
}
 800b760:	bf00      	nop
 800b762:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b766:	46bd      	mov	sp, r7
 800b768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b76c:	51eb851f 	.word	0x51eb851f

0800b770 <__cvt>:
 800b770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	ec57 6b10 	vmov	r6, r7, d0
 800b778:	2f00      	cmp	r7, #0
 800b77a:	460c      	mov	r4, r1
 800b77c:	4619      	mov	r1, r3
 800b77e:	463b      	mov	r3, r7
 800b780:	bfbb      	ittet	lt
 800b782:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b786:	461f      	movlt	r7, r3
 800b788:	2300      	movge	r3, #0
 800b78a:	232d      	movlt	r3, #45	@ 0x2d
 800b78c:	700b      	strb	r3, [r1, #0]
 800b78e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b790:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b794:	4691      	mov	r9, r2
 800b796:	f023 0820 	bic.w	r8, r3, #32
 800b79a:	bfbc      	itt	lt
 800b79c:	4632      	movlt	r2, r6
 800b79e:	4616      	movlt	r6, r2
 800b7a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b7a4:	d005      	beq.n	800b7b2 <__cvt+0x42>
 800b7a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b7aa:	d100      	bne.n	800b7ae <__cvt+0x3e>
 800b7ac:	3401      	adds	r4, #1
 800b7ae:	2102      	movs	r1, #2
 800b7b0:	e000      	b.n	800b7b4 <__cvt+0x44>
 800b7b2:	2103      	movs	r1, #3
 800b7b4:	ab03      	add	r3, sp, #12
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	ab02      	add	r3, sp, #8
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	ec47 6b10 	vmov	d0, r6, r7
 800b7c0:	4653      	mov	r3, sl
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	f001 f95c 	bl	800ca80 <_dtoa_r>
 800b7c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	d119      	bne.n	800b804 <__cvt+0x94>
 800b7d0:	f019 0f01 	tst.w	r9, #1
 800b7d4:	d00e      	beq.n	800b7f4 <__cvt+0x84>
 800b7d6:	eb00 0904 	add.w	r9, r0, r4
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2300      	movs	r3, #0
 800b7de:	4630      	mov	r0, r6
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	f7f5 f979 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7e6:	b108      	cbz	r0, 800b7ec <__cvt+0x7c>
 800b7e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7ec:	2230      	movs	r2, #48	@ 0x30
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	454b      	cmp	r3, r9
 800b7f2:	d31e      	bcc.n	800b832 <__cvt+0xc2>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7f8:	1b5b      	subs	r3, r3, r5
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	b004      	add	sp, #16
 800b800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b804:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b808:	eb00 0904 	add.w	r9, r0, r4
 800b80c:	d1e5      	bne.n	800b7da <__cvt+0x6a>
 800b80e:	7803      	ldrb	r3, [r0, #0]
 800b810:	2b30      	cmp	r3, #48	@ 0x30
 800b812:	d10a      	bne.n	800b82a <__cvt+0xba>
 800b814:	2200      	movs	r2, #0
 800b816:	2300      	movs	r3, #0
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f5 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b820:	b918      	cbnz	r0, 800b82a <__cvt+0xba>
 800b822:	f1c4 0401 	rsb	r4, r4, #1
 800b826:	f8ca 4000 	str.w	r4, [sl]
 800b82a:	f8da 3000 	ldr.w	r3, [sl]
 800b82e:	4499      	add	r9, r3
 800b830:	e7d3      	b.n	800b7da <__cvt+0x6a>
 800b832:	1c59      	adds	r1, r3, #1
 800b834:	9103      	str	r1, [sp, #12]
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	e7d9      	b.n	800b7ee <__cvt+0x7e>

0800b83a <__exponent>:
 800b83a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b83c:	2900      	cmp	r1, #0
 800b83e:	bfba      	itte	lt
 800b840:	4249      	neglt	r1, r1
 800b842:	232d      	movlt	r3, #45	@ 0x2d
 800b844:	232b      	movge	r3, #43	@ 0x2b
 800b846:	2909      	cmp	r1, #9
 800b848:	7002      	strb	r2, [r0, #0]
 800b84a:	7043      	strb	r3, [r0, #1]
 800b84c:	dd29      	ble.n	800b8a2 <__exponent+0x68>
 800b84e:	f10d 0307 	add.w	r3, sp, #7
 800b852:	461d      	mov	r5, r3
 800b854:	270a      	movs	r7, #10
 800b856:	461a      	mov	r2, r3
 800b858:	fbb1 f6f7 	udiv	r6, r1, r7
 800b85c:	fb07 1416 	mls	r4, r7, r6, r1
 800b860:	3430      	adds	r4, #48	@ 0x30
 800b862:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b866:	460c      	mov	r4, r1
 800b868:	2c63      	cmp	r4, #99	@ 0x63
 800b86a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b86e:	4631      	mov	r1, r6
 800b870:	dcf1      	bgt.n	800b856 <__exponent+0x1c>
 800b872:	3130      	adds	r1, #48	@ 0x30
 800b874:	1e94      	subs	r4, r2, #2
 800b876:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b87a:	1c41      	adds	r1, r0, #1
 800b87c:	4623      	mov	r3, r4
 800b87e:	42ab      	cmp	r3, r5
 800b880:	d30a      	bcc.n	800b898 <__exponent+0x5e>
 800b882:	f10d 0309 	add.w	r3, sp, #9
 800b886:	1a9b      	subs	r3, r3, r2
 800b888:	42ac      	cmp	r4, r5
 800b88a:	bf88      	it	hi
 800b88c:	2300      	movhi	r3, #0
 800b88e:	3302      	adds	r3, #2
 800b890:	4403      	add	r3, r0
 800b892:	1a18      	subs	r0, r3, r0
 800b894:	b003      	add	sp, #12
 800b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b898:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b89c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b8a0:	e7ed      	b.n	800b87e <__exponent+0x44>
 800b8a2:	2330      	movs	r3, #48	@ 0x30
 800b8a4:	3130      	adds	r1, #48	@ 0x30
 800b8a6:	7083      	strb	r3, [r0, #2]
 800b8a8:	70c1      	strb	r1, [r0, #3]
 800b8aa:	1d03      	adds	r3, r0, #4
 800b8ac:	e7f1      	b.n	800b892 <__exponent+0x58>
	...

0800b8b0 <_printf_float>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	b08d      	sub	sp, #52	@ 0x34
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b8bc:	4616      	mov	r6, r2
 800b8be:	461f      	mov	r7, r3
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	f000 ffc1 	bl	800c848 <_localeconv_r>
 800b8c6:	6803      	ldr	r3, [r0, #0]
 800b8c8:	9304      	str	r3, [sp, #16]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f4 fcd8 	bl	8000280 <strlen>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8d8:	9005      	str	r0, [sp, #20]
 800b8da:	3307      	adds	r3, #7
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	f103 0208 	add.w	r2, r3, #8
 800b8e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b8e8:	f8d4 b000 	ldr.w	fp, [r4]
 800b8ec:	f8c8 2000 	str.w	r2, [r8]
 800b8f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b8f8:	9307      	str	r3, [sp, #28]
 800b8fa:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b906:	4b9c      	ldr	r3, [pc, #624]	@ (800bb78 <_printf_float+0x2c8>)
 800b908:	f04f 32ff 	mov.w	r2, #4294967295
 800b90c:	f7f5 f916 	bl	8000b3c <__aeabi_dcmpun>
 800b910:	bb70      	cbnz	r0, 800b970 <_printf_float+0xc0>
 800b912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b916:	4b98      	ldr	r3, [pc, #608]	@ (800bb78 <_printf_float+0x2c8>)
 800b918:	f04f 32ff 	mov.w	r2, #4294967295
 800b91c:	f7f5 f8f0 	bl	8000b00 <__aeabi_dcmple>
 800b920:	bb30      	cbnz	r0, 800b970 <_printf_float+0xc0>
 800b922:	2200      	movs	r2, #0
 800b924:	2300      	movs	r3, #0
 800b926:	4640      	mov	r0, r8
 800b928:	4649      	mov	r1, r9
 800b92a:	f7f5 f8df 	bl	8000aec <__aeabi_dcmplt>
 800b92e:	b110      	cbz	r0, 800b936 <_printf_float+0x86>
 800b930:	232d      	movs	r3, #45	@ 0x2d
 800b932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b936:	4a91      	ldr	r2, [pc, #580]	@ (800bb7c <_printf_float+0x2cc>)
 800b938:	4b91      	ldr	r3, [pc, #580]	@ (800bb80 <_printf_float+0x2d0>)
 800b93a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b93e:	bf94      	ite	ls
 800b940:	4690      	movls	r8, r2
 800b942:	4698      	movhi	r8, r3
 800b944:	2303      	movs	r3, #3
 800b946:	6123      	str	r3, [r4, #16]
 800b948:	f02b 0304 	bic.w	r3, fp, #4
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	f04f 0900 	mov.w	r9, #0
 800b952:	9700      	str	r7, [sp, #0]
 800b954:	4633      	mov	r3, r6
 800b956:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b958:	4621      	mov	r1, r4
 800b95a:	4628      	mov	r0, r5
 800b95c:	f000 f9d2 	bl	800bd04 <_printf_common>
 800b960:	3001      	adds	r0, #1
 800b962:	f040 808d 	bne.w	800ba80 <_printf_float+0x1d0>
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	b00d      	add	sp, #52	@ 0x34
 800b96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b970:	4642      	mov	r2, r8
 800b972:	464b      	mov	r3, r9
 800b974:	4640      	mov	r0, r8
 800b976:	4649      	mov	r1, r9
 800b978:	f7f5 f8e0 	bl	8000b3c <__aeabi_dcmpun>
 800b97c:	b140      	cbz	r0, 800b990 <_printf_float+0xe0>
 800b97e:	464b      	mov	r3, r9
 800b980:	2b00      	cmp	r3, #0
 800b982:	bfbc      	itt	lt
 800b984:	232d      	movlt	r3, #45	@ 0x2d
 800b986:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b98a:	4a7e      	ldr	r2, [pc, #504]	@ (800bb84 <_printf_float+0x2d4>)
 800b98c:	4b7e      	ldr	r3, [pc, #504]	@ (800bb88 <_printf_float+0x2d8>)
 800b98e:	e7d4      	b.n	800b93a <_printf_float+0x8a>
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b996:	9206      	str	r2, [sp, #24]
 800b998:	1c5a      	adds	r2, r3, #1
 800b99a:	d13b      	bne.n	800ba14 <_printf_float+0x164>
 800b99c:	2306      	movs	r3, #6
 800b99e:	6063      	str	r3, [r4, #4]
 800b9a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	6022      	str	r2, [r4, #0]
 800b9a8:	9303      	str	r3, [sp, #12]
 800b9aa:	ab0a      	add	r3, sp, #40	@ 0x28
 800b9ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b9b0:	ab09      	add	r3, sp, #36	@ 0x24
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	ec49 8b10 	vmov	d0, r8, r9
 800b9ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f7ff fed6 	bl	800b770 <__cvt>
 800b9c4:	9b06      	ldr	r3, [sp, #24]
 800b9c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9c8:	2b47      	cmp	r3, #71	@ 0x47
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	d129      	bne.n	800ba22 <_printf_float+0x172>
 800b9ce:	1cc8      	adds	r0, r1, #3
 800b9d0:	db02      	blt.n	800b9d8 <_printf_float+0x128>
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	4299      	cmp	r1, r3
 800b9d6:	dd41      	ble.n	800ba5c <_printf_float+0x1ac>
 800b9d8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b9dc:	fa5f fa8a 	uxtb.w	sl, sl
 800b9e0:	3901      	subs	r1, #1
 800b9e2:	4652      	mov	r2, sl
 800b9e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b9e8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b9ea:	f7ff ff26 	bl	800b83a <__exponent>
 800b9ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b9f0:	1813      	adds	r3, r2, r0
 800b9f2:	2a01      	cmp	r2, #1
 800b9f4:	4681      	mov	r9, r0
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	dc02      	bgt.n	800ba00 <_printf_float+0x150>
 800b9fa:	6822      	ldr	r2, [r4, #0]
 800b9fc:	07d2      	lsls	r2, r2, #31
 800b9fe:	d501      	bpl.n	800ba04 <_printf_float+0x154>
 800ba00:	3301      	adds	r3, #1
 800ba02:	6123      	str	r3, [r4, #16]
 800ba04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0a2      	beq.n	800b952 <_printf_float+0xa2>
 800ba0c:	232d      	movs	r3, #45	@ 0x2d
 800ba0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba12:	e79e      	b.n	800b952 <_printf_float+0xa2>
 800ba14:	9a06      	ldr	r2, [sp, #24]
 800ba16:	2a47      	cmp	r2, #71	@ 0x47
 800ba18:	d1c2      	bne.n	800b9a0 <_printf_float+0xf0>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1c0      	bne.n	800b9a0 <_printf_float+0xf0>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e7bd      	b.n	800b99e <_printf_float+0xee>
 800ba22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba26:	d9db      	bls.n	800b9e0 <_printf_float+0x130>
 800ba28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ba2c:	d118      	bne.n	800ba60 <_printf_float+0x1b0>
 800ba2e:	2900      	cmp	r1, #0
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	dd0b      	ble.n	800ba4c <_printf_float+0x19c>
 800ba34:	6121      	str	r1, [r4, #16]
 800ba36:	b913      	cbnz	r3, 800ba3e <_printf_float+0x18e>
 800ba38:	6822      	ldr	r2, [r4, #0]
 800ba3a:	07d0      	lsls	r0, r2, #31
 800ba3c:	d502      	bpl.n	800ba44 <_printf_float+0x194>
 800ba3e:	3301      	adds	r3, #1
 800ba40:	440b      	add	r3, r1
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ba46:	f04f 0900 	mov.w	r9, #0
 800ba4a:	e7db      	b.n	800ba04 <_printf_float+0x154>
 800ba4c:	b913      	cbnz	r3, 800ba54 <_printf_float+0x1a4>
 800ba4e:	6822      	ldr	r2, [r4, #0]
 800ba50:	07d2      	lsls	r2, r2, #31
 800ba52:	d501      	bpl.n	800ba58 <_printf_float+0x1a8>
 800ba54:	3302      	adds	r3, #2
 800ba56:	e7f4      	b.n	800ba42 <_printf_float+0x192>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f2      	b.n	800ba42 <_printf_float+0x192>
 800ba5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ba60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba62:	4299      	cmp	r1, r3
 800ba64:	db05      	blt.n	800ba72 <_printf_float+0x1c2>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	6121      	str	r1, [r4, #16]
 800ba6a:	07d8      	lsls	r0, r3, #31
 800ba6c:	d5ea      	bpl.n	800ba44 <_printf_float+0x194>
 800ba6e:	1c4b      	adds	r3, r1, #1
 800ba70:	e7e7      	b.n	800ba42 <_printf_float+0x192>
 800ba72:	2900      	cmp	r1, #0
 800ba74:	bfd4      	ite	le
 800ba76:	f1c1 0202 	rsble	r2, r1, #2
 800ba7a:	2201      	movgt	r2, #1
 800ba7c:	4413      	add	r3, r2
 800ba7e:	e7e0      	b.n	800ba42 <_printf_float+0x192>
 800ba80:	6823      	ldr	r3, [r4, #0]
 800ba82:	055a      	lsls	r2, r3, #21
 800ba84:	d407      	bmi.n	800ba96 <_printf_float+0x1e6>
 800ba86:	6923      	ldr	r3, [r4, #16]
 800ba88:	4642      	mov	r2, r8
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	47b8      	blx	r7
 800ba90:	3001      	adds	r0, #1
 800ba92:	d12b      	bne.n	800baec <_printf_float+0x23c>
 800ba94:	e767      	b.n	800b966 <_printf_float+0xb6>
 800ba96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ba9a:	f240 80dd 	bls.w	800bc58 <_printf_float+0x3a8>
 800ba9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800baa2:	2200      	movs	r2, #0
 800baa4:	2300      	movs	r3, #0
 800baa6:	f7f5 f817 	bl	8000ad8 <__aeabi_dcmpeq>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d033      	beq.n	800bb16 <_printf_float+0x266>
 800baae:	4a37      	ldr	r2, [pc, #220]	@ (800bb8c <_printf_float+0x2dc>)
 800bab0:	2301      	movs	r3, #1
 800bab2:	4631      	mov	r1, r6
 800bab4:	4628      	mov	r0, r5
 800bab6:	47b8      	blx	r7
 800bab8:	3001      	adds	r0, #1
 800baba:	f43f af54 	beq.w	800b966 <_printf_float+0xb6>
 800babe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bac2:	4543      	cmp	r3, r8
 800bac4:	db02      	blt.n	800bacc <_printf_float+0x21c>
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	07d8      	lsls	r0, r3, #31
 800baca:	d50f      	bpl.n	800baec <_printf_float+0x23c>
 800bacc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	f43f af45 	beq.w	800b966 <_printf_float+0xb6>
 800badc:	f04f 0900 	mov.w	r9, #0
 800bae0:	f108 38ff 	add.w	r8, r8, #4294967295
 800bae4:	f104 0a1a 	add.w	sl, r4, #26
 800bae8:	45c8      	cmp	r8, r9
 800baea:	dc09      	bgt.n	800bb00 <_printf_float+0x250>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	079b      	lsls	r3, r3, #30
 800baf0:	f100 8103 	bmi.w	800bcfa <_printf_float+0x44a>
 800baf4:	68e0      	ldr	r0, [r4, #12]
 800baf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baf8:	4298      	cmp	r0, r3
 800bafa:	bfb8      	it	lt
 800bafc:	4618      	movlt	r0, r3
 800bafe:	e734      	b.n	800b96a <_printf_float+0xba>
 800bb00:	2301      	movs	r3, #1
 800bb02:	4652      	mov	r2, sl
 800bb04:	4631      	mov	r1, r6
 800bb06:	4628      	mov	r0, r5
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f43f af2b 	beq.w	800b966 <_printf_float+0xb6>
 800bb10:	f109 0901 	add.w	r9, r9, #1
 800bb14:	e7e8      	b.n	800bae8 <_printf_float+0x238>
 800bb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dc39      	bgt.n	800bb90 <_printf_float+0x2e0>
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	@ (800bb8c <_printf_float+0x2dc>)
 800bb1e:	2301      	movs	r3, #1
 800bb20:	4631      	mov	r1, r6
 800bb22:	4628      	mov	r0, r5
 800bb24:	47b8      	blx	r7
 800bb26:	3001      	adds	r0, #1
 800bb28:	f43f af1d 	beq.w	800b966 <_printf_float+0xb6>
 800bb2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bb30:	ea59 0303 	orrs.w	r3, r9, r3
 800bb34:	d102      	bne.n	800bb3c <_printf_float+0x28c>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	07d9      	lsls	r1, r3, #31
 800bb3a:	d5d7      	bpl.n	800baec <_printf_float+0x23c>
 800bb3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb40:	4631      	mov	r1, r6
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	f43f af0d 	beq.w	800b966 <_printf_float+0xb6>
 800bb4c:	f04f 0a00 	mov.w	sl, #0
 800bb50:	f104 0b1a 	add.w	fp, r4, #26
 800bb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb56:	425b      	negs	r3, r3
 800bb58:	4553      	cmp	r3, sl
 800bb5a:	dc01      	bgt.n	800bb60 <_printf_float+0x2b0>
 800bb5c:	464b      	mov	r3, r9
 800bb5e:	e793      	b.n	800ba88 <_printf_float+0x1d8>
 800bb60:	2301      	movs	r3, #1
 800bb62:	465a      	mov	r2, fp
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	f43f aefb 	beq.w	800b966 <_printf_float+0xb6>
 800bb70:	f10a 0a01 	add.w	sl, sl, #1
 800bb74:	e7ee      	b.n	800bb54 <_printf_float+0x2a4>
 800bb76:	bf00      	nop
 800bb78:	7fefffff 	.word	0x7fefffff
 800bb7c:	080103fc 	.word	0x080103fc
 800bb80:	08010400 	.word	0x08010400
 800bb84:	08010404 	.word	0x08010404
 800bb88:	08010408 	.word	0x08010408
 800bb8c:	0801040c 	.word	0x0801040c
 800bb90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb96:	4553      	cmp	r3, sl
 800bb98:	bfa8      	it	ge
 800bb9a:	4653      	movge	r3, sl
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	4699      	mov	r9, r3
 800bba0:	dc36      	bgt.n	800bc10 <_printf_float+0x360>
 800bba2:	f04f 0b00 	mov.w	fp, #0
 800bba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbaa:	f104 021a 	add.w	r2, r4, #26
 800bbae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbb0:	9306      	str	r3, [sp, #24]
 800bbb2:	eba3 0309 	sub.w	r3, r3, r9
 800bbb6:	455b      	cmp	r3, fp
 800bbb8:	dc31      	bgt.n	800bc1e <_printf_float+0x36e>
 800bbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbbc:	459a      	cmp	sl, r3
 800bbbe:	dc3a      	bgt.n	800bc36 <_printf_float+0x386>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	07da      	lsls	r2, r3, #31
 800bbc4:	d437      	bmi.n	800bc36 <_printf_float+0x386>
 800bbc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc8:	ebaa 0903 	sub.w	r9, sl, r3
 800bbcc:	9b06      	ldr	r3, [sp, #24]
 800bbce:	ebaa 0303 	sub.w	r3, sl, r3
 800bbd2:	4599      	cmp	r9, r3
 800bbd4:	bfa8      	it	ge
 800bbd6:	4699      	movge	r9, r3
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	dc33      	bgt.n	800bc46 <_printf_float+0x396>
 800bbde:	f04f 0800 	mov.w	r8, #0
 800bbe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe6:	f104 0b1a 	add.w	fp, r4, #26
 800bbea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbec:	ebaa 0303 	sub.w	r3, sl, r3
 800bbf0:	eba3 0309 	sub.w	r3, r3, r9
 800bbf4:	4543      	cmp	r3, r8
 800bbf6:	f77f af79 	ble.w	800baec <_printf_float+0x23c>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	465a      	mov	r2, fp
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f aeae 	beq.w	800b966 <_printf_float+0xb6>
 800bc0a:	f108 0801 	add.w	r8, r8, #1
 800bc0e:	e7ec      	b.n	800bbea <_printf_float+0x33a>
 800bc10:	4642      	mov	r2, r8
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b8      	blx	r7
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d1c2      	bne.n	800bba2 <_printf_float+0x2f2>
 800bc1c:	e6a3      	b.n	800b966 <_printf_float+0xb6>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	4631      	mov	r1, r6
 800bc22:	4628      	mov	r0, r5
 800bc24:	9206      	str	r2, [sp, #24]
 800bc26:	47b8      	blx	r7
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f43f ae9c 	beq.w	800b966 <_printf_float+0xb6>
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	f10b 0b01 	add.w	fp, fp, #1
 800bc34:	e7bb      	b.n	800bbae <_printf_float+0x2fe>
 800bc36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	47b8      	blx	r7
 800bc40:	3001      	adds	r0, #1
 800bc42:	d1c0      	bne.n	800bbc6 <_printf_float+0x316>
 800bc44:	e68f      	b.n	800b966 <_printf_float+0xb6>
 800bc46:	9a06      	ldr	r2, [sp, #24]
 800bc48:	464b      	mov	r3, r9
 800bc4a:	4442      	add	r2, r8
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	d1c3      	bne.n	800bbde <_printf_float+0x32e>
 800bc56:	e686      	b.n	800b966 <_printf_float+0xb6>
 800bc58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc5c:	f1ba 0f01 	cmp.w	sl, #1
 800bc60:	dc01      	bgt.n	800bc66 <_printf_float+0x3b6>
 800bc62:	07db      	lsls	r3, r3, #31
 800bc64:	d536      	bpl.n	800bcd4 <_printf_float+0x424>
 800bc66:	2301      	movs	r3, #1
 800bc68:	4642      	mov	r2, r8
 800bc6a:	4631      	mov	r1, r6
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b8      	blx	r7
 800bc70:	3001      	adds	r0, #1
 800bc72:	f43f ae78 	beq.w	800b966 <_printf_float+0xb6>
 800bc76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	47b8      	blx	r7
 800bc80:	3001      	adds	r0, #1
 800bc82:	f43f ae70 	beq.w	800b966 <_printf_float+0xb6>
 800bc86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc92:	f7f4 ff21 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc96:	b9c0      	cbnz	r0, 800bcca <_printf_float+0x41a>
 800bc98:	4653      	mov	r3, sl
 800bc9a:	f108 0201 	add.w	r2, r8, #1
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b8      	blx	r7
 800bca4:	3001      	adds	r0, #1
 800bca6:	d10c      	bne.n	800bcc2 <_printf_float+0x412>
 800bca8:	e65d      	b.n	800b966 <_printf_float+0xb6>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	465a      	mov	r2, fp
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f ae56 	beq.w	800b966 <_printf_float+0xb6>
 800bcba:	f108 0801 	add.w	r8, r8, #1
 800bcbe:	45d0      	cmp	r8, sl
 800bcc0:	dbf3      	blt.n	800bcaa <_printf_float+0x3fa>
 800bcc2:	464b      	mov	r3, r9
 800bcc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bcc8:	e6df      	b.n	800ba8a <_printf_float+0x1da>
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	f104 0b1a 	add.w	fp, r4, #26
 800bcd2:	e7f4      	b.n	800bcbe <_printf_float+0x40e>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	4642      	mov	r2, r8
 800bcd8:	e7e1      	b.n	800bc9e <_printf_float+0x3ee>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	464a      	mov	r2, r9
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	f43f ae3e 	beq.w	800b966 <_printf_float+0xb6>
 800bcea:	f108 0801 	add.w	r8, r8, #1
 800bcee:	68e3      	ldr	r3, [r4, #12]
 800bcf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bcf2:	1a5b      	subs	r3, r3, r1
 800bcf4:	4543      	cmp	r3, r8
 800bcf6:	dcf0      	bgt.n	800bcda <_printf_float+0x42a>
 800bcf8:	e6fc      	b.n	800baf4 <_printf_float+0x244>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	f104 0919 	add.w	r9, r4, #25
 800bd02:	e7f4      	b.n	800bcee <_printf_float+0x43e>

0800bd04 <_printf_common>:
 800bd04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd08:	4616      	mov	r6, r2
 800bd0a:	4698      	mov	r8, r3
 800bd0c:	688a      	ldr	r2, [r1, #8]
 800bd0e:	690b      	ldr	r3, [r1, #16]
 800bd10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd14:	4293      	cmp	r3, r2
 800bd16:	bfb8      	it	lt
 800bd18:	4613      	movlt	r3, r2
 800bd1a:	6033      	str	r3, [r6, #0]
 800bd1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd20:	4607      	mov	r7, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	b10a      	cbz	r2, 800bd2a <_printf_common+0x26>
 800bd26:	3301      	adds	r3, #1
 800bd28:	6033      	str	r3, [r6, #0]
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	0699      	lsls	r1, r3, #26
 800bd2e:	bf42      	ittt	mi
 800bd30:	6833      	ldrmi	r3, [r6, #0]
 800bd32:	3302      	addmi	r3, #2
 800bd34:	6033      	strmi	r3, [r6, #0]
 800bd36:	6825      	ldr	r5, [r4, #0]
 800bd38:	f015 0506 	ands.w	r5, r5, #6
 800bd3c:	d106      	bne.n	800bd4c <_printf_common+0x48>
 800bd3e:	f104 0a19 	add.w	sl, r4, #25
 800bd42:	68e3      	ldr	r3, [r4, #12]
 800bd44:	6832      	ldr	r2, [r6, #0]
 800bd46:	1a9b      	subs	r3, r3, r2
 800bd48:	42ab      	cmp	r3, r5
 800bd4a:	dc26      	bgt.n	800bd9a <_printf_common+0x96>
 800bd4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bd50:	6822      	ldr	r2, [r4, #0]
 800bd52:	3b00      	subs	r3, #0
 800bd54:	bf18      	it	ne
 800bd56:	2301      	movne	r3, #1
 800bd58:	0692      	lsls	r2, r2, #26
 800bd5a:	d42b      	bmi.n	800bdb4 <_printf_common+0xb0>
 800bd5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bd60:	4641      	mov	r1, r8
 800bd62:	4638      	mov	r0, r7
 800bd64:	47c8      	blx	r9
 800bd66:	3001      	adds	r0, #1
 800bd68:	d01e      	beq.n	800bda8 <_printf_common+0xa4>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	6922      	ldr	r2, [r4, #16]
 800bd6e:	f003 0306 	and.w	r3, r3, #6
 800bd72:	2b04      	cmp	r3, #4
 800bd74:	bf02      	ittt	eq
 800bd76:	68e5      	ldreq	r5, [r4, #12]
 800bd78:	6833      	ldreq	r3, [r6, #0]
 800bd7a:	1aed      	subeq	r5, r5, r3
 800bd7c:	68a3      	ldr	r3, [r4, #8]
 800bd7e:	bf0c      	ite	eq
 800bd80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd84:	2500      	movne	r5, #0
 800bd86:	4293      	cmp	r3, r2
 800bd88:	bfc4      	itt	gt
 800bd8a:	1a9b      	subgt	r3, r3, r2
 800bd8c:	18ed      	addgt	r5, r5, r3
 800bd8e:	2600      	movs	r6, #0
 800bd90:	341a      	adds	r4, #26
 800bd92:	42b5      	cmp	r5, r6
 800bd94:	d11a      	bne.n	800bdcc <_printf_common+0xc8>
 800bd96:	2000      	movs	r0, #0
 800bd98:	e008      	b.n	800bdac <_printf_common+0xa8>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4652      	mov	r2, sl
 800bd9e:	4641      	mov	r1, r8
 800bda0:	4638      	mov	r0, r7
 800bda2:	47c8      	blx	r9
 800bda4:	3001      	adds	r0, #1
 800bda6:	d103      	bne.n	800bdb0 <_printf_common+0xac>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb0:	3501      	adds	r5, #1
 800bdb2:	e7c6      	b.n	800bd42 <_printf_common+0x3e>
 800bdb4:	18e1      	adds	r1, r4, r3
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	2030      	movs	r0, #48	@ 0x30
 800bdba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bdbe:	4422      	add	r2, r4
 800bdc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bdc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bdc8:	3302      	adds	r3, #2
 800bdca:	e7c7      	b.n	800bd5c <_printf_common+0x58>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	4622      	mov	r2, r4
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	47c8      	blx	r9
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d0e6      	beq.n	800bda8 <_printf_common+0xa4>
 800bdda:	3601      	adds	r6, #1
 800bddc:	e7d9      	b.n	800bd92 <_printf_common+0x8e>
	...

0800bde0 <_printf_i>:
 800bde0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde4:	7e0f      	ldrb	r7, [r1, #24]
 800bde6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bde8:	2f78      	cmp	r7, #120	@ 0x78
 800bdea:	4691      	mov	r9, r2
 800bdec:	4680      	mov	r8, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	469a      	mov	sl, r3
 800bdf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bdf6:	d807      	bhi.n	800be08 <_printf_i+0x28>
 800bdf8:	2f62      	cmp	r7, #98	@ 0x62
 800bdfa:	d80a      	bhi.n	800be12 <_printf_i+0x32>
 800bdfc:	2f00      	cmp	r7, #0
 800bdfe:	f000 80d2 	beq.w	800bfa6 <_printf_i+0x1c6>
 800be02:	2f58      	cmp	r7, #88	@ 0x58
 800be04:	f000 80b9 	beq.w	800bf7a <_printf_i+0x19a>
 800be08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be10:	e03a      	b.n	800be88 <_printf_i+0xa8>
 800be12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be16:	2b15      	cmp	r3, #21
 800be18:	d8f6      	bhi.n	800be08 <_printf_i+0x28>
 800be1a:	a101      	add	r1, pc, #4	@ (adr r1, 800be20 <_printf_i+0x40>)
 800be1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be20:	0800be79 	.word	0x0800be79
 800be24:	0800be8d 	.word	0x0800be8d
 800be28:	0800be09 	.word	0x0800be09
 800be2c:	0800be09 	.word	0x0800be09
 800be30:	0800be09 	.word	0x0800be09
 800be34:	0800be09 	.word	0x0800be09
 800be38:	0800be8d 	.word	0x0800be8d
 800be3c:	0800be09 	.word	0x0800be09
 800be40:	0800be09 	.word	0x0800be09
 800be44:	0800be09 	.word	0x0800be09
 800be48:	0800be09 	.word	0x0800be09
 800be4c:	0800bf8d 	.word	0x0800bf8d
 800be50:	0800beb7 	.word	0x0800beb7
 800be54:	0800bf47 	.word	0x0800bf47
 800be58:	0800be09 	.word	0x0800be09
 800be5c:	0800be09 	.word	0x0800be09
 800be60:	0800bfaf 	.word	0x0800bfaf
 800be64:	0800be09 	.word	0x0800be09
 800be68:	0800beb7 	.word	0x0800beb7
 800be6c:	0800be09 	.word	0x0800be09
 800be70:	0800be09 	.word	0x0800be09
 800be74:	0800bf4f 	.word	0x0800bf4f
 800be78:	6833      	ldr	r3, [r6, #0]
 800be7a:	1d1a      	adds	r2, r3, #4
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6032      	str	r2, [r6, #0]
 800be80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be88:	2301      	movs	r3, #1
 800be8a:	e09d      	b.n	800bfc8 <_printf_i+0x1e8>
 800be8c:	6833      	ldr	r3, [r6, #0]
 800be8e:	6820      	ldr	r0, [r4, #0]
 800be90:	1d19      	adds	r1, r3, #4
 800be92:	6031      	str	r1, [r6, #0]
 800be94:	0606      	lsls	r6, r0, #24
 800be96:	d501      	bpl.n	800be9c <_printf_i+0xbc>
 800be98:	681d      	ldr	r5, [r3, #0]
 800be9a:	e003      	b.n	800bea4 <_printf_i+0xc4>
 800be9c:	0645      	lsls	r5, r0, #25
 800be9e:	d5fb      	bpl.n	800be98 <_printf_i+0xb8>
 800bea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bea4:	2d00      	cmp	r5, #0
 800bea6:	da03      	bge.n	800beb0 <_printf_i+0xd0>
 800bea8:	232d      	movs	r3, #45	@ 0x2d
 800beaa:	426d      	negs	r5, r5
 800beac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beb0:	4859      	ldr	r0, [pc, #356]	@ (800c018 <_printf_i+0x238>)
 800beb2:	230a      	movs	r3, #10
 800beb4:	e011      	b.n	800beda <_printf_i+0xfa>
 800beb6:	6821      	ldr	r1, [r4, #0]
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	0608      	lsls	r0, r1, #24
 800bebc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bec0:	d402      	bmi.n	800bec8 <_printf_i+0xe8>
 800bec2:	0649      	lsls	r1, r1, #25
 800bec4:	bf48      	it	mi
 800bec6:	b2ad      	uxthmi	r5, r5
 800bec8:	2f6f      	cmp	r7, #111	@ 0x6f
 800beca:	4853      	ldr	r0, [pc, #332]	@ (800c018 <_printf_i+0x238>)
 800becc:	6033      	str	r3, [r6, #0]
 800bece:	bf14      	ite	ne
 800bed0:	230a      	movne	r3, #10
 800bed2:	2308      	moveq	r3, #8
 800bed4:	2100      	movs	r1, #0
 800bed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800beda:	6866      	ldr	r6, [r4, #4]
 800bedc:	60a6      	str	r6, [r4, #8]
 800bede:	2e00      	cmp	r6, #0
 800bee0:	bfa2      	ittt	ge
 800bee2:	6821      	ldrge	r1, [r4, #0]
 800bee4:	f021 0104 	bicge.w	r1, r1, #4
 800bee8:	6021      	strge	r1, [r4, #0]
 800beea:	b90d      	cbnz	r5, 800bef0 <_printf_i+0x110>
 800beec:	2e00      	cmp	r6, #0
 800beee:	d04b      	beq.n	800bf88 <_printf_i+0x1a8>
 800bef0:	4616      	mov	r6, r2
 800bef2:	fbb5 f1f3 	udiv	r1, r5, r3
 800bef6:	fb03 5711 	mls	r7, r3, r1, r5
 800befa:	5dc7      	ldrb	r7, [r0, r7]
 800befc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf00:	462f      	mov	r7, r5
 800bf02:	42bb      	cmp	r3, r7
 800bf04:	460d      	mov	r5, r1
 800bf06:	d9f4      	bls.n	800bef2 <_printf_i+0x112>
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d10b      	bne.n	800bf24 <_printf_i+0x144>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	07df      	lsls	r7, r3, #31
 800bf10:	d508      	bpl.n	800bf24 <_printf_i+0x144>
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	6861      	ldr	r1, [r4, #4]
 800bf16:	4299      	cmp	r1, r3
 800bf18:	bfde      	ittt	le
 800bf1a:	2330      	movle	r3, #48	@ 0x30
 800bf1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf20:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf24:	1b92      	subs	r2, r2, r6
 800bf26:	6122      	str	r2, [r4, #16]
 800bf28:	f8cd a000 	str.w	sl, [sp]
 800bf2c:	464b      	mov	r3, r9
 800bf2e:	aa03      	add	r2, sp, #12
 800bf30:	4621      	mov	r1, r4
 800bf32:	4640      	mov	r0, r8
 800bf34:	f7ff fee6 	bl	800bd04 <_printf_common>
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d14a      	bne.n	800bfd2 <_printf_i+0x1f2>
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf40:	b004      	add	sp, #16
 800bf42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	f043 0320 	orr.w	r3, r3, #32
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	4833      	ldr	r0, [pc, #204]	@ (800c01c <_printf_i+0x23c>)
 800bf50:	2778      	movs	r7, #120	@ 0x78
 800bf52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	6831      	ldr	r1, [r6, #0]
 800bf5a:	061f      	lsls	r7, r3, #24
 800bf5c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bf60:	d402      	bmi.n	800bf68 <_printf_i+0x188>
 800bf62:	065f      	lsls	r7, r3, #25
 800bf64:	bf48      	it	mi
 800bf66:	b2ad      	uxthmi	r5, r5
 800bf68:	6031      	str	r1, [r6, #0]
 800bf6a:	07d9      	lsls	r1, r3, #31
 800bf6c:	bf44      	itt	mi
 800bf6e:	f043 0320 	orrmi.w	r3, r3, #32
 800bf72:	6023      	strmi	r3, [r4, #0]
 800bf74:	b11d      	cbz	r5, 800bf7e <_printf_i+0x19e>
 800bf76:	2310      	movs	r3, #16
 800bf78:	e7ac      	b.n	800bed4 <_printf_i+0xf4>
 800bf7a:	4827      	ldr	r0, [pc, #156]	@ (800c018 <_printf_i+0x238>)
 800bf7c:	e7e9      	b.n	800bf52 <_printf_i+0x172>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	f023 0320 	bic.w	r3, r3, #32
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	e7f6      	b.n	800bf76 <_printf_i+0x196>
 800bf88:	4616      	mov	r6, r2
 800bf8a:	e7bd      	b.n	800bf08 <_printf_i+0x128>
 800bf8c:	6833      	ldr	r3, [r6, #0]
 800bf8e:	6825      	ldr	r5, [r4, #0]
 800bf90:	6961      	ldr	r1, [r4, #20]
 800bf92:	1d18      	adds	r0, r3, #4
 800bf94:	6030      	str	r0, [r6, #0]
 800bf96:	062e      	lsls	r6, r5, #24
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	d501      	bpl.n	800bfa0 <_printf_i+0x1c0>
 800bf9c:	6019      	str	r1, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <_printf_i+0x1c6>
 800bfa0:	0668      	lsls	r0, r5, #25
 800bfa2:	d5fb      	bpl.n	800bf9c <_printf_i+0x1bc>
 800bfa4:	8019      	strh	r1, [r3, #0]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	6123      	str	r3, [r4, #16]
 800bfaa:	4616      	mov	r6, r2
 800bfac:	e7bc      	b.n	800bf28 <_printf_i+0x148>
 800bfae:	6833      	ldr	r3, [r6, #0]
 800bfb0:	1d1a      	adds	r2, r3, #4
 800bfb2:	6032      	str	r2, [r6, #0]
 800bfb4:	681e      	ldr	r6, [r3, #0]
 800bfb6:	6862      	ldr	r2, [r4, #4]
 800bfb8:	2100      	movs	r1, #0
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f7f4 f910 	bl	80001e0 <memchr>
 800bfc0:	b108      	cbz	r0, 800bfc6 <_printf_i+0x1e6>
 800bfc2:	1b80      	subs	r0, r0, r6
 800bfc4:	6060      	str	r0, [r4, #4]
 800bfc6:	6863      	ldr	r3, [r4, #4]
 800bfc8:	6123      	str	r3, [r4, #16]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfd0:	e7aa      	b.n	800bf28 <_printf_i+0x148>
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	4640      	mov	r0, r8
 800bfda:	47d0      	blx	sl
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d0ad      	beq.n	800bf3c <_printf_i+0x15c>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	079b      	lsls	r3, r3, #30
 800bfe4:	d413      	bmi.n	800c00e <_printf_i+0x22e>
 800bfe6:	68e0      	ldr	r0, [r4, #12]
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	4298      	cmp	r0, r3
 800bfec:	bfb8      	it	lt
 800bfee:	4618      	movlt	r0, r3
 800bff0:	e7a6      	b.n	800bf40 <_printf_i+0x160>
 800bff2:	2301      	movs	r3, #1
 800bff4:	4632      	mov	r2, r6
 800bff6:	4649      	mov	r1, r9
 800bff8:	4640      	mov	r0, r8
 800bffa:	47d0      	blx	sl
 800bffc:	3001      	adds	r0, #1
 800bffe:	d09d      	beq.n	800bf3c <_printf_i+0x15c>
 800c000:	3501      	adds	r5, #1
 800c002:	68e3      	ldr	r3, [r4, #12]
 800c004:	9903      	ldr	r1, [sp, #12]
 800c006:	1a5b      	subs	r3, r3, r1
 800c008:	42ab      	cmp	r3, r5
 800c00a:	dcf2      	bgt.n	800bff2 <_printf_i+0x212>
 800c00c:	e7eb      	b.n	800bfe6 <_printf_i+0x206>
 800c00e:	2500      	movs	r5, #0
 800c010:	f104 0619 	add.w	r6, r4, #25
 800c014:	e7f5      	b.n	800c002 <_printf_i+0x222>
 800c016:	bf00      	nop
 800c018:	0801040e 	.word	0x0801040e
 800c01c:	0801041f 	.word	0x0801041f

0800c020 <_scanf_float>:
 800c020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c024:	b087      	sub	sp, #28
 800c026:	4617      	mov	r7, r2
 800c028:	9303      	str	r3, [sp, #12]
 800c02a:	688b      	ldr	r3, [r1, #8]
 800c02c:	1e5a      	subs	r2, r3, #1
 800c02e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c032:	bf81      	itttt	hi
 800c034:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c038:	eb03 0b05 	addhi.w	fp, r3, r5
 800c03c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c040:	608b      	strhi	r3, [r1, #8]
 800c042:	680b      	ldr	r3, [r1, #0]
 800c044:	460a      	mov	r2, r1
 800c046:	f04f 0500 	mov.w	r5, #0
 800c04a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c04e:	f842 3b1c 	str.w	r3, [r2], #28
 800c052:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c056:	4680      	mov	r8, r0
 800c058:	460c      	mov	r4, r1
 800c05a:	bf98      	it	ls
 800c05c:	f04f 0b00 	movls.w	fp, #0
 800c060:	9201      	str	r2, [sp, #4]
 800c062:	4616      	mov	r6, r2
 800c064:	46aa      	mov	sl, r5
 800c066:	46a9      	mov	r9, r5
 800c068:	9502      	str	r5, [sp, #8]
 800c06a:	68a2      	ldr	r2, [r4, #8]
 800c06c:	b152      	cbz	r2, 800c084 <_scanf_float+0x64>
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b4e      	cmp	r3, #78	@ 0x4e
 800c074:	d864      	bhi.n	800c140 <_scanf_float+0x120>
 800c076:	2b40      	cmp	r3, #64	@ 0x40
 800c078:	d83c      	bhi.n	800c0f4 <_scanf_float+0xd4>
 800c07a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c07e:	b2c8      	uxtb	r0, r1
 800c080:	280e      	cmp	r0, #14
 800c082:	d93a      	bls.n	800c0fa <_scanf_float+0xda>
 800c084:	f1b9 0f00 	cmp.w	r9, #0
 800c088:	d003      	beq.n	800c092 <_scanf_float+0x72>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c090:	6023      	str	r3, [r4, #0]
 800c092:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c096:	f1ba 0f01 	cmp.w	sl, #1
 800c09a:	f200 8117 	bhi.w	800c2cc <_scanf_float+0x2ac>
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	429e      	cmp	r6, r3
 800c0a2:	f200 8108 	bhi.w	800c2b6 <_scanf_float+0x296>
 800c0a6:	2001      	movs	r0, #1
 800c0a8:	b007      	add	sp, #28
 800c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c0b2:	2a0d      	cmp	r2, #13
 800c0b4:	d8e6      	bhi.n	800c084 <_scanf_float+0x64>
 800c0b6:	a101      	add	r1, pc, #4	@ (adr r1, 800c0bc <_scanf_float+0x9c>)
 800c0b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0bc:	0800c203 	.word	0x0800c203
 800c0c0:	0800c085 	.word	0x0800c085
 800c0c4:	0800c085 	.word	0x0800c085
 800c0c8:	0800c085 	.word	0x0800c085
 800c0cc:	0800c263 	.word	0x0800c263
 800c0d0:	0800c23b 	.word	0x0800c23b
 800c0d4:	0800c085 	.word	0x0800c085
 800c0d8:	0800c085 	.word	0x0800c085
 800c0dc:	0800c211 	.word	0x0800c211
 800c0e0:	0800c085 	.word	0x0800c085
 800c0e4:	0800c085 	.word	0x0800c085
 800c0e8:	0800c085 	.word	0x0800c085
 800c0ec:	0800c085 	.word	0x0800c085
 800c0f0:	0800c1c9 	.word	0x0800c1c9
 800c0f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c0f8:	e7db      	b.n	800c0b2 <_scanf_float+0x92>
 800c0fa:	290e      	cmp	r1, #14
 800c0fc:	d8c2      	bhi.n	800c084 <_scanf_float+0x64>
 800c0fe:	a001      	add	r0, pc, #4	@ (adr r0, 800c104 <_scanf_float+0xe4>)
 800c100:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c104:	0800c1b9 	.word	0x0800c1b9
 800c108:	0800c085 	.word	0x0800c085
 800c10c:	0800c1b9 	.word	0x0800c1b9
 800c110:	0800c24f 	.word	0x0800c24f
 800c114:	0800c085 	.word	0x0800c085
 800c118:	0800c161 	.word	0x0800c161
 800c11c:	0800c19f 	.word	0x0800c19f
 800c120:	0800c19f 	.word	0x0800c19f
 800c124:	0800c19f 	.word	0x0800c19f
 800c128:	0800c19f 	.word	0x0800c19f
 800c12c:	0800c19f 	.word	0x0800c19f
 800c130:	0800c19f 	.word	0x0800c19f
 800c134:	0800c19f 	.word	0x0800c19f
 800c138:	0800c19f 	.word	0x0800c19f
 800c13c:	0800c19f 	.word	0x0800c19f
 800c140:	2b6e      	cmp	r3, #110	@ 0x6e
 800c142:	d809      	bhi.n	800c158 <_scanf_float+0x138>
 800c144:	2b60      	cmp	r3, #96	@ 0x60
 800c146:	d8b2      	bhi.n	800c0ae <_scanf_float+0x8e>
 800c148:	2b54      	cmp	r3, #84	@ 0x54
 800c14a:	d07b      	beq.n	800c244 <_scanf_float+0x224>
 800c14c:	2b59      	cmp	r3, #89	@ 0x59
 800c14e:	d199      	bne.n	800c084 <_scanf_float+0x64>
 800c150:	2d07      	cmp	r5, #7
 800c152:	d197      	bne.n	800c084 <_scanf_float+0x64>
 800c154:	2508      	movs	r5, #8
 800c156:	e02c      	b.n	800c1b2 <_scanf_float+0x192>
 800c158:	2b74      	cmp	r3, #116	@ 0x74
 800c15a:	d073      	beq.n	800c244 <_scanf_float+0x224>
 800c15c:	2b79      	cmp	r3, #121	@ 0x79
 800c15e:	e7f6      	b.n	800c14e <_scanf_float+0x12e>
 800c160:	6821      	ldr	r1, [r4, #0]
 800c162:	05c8      	lsls	r0, r1, #23
 800c164:	d51b      	bpl.n	800c19e <_scanf_float+0x17e>
 800c166:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c16a:	6021      	str	r1, [r4, #0]
 800c16c:	f109 0901 	add.w	r9, r9, #1
 800c170:	f1bb 0f00 	cmp.w	fp, #0
 800c174:	d003      	beq.n	800c17e <_scanf_float+0x15e>
 800c176:	3201      	adds	r2, #1
 800c178:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c17c:	60a2      	str	r2, [r4, #8]
 800c17e:	68a3      	ldr	r3, [r4, #8]
 800c180:	3b01      	subs	r3, #1
 800c182:	60a3      	str	r3, [r4, #8]
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	3301      	adds	r3, #1
 800c188:	6123      	str	r3, [r4, #16]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	f340 8087 	ble.w	800c2a4 <_scanf_float+0x284>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	3301      	adds	r3, #1
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	e765      	b.n	800c06a <_scanf_float+0x4a>
 800c19e:	eb1a 0105 	adds.w	r1, sl, r5
 800c1a2:	f47f af6f 	bne.w	800c084 <_scanf_float+0x64>
 800c1a6:	6822      	ldr	r2, [r4, #0]
 800c1a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	460d      	mov	r5, r1
 800c1b0:	468a      	mov	sl, r1
 800c1b2:	f806 3b01 	strb.w	r3, [r6], #1
 800c1b6:	e7e2      	b.n	800c17e <_scanf_float+0x15e>
 800c1b8:	6822      	ldr	r2, [r4, #0]
 800c1ba:	0610      	lsls	r0, r2, #24
 800c1bc:	f57f af62 	bpl.w	800c084 <_scanf_float+0x64>
 800c1c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c1c4:	6022      	str	r2, [r4, #0]
 800c1c6:	e7f4      	b.n	800c1b2 <_scanf_float+0x192>
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	d10e      	bne.n	800c1ec <_scanf_float+0x1cc>
 800c1ce:	f1b9 0f00 	cmp.w	r9, #0
 800c1d2:	d10e      	bne.n	800c1f2 <_scanf_float+0x1d2>
 800c1d4:	6822      	ldr	r2, [r4, #0]
 800c1d6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c1da:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c1de:	d108      	bne.n	800c1f2 <_scanf_float+0x1d2>
 800c1e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c1e4:	6022      	str	r2, [r4, #0]
 800c1e6:	f04f 0a01 	mov.w	sl, #1
 800c1ea:	e7e2      	b.n	800c1b2 <_scanf_float+0x192>
 800c1ec:	f1ba 0f02 	cmp.w	sl, #2
 800c1f0:	d055      	beq.n	800c29e <_scanf_float+0x27e>
 800c1f2:	2d01      	cmp	r5, #1
 800c1f4:	d002      	beq.n	800c1fc <_scanf_float+0x1dc>
 800c1f6:	2d04      	cmp	r5, #4
 800c1f8:	f47f af44 	bne.w	800c084 <_scanf_float+0x64>
 800c1fc:	3501      	adds	r5, #1
 800c1fe:	b2ed      	uxtb	r5, r5
 800c200:	e7d7      	b.n	800c1b2 <_scanf_float+0x192>
 800c202:	f1ba 0f01 	cmp.w	sl, #1
 800c206:	f47f af3d 	bne.w	800c084 <_scanf_float+0x64>
 800c20a:	f04f 0a02 	mov.w	sl, #2
 800c20e:	e7d0      	b.n	800c1b2 <_scanf_float+0x192>
 800c210:	b97d      	cbnz	r5, 800c232 <_scanf_float+0x212>
 800c212:	f1b9 0f00 	cmp.w	r9, #0
 800c216:	f47f af38 	bne.w	800c08a <_scanf_float+0x6a>
 800c21a:	6822      	ldr	r2, [r4, #0]
 800c21c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c220:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c224:	f040 8108 	bne.w	800c438 <_scanf_float+0x418>
 800c228:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c22c:	6022      	str	r2, [r4, #0]
 800c22e:	2501      	movs	r5, #1
 800c230:	e7bf      	b.n	800c1b2 <_scanf_float+0x192>
 800c232:	2d03      	cmp	r5, #3
 800c234:	d0e2      	beq.n	800c1fc <_scanf_float+0x1dc>
 800c236:	2d05      	cmp	r5, #5
 800c238:	e7de      	b.n	800c1f8 <_scanf_float+0x1d8>
 800c23a:	2d02      	cmp	r5, #2
 800c23c:	f47f af22 	bne.w	800c084 <_scanf_float+0x64>
 800c240:	2503      	movs	r5, #3
 800c242:	e7b6      	b.n	800c1b2 <_scanf_float+0x192>
 800c244:	2d06      	cmp	r5, #6
 800c246:	f47f af1d 	bne.w	800c084 <_scanf_float+0x64>
 800c24a:	2507      	movs	r5, #7
 800c24c:	e7b1      	b.n	800c1b2 <_scanf_float+0x192>
 800c24e:	6822      	ldr	r2, [r4, #0]
 800c250:	0591      	lsls	r1, r2, #22
 800c252:	f57f af17 	bpl.w	800c084 <_scanf_float+0x64>
 800c256:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c25a:	6022      	str	r2, [r4, #0]
 800c25c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c260:	e7a7      	b.n	800c1b2 <_scanf_float+0x192>
 800c262:	6822      	ldr	r2, [r4, #0]
 800c264:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c268:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c26c:	d006      	beq.n	800c27c <_scanf_float+0x25c>
 800c26e:	0550      	lsls	r0, r2, #21
 800c270:	f57f af08 	bpl.w	800c084 <_scanf_float+0x64>
 800c274:	f1b9 0f00 	cmp.w	r9, #0
 800c278:	f000 80de 	beq.w	800c438 <_scanf_float+0x418>
 800c27c:	0591      	lsls	r1, r2, #22
 800c27e:	bf58      	it	pl
 800c280:	9902      	ldrpl	r1, [sp, #8]
 800c282:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c286:	bf58      	it	pl
 800c288:	eba9 0101 	subpl.w	r1, r9, r1
 800c28c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c290:	bf58      	it	pl
 800c292:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c296:	6022      	str	r2, [r4, #0]
 800c298:	f04f 0900 	mov.w	r9, #0
 800c29c:	e789      	b.n	800c1b2 <_scanf_float+0x192>
 800c29e:	f04f 0a03 	mov.w	sl, #3
 800c2a2:	e786      	b.n	800c1b2 <_scanf_float+0x192>
 800c2a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c2a8:	4639      	mov	r1, r7
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4798      	blx	r3
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f43f aedb 	beq.w	800c06a <_scanf_float+0x4a>
 800c2b4:	e6e6      	b.n	800c084 <_scanf_float+0x64>
 800c2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2be:	463a      	mov	r2, r7
 800c2c0:	4640      	mov	r0, r8
 800c2c2:	4798      	blx	r3
 800c2c4:	6923      	ldr	r3, [r4, #16]
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	e6e8      	b.n	800c09e <_scanf_float+0x7e>
 800c2cc:	1e6b      	subs	r3, r5, #1
 800c2ce:	2b06      	cmp	r3, #6
 800c2d0:	d824      	bhi.n	800c31c <_scanf_float+0x2fc>
 800c2d2:	2d02      	cmp	r5, #2
 800c2d4:	d836      	bhi.n	800c344 <_scanf_float+0x324>
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	f67f aee4 	bls.w	800c0a6 <_scanf_float+0x86>
 800c2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2e6:	463a      	mov	r2, r7
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4798      	blx	r3
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	6123      	str	r3, [r4, #16]
 800c2f2:	e7f0      	b.n	800c2d6 <_scanf_float+0x2b6>
 800c2f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c2fc:	463a      	mov	r2, r7
 800c2fe:	4640      	mov	r0, r8
 800c300:	4798      	blx	r3
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	3b01      	subs	r3, #1
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c30c:	fa5f fa8a 	uxtb.w	sl, sl
 800c310:	f1ba 0f02 	cmp.w	sl, #2
 800c314:	d1ee      	bne.n	800c2f4 <_scanf_float+0x2d4>
 800c316:	3d03      	subs	r5, #3
 800c318:	b2ed      	uxtb	r5, r5
 800c31a:	1b76      	subs	r6, r6, r5
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	05da      	lsls	r2, r3, #23
 800c320:	d530      	bpl.n	800c384 <_scanf_float+0x364>
 800c322:	055b      	lsls	r3, r3, #21
 800c324:	d511      	bpl.n	800c34a <_scanf_float+0x32a>
 800c326:	9b01      	ldr	r3, [sp, #4]
 800c328:	429e      	cmp	r6, r3
 800c32a:	f67f aebc 	bls.w	800c0a6 <_scanf_float+0x86>
 800c32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c336:	463a      	mov	r2, r7
 800c338:	4640      	mov	r0, r8
 800c33a:	4798      	blx	r3
 800c33c:	6923      	ldr	r3, [r4, #16]
 800c33e:	3b01      	subs	r3, #1
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	e7f0      	b.n	800c326 <_scanf_float+0x306>
 800c344:	46aa      	mov	sl, r5
 800c346:	46b3      	mov	fp, r6
 800c348:	e7de      	b.n	800c308 <_scanf_float+0x2e8>
 800c34a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c34e:	6923      	ldr	r3, [r4, #16]
 800c350:	2965      	cmp	r1, #101	@ 0x65
 800c352:	f103 33ff 	add.w	r3, r3, #4294967295
 800c356:	f106 35ff 	add.w	r5, r6, #4294967295
 800c35a:	6123      	str	r3, [r4, #16]
 800c35c:	d00c      	beq.n	800c378 <_scanf_float+0x358>
 800c35e:	2945      	cmp	r1, #69	@ 0x45
 800c360:	d00a      	beq.n	800c378 <_scanf_float+0x358>
 800c362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c366:	463a      	mov	r2, r7
 800c368:	4640      	mov	r0, r8
 800c36a:	4798      	blx	r3
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c372:	3b01      	subs	r3, #1
 800c374:	1eb5      	subs	r5, r6, #2
 800c376:	6123      	str	r3, [r4, #16]
 800c378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c37c:	463a      	mov	r2, r7
 800c37e:	4640      	mov	r0, r8
 800c380:	4798      	blx	r3
 800c382:	462e      	mov	r6, r5
 800c384:	6822      	ldr	r2, [r4, #0]
 800c386:	f012 0210 	ands.w	r2, r2, #16
 800c38a:	d001      	beq.n	800c390 <_scanf_float+0x370>
 800c38c:	2000      	movs	r0, #0
 800c38e:	e68b      	b.n	800c0a8 <_scanf_float+0x88>
 800c390:	7032      	strb	r2, [r6, #0]
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c39c:	d11c      	bne.n	800c3d8 <_scanf_float+0x3b8>
 800c39e:	9b02      	ldr	r3, [sp, #8]
 800c3a0:	454b      	cmp	r3, r9
 800c3a2:	eba3 0209 	sub.w	r2, r3, r9
 800c3a6:	d123      	bne.n	800c3f0 <_scanf_float+0x3d0>
 800c3a8:	9901      	ldr	r1, [sp, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	f002 fcdf 	bl	800ed70 <_strtod_r>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	6821      	ldr	r1, [r4, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f011 0f02 	tst.w	r1, #2
 800c3bc:	ec57 6b10 	vmov	r6, r7, d0
 800c3c0:	f103 0204 	add.w	r2, r3, #4
 800c3c4:	d01f      	beq.n	800c406 <_scanf_float+0x3e6>
 800c3c6:	9903      	ldr	r1, [sp, #12]
 800c3c8:	600a      	str	r2, [r1, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	e9c3 6700 	strd	r6, r7, [r3]
 800c3d0:	68e3      	ldr	r3, [r4, #12]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	60e3      	str	r3, [r4, #12]
 800c3d6:	e7d9      	b.n	800c38c <_scanf_float+0x36c>
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d0e4      	beq.n	800c3a8 <_scanf_float+0x388>
 800c3de:	9905      	ldr	r1, [sp, #20]
 800c3e0:	230a      	movs	r3, #10
 800c3e2:	3101      	adds	r1, #1
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	f002 fd43 	bl	800ee70 <_strtol_r>
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	9e05      	ldr	r6, [sp, #20]
 800c3ee:	1ac2      	subs	r2, r0, r3
 800c3f0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c3f4:	429e      	cmp	r6, r3
 800c3f6:	bf28      	it	cs
 800c3f8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c3fc:	4910      	ldr	r1, [pc, #64]	@ (800c440 <_scanf_float+0x420>)
 800c3fe:	4630      	mov	r0, r6
 800c400:	f000 f9b6 	bl	800c770 <siprintf>
 800c404:	e7d0      	b.n	800c3a8 <_scanf_float+0x388>
 800c406:	f011 0f04 	tst.w	r1, #4
 800c40a:	9903      	ldr	r1, [sp, #12]
 800c40c:	600a      	str	r2, [r1, #0]
 800c40e:	d1dc      	bne.n	800c3ca <_scanf_float+0x3aa>
 800c410:	681d      	ldr	r5, [r3, #0]
 800c412:	4632      	mov	r2, r6
 800c414:	463b      	mov	r3, r7
 800c416:	4630      	mov	r0, r6
 800c418:	4639      	mov	r1, r7
 800c41a:	f7f4 fb8f 	bl	8000b3c <__aeabi_dcmpun>
 800c41e:	b128      	cbz	r0, 800c42c <_scanf_float+0x40c>
 800c420:	4808      	ldr	r0, [pc, #32]	@ (800c444 <_scanf_float+0x424>)
 800c422:	f000 fa9f 	bl	800c964 <nanf>
 800c426:	ed85 0a00 	vstr	s0, [r5]
 800c42a:	e7d1      	b.n	800c3d0 <_scanf_float+0x3b0>
 800c42c:	4630      	mov	r0, r6
 800c42e:	4639      	mov	r1, r7
 800c430:	f7f4 fbe2 	bl	8000bf8 <__aeabi_d2f>
 800c434:	6028      	str	r0, [r5, #0]
 800c436:	e7cb      	b.n	800c3d0 <_scanf_float+0x3b0>
 800c438:	f04f 0900 	mov.w	r9, #0
 800c43c:	e629      	b.n	800c092 <_scanf_float+0x72>
 800c43e:	bf00      	nop
 800c440:	08010430 	.word	0x08010430
 800c444:	080107c5 	.word	0x080107c5

0800c448 <__sflush_r>:
 800c448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c450:	0716      	lsls	r6, r2, #28
 800c452:	4605      	mov	r5, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d454      	bmi.n	800c502 <__sflush_r+0xba>
 800c458:	684b      	ldr	r3, [r1, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dc02      	bgt.n	800c464 <__sflush_r+0x1c>
 800c45e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	dd48      	ble.n	800c4f6 <__sflush_r+0xae>
 800c464:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c466:	2e00      	cmp	r6, #0
 800c468:	d045      	beq.n	800c4f6 <__sflush_r+0xae>
 800c46a:	2300      	movs	r3, #0
 800c46c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c470:	682f      	ldr	r7, [r5, #0]
 800c472:	6a21      	ldr	r1, [r4, #32]
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	d030      	beq.n	800c4da <__sflush_r+0x92>
 800c478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c47a:	89a3      	ldrh	r3, [r4, #12]
 800c47c:	0759      	lsls	r1, r3, #29
 800c47e:	d505      	bpl.n	800c48c <__sflush_r+0x44>
 800c480:	6863      	ldr	r3, [r4, #4]
 800c482:	1ad2      	subs	r2, r2, r3
 800c484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c486:	b10b      	cbz	r3, 800c48c <__sflush_r+0x44>
 800c488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c48a:	1ad2      	subs	r2, r2, r3
 800c48c:	2300      	movs	r3, #0
 800c48e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c490:	6a21      	ldr	r1, [r4, #32]
 800c492:	4628      	mov	r0, r5
 800c494:	47b0      	blx	r6
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	d106      	bne.n	800c4aa <__sflush_r+0x62>
 800c49c:	6829      	ldr	r1, [r5, #0]
 800c49e:	291d      	cmp	r1, #29
 800c4a0:	d82b      	bhi.n	800c4fa <__sflush_r+0xb2>
 800c4a2:	4a2a      	ldr	r2, [pc, #168]	@ (800c54c <__sflush_r+0x104>)
 800c4a4:	410a      	asrs	r2, r1
 800c4a6:	07d6      	lsls	r6, r2, #31
 800c4a8:	d427      	bmi.n	800c4fa <__sflush_r+0xb2>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	6062      	str	r2, [r4, #4]
 800c4ae:	04d9      	lsls	r1, r3, #19
 800c4b0:	6922      	ldr	r2, [r4, #16]
 800c4b2:	6022      	str	r2, [r4, #0]
 800c4b4:	d504      	bpl.n	800c4c0 <__sflush_r+0x78>
 800c4b6:	1c42      	adds	r2, r0, #1
 800c4b8:	d101      	bne.n	800c4be <__sflush_r+0x76>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	b903      	cbnz	r3, 800c4c0 <__sflush_r+0x78>
 800c4be:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4c2:	602f      	str	r7, [r5, #0]
 800c4c4:	b1b9      	cbz	r1, 800c4f6 <__sflush_r+0xae>
 800c4c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4ca:	4299      	cmp	r1, r3
 800c4cc:	d002      	beq.n	800c4d4 <__sflush_r+0x8c>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f001 f89a 	bl	800d608 <_free_r>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4d8:	e00d      	b.n	800c4f6 <__sflush_r+0xae>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b0      	blx	r6
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	1c50      	adds	r0, r2, #1
 800c4e4:	d1c9      	bne.n	800c47a <__sflush_r+0x32>
 800c4e6:	682b      	ldr	r3, [r5, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d0c6      	beq.n	800c47a <__sflush_r+0x32>
 800c4ec:	2b1d      	cmp	r3, #29
 800c4ee:	d001      	beq.n	800c4f4 <__sflush_r+0xac>
 800c4f0:	2b16      	cmp	r3, #22
 800c4f2:	d11e      	bne.n	800c532 <__sflush_r+0xea>
 800c4f4:	602f      	str	r7, [r5, #0]
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	e022      	b.n	800c540 <__sflush_r+0xf8>
 800c4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4fe:	b21b      	sxth	r3, r3
 800c500:	e01b      	b.n	800c53a <__sflush_r+0xf2>
 800c502:	690f      	ldr	r7, [r1, #16]
 800c504:	2f00      	cmp	r7, #0
 800c506:	d0f6      	beq.n	800c4f6 <__sflush_r+0xae>
 800c508:	0793      	lsls	r3, r2, #30
 800c50a:	680e      	ldr	r6, [r1, #0]
 800c50c:	bf08      	it	eq
 800c50e:	694b      	ldreq	r3, [r1, #20]
 800c510:	600f      	str	r7, [r1, #0]
 800c512:	bf18      	it	ne
 800c514:	2300      	movne	r3, #0
 800c516:	eba6 0807 	sub.w	r8, r6, r7
 800c51a:	608b      	str	r3, [r1, #8]
 800c51c:	f1b8 0f00 	cmp.w	r8, #0
 800c520:	dde9      	ble.n	800c4f6 <__sflush_r+0xae>
 800c522:	6a21      	ldr	r1, [r4, #32]
 800c524:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c526:	4643      	mov	r3, r8
 800c528:	463a      	mov	r2, r7
 800c52a:	4628      	mov	r0, r5
 800c52c:	47b0      	blx	r6
 800c52e:	2800      	cmp	r0, #0
 800c530:	dc08      	bgt.n	800c544 <__sflush_r+0xfc>
 800c532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295
 800c540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c544:	4407      	add	r7, r0
 800c546:	eba8 0800 	sub.w	r8, r8, r0
 800c54a:	e7e7      	b.n	800c51c <__sflush_r+0xd4>
 800c54c:	dfbffffe 	.word	0xdfbffffe

0800c550 <_fflush_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	690b      	ldr	r3, [r1, #16]
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	b913      	cbnz	r3, 800c560 <_fflush_r+0x10>
 800c55a:	2500      	movs	r5, #0
 800c55c:	4628      	mov	r0, r5
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	b118      	cbz	r0, 800c56a <_fflush_r+0x1a>
 800c562:	6a03      	ldr	r3, [r0, #32]
 800c564:	b90b      	cbnz	r3, 800c56a <_fflush_r+0x1a>
 800c566:	f000 f8bb 	bl	800c6e0 <__sinit>
 800c56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0f3      	beq.n	800c55a <_fflush_r+0xa>
 800c572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c574:	07d0      	lsls	r0, r2, #31
 800c576:	d404      	bmi.n	800c582 <_fflush_r+0x32>
 800c578:	0599      	lsls	r1, r3, #22
 800c57a:	d402      	bmi.n	800c582 <_fflush_r+0x32>
 800c57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c57e:	f000 f9d8 	bl	800c932 <__retarget_lock_acquire_recursive>
 800c582:	4628      	mov	r0, r5
 800c584:	4621      	mov	r1, r4
 800c586:	f7ff ff5f 	bl	800c448 <__sflush_r>
 800c58a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c58c:	07da      	lsls	r2, r3, #31
 800c58e:	4605      	mov	r5, r0
 800c590:	d4e4      	bmi.n	800c55c <_fflush_r+0xc>
 800c592:	89a3      	ldrh	r3, [r4, #12]
 800c594:	059b      	lsls	r3, r3, #22
 800c596:	d4e1      	bmi.n	800c55c <_fflush_r+0xc>
 800c598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c59a:	f000 f9cb 	bl	800c934 <__retarget_lock_release_recursive>
 800c59e:	e7dd      	b.n	800c55c <_fflush_r+0xc>

0800c5a0 <fflush>:
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	b920      	cbnz	r0, 800c5ae <fflush+0xe>
 800c5a4:	4a04      	ldr	r2, [pc, #16]	@ (800c5b8 <fflush+0x18>)
 800c5a6:	4905      	ldr	r1, [pc, #20]	@ (800c5bc <fflush+0x1c>)
 800c5a8:	4805      	ldr	r0, [pc, #20]	@ (800c5c0 <fflush+0x20>)
 800c5aa:	f000 b8b1 	b.w	800c710 <_fwalk_sglue>
 800c5ae:	4b05      	ldr	r3, [pc, #20]	@ (800c5c4 <fflush+0x24>)
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f7ff bfcd 	b.w	800c550 <_fflush_r>
 800c5b6:	bf00      	nop
 800c5b8:	200002cc 	.word	0x200002cc
 800c5bc:	0800c551 	.word	0x0800c551
 800c5c0:	200002dc 	.word	0x200002dc
 800c5c4:	200002d8 	.word	0x200002d8

0800c5c8 <std>:
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c5d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5d6:	6083      	str	r3, [r0, #8]
 800c5d8:	8181      	strh	r1, [r0, #12]
 800c5da:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5dc:	81c2      	strh	r2, [r0, #14]
 800c5de:	6183      	str	r3, [r0, #24]
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	305c      	adds	r0, #92	@ 0x5c
 800c5e6:	f000 f926 	bl	800c836 <memset>
 800c5ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c620 <std+0x58>)
 800c5ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c624 <std+0x5c>)
 800c5f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c628 <std+0x60>)
 800c5f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c62c <std+0x64>)
 800c5f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c630 <std+0x68>)
 800c5fc:	6224      	str	r4, [r4, #32]
 800c5fe:	429c      	cmp	r4, r3
 800c600:	d006      	beq.n	800c610 <std+0x48>
 800c602:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c606:	4294      	cmp	r4, r2
 800c608:	d002      	beq.n	800c610 <std+0x48>
 800c60a:	33d0      	adds	r3, #208	@ 0xd0
 800c60c:	429c      	cmp	r4, r3
 800c60e:	d105      	bne.n	800c61c <std+0x54>
 800c610:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c618:	f000 b98a 	b.w	800c930 <__retarget_lock_init_recursive>
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	bf00      	nop
 800c620:	0800c7b1 	.word	0x0800c7b1
 800c624:	0800c7d3 	.word	0x0800c7d3
 800c628:	0800c80b 	.word	0x0800c80b
 800c62c:	0800c82f 	.word	0x0800c82f
 800c630:	20001138 	.word	0x20001138

0800c634 <stdio_exit_handler>:
 800c634:	4a02      	ldr	r2, [pc, #8]	@ (800c640 <stdio_exit_handler+0xc>)
 800c636:	4903      	ldr	r1, [pc, #12]	@ (800c644 <stdio_exit_handler+0x10>)
 800c638:	4803      	ldr	r0, [pc, #12]	@ (800c648 <stdio_exit_handler+0x14>)
 800c63a:	f000 b869 	b.w	800c710 <_fwalk_sglue>
 800c63e:	bf00      	nop
 800c640:	200002cc 	.word	0x200002cc
 800c644:	0800c551 	.word	0x0800c551
 800c648:	200002dc 	.word	0x200002dc

0800c64c <cleanup_stdio>:
 800c64c:	6841      	ldr	r1, [r0, #4]
 800c64e:	4b0c      	ldr	r3, [pc, #48]	@ (800c680 <cleanup_stdio+0x34>)
 800c650:	4299      	cmp	r1, r3
 800c652:	b510      	push	{r4, lr}
 800c654:	4604      	mov	r4, r0
 800c656:	d001      	beq.n	800c65c <cleanup_stdio+0x10>
 800c658:	f7ff ff7a 	bl	800c550 <_fflush_r>
 800c65c:	68a1      	ldr	r1, [r4, #8]
 800c65e:	4b09      	ldr	r3, [pc, #36]	@ (800c684 <cleanup_stdio+0x38>)
 800c660:	4299      	cmp	r1, r3
 800c662:	d002      	beq.n	800c66a <cleanup_stdio+0x1e>
 800c664:	4620      	mov	r0, r4
 800c666:	f7ff ff73 	bl	800c550 <_fflush_r>
 800c66a:	68e1      	ldr	r1, [r4, #12]
 800c66c:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <cleanup_stdio+0x3c>)
 800c66e:	4299      	cmp	r1, r3
 800c670:	d004      	beq.n	800c67c <cleanup_stdio+0x30>
 800c672:	4620      	mov	r0, r4
 800c674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c678:	f7ff bf6a 	b.w	800c550 <_fflush_r>
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	bf00      	nop
 800c680:	20001138 	.word	0x20001138
 800c684:	200011a0 	.word	0x200011a0
 800c688:	20001208 	.word	0x20001208

0800c68c <global_stdio_init.part.0>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6bc <global_stdio_init.part.0+0x30>)
 800c690:	4c0b      	ldr	r4, [pc, #44]	@ (800c6c0 <global_stdio_init.part.0+0x34>)
 800c692:	4a0c      	ldr	r2, [pc, #48]	@ (800c6c4 <global_stdio_init.part.0+0x38>)
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	4620      	mov	r0, r4
 800c698:	2200      	movs	r2, #0
 800c69a:	2104      	movs	r1, #4
 800c69c:	f7ff ff94 	bl	800c5c8 <std>
 800c6a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	2109      	movs	r1, #9
 800c6a8:	f7ff ff8e 	bl	800c5c8 <std>
 800c6ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b6:	2112      	movs	r1, #18
 800c6b8:	f7ff bf86 	b.w	800c5c8 <std>
 800c6bc:	20001270 	.word	0x20001270
 800c6c0:	20001138 	.word	0x20001138
 800c6c4:	0800c635 	.word	0x0800c635

0800c6c8 <__sfp_lock_acquire>:
 800c6c8:	4801      	ldr	r0, [pc, #4]	@ (800c6d0 <__sfp_lock_acquire+0x8>)
 800c6ca:	f000 b932 	b.w	800c932 <__retarget_lock_acquire_recursive>
 800c6ce:	bf00      	nop
 800c6d0:	20001279 	.word	0x20001279

0800c6d4 <__sfp_lock_release>:
 800c6d4:	4801      	ldr	r0, [pc, #4]	@ (800c6dc <__sfp_lock_release+0x8>)
 800c6d6:	f000 b92d 	b.w	800c934 <__retarget_lock_release_recursive>
 800c6da:	bf00      	nop
 800c6dc:	20001279 	.word	0x20001279

0800c6e0 <__sinit>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	f7ff fff0 	bl	800c6c8 <__sfp_lock_acquire>
 800c6e8:	6a23      	ldr	r3, [r4, #32]
 800c6ea:	b11b      	cbz	r3, 800c6f4 <__sinit+0x14>
 800c6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f0:	f7ff bff0 	b.w	800c6d4 <__sfp_lock_release>
 800c6f4:	4b04      	ldr	r3, [pc, #16]	@ (800c708 <__sinit+0x28>)
 800c6f6:	6223      	str	r3, [r4, #32]
 800c6f8:	4b04      	ldr	r3, [pc, #16]	@ (800c70c <__sinit+0x2c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f5      	bne.n	800c6ec <__sinit+0xc>
 800c700:	f7ff ffc4 	bl	800c68c <global_stdio_init.part.0>
 800c704:	e7f2      	b.n	800c6ec <__sinit+0xc>
 800c706:	bf00      	nop
 800c708:	0800c64d 	.word	0x0800c64d
 800c70c:	20001270 	.word	0x20001270

0800c710 <_fwalk_sglue>:
 800c710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c714:	4607      	mov	r7, r0
 800c716:	4688      	mov	r8, r1
 800c718:	4614      	mov	r4, r2
 800c71a:	2600      	movs	r6, #0
 800c71c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c720:	f1b9 0901 	subs.w	r9, r9, #1
 800c724:	d505      	bpl.n	800c732 <_fwalk_sglue+0x22>
 800c726:	6824      	ldr	r4, [r4, #0]
 800c728:	2c00      	cmp	r4, #0
 800c72a:	d1f7      	bne.n	800c71c <_fwalk_sglue+0xc>
 800c72c:	4630      	mov	r0, r6
 800c72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c732:	89ab      	ldrh	r3, [r5, #12]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d907      	bls.n	800c748 <_fwalk_sglue+0x38>
 800c738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c73c:	3301      	adds	r3, #1
 800c73e:	d003      	beq.n	800c748 <_fwalk_sglue+0x38>
 800c740:	4629      	mov	r1, r5
 800c742:	4638      	mov	r0, r7
 800c744:	47c0      	blx	r8
 800c746:	4306      	orrs	r6, r0
 800c748:	3568      	adds	r5, #104	@ 0x68
 800c74a:	e7e9      	b.n	800c720 <_fwalk_sglue+0x10>

0800c74c <iprintf>:
 800c74c:	b40f      	push	{r0, r1, r2, r3}
 800c74e:	b507      	push	{r0, r1, r2, lr}
 800c750:	4906      	ldr	r1, [pc, #24]	@ (800c76c <iprintf+0x20>)
 800c752:	ab04      	add	r3, sp, #16
 800c754:	6808      	ldr	r0, [r1, #0]
 800c756:	f853 2b04 	ldr.w	r2, [r3], #4
 800c75a:	6881      	ldr	r1, [r0, #8]
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	f002 fd0b 	bl	800f178 <_vfiprintf_r>
 800c762:	b003      	add	sp, #12
 800c764:	f85d eb04 	ldr.w	lr, [sp], #4
 800c768:	b004      	add	sp, #16
 800c76a:	4770      	bx	lr
 800c76c:	200002d8 	.word	0x200002d8

0800c770 <siprintf>:
 800c770:	b40e      	push	{r1, r2, r3}
 800c772:	b500      	push	{lr}
 800c774:	b09c      	sub	sp, #112	@ 0x70
 800c776:	ab1d      	add	r3, sp, #116	@ 0x74
 800c778:	9002      	str	r0, [sp, #8]
 800c77a:	9006      	str	r0, [sp, #24]
 800c77c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c780:	4809      	ldr	r0, [pc, #36]	@ (800c7a8 <siprintf+0x38>)
 800c782:	9107      	str	r1, [sp, #28]
 800c784:	9104      	str	r1, [sp, #16]
 800c786:	4909      	ldr	r1, [pc, #36]	@ (800c7ac <siprintf+0x3c>)
 800c788:	f853 2b04 	ldr.w	r2, [r3], #4
 800c78c:	9105      	str	r1, [sp, #20]
 800c78e:	6800      	ldr	r0, [r0, #0]
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	a902      	add	r1, sp, #8
 800c794:	f002 fbca 	bl	800ef2c <_svfiprintf_r>
 800c798:	9b02      	ldr	r3, [sp, #8]
 800c79a:	2200      	movs	r2, #0
 800c79c:	701a      	strb	r2, [r3, #0]
 800c79e:	b01c      	add	sp, #112	@ 0x70
 800c7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a4:	b003      	add	sp, #12
 800c7a6:	4770      	bx	lr
 800c7a8:	200002d8 	.word	0x200002d8
 800c7ac:	ffff0208 	.word	0xffff0208

0800c7b0 <__sread>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b8:	f000 f86c 	bl	800c894 <_read_r>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	bfab      	itete	ge
 800c7c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7c4:	181b      	addge	r3, r3, r0
 800c7c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7ca:	bfac      	ite	ge
 800c7cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7ce:	81a3      	strhlt	r3, [r4, #12]
 800c7d0:	bd10      	pop	{r4, pc}

0800c7d2 <__swrite>:
 800c7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d6:	461f      	mov	r7, r3
 800c7d8:	898b      	ldrh	r3, [r1, #12]
 800c7da:	05db      	lsls	r3, r3, #23
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	4616      	mov	r6, r2
 800c7e2:	d505      	bpl.n	800c7f0 <__swrite+0x1e>
 800c7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	f000 f840 	bl	800c870 <_lseek_r>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	463b      	mov	r3, r7
 800c800:	4628      	mov	r0, r5
 800c802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c806:	f000 b857 	b.w	800c8b8 <_write_r>

0800c80a <__sseek>:
 800c80a:	b510      	push	{r4, lr}
 800c80c:	460c      	mov	r4, r1
 800c80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c812:	f000 f82d 	bl	800c870 <_lseek_r>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	bf15      	itete	ne
 800c81c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c81e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c822:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c826:	81a3      	strheq	r3, [r4, #12]
 800c828:	bf18      	it	ne
 800c82a:	81a3      	strhne	r3, [r4, #12]
 800c82c:	bd10      	pop	{r4, pc}

0800c82e <__sclose>:
 800c82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c832:	f000 b80d 	b.w	800c850 <_close_r>

0800c836 <memset>:
 800c836:	4402      	add	r2, r0
 800c838:	4603      	mov	r3, r0
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d100      	bne.n	800c840 <memset+0xa>
 800c83e:	4770      	bx	lr
 800c840:	f803 1b01 	strb.w	r1, [r3], #1
 800c844:	e7f9      	b.n	800c83a <memset+0x4>
	...

0800c848 <_localeconv_r>:
 800c848:	4800      	ldr	r0, [pc, #0]	@ (800c84c <_localeconv_r+0x4>)
 800c84a:	4770      	bx	lr
 800c84c:	20000418 	.word	0x20000418

0800c850 <_close_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	@ (800c86c <_close_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f6 f806 	bl	800286c <_close>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_close_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_close_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	20001274 	.word	0x20001274

0800c870 <_lseek_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	@ (800c890 <_lseek_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f6 f81b 	bl	80028ba <_lseek>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_lseek_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_lseek_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20001274 	.word	0x20001274

0800c894 <_read_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	@ (800c8b4 <_read_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f5 ffa9 	bl	80027fa <_read>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_read_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_read_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20001274 	.word	0x20001274

0800c8b8 <_write_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	@ (800c8d8 <_write_r+0x20>)
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f7f5 ffb4 	bl	8002834 <_write>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_write_r+0x1e>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_write_r+0x1e>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20001274 	.word	0x20001274

0800c8dc <__errno>:
 800c8dc:	4b01      	ldr	r3, [pc, #4]	@ (800c8e4 <__errno+0x8>)
 800c8de:	6818      	ldr	r0, [r3, #0]
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	200002d8 	.word	0x200002d8

0800c8e8 <__libc_init_array>:
 800c8e8:	b570      	push	{r4, r5, r6, lr}
 800c8ea:	4d0d      	ldr	r5, [pc, #52]	@ (800c920 <__libc_init_array+0x38>)
 800c8ec:	4c0d      	ldr	r4, [pc, #52]	@ (800c924 <__libc_init_array+0x3c>)
 800c8ee:	1b64      	subs	r4, r4, r5
 800c8f0:	10a4      	asrs	r4, r4, #2
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	42a6      	cmp	r6, r4
 800c8f6:	d109      	bne.n	800c90c <__libc_init_array+0x24>
 800c8f8:	4d0b      	ldr	r5, [pc, #44]	@ (800c928 <__libc_init_array+0x40>)
 800c8fa:	4c0c      	ldr	r4, [pc, #48]	@ (800c92c <__libc_init_array+0x44>)
 800c8fc:	f003 faf0 	bl	800fee0 <_init>
 800c900:	1b64      	subs	r4, r4, r5
 800c902:	10a4      	asrs	r4, r4, #2
 800c904:	2600      	movs	r6, #0
 800c906:	42a6      	cmp	r6, r4
 800c908:	d105      	bne.n	800c916 <__libc_init_array+0x2e>
 800c90a:	bd70      	pop	{r4, r5, r6, pc}
 800c90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c910:	4798      	blx	r3
 800c912:	3601      	adds	r6, #1
 800c914:	e7ee      	b.n	800c8f4 <__libc_init_array+0xc>
 800c916:	f855 3b04 	ldr.w	r3, [r5], #4
 800c91a:	4798      	blx	r3
 800c91c:	3601      	adds	r6, #1
 800c91e:	e7f2      	b.n	800c906 <__libc_init_array+0x1e>
 800c920:	08010830 	.word	0x08010830
 800c924:	08010830 	.word	0x08010830
 800c928:	08010830 	.word	0x08010830
 800c92c:	08010834 	.word	0x08010834

0800c930 <__retarget_lock_init_recursive>:
 800c930:	4770      	bx	lr

0800c932 <__retarget_lock_acquire_recursive>:
 800c932:	4770      	bx	lr

0800c934 <__retarget_lock_release_recursive>:
 800c934:	4770      	bx	lr

0800c936 <strcpy>:
 800c936:	4603      	mov	r3, r0
 800c938:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c93c:	f803 2b01 	strb.w	r2, [r3], #1
 800c940:	2a00      	cmp	r2, #0
 800c942:	d1f9      	bne.n	800c938 <strcpy+0x2>
 800c944:	4770      	bx	lr

0800c946 <memcpy>:
 800c946:	440a      	add	r2, r1
 800c948:	4291      	cmp	r1, r2
 800c94a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c94e:	d100      	bne.n	800c952 <memcpy+0xc>
 800c950:	4770      	bx	lr
 800c952:	b510      	push	{r4, lr}
 800c954:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c958:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c95c:	4291      	cmp	r1, r2
 800c95e:	d1f9      	bne.n	800c954 <memcpy+0xe>
 800c960:	bd10      	pop	{r4, pc}
	...

0800c964 <nanf>:
 800c964:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c96c <nanf+0x8>
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	7fc00000 	.word	0x7fc00000

0800c970 <quorem>:
 800c970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	6903      	ldr	r3, [r0, #16]
 800c976:	690c      	ldr	r4, [r1, #16]
 800c978:	42a3      	cmp	r3, r4
 800c97a:	4607      	mov	r7, r0
 800c97c:	db7e      	blt.n	800ca7c <quorem+0x10c>
 800c97e:	3c01      	subs	r4, #1
 800c980:	f101 0814 	add.w	r8, r1, #20
 800c984:	00a3      	lsls	r3, r4, #2
 800c986:	f100 0514 	add.w	r5, r0, #20
 800c98a:	9300      	str	r3, [sp, #0]
 800c98c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c99a:	3301      	adds	r3, #1
 800c99c:	429a      	cmp	r2, r3
 800c99e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9a2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9a6:	d32e      	bcc.n	800ca06 <quorem+0x96>
 800c9a8:	f04f 0a00 	mov.w	sl, #0
 800c9ac:	46c4      	mov	ip, r8
 800c9ae:	46ae      	mov	lr, r5
 800c9b0:	46d3      	mov	fp, sl
 800c9b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c9b6:	b298      	uxth	r0, r3
 800c9b8:	fb06 a000 	mla	r0, r6, r0, sl
 800c9bc:	0c02      	lsrs	r2, r0, #16
 800c9be:	0c1b      	lsrs	r3, r3, #16
 800c9c0:	fb06 2303 	mla	r3, r6, r3, r2
 800c9c4:	f8de 2000 	ldr.w	r2, [lr]
 800c9c8:	b280      	uxth	r0, r0
 800c9ca:	b292      	uxth	r2, r2
 800c9cc:	1a12      	subs	r2, r2, r0
 800c9ce:	445a      	add	r2, fp
 800c9d0:	f8de 0000 	ldr.w	r0, [lr]
 800c9d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c9de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c9e2:	b292      	uxth	r2, r2
 800c9e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c9e8:	45e1      	cmp	r9, ip
 800c9ea:	f84e 2b04 	str.w	r2, [lr], #4
 800c9ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c9f2:	d2de      	bcs.n	800c9b2 <quorem+0x42>
 800c9f4:	9b00      	ldr	r3, [sp, #0]
 800c9f6:	58eb      	ldr	r3, [r5, r3]
 800c9f8:	b92b      	cbnz	r3, 800ca06 <quorem+0x96>
 800c9fa:	9b01      	ldr	r3, [sp, #4]
 800c9fc:	3b04      	subs	r3, #4
 800c9fe:	429d      	cmp	r5, r3
 800ca00:	461a      	mov	r2, r3
 800ca02:	d32f      	bcc.n	800ca64 <quorem+0xf4>
 800ca04:	613c      	str	r4, [r7, #16]
 800ca06:	4638      	mov	r0, r7
 800ca08:	f001 f9c2 	bl	800dd90 <__mcmp>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	db25      	blt.n	800ca5c <quorem+0xec>
 800ca10:	4629      	mov	r1, r5
 800ca12:	2000      	movs	r0, #0
 800ca14:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca18:	f8d1 c000 	ldr.w	ip, [r1]
 800ca1c:	fa1f fe82 	uxth.w	lr, r2
 800ca20:	fa1f f38c 	uxth.w	r3, ip
 800ca24:	eba3 030e 	sub.w	r3, r3, lr
 800ca28:	4403      	add	r3, r0
 800ca2a:	0c12      	lsrs	r2, r2, #16
 800ca2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ca30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca3a:	45c1      	cmp	r9, r8
 800ca3c:	f841 3b04 	str.w	r3, [r1], #4
 800ca40:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ca44:	d2e6      	bcs.n	800ca14 <quorem+0xa4>
 800ca46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca4e:	b922      	cbnz	r2, 800ca5a <quorem+0xea>
 800ca50:	3b04      	subs	r3, #4
 800ca52:	429d      	cmp	r5, r3
 800ca54:	461a      	mov	r2, r3
 800ca56:	d30b      	bcc.n	800ca70 <quorem+0x100>
 800ca58:	613c      	str	r4, [r7, #16]
 800ca5a:	3601      	adds	r6, #1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	b003      	add	sp, #12
 800ca60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca64:	6812      	ldr	r2, [r2, #0]
 800ca66:	3b04      	subs	r3, #4
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	d1cb      	bne.n	800ca04 <quorem+0x94>
 800ca6c:	3c01      	subs	r4, #1
 800ca6e:	e7c6      	b.n	800c9fe <quorem+0x8e>
 800ca70:	6812      	ldr	r2, [r2, #0]
 800ca72:	3b04      	subs	r3, #4
 800ca74:	2a00      	cmp	r2, #0
 800ca76:	d1ef      	bne.n	800ca58 <quorem+0xe8>
 800ca78:	3c01      	subs	r4, #1
 800ca7a:	e7ea      	b.n	800ca52 <quorem+0xe2>
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	e7ee      	b.n	800ca5e <quorem+0xee>

0800ca80 <_dtoa_r>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	69c7      	ldr	r7, [r0, #28]
 800ca86:	b099      	sub	sp, #100	@ 0x64
 800ca88:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca8c:	ec55 4b10 	vmov	r4, r5, d0
 800ca90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ca92:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca94:	4683      	mov	fp, r0
 800ca96:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca98:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca9a:	b97f      	cbnz	r7, 800cabc <_dtoa_r+0x3c>
 800ca9c:	2010      	movs	r0, #16
 800ca9e:	f000 fdfd 	bl	800d69c <malloc>
 800caa2:	4602      	mov	r2, r0
 800caa4:	f8cb 001c 	str.w	r0, [fp, #28]
 800caa8:	b920      	cbnz	r0, 800cab4 <_dtoa_r+0x34>
 800caaa:	4ba7      	ldr	r3, [pc, #668]	@ (800cd48 <_dtoa_r+0x2c8>)
 800caac:	21ef      	movs	r1, #239	@ 0xef
 800caae:	48a7      	ldr	r0, [pc, #668]	@ (800cd4c <_dtoa_r+0x2cc>)
 800cab0:	f002 fd52 	bl	800f558 <__assert_func>
 800cab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cab8:	6007      	str	r7, [r0, #0]
 800caba:	60c7      	str	r7, [r0, #12]
 800cabc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cac0:	6819      	ldr	r1, [r3, #0]
 800cac2:	b159      	cbz	r1, 800cadc <_dtoa_r+0x5c>
 800cac4:	685a      	ldr	r2, [r3, #4]
 800cac6:	604a      	str	r2, [r1, #4]
 800cac8:	2301      	movs	r3, #1
 800caca:	4093      	lsls	r3, r2
 800cacc:	608b      	str	r3, [r1, #8]
 800cace:	4658      	mov	r0, fp
 800cad0:	f000 feda 	bl	800d888 <_Bfree>
 800cad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	1e2b      	subs	r3, r5, #0
 800cade:	bfb9      	ittee	lt
 800cae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cae4:	9303      	strlt	r3, [sp, #12]
 800cae6:	2300      	movge	r3, #0
 800cae8:	6033      	strge	r3, [r6, #0]
 800caea:	9f03      	ldr	r7, [sp, #12]
 800caec:	4b98      	ldr	r3, [pc, #608]	@ (800cd50 <_dtoa_r+0x2d0>)
 800caee:	bfbc      	itt	lt
 800caf0:	2201      	movlt	r2, #1
 800caf2:	6032      	strlt	r2, [r6, #0]
 800caf4:	43bb      	bics	r3, r7
 800caf6:	d112      	bne.n	800cb1e <_dtoa_r+0x9e>
 800caf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cafa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb04:	4323      	orrs	r3, r4
 800cb06:	f000 854d 	beq.w	800d5a4 <_dtoa_r+0xb24>
 800cb0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cd64 <_dtoa_r+0x2e4>
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f000 854f 	beq.w	800d5b4 <_dtoa_r+0xb34>
 800cb16:	f10a 0303 	add.w	r3, sl, #3
 800cb1a:	f000 bd49 	b.w	800d5b0 <_dtoa_r+0xb30>
 800cb1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb22:	2200      	movs	r2, #0
 800cb24:	ec51 0b17 	vmov	r0, r1, d7
 800cb28:	2300      	movs	r3, #0
 800cb2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cb2e:	f7f3 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb32:	4680      	mov	r8, r0
 800cb34:	b158      	cbz	r0, 800cb4e <_dtoa_r+0xce>
 800cb36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb38:	2301      	movs	r3, #1
 800cb3a:	6013      	str	r3, [r2, #0]
 800cb3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb3e:	b113      	cbz	r3, 800cb46 <_dtoa_r+0xc6>
 800cb40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb42:	4b84      	ldr	r3, [pc, #528]	@ (800cd54 <_dtoa_r+0x2d4>)
 800cb44:	6013      	str	r3, [r2, #0]
 800cb46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cd68 <_dtoa_r+0x2e8>
 800cb4a:	f000 bd33 	b.w	800d5b4 <_dtoa_r+0xb34>
 800cb4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb52:	aa16      	add	r2, sp, #88	@ 0x58
 800cb54:	a917      	add	r1, sp, #92	@ 0x5c
 800cb56:	4658      	mov	r0, fp
 800cb58:	f001 fa3a 	bl	800dfd0 <__d2b>
 800cb5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb60:	4681      	mov	r9, r0
 800cb62:	2e00      	cmp	r6, #0
 800cb64:	d077      	beq.n	800cc56 <_dtoa_r+0x1d6>
 800cb66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cb6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb80:	4619      	mov	r1, r3
 800cb82:	2200      	movs	r2, #0
 800cb84:	4b74      	ldr	r3, [pc, #464]	@ (800cd58 <_dtoa_r+0x2d8>)
 800cb86:	f7f3 fb87 	bl	8000298 <__aeabi_dsub>
 800cb8a:	a369      	add	r3, pc, #420	@ (adr r3, 800cd30 <_dtoa_r+0x2b0>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 fd3a 	bl	8000608 <__aeabi_dmul>
 800cb94:	a368      	add	r3, pc, #416	@ (adr r3, 800cd38 <_dtoa_r+0x2b8>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb7f 	bl	800029c <__adddf3>
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4630      	mov	r0, r6
 800cba2:	460d      	mov	r5, r1
 800cba4:	f7f3 fcc6 	bl	8000534 <__aeabi_i2d>
 800cba8:	a365      	add	r3, pc, #404	@ (adr r3, 800cd40 <_dtoa_r+0x2c0>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fd2b 	bl	8000608 <__aeabi_dmul>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	4629      	mov	r1, r5
 800cbba:	f7f3 fb6f 	bl	800029c <__adddf3>
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	f7f3 ffd1 	bl	8000b68 <__aeabi_d2iz>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	4607      	mov	r7, r0
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4620      	mov	r0, r4
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f7f3 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800cbd4:	b140      	cbz	r0, 800cbe8 <_dtoa_r+0x168>
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	f7f3 fcac 	bl	8000534 <__aeabi_i2d>
 800cbdc:	4622      	mov	r2, r4
 800cbde:	462b      	mov	r3, r5
 800cbe0:	f7f3 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbe4:	b900      	cbnz	r0, 800cbe8 <_dtoa_r+0x168>
 800cbe6:	3f01      	subs	r7, #1
 800cbe8:	2f16      	cmp	r7, #22
 800cbea:	d851      	bhi.n	800cc90 <_dtoa_r+0x210>
 800cbec:	4b5b      	ldr	r3, [pc, #364]	@ (800cd5c <_dtoa_r+0x2dc>)
 800cbee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbfa:	f7f3 ff77 	bl	8000aec <__aeabi_dcmplt>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	d048      	beq.n	800cc94 <_dtoa_r+0x214>
 800cc02:	3f01      	subs	r7, #1
 800cc04:	2300      	movs	r3, #0
 800cc06:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc0a:	1b9b      	subs	r3, r3, r6
 800cc0c:	1e5a      	subs	r2, r3, #1
 800cc0e:	bf44      	itt	mi
 800cc10:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc14:	2300      	movmi	r3, #0
 800cc16:	9208      	str	r2, [sp, #32]
 800cc18:	bf54      	ite	pl
 800cc1a:	f04f 0800 	movpl.w	r8, #0
 800cc1e:	9308      	strmi	r3, [sp, #32]
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	db39      	blt.n	800cc98 <_dtoa_r+0x218>
 800cc24:	9b08      	ldr	r3, [sp, #32]
 800cc26:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cc28:	443b      	add	r3, r7
 800cc2a:	9308      	str	r3, [sp, #32]
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc32:	2b09      	cmp	r3, #9
 800cc34:	d864      	bhi.n	800cd00 <_dtoa_r+0x280>
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	bfc4      	itt	gt
 800cc3a:	3b04      	subgt	r3, #4
 800cc3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc40:	f1a3 0302 	sub.w	r3, r3, #2
 800cc44:	bfcc      	ite	gt
 800cc46:	2400      	movgt	r4, #0
 800cc48:	2401      	movle	r4, #1
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d863      	bhi.n	800cd16 <_dtoa_r+0x296>
 800cc4e:	e8df f003 	tbb	[pc, r3]
 800cc52:	372a      	.short	0x372a
 800cc54:	5535      	.short	0x5535
 800cc56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cc5a:	441e      	add	r6, r3
 800cc5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc60:	2b20      	cmp	r3, #32
 800cc62:	bfc1      	itttt	gt
 800cc64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc68:	409f      	lslgt	r7, r3
 800cc6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc72:	bfd6      	itet	le
 800cc74:	f1c3 0320 	rsble	r3, r3, #32
 800cc78:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc7c:	fa04 f003 	lslle.w	r0, r4, r3
 800cc80:	f7f3 fc48 	bl	8000514 <__aeabi_ui2d>
 800cc84:	2201      	movs	r2, #1
 800cc86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc8a:	3e01      	subs	r6, #1
 800cc8c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cc8e:	e777      	b.n	800cb80 <_dtoa_r+0x100>
 800cc90:	2301      	movs	r3, #1
 800cc92:	e7b8      	b.n	800cc06 <_dtoa_r+0x186>
 800cc94:	9012      	str	r0, [sp, #72]	@ 0x48
 800cc96:	e7b7      	b.n	800cc08 <_dtoa_r+0x188>
 800cc98:	427b      	negs	r3, r7
 800cc9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	eba8 0807 	sub.w	r8, r8, r7
 800cca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cca4:	e7c4      	b.n	800cc30 <_dtoa_r+0x1b0>
 800cca6:	2300      	movs	r3, #0
 800cca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dc35      	bgt.n	800cd1c <_dtoa_r+0x29c>
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccba:	e00b      	b.n	800ccd4 <_dtoa_r+0x254>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e7f3      	b.n	800cca8 <_dtoa_r+0x228>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccc6:	18fb      	adds	r3, r7, r3
 800ccc8:	9300      	str	r3, [sp, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	9307      	str	r3, [sp, #28]
 800ccd0:	bfb8      	it	lt
 800ccd2:	2301      	movlt	r3, #1
 800ccd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ccd8:	2100      	movs	r1, #0
 800ccda:	2204      	movs	r2, #4
 800ccdc:	f102 0514 	add.w	r5, r2, #20
 800cce0:	429d      	cmp	r5, r3
 800cce2:	d91f      	bls.n	800cd24 <_dtoa_r+0x2a4>
 800cce4:	6041      	str	r1, [r0, #4]
 800cce6:	4658      	mov	r0, fp
 800cce8:	f000 fd8e 	bl	800d808 <_Balloc>
 800ccec:	4682      	mov	sl, r0
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d13c      	bne.n	800cd6c <_dtoa_r+0x2ec>
 800ccf2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd60 <_dtoa_r+0x2e0>)
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccfa:	e6d8      	b.n	800caae <_dtoa_r+0x2e>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e7e0      	b.n	800ccc2 <_dtoa_r+0x242>
 800cd00:	2401      	movs	r4, #1
 800cd02:	2300      	movs	r3, #0
 800cd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd06:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd08:	f04f 33ff 	mov.w	r3, #4294967295
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	9307      	str	r3, [sp, #28]
 800cd10:	2200      	movs	r2, #0
 800cd12:	2312      	movs	r3, #18
 800cd14:	e7d0      	b.n	800ccb8 <_dtoa_r+0x238>
 800cd16:	2301      	movs	r3, #1
 800cd18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd1a:	e7f5      	b.n	800cd08 <_dtoa_r+0x288>
 800cd1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	9307      	str	r3, [sp, #28]
 800cd22:	e7d7      	b.n	800ccd4 <_dtoa_r+0x254>
 800cd24:	3101      	adds	r1, #1
 800cd26:	0052      	lsls	r2, r2, #1
 800cd28:	e7d8      	b.n	800ccdc <_dtoa_r+0x25c>
 800cd2a:	bf00      	nop
 800cd2c:	f3af 8000 	nop.w
 800cd30:	636f4361 	.word	0x636f4361
 800cd34:	3fd287a7 	.word	0x3fd287a7
 800cd38:	8b60c8b3 	.word	0x8b60c8b3
 800cd3c:	3fc68a28 	.word	0x3fc68a28
 800cd40:	509f79fb 	.word	0x509f79fb
 800cd44:	3fd34413 	.word	0x3fd34413
 800cd48:	08010442 	.word	0x08010442
 800cd4c:	08010459 	.word	0x08010459
 800cd50:	7ff00000 	.word	0x7ff00000
 800cd54:	0801040d 	.word	0x0801040d
 800cd58:	3ff80000 	.word	0x3ff80000
 800cd5c:	08010550 	.word	0x08010550
 800cd60:	080104b1 	.word	0x080104b1
 800cd64:	0801043e 	.word	0x0801043e
 800cd68:	0801040c 	.word	0x0801040c
 800cd6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd70:	6018      	str	r0, [r3, #0]
 800cd72:	9b07      	ldr	r3, [sp, #28]
 800cd74:	2b0e      	cmp	r3, #14
 800cd76:	f200 80a4 	bhi.w	800cec2 <_dtoa_r+0x442>
 800cd7a:	2c00      	cmp	r4, #0
 800cd7c:	f000 80a1 	beq.w	800cec2 <_dtoa_r+0x442>
 800cd80:	2f00      	cmp	r7, #0
 800cd82:	dd33      	ble.n	800cdec <_dtoa_r+0x36c>
 800cd84:	4bad      	ldr	r3, [pc, #692]	@ (800d03c <_dtoa_r+0x5bc>)
 800cd86:	f007 020f 	and.w	r2, r7, #15
 800cd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd8e:	ed93 7b00 	vldr	d7, [r3]
 800cd92:	05f8      	lsls	r0, r7, #23
 800cd94:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cd98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd9c:	d516      	bpl.n	800cdcc <_dtoa_r+0x34c>
 800cd9e:	4ba8      	ldr	r3, [pc, #672]	@ (800d040 <_dtoa_r+0x5c0>)
 800cda0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cda4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cda8:	f7f3 fd58 	bl	800085c <__aeabi_ddiv>
 800cdac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdb0:	f004 040f 	and.w	r4, r4, #15
 800cdb4:	2603      	movs	r6, #3
 800cdb6:	4da2      	ldr	r5, [pc, #648]	@ (800d040 <_dtoa_r+0x5c0>)
 800cdb8:	b954      	cbnz	r4, 800cdd0 <_dtoa_r+0x350>
 800cdba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cdc2:	f7f3 fd4b 	bl	800085c <__aeabi_ddiv>
 800cdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdca:	e028      	b.n	800ce1e <_dtoa_r+0x39e>
 800cdcc:	2602      	movs	r6, #2
 800cdce:	e7f2      	b.n	800cdb6 <_dtoa_r+0x336>
 800cdd0:	07e1      	lsls	r1, r4, #31
 800cdd2:	d508      	bpl.n	800cde6 <_dtoa_r+0x366>
 800cdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cddc:	f7f3 fc14 	bl	8000608 <__aeabi_dmul>
 800cde0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cde4:	3601      	adds	r6, #1
 800cde6:	1064      	asrs	r4, r4, #1
 800cde8:	3508      	adds	r5, #8
 800cdea:	e7e5      	b.n	800cdb8 <_dtoa_r+0x338>
 800cdec:	f000 80d2 	beq.w	800cf94 <_dtoa_r+0x514>
 800cdf0:	427c      	negs	r4, r7
 800cdf2:	4b92      	ldr	r3, [pc, #584]	@ (800d03c <_dtoa_r+0x5bc>)
 800cdf4:	4d92      	ldr	r5, [pc, #584]	@ (800d040 <_dtoa_r+0x5c0>)
 800cdf6:	f004 020f 	and.w	r2, r4, #15
 800cdfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce06:	f7f3 fbff 	bl	8000608 <__aeabi_dmul>
 800ce0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce0e:	1124      	asrs	r4, r4, #4
 800ce10:	2300      	movs	r3, #0
 800ce12:	2602      	movs	r6, #2
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	f040 80b2 	bne.w	800cf7e <_dtoa_r+0x4fe>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1d3      	bne.n	800cdc6 <_dtoa_r+0x346>
 800ce1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80b7 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce2a:	4b86      	ldr	r3, [pc, #536]	@ (800d044 <_dtoa_r+0x5c4>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	4620      	mov	r0, r4
 800ce30:	4629      	mov	r1, r5
 800ce32:	f7f3 fe5b 	bl	8000aec <__aeabi_dcmplt>
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f000 80ae 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce3c:	9b07      	ldr	r3, [sp, #28]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 80aa 	beq.w	800cf98 <_dtoa_r+0x518>
 800ce44:	9b00      	ldr	r3, [sp, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	dd37      	ble.n	800ceba <_dtoa_r+0x43a>
 800ce4a:	1e7b      	subs	r3, r7, #1
 800ce4c:	9304      	str	r3, [sp, #16]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	4b7d      	ldr	r3, [pc, #500]	@ (800d048 <_dtoa_r+0x5c8>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	4629      	mov	r1, r5
 800ce56:	f7f3 fbd7 	bl	8000608 <__aeabi_dmul>
 800ce5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce5e:	9c00      	ldr	r4, [sp, #0]
 800ce60:	3601      	adds	r6, #1
 800ce62:	4630      	mov	r0, r6
 800ce64:	f7f3 fb66 	bl	8000534 <__aeabi_i2d>
 800ce68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce6c:	f7f3 fbcc 	bl	8000608 <__aeabi_dmul>
 800ce70:	4b76      	ldr	r3, [pc, #472]	@ (800d04c <_dtoa_r+0x5cc>)
 800ce72:	2200      	movs	r2, #0
 800ce74:	f7f3 fa12 	bl	800029c <__adddf3>
 800ce78:	4605      	mov	r5, r0
 800ce7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce7e:	2c00      	cmp	r4, #0
 800ce80:	f040 808d 	bne.w	800cf9e <_dtoa_r+0x51e>
 800ce84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce88:	4b71      	ldr	r3, [pc, #452]	@ (800d050 <_dtoa_r+0x5d0>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f7f3 fa04 	bl	8000298 <__aeabi_dsub>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce98:	462a      	mov	r2, r5
 800ce9a:	4633      	mov	r3, r6
 800ce9c:	f7f3 fe44 	bl	8000b28 <__aeabi_dcmpgt>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f040 828b 	bne.w	800d3bc <_dtoa_r+0x93c>
 800cea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ceaa:	462a      	mov	r2, r5
 800ceac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ceb0:	f7f3 fe1c 	bl	8000aec <__aeabi_dcmplt>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f040 8128 	bne.w	800d10a <_dtoa_r+0x68a>
 800ceba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f2c0 815a 	blt.w	800d17e <_dtoa_r+0x6fe>
 800ceca:	2f0e      	cmp	r7, #14
 800cecc:	f300 8157 	bgt.w	800d17e <_dtoa_r+0x6fe>
 800ced0:	4b5a      	ldr	r3, [pc, #360]	@ (800d03c <_dtoa_r+0x5bc>)
 800ced2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ced6:	ed93 7b00 	vldr	d7, [r3]
 800ceda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cedc:	2b00      	cmp	r3, #0
 800cede:	ed8d 7b00 	vstr	d7, [sp]
 800cee2:	da03      	bge.n	800ceec <_dtoa_r+0x46c>
 800cee4:	9b07      	ldr	r3, [sp, #28]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f340 8101 	ble.w	800d0ee <_dtoa_r+0x66e>
 800ceec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cef0:	4656      	mov	r6, sl
 800cef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f7f3 fcaf 	bl	800085c <__aeabi_ddiv>
 800cefe:	f7f3 fe33 	bl	8000b68 <__aeabi_d2iz>
 800cf02:	4680      	mov	r8, r0
 800cf04:	f7f3 fb16 	bl	8000534 <__aeabi_i2d>
 800cf08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf0c:	f7f3 fb7c 	bl	8000608 <__aeabi_dmul>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4620      	mov	r0, r4
 800cf16:	4629      	mov	r1, r5
 800cf18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf1c:	f7f3 f9bc 	bl	8000298 <__aeabi_dsub>
 800cf20:	f806 4b01 	strb.w	r4, [r6], #1
 800cf24:	9d07      	ldr	r5, [sp, #28]
 800cf26:	eba6 040a 	sub.w	r4, r6, sl
 800cf2a:	42a5      	cmp	r5, r4
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	f040 8117 	bne.w	800d162 <_dtoa_r+0x6e2>
 800cf34:	f7f3 f9b2 	bl	800029c <__adddf3>
 800cf38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	f7f3 fdf2 	bl	8000b28 <__aeabi_dcmpgt>
 800cf44:	2800      	cmp	r0, #0
 800cf46:	f040 80f9 	bne.w	800d13c <_dtoa_r+0x6bc>
 800cf4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf4e:	4620      	mov	r0, r4
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7f3 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf56:	b118      	cbz	r0, 800cf60 <_dtoa_r+0x4e0>
 800cf58:	f018 0f01 	tst.w	r8, #1
 800cf5c:	f040 80ee 	bne.w	800d13c <_dtoa_r+0x6bc>
 800cf60:	4649      	mov	r1, r9
 800cf62:	4658      	mov	r0, fp
 800cf64:	f000 fc90 	bl	800d888 <_Bfree>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	7033      	strb	r3, [r6, #0]
 800cf6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf6e:	3701      	adds	r7, #1
 800cf70:	601f      	str	r7, [r3, #0]
 800cf72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 831d 	beq.w	800d5b4 <_dtoa_r+0xb34>
 800cf7a:	601e      	str	r6, [r3, #0]
 800cf7c:	e31a      	b.n	800d5b4 <_dtoa_r+0xb34>
 800cf7e:	07e2      	lsls	r2, r4, #31
 800cf80:	d505      	bpl.n	800cf8e <_dtoa_r+0x50e>
 800cf82:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf86:	f7f3 fb3f 	bl	8000608 <__aeabi_dmul>
 800cf8a:	3601      	adds	r6, #1
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	1064      	asrs	r4, r4, #1
 800cf90:	3508      	adds	r5, #8
 800cf92:	e73f      	b.n	800ce14 <_dtoa_r+0x394>
 800cf94:	2602      	movs	r6, #2
 800cf96:	e742      	b.n	800ce1e <_dtoa_r+0x39e>
 800cf98:	9c07      	ldr	r4, [sp, #28]
 800cf9a:	9704      	str	r7, [sp, #16]
 800cf9c:	e761      	b.n	800ce62 <_dtoa_r+0x3e2>
 800cf9e:	4b27      	ldr	r3, [pc, #156]	@ (800d03c <_dtoa_r+0x5bc>)
 800cfa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cfa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cfaa:	4454      	add	r4, sl
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d053      	beq.n	800d058 <_dtoa_r+0x5d8>
 800cfb0:	4928      	ldr	r1, [pc, #160]	@ (800d054 <_dtoa_r+0x5d4>)
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	f7f3 fc52 	bl	800085c <__aeabi_ddiv>
 800cfb8:	4633      	mov	r3, r6
 800cfba:	462a      	mov	r2, r5
 800cfbc:	f7f3 f96c 	bl	8000298 <__aeabi_dsub>
 800cfc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfc4:	4656      	mov	r6, sl
 800cfc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfca:	f7f3 fdcd 	bl	8000b68 <__aeabi_d2iz>
 800cfce:	4605      	mov	r5, r0
 800cfd0:	f7f3 fab0 	bl	8000534 <__aeabi_i2d>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfdc:	f7f3 f95c 	bl	8000298 <__aeabi_dsub>
 800cfe0:	3530      	adds	r5, #48	@ 0x30
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfea:	f806 5b01 	strb.w	r5, [r6], #1
 800cfee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cff2:	f7f3 fd7b 	bl	8000aec <__aeabi_dcmplt>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d171      	bne.n	800d0de <_dtoa_r+0x65e>
 800cffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cffe:	4911      	ldr	r1, [pc, #68]	@ (800d044 <_dtoa_r+0x5c4>)
 800d000:	2000      	movs	r0, #0
 800d002:	f7f3 f949 	bl	8000298 <__aeabi_dsub>
 800d006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d00a:	f7f3 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800d00e:	2800      	cmp	r0, #0
 800d010:	f040 8095 	bne.w	800d13e <_dtoa_r+0x6be>
 800d014:	42a6      	cmp	r6, r4
 800d016:	f43f af50 	beq.w	800ceba <_dtoa_r+0x43a>
 800d01a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d01e:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <_dtoa_r+0x5c8>)
 800d020:	2200      	movs	r2, #0
 800d022:	f7f3 faf1 	bl	8000608 <__aeabi_dmul>
 800d026:	4b08      	ldr	r3, [pc, #32]	@ (800d048 <_dtoa_r+0x5c8>)
 800d028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d02c:	2200      	movs	r2, #0
 800d02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d032:	f7f3 fae9 	bl	8000608 <__aeabi_dmul>
 800d036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d03a:	e7c4      	b.n	800cfc6 <_dtoa_r+0x546>
 800d03c:	08010550 	.word	0x08010550
 800d040:	08010528 	.word	0x08010528
 800d044:	3ff00000 	.word	0x3ff00000
 800d048:	40240000 	.word	0x40240000
 800d04c:	401c0000 	.word	0x401c0000
 800d050:	40140000 	.word	0x40140000
 800d054:	3fe00000 	.word	0x3fe00000
 800d058:	4631      	mov	r1, r6
 800d05a:	4628      	mov	r0, r5
 800d05c:	f7f3 fad4 	bl	8000608 <__aeabi_dmul>
 800d060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d064:	9415      	str	r4, [sp, #84]	@ 0x54
 800d066:	4656      	mov	r6, sl
 800d068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d06c:	f7f3 fd7c 	bl	8000b68 <__aeabi_d2iz>
 800d070:	4605      	mov	r5, r0
 800d072:	f7f3 fa5f 	bl	8000534 <__aeabi_i2d>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07e:	f7f3 f90b 	bl	8000298 <__aeabi_dsub>
 800d082:	3530      	adds	r5, #48	@ 0x30
 800d084:	f806 5b01 	strb.w	r5, [r6], #1
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	42a6      	cmp	r6, r4
 800d08e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d092:	f04f 0200 	mov.w	r2, #0
 800d096:	d124      	bne.n	800d0e2 <_dtoa_r+0x662>
 800d098:	4bac      	ldr	r3, [pc, #688]	@ (800d34c <_dtoa_r+0x8cc>)
 800d09a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d09e:	f7f3 f8fd 	bl	800029c <__adddf3>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0aa:	f7f3 fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	d145      	bne.n	800d13e <_dtoa_r+0x6be>
 800d0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0b6:	49a5      	ldr	r1, [pc, #660]	@ (800d34c <_dtoa_r+0x8cc>)
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f7f3 f8ed 	bl	8000298 <__aeabi_dsub>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0c6:	f7f3 fd11 	bl	8000aec <__aeabi_dcmplt>
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	f43f aef5 	beq.w	800ceba <_dtoa_r+0x43a>
 800d0d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d0d2:	1e73      	subs	r3, r6, #1
 800d0d4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d0d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0da:	2b30      	cmp	r3, #48	@ 0x30
 800d0dc:	d0f8      	beq.n	800d0d0 <_dtoa_r+0x650>
 800d0de:	9f04      	ldr	r7, [sp, #16]
 800d0e0:	e73e      	b.n	800cf60 <_dtoa_r+0x4e0>
 800d0e2:	4b9b      	ldr	r3, [pc, #620]	@ (800d350 <_dtoa_r+0x8d0>)
 800d0e4:	f7f3 fa90 	bl	8000608 <__aeabi_dmul>
 800d0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0ec:	e7bc      	b.n	800d068 <_dtoa_r+0x5e8>
 800d0ee:	d10c      	bne.n	800d10a <_dtoa_r+0x68a>
 800d0f0:	4b98      	ldr	r3, [pc, #608]	@ (800d354 <_dtoa_r+0x8d4>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0f8:	f7f3 fa86 	bl	8000608 <__aeabi_dmul>
 800d0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d100:	f7f3 fd08 	bl	8000b14 <__aeabi_dcmpge>
 800d104:	2800      	cmp	r0, #0
 800d106:	f000 8157 	beq.w	800d3b8 <_dtoa_r+0x938>
 800d10a:	2400      	movs	r4, #0
 800d10c:	4625      	mov	r5, r4
 800d10e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d110:	43db      	mvns	r3, r3
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	4656      	mov	r6, sl
 800d116:	2700      	movs	r7, #0
 800d118:	4621      	mov	r1, r4
 800d11a:	4658      	mov	r0, fp
 800d11c:	f000 fbb4 	bl	800d888 <_Bfree>
 800d120:	2d00      	cmp	r5, #0
 800d122:	d0dc      	beq.n	800d0de <_dtoa_r+0x65e>
 800d124:	b12f      	cbz	r7, 800d132 <_dtoa_r+0x6b2>
 800d126:	42af      	cmp	r7, r5
 800d128:	d003      	beq.n	800d132 <_dtoa_r+0x6b2>
 800d12a:	4639      	mov	r1, r7
 800d12c:	4658      	mov	r0, fp
 800d12e:	f000 fbab 	bl	800d888 <_Bfree>
 800d132:	4629      	mov	r1, r5
 800d134:	4658      	mov	r0, fp
 800d136:	f000 fba7 	bl	800d888 <_Bfree>
 800d13a:	e7d0      	b.n	800d0de <_dtoa_r+0x65e>
 800d13c:	9704      	str	r7, [sp, #16]
 800d13e:	4633      	mov	r3, r6
 800d140:	461e      	mov	r6, r3
 800d142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d146:	2a39      	cmp	r2, #57	@ 0x39
 800d148:	d107      	bne.n	800d15a <_dtoa_r+0x6da>
 800d14a:	459a      	cmp	sl, r3
 800d14c:	d1f8      	bne.n	800d140 <_dtoa_r+0x6c0>
 800d14e:	9a04      	ldr	r2, [sp, #16]
 800d150:	3201      	adds	r2, #1
 800d152:	9204      	str	r2, [sp, #16]
 800d154:	2230      	movs	r2, #48	@ 0x30
 800d156:	f88a 2000 	strb.w	r2, [sl]
 800d15a:	781a      	ldrb	r2, [r3, #0]
 800d15c:	3201      	adds	r2, #1
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	e7bd      	b.n	800d0de <_dtoa_r+0x65e>
 800d162:	4b7b      	ldr	r3, [pc, #492]	@ (800d350 <_dtoa_r+0x8d0>)
 800d164:	2200      	movs	r2, #0
 800d166:	f7f3 fa4f 	bl	8000608 <__aeabi_dmul>
 800d16a:	2200      	movs	r2, #0
 800d16c:	2300      	movs	r3, #0
 800d16e:	4604      	mov	r4, r0
 800d170:	460d      	mov	r5, r1
 800d172:	f7f3 fcb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d176:	2800      	cmp	r0, #0
 800d178:	f43f aebb 	beq.w	800cef2 <_dtoa_r+0x472>
 800d17c:	e6f0      	b.n	800cf60 <_dtoa_r+0x4e0>
 800d17e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d180:	2a00      	cmp	r2, #0
 800d182:	f000 80db 	beq.w	800d33c <_dtoa_r+0x8bc>
 800d186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d188:	2a01      	cmp	r2, #1
 800d18a:	f300 80bf 	bgt.w	800d30c <_dtoa_r+0x88c>
 800d18e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d190:	2a00      	cmp	r2, #0
 800d192:	f000 80b7 	beq.w	800d304 <_dtoa_r+0x884>
 800d196:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d19a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d19c:	4646      	mov	r6, r8
 800d19e:	9a08      	ldr	r2, [sp, #32]
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	441a      	add	r2, r3
 800d1a4:	4658      	mov	r0, fp
 800d1a6:	4498      	add	r8, r3
 800d1a8:	9208      	str	r2, [sp, #32]
 800d1aa:	f000 fc6b 	bl	800da84 <__i2b>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	b15e      	cbz	r6, 800d1ca <_dtoa_r+0x74a>
 800d1b2:	9b08      	ldr	r3, [sp, #32]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	dd08      	ble.n	800d1ca <_dtoa_r+0x74a>
 800d1b8:	42b3      	cmp	r3, r6
 800d1ba:	9a08      	ldr	r2, [sp, #32]
 800d1bc:	bfa8      	it	ge
 800d1be:	4633      	movge	r3, r6
 800d1c0:	eba8 0803 	sub.w	r8, r8, r3
 800d1c4:	1af6      	subs	r6, r6, r3
 800d1c6:	1ad3      	subs	r3, r2, r3
 800d1c8:	9308      	str	r3, [sp, #32]
 800d1ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1cc:	b1f3      	cbz	r3, 800d20c <_dtoa_r+0x78c>
 800d1ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 80b7 	beq.w	800d344 <_dtoa_r+0x8c4>
 800d1d6:	b18c      	cbz	r4, 800d1fc <_dtoa_r+0x77c>
 800d1d8:	4629      	mov	r1, r5
 800d1da:	4622      	mov	r2, r4
 800d1dc:	4658      	mov	r0, fp
 800d1de:	f000 fd11 	bl	800dc04 <__pow5mult>
 800d1e2:	464a      	mov	r2, r9
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	4658      	mov	r0, fp
 800d1ea:	f000 fc61 	bl	800dab0 <__multiply>
 800d1ee:	4649      	mov	r1, r9
 800d1f0:	9004      	str	r0, [sp, #16]
 800d1f2:	4658      	mov	r0, fp
 800d1f4:	f000 fb48 	bl	800d888 <_Bfree>
 800d1f8:	9b04      	ldr	r3, [sp, #16]
 800d1fa:	4699      	mov	r9, r3
 800d1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1fe:	1b1a      	subs	r2, r3, r4
 800d200:	d004      	beq.n	800d20c <_dtoa_r+0x78c>
 800d202:	4649      	mov	r1, r9
 800d204:	4658      	mov	r0, fp
 800d206:	f000 fcfd 	bl	800dc04 <__pow5mult>
 800d20a:	4681      	mov	r9, r0
 800d20c:	2101      	movs	r1, #1
 800d20e:	4658      	mov	r0, fp
 800d210:	f000 fc38 	bl	800da84 <__i2b>
 800d214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d216:	4604      	mov	r4, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f000 81cf 	beq.w	800d5bc <_dtoa_r+0xb3c>
 800d21e:	461a      	mov	r2, r3
 800d220:	4601      	mov	r1, r0
 800d222:	4658      	mov	r0, fp
 800d224:	f000 fcee 	bl	800dc04 <__pow5mult>
 800d228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	4604      	mov	r4, r0
 800d22e:	f300 8095 	bgt.w	800d35c <_dtoa_r+0x8dc>
 800d232:	9b02      	ldr	r3, [sp, #8]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f040 8087 	bne.w	800d348 <_dtoa_r+0x8c8>
 800d23a:	9b03      	ldr	r3, [sp, #12]
 800d23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d240:	2b00      	cmp	r3, #0
 800d242:	f040 8089 	bne.w	800d358 <_dtoa_r+0x8d8>
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d24c:	0d1b      	lsrs	r3, r3, #20
 800d24e:	051b      	lsls	r3, r3, #20
 800d250:	b12b      	cbz	r3, 800d25e <_dtoa_r+0x7de>
 800d252:	9b08      	ldr	r3, [sp, #32]
 800d254:	3301      	adds	r3, #1
 800d256:	9308      	str	r3, [sp, #32]
 800d258:	f108 0801 	add.w	r8, r8, #1
 800d25c:	2301      	movs	r3, #1
 800d25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d262:	2b00      	cmp	r3, #0
 800d264:	f000 81b0 	beq.w	800d5c8 <_dtoa_r+0xb48>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d26e:	6918      	ldr	r0, [r3, #16]
 800d270:	f000 fbbc 	bl	800d9ec <__hi0bits>
 800d274:	f1c0 0020 	rsb	r0, r0, #32
 800d278:	9b08      	ldr	r3, [sp, #32]
 800d27a:	4418      	add	r0, r3
 800d27c:	f010 001f 	ands.w	r0, r0, #31
 800d280:	d077      	beq.n	800d372 <_dtoa_r+0x8f2>
 800d282:	f1c0 0320 	rsb	r3, r0, #32
 800d286:	2b04      	cmp	r3, #4
 800d288:	dd6b      	ble.n	800d362 <_dtoa_r+0x8e2>
 800d28a:	9b08      	ldr	r3, [sp, #32]
 800d28c:	f1c0 001c 	rsb	r0, r0, #28
 800d290:	4403      	add	r3, r0
 800d292:	4480      	add	r8, r0
 800d294:	4406      	add	r6, r0
 800d296:	9308      	str	r3, [sp, #32]
 800d298:	f1b8 0f00 	cmp.w	r8, #0
 800d29c:	dd05      	ble.n	800d2aa <_dtoa_r+0x82a>
 800d29e:	4649      	mov	r1, r9
 800d2a0:	4642      	mov	r2, r8
 800d2a2:	4658      	mov	r0, fp
 800d2a4:	f000 fd08 	bl	800dcb8 <__lshift>
 800d2a8:	4681      	mov	r9, r0
 800d2aa:	9b08      	ldr	r3, [sp, #32]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	dd05      	ble.n	800d2bc <_dtoa_r+0x83c>
 800d2b0:	4621      	mov	r1, r4
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	f000 fcff 	bl	800dcb8 <__lshift>
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d059      	beq.n	800d376 <_dtoa_r+0x8f6>
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	4648      	mov	r0, r9
 800d2c6:	f000 fd63 	bl	800dd90 <__mcmp>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	da53      	bge.n	800d376 <_dtoa_r+0x8f6>
 800d2ce:	1e7b      	subs	r3, r7, #1
 800d2d0:	9304      	str	r3, [sp, #16]
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	220a      	movs	r2, #10
 800d2d8:	4658      	mov	r0, fp
 800d2da:	f000 faf7 	bl	800d8cc <__multadd>
 800d2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2e0:	4681      	mov	r9, r0
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 8172 	beq.w	800d5cc <_dtoa_r+0xb4c>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	4629      	mov	r1, r5
 800d2ec:	220a      	movs	r2, #10
 800d2ee:	4658      	mov	r0, fp
 800d2f0:	f000 faec 	bl	800d8cc <__multadd>
 800d2f4:	9b00      	ldr	r3, [sp, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	4605      	mov	r5, r0
 800d2fa:	dc67      	bgt.n	800d3cc <_dtoa_r+0x94c>
 800d2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	dc41      	bgt.n	800d386 <_dtoa_r+0x906>
 800d302:	e063      	b.n	800d3cc <_dtoa_r+0x94c>
 800d304:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d30a:	e746      	b.n	800d19a <_dtoa_r+0x71a>
 800d30c:	9b07      	ldr	r3, [sp, #28]
 800d30e:	1e5c      	subs	r4, r3, #1
 800d310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d312:	42a3      	cmp	r3, r4
 800d314:	bfbf      	itttt	lt
 800d316:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d318:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d31a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d31c:	1ae3      	sublt	r3, r4, r3
 800d31e:	bfb4      	ite	lt
 800d320:	18d2      	addlt	r2, r2, r3
 800d322:	1b1c      	subge	r4, r3, r4
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	bfbc      	itt	lt
 800d328:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d32a:	2400      	movlt	r4, #0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	bfb5      	itete	lt
 800d330:	eba8 0603 	sublt.w	r6, r8, r3
 800d334:	9b07      	ldrge	r3, [sp, #28]
 800d336:	2300      	movlt	r3, #0
 800d338:	4646      	movge	r6, r8
 800d33a:	e730      	b.n	800d19e <_dtoa_r+0x71e>
 800d33c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d33e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d340:	4646      	mov	r6, r8
 800d342:	e735      	b.n	800d1b0 <_dtoa_r+0x730>
 800d344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d346:	e75c      	b.n	800d202 <_dtoa_r+0x782>
 800d348:	2300      	movs	r3, #0
 800d34a:	e788      	b.n	800d25e <_dtoa_r+0x7de>
 800d34c:	3fe00000 	.word	0x3fe00000
 800d350:	40240000 	.word	0x40240000
 800d354:	40140000 	.word	0x40140000
 800d358:	9b02      	ldr	r3, [sp, #8]
 800d35a:	e780      	b.n	800d25e <_dtoa_r+0x7de>
 800d35c:	2300      	movs	r3, #0
 800d35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d360:	e782      	b.n	800d268 <_dtoa_r+0x7e8>
 800d362:	d099      	beq.n	800d298 <_dtoa_r+0x818>
 800d364:	9a08      	ldr	r2, [sp, #32]
 800d366:	331c      	adds	r3, #28
 800d368:	441a      	add	r2, r3
 800d36a:	4498      	add	r8, r3
 800d36c:	441e      	add	r6, r3
 800d36e:	9208      	str	r2, [sp, #32]
 800d370:	e792      	b.n	800d298 <_dtoa_r+0x818>
 800d372:	4603      	mov	r3, r0
 800d374:	e7f6      	b.n	800d364 <_dtoa_r+0x8e4>
 800d376:	9b07      	ldr	r3, [sp, #28]
 800d378:	9704      	str	r7, [sp, #16]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	dc20      	bgt.n	800d3c0 <_dtoa_r+0x940>
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d382:	2b02      	cmp	r3, #2
 800d384:	dd1e      	ble.n	800d3c4 <_dtoa_r+0x944>
 800d386:	9b00      	ldr	r3, [sp, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f47f aec0 	bne.w	800d10e <_dtoa_r+0x68e>
 800d38e:	4621      	mov	r1, r4
 800d390:	2205      	movs	r2, #5
 800d392:	4658      	mov	r0, fp
 800d394:	f000 fa9a 	bl	800d8cc <__multadd>
 800d398:	4601      	mov	r1, r0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4648      	mov	r0, r9
 800d39e:	f000 fcf7 	bl	800dd90 <__mcmp>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f77f aeb3 	ble.w	800d10e <_dtoa_r+0x68e>
 800d3a8:	4656      	mov	r6, sl
 800d3aa:	2331      	movs	r3, #49	@ 0x31
 800d3ac:	f806 3b01 	strb.w	r3, [r6], #1
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	9304      	str	r3, [sp, #16]
 800d3b6:	e6ae      	b.n	800d116 <_dtoa_r+0x696>
 800d3b8:	9c07      	ldr	r4, [sp, #28]
 800d3ba:	9704      	str	r7, [sp, #16]
 800d3bc:	4625      	mov	r5, r4
 800d3be:	e7f3      	b.n	800d3a8 <_dtoa_r+0x928>
 800d3c0:	9b07      	ldr	r3, [sp, #28]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 8104 	beq.w	800d5d4 <_dtoa_r+0xb54>
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	dd05      	ble.n	800d3dc <_dtoa_r+0x95c>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	4632      	mov	r2, r6
 800d3d4:	4658      	mov	r0, fp
 800d3d6:	f000 fc6f 	bl	800dcb8 <__lshift>
 800d3da:	4605      	mov	r5, r0
 800d3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d05a      	beq.n	800d498 <_dtoa_r+0xa18>
 800d3e2:	6869      	ldr	r1, [r5, #4]
 800d3e4:	4658      	mov	r0, fp
 800d3e6:	f000 fa0f 	bl	800d808 <_Balloc>
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	b928      	cbnz	r0, 800d3fa <_dtoa_r+0x97a>
 800d3ee:	4b84      	ldr	r3, [pc, #528]	@ (800d600 <_dtoa_r+0xb80>)
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d3f6:	f7ff bb5a 	b.w	800caae <_dtoa_r+0x2e>
 800d3fa:	692a      	ldr	r2, [r5, #16]
 800d3fc:	3202      	adds	r2, #2
 800d3fe:	0092      	lsls	r2, r2, #2
 800d400:	f105 010c 	add.w	r1, r5, #12
 800d404:	300c      	adds	r0, #12
 800d406:	f7ff fa9e 	bl	800c946 <memcpy>
 800d40a:	2201      	movs	r2, #1
 800d40c:	4631      	mov	r1, r6
 800d40e:	4658      	mov	r0, fp
 800d410:	f000 fc52 	bl	800dcb8 <__lshift>
 800d414:	f10a 0301 	add.w	r3, sl, #1
 800d418:	9307      	str	r3, [sp, #28]
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	4453      	add	r3, sl
 800d41e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d420:	9b02      	ldr	r3, [sp, #8]
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	462f      	mov	r7, r5
 800d428:	930a      	str	r3, [sp, #40]	@ 0x28
 800d42a:	4605      	mov	r5, r0
 800d42c:	9b07      	ldr	r3, [sp, #28]
 800d42e:	4621      	mov	r1, r4
 800d430:	3b01      	subs	r3, #1
 800d432:	4648      	mov	r0, r9
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	f7ff fa9b 	bl	800c970 <quorem>
 800d43a:	4639      	mov	r1, r7
 800d43c:	9002      	str	r0, [sp, #8]
 800d43e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d442:	4648      	mov	r0, r9
 800d444:	f000 fca4 	bl	800dd90 <__mcmp>
 800d448:	462a      	mov	r2, r5
 800d44a:	9008      	str	r0, [sp, #32]
 800d44c:	4621      	mov	r1, r4
 800d44e:	4658      	mov	r0, fp
 800d450:	f000 fcba 	bl	800ddc8 <__mdiff>
 800d454:	68c2      	ldr	r2, [r0, #12]
 800d456:	4606      	mov	r6, r0
 800d458:	bb02      	cbnz	r2, 800d49c <_dtoa_r+0xa1c>
 800d45a:	4601      	mov	r1, r0
 800d45c:	4648      	mov	r0, r9
 800d45e:	f000 fc97 	bl	800dd90 <__mcmp>
 800d462:	4602      	mov	r2, r0
 800d464:	4631      	mov	r1, r6
 800d466:	4658      	mov	r0, fp
 800d468:	920e      	str	r2, [sp, #56]	@ 0x38
 800d46a:	f000 fa0d 	bl	800d888 <_Bfree>
 800d46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d472:	9e07      	ldr	r6, [sp, #28]
 800d474:	ea43 0102 	orr.w	r1, r3, r2
 800d478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d47a:	4319      	orrs	r1, r3
 800d47c:	d110      	bne.n	800d4a0 <_dtoa_r+0xa20>
 800d47e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d482:	d029      	beq.n	800d4d8 <_dtoa_r+0xa58>
 800d484:	9b08      	ldr	r3, [sp, #32]
 800d486:	2b00      	cmp	r3, #0
 800d488:	dd02      	ble.n	800d490 <_dtoa_r+0xa10>
 800d48a:	9b02      	ldr	r3, [sp, #8]
 800d48c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d490:	9b00      	ldr	r3, [sp, #0]
 800d492:	f883 8000 	strb.w	r8, [r3]
 800d496:	e63f      	b.n	800d118 <_dtoa_r+0x698>
 800d498:	4628      	mov	r0, r5
 800d49a:	e7bb      	b.n	800d414 <_dtoa_r+0x994>
 800d49c:	2201      	movs	r2, #1
 800d49e:	e7e1      	b.n	800d464 <_dtoa_r+0x9e4>
 800d4a0:	9b08      	ldr	r3, [sp, #32]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	db04      	blt.n	800d4b0 <_dtoa_r+0xa30>
 800d4a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d4a8:	430b      	orrs	r3, r1
 800d4aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4ac:	430b      	orrs	r3, r1
 800d4ae:	d120      	bne.n	800d4f2 <_dtoa_r+0xa72>
 800d4b0:	2a00      	cmp	r2, #0
 800d4b2:	dded      	ble.n	800d490 <_dtoa_r+0xa10>
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	4658      	mov	r0, fp
 800d4ba:	f000 fbfd 	bl	800dcb8 <__lshift>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4681      	mov	r9, r0
 800d4c2:	f000 fc65 	bl	800dd90 <__mcmp>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	dc03      	bgt.n	800d4d2 <_dtoa_r+0xa52>
 800d4ca:	d1e1      	bne.n	800d490 <_dtoa_r+0xa10>
 800d4cc:	f018 0f01 	tst.w	r8, #1
 800d4d0:	d0de      	beq.n	800d490 <_dtoa_r+0xa10>
 800d4d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4d6:	d1d8      	bne.n	800d48a <_dtoa_r+0xa0a>
 800d4d8:	9a00      	ldr	r2, [sp, #0]
 800d4da:	2339      	movs	r3, #57	@ 0x39
 800d4dc:	7013      	strb	r3, [r2, #0]
 800d4de:	4633      	mov	r3, r6
 800d4e0:	461e      	mov	r6, r3
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4e8:	2a39      	cmp	r2, #57	@ 0x39
 800d4ea:	d052      	beq.n	800d592 <_dtoa_r+0xb12>
 800d4ec:	3201      	adds	r2, #1
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	e612      	b.n	800d118 <_dtoa_r+0x698>
 800d4f2:	2a00      	cmp	r2, #0
 800d4f4:	dd07      	ble.n	800d506 <_dtoa_r+0xa86>
 800d4f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4fa:	d0ed      	beq.n	800d4d8 <_dtoa_r+0xa58>
 800d4fc:	9a00      	ldr	r2, [sp, #0]
 800d4fe:	f108 0301 	add.w	r3, r8, #1
 800d502:	7013      	strb	r3, [r2, #0]
 800d504:	e608      	b.n	800d118 <_dtoa_r+0x698>
 800d506:	9b07      	ldr	r3, [sp, #28]
 800d508:	9a07      	ldr	r2, [sp, #28]
 800d50a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d50e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d510:	4293      	cmp	r3, r2
 800d512:	d028      	beq.n	800d566 <_dtoa_r+0xae6>
 800d514:	4649      	mov	r1, r9
 800d516:	2300      	movs	r3, #0
 800d518:	220a      	movs	r2, #10
 800d51a:	4658      	mov	r0, fp
 800d51c:	f000 f9d6 	bl	800d8cc <__multadd>
 800d520:	42af      	cmp	r7, r5
 800d522:	4681      	mov	r9, r0
 800d524:	f04f 0300 	mov.w	r3, #0
 800d528:	f04f 020a 	mov.w	r2, #10
 800d52c:	4639      	mov	r1, r7
 800d52e:	4658      	mov	r0, fp
 800d530:	d107      	bne.n	800d542 <_dtoa_r+0xac2>
 800d532:	f000 f9cb 	bl	800d8cc <__multadd>
 800d536:	4607      	mov	r7, r0
 800d538:	4605      	mov	r5, r0
 800d53a:	9b07      	ldr	r3, [sp, #28]
 800d53c:	3301      	adds	r3, #1
 800d53e:	9307      	str	r3, [sp, #28]
 800d540:	e774      	b.n	800d42c <_dtoa_r+0x9ac>
 800d542:	f000 f9c3 	bl	800d8cc <__multadd>
 800d546:	4629      	mov	r1, r5
 800d548:	4607      	mov	r7, r0
 800d54a:	2300      	movs	r3, #0
 800d54c:	220a      	movs	r2, #10
 800d54e:	4658      	mov	r0, fp
 800d550:	f000 f9bc 	bl	800d8cc <__multadd>
 800d554:	4605      	mov	r5, r0
 800d556:	e7f0      	b.n	800d53a <_dtoa_r+0xaba>
 800d558:	9b00      	ldr	r3, [sp, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	bfcc      	ite	gt
 800d55e:	461e      	movgt	r6, r3
 800d560:	2601      	movle	r6, #1
 800d562:	4456      	add	r6, sl
 800d564:	2700      	movs	r7, #0
 800d566:	4649      	mov	r1, r9
 800d568:	2201      	movs	r2, #1
 800d56a:	4658      	mov	r0, fp
 800d56c:	f000 fba4 	bl	800dcb8 <__lshift>
 800d570:	4621      	mov	r1, r4
 800d572:	4681      	mov	r9, r0
 800d574:	f000 fc0c 	bl	800dd90 <__mcmp>
 800d578:	2800      	cmp	r0, #0
 800d57a:	dcb0      	bgt.n	800d4de <_dtoa_r+0xa5e>
 800d57c:	d102      	bne.n	800d584 <_dtoa_r+0xb04>
 800d57e:	f018 0f01 	tst.w	r8, #1
 800d582:	d1ac      	bne.n	800d4de <_dtoa_r+0xa5e>
 800d584:	4633      	mov	r3, r6
 800d586:	461e      	mov	r6, r3
 800d588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d58c:	2a30      	cmp	r2, #48	@ 0x30
 800d58e:	d0fa      	beq.n	800d586 <_dtoa_r+0xb06>
 800d590:	e5c2      	b.n	800d118 <_dtoa_r+0x698>
 800d592:	459a      	cmp	sl, r3
 800d594:	d1a4      	bne.n	800d4e0 <_dtoa_r+0xa60>
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	3301      	adds	r3, #1
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	2331      	movs	r3, #49	@ 0x31
 800d59e:	f88a 3000 	strb.w	r3, [sl]
 800d5a2:	e5b9      	b.n	800d118 <_dtoa_r+0x698>
 800d5a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d604 <_dtoa_r+0xb84>
 800d5aa:	b11b      	cbz	r3, 800d5b4 <_dtoa_r+0xb34>
 800d5ac:	f10a 0308 	add.w	r3, sl, #8
 800d5b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	4650      	mov	r0, sl
 800d5b6:	b019      	add	sp, #100	@ 0x64
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	f77f ae37 	ble.w	800d232 <_dtoa_r+0x7b2>
 800d5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d5c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	e655      	b.n	800d278 <_dtoa_r+0x7f8>
 800d5cc:	9b00      	ldr	r3, [sp, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f77f aed6 	ble.w	800d380 <_dtoa_r+0x900>
 800d5d4:	4656      	mov	r6, sl
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4648      	mov	r0, r9
 800d5da:	f7ff f9c9 	bl	800c970 <quorem>
 800d5de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d5e2:	f806 8b01 	strb.w	r8, [r6], #1
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	eba6 020a 	sub.w	r2, r6, sl
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	ddb3      	ble.n	800d558 <_dtoa_r+0xad8>
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	220a      	movs	r2, #10
 800d5f6:	4658      	mov	r0, fp
 800d5f8:	f000 f968 	bl	800d8cc <__multadd>
 800d5fc:	4681      	mov	r9, r0
 800d5fe:	e7ea      	b.n	800d5d6 <_dtoa_r+0xb56>
 800d600:	080104b1 	.word	0x080104b1
 800d604:	08010435 	.word	0x08010435

0800d608 <_free_r>:
 800d608:	b538      	push	{r3, r4, r5, lr}
 800d60a:	4605      	mov	r5, r0
 800d60c:	2900      	cmp	r1, #0
 800d60e:	d041      	beq.n	800d694 <_free_r+0x8c>
 800d610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d614:	1f0c      	subs	r4, r1, #4
 800d616:	2b00      	cmp	r3, #0
 800d618:	bfb8      	it	lt
 800d61a:	18e4      	addlt	r4, r4, r3
 800d61c:	f000 f8e8 	bl	800d7f0 <__malloc_lock>
 800d620:	4a1d      	ldr	r2, [pc, #116]	@ (800d698 <_free_r+0x90>)
 800d622:	6813      	ldr	r3, [r2, #0]
 800d624:	b933      	cbnz	r3, 800d634 <_free_r+0x2c>
 800d626:	6063      	str	r3, [r4, #4]
 800d628:	6014      	str	r4, [r2, #0]
 800d62a:	4628      	mov	r0, r5
 800d62c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d630:	f000 b8e4 	b.w	800d7fc <__malloc_unlock>
 800d634:	42a3      	cmp	r3, r4
 800d636:	d908      	bls.n	800d64a <_free_r+0x42>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	1821      	adds	r1, r4, r0
 800d63c:	428b      	cmp	r3, r1
 800d63e:	bf01      	itttt	eq
 800d640:	6819      	ldreq	r1, [r3, #0]
 800d642:	685b      	ldreq	r3, [r3, #4]
 800d644:	1809      	addeq	r1, r1, r0
 800d646:	6021      	streq	r1, [r4, #0]
 800d648:	e7ed      	b.n	800d626 <_free_r+0x1e>
 800d64a:	461a      	mov	r2, r3
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	b10b      	cbz	r3, 800d654 <_free_r+0x4c>
 800d650:	42a3      	cmp	r3, r4
 800d652:	d9fa      	bls.n	800d64a <_free_r+0x42>
 800d654:	6811      	ldr	r1, [r2, #0]
 800d656:	1850      	adds	r0, r2, r1
 800d658:	42a0      	cmp	r0, r4
 800d65a:	d10b      	bne.n	800d674 <_free_r+0x6c>
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	4401      	add	r1, r0
 800d660:	1850      	adds	r0, r2, r1
 800d662:	4283      	cmp	r3, r0
 800d664:	6011      	str	r1, [r2, #0]
 800d666:	d1e0      	bne.n	800d62a <_free_r+0x22>
 800d668:	6818      	ldr	r0, [r3, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	6053      	str	r3, [r2, #4]
 800d66e:	4408      	add	r0, r1
 800d670:	6010      	str	r0, [r2, #0]
 800d672:	e7da      	b.n	800d62a <_free_r+0x22>
 800d674:	d902      	bls.n	800d67c <_free_r+0x74>
 800d676:	230c      	movs	r3, #12
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	e7d6      	b.n	800d62a <_free_r+0x22>
 800d67c:	6820      	ldr	r0, [r4, #0]
 800d67e:	1821      	adds	r1, r4, r0
 800d680:	428b      	cmp	r3, r1
 800d682:	bf04      	itt	eq
 800d684:	6819      	ldreq	r1, [r3, #0]
 800d686:	685b      	ldreq	r3, [r3, #4]
 800d688:	6063      	str	r3, [r4, #4]
 800d68a:	bf04      	itt	eq
 800d68c:	1809      	addeq	r1, r1, r0
 800d68e:	6021      	streq	r1, [r4, #0]
 800d690:	6054      	str	r4, [r2, #4]
 800d692:	e7ca      	b.n	800d62a <_free_r+0x22>
 800d694:	bd38      	pop	{r3, r4, r5, pc}
 800d696:	bf00      	nop
 800d698:	20001280 	.word	0x20001280

0800d69c <malloc>:
 800d69c:	4b02      	ldr	r3, [pc, #8]	@ (800d6a8 <malloc+0xc>)
 800d69e:	4601      	mov	r1, r0
 800d6a0:	6818      	ldr	r0, [r3, #0]
 800d6a2:	f000 b825 	b.w	800d6f0 <_malloc_r>
 800d6a6:	bf00      	nop
 800d6a8:	200002d8 	.word	0x200002d8

0800d6ac <sbrk_aligned>:
 800d6ac:	b570      	push	{r4, r5, r6, lr}
 800d6ae:	4e0f      	ldr	r6, [pc, #60]	@ (800d6ec <sbrk_aligned+0x40>)
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	6831      	ldr	r1, [r6, #0]
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	b911      	cbnz	r1, 800d6be <sbrk_aligned+0x12>
 800d6b8:	f001 ff36 	bl	800f528 <_sbrk_r>
 800d6bc:	6030      	str	r0, [r6, #0]
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f001 ff31 	bl	800f528 <_sbrk_r>
 800d6c6:	1c43      	adds	r3, r0, #1
 800d6c8:	d103      	bne.n	800d6d2 <sbrk_aligned+0x26>
 800d6ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	bd70      	pop	{r4, r5, r6, pc}
 800d6d2:	1cc4      	adds	r4, r0, #3
 800d6d4:	f024 0403 	bic.w	r4, r4, #3
 800d6d8:	42a0      	cmp	r0, r4
 800d6da:	d0f8      	beq.n	800d6ce <sbrk_aligned+0x22>
 800d6dc:	1a21      	subs	r1, r4, r0
 800d6de:	4628      	mov	r0, r5
 800d6e0:	f001 ff22 	bl	800f528 <_sbrk_r>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	d1f2      	bne.n	800d6ce <sbrk_aligned+0x22>
 800d6e8:	e7ef      	b.n	800d6ca <sbrk_aligned+0x1e>
 800d6ea:	bf00      	nop
 800d6ec:	2000127c 	.word	0x2000127c

0800d6f0 <_malloc_r>:
 800d6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	1ccd      	adds	r5, r1, #3
 800d6f6:	f025 0503 	bic.w	r5, r5, #3
 800d6fa:	3508      	adds	r5, #8
 800d6fc:	2d0c      	cmp	r5, #12
 800d6fe:	bf38      	it	cc
 800d700:	250c      	movcc	r5, #12
 800d702:	2d00      	cmp	r5, #0
 800d704:	4606      	mov	r6, r0
 800d706:	db01      	blt.n	800d70c <_malloc_r+0x1c>
 800d708:	42a9      	cmp	r1, r5
 800d70a:	d904      	bls.n	800d716 <_malloc_r+0x26>
 800d70c:	230c      	movs	r3, #12
 800d70e:	6033      	str	r3, [r6, #0]
 800d710:	2000      	movs	r0, #0
 800d712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d7ec <_malloc_r+0xfc>
 800d71a:	f000 f869 	bl	800d7f0 <__malloc_lock>
 800d71e:	f8d8 3000 	ldr.w	r3, [r8]
 800d722:	461c      	mov	r4, r3
 800d724:	bb44      	cbnz	r4, 800d778 <_malloc_r+0x88>
 800d726:	4629      	mov	r1, r5
 800d728:	4630      	mov	r0, r6
 800d72a:	f7ff ffbf 	bl	800d6ac <sbrk_aligned>
 800d72e:	1c43      	adds	r3, r0, #1
 800d730:	4604      	mov	r4, r0
 800d732:	d158      	bne.n	800d7e6 <_malloc_r+0xf6>
 800d734:	f8d8 4000 	ldr.w	r4, [r8]
 800d738:	4627      	mov	r7, r4
 800d73a:	2f00      	cmp	r7, #0
 800d73c:	d143      	bne.n	800d7c6 <_malloc_r+0xd6>
 800d73e:	2c00      	cmp	r4, #0
 800d740:	d04b      	beq.n	800d7da <_malloc_r+0xea>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	4639      	mov	r1, r7
 800d746:	4630      	mov	r0, r6
 800d748:	eb04 0903 	add.w	r9, r4, r3
 800d74c:	f001 feec 	bl	800f528 <_sbrk_r>
 800d750:	4581      	cmp	r9, r0
 800d752:	d142      	bne.n	800d7da <_malloc_r+0xea>
 800d754:	6821      	ldr	r1, [r4, #0]
 800d756:	1a6d      	subs	r5, r5, r1
 800d758:	4629      	mov	r1, r5
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7ff ffa6 	bl	800d6ac <sbrk_aligned>
 800d760:	3001      	adds	r0, #1
 800d762:	d03a      	beq.n	800d7da <_malloc_r+0xea>
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	442b      	add	r3, r5
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	f8d8 3000 	ldr.w	r3, [r8]
 800d76e:	685a      	ldr	r2, [r3, #4]
 800d770:	bb62      	cbnz	r2, 800d7cc <_malloc_r+0xdc>
 800d772:	f8c8 7000 	str.w	r7, [r8]
 800d776:	e00f      	b.n	800d798 <_malloc_r+0xa8>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	1b52      	subs	r2, r2, r5
 800d77c:	d420      	bmi.n	800d7c0 <_malloc_r+0xd0>
 800d77e:	2a0b      	cmp	r2, #11
 800d780:	d917      	bls.n	800d7b2 <_malloc_r+0xc2>
 800d782:	1961      	adds	r1, r4, r5
 800d784:	42a3      	cmp	r3, r4
 800d786:	6025      	str	r5, [r4, #0]
 800d788:	bf18      	it	ne
 800d78a:	6059      	strne	r1, [r3, #4]
 800d78c:	6863      	ldr	r3, [r4, #4]
 800d78e:	bf08      	it	eq
 800d790:	f8c8 1000 	streq.w	r1, [r8]
 800d794:	5162      	str	r2, [r4, r5]
 800d796:	604b      	str	r3, [r1, #4]
 800d798:	4630      	mov	r0, r6
 800d79a:	f000 f82f 	bl	800d7fc <__malloc_unlock>
 800d79e:	f104 000b 	add.w	r0, r4, #11
 800d7a2:	1d23      	adds	r3, r4, #4
 800d7a4:	f020 0007 	bic.w	r0, r0, #7
 800d7a8:	1ac2      	subs	r2, r0, r3
 800d7aa:	bf1c      	itt	ne
 800d7ac:	1a1b      	subne	r3, r3, r0
 800d7ae:	50a3      	strne	r3, [r4, r2]
 800d7b0:	e7af      	b.n	800d712 <_malloc_r+0x22>
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	bf0c      	ite	eq
 800d7b8:	f8c8 2000 	streq.w	r2, [r8]
 800d7bc:	605a      	strne	r2, [r3, #4]
 800d7be:	e7eb      	b.n	800d798 <_malloc_r+0xa8>
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	6864      	ldr	r4, [r4, #4]
 800d7c4:	e7ae      	b.n	800d724 <_malloc_r+0x34>
 800d7c6:	463c      	mov	r4, r7
 800d7c8:	687f      	ldr	r7, [r7, #4]
 800d7ca:	e7b6      	b.n	800d73a <_malloc_r+0x4a>
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	d1fb      	bne.n	800d7cc <_malloc_r+0xdc>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	6053      	str	r3, [r2, #4]
 800d7d8:	e7de      	b.n	800d798 <_malloc_r+0xa8>
 800d7da:	230c      	movs	r3, #12
 800d7dc:	6033      	str	r3, [r6, #0]
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f000 f80c 	bl	800d7fc <__malloc_unlock>
 800d7e4:	e794      	b.n	800d710 <_malloc_r+0x20>
 800d7e6:	6005      	str	r5, [r0, #0]
 800d7e8:	e7d6      	b.n	800d798 <_malloc_r+0xa8>
 800d7ea:	bf00      	nop
 800d7ec:	20001280 	.word	0x20001280

0800d7f0 <__malloc_lock>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	@ (800d7f8 <__malloc_lock+0x8>)
 800d7f2:	f7ff b89e 	b.w	800c932 <__retarget_lock_acquire_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	20001278 	.word	0x20001278

0800d7fc <__malloc_unlock>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	@ (800d804 <__malloc_unlock+0x8>)
 800d7fe:	f7ff b899 	b.w	800c934 <__retarget_lock_release_recursive>
 800d802:	bf00      	nop
 800d804:	20001278 	.word	0x20001278

0800d808 <_Balloc>:
 800d808:	b570      	push	{r4, r5, r6, lr}
 800d80a:	69c6      	ldr	r6, [r0, #28]
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	b976      	cbnz	r6, 800d830 <_Balloc+0x28>
 800d812:	2010      	movs	r0, #16
 800d814:	f7ff ff42 	bl	800d69c <malloc>
 800d818:	4602      	mov	r2, r0
 800d81a:	61e0      	str	r0, [r4, #28]
 800d81c:	b920      	cbnz	r0, 800d828 <_Balloc+0x20>
 800d81e:	4b18      	ldr	r3, [pc, #96]	@ (800d880 <_Balloc+0x78>)
 800d820:	4818      	ldr	r0, [pc, #96]	@ (800d884 <_Balloc+0x7c>)
 800d822:	216b      	movs	r1, #107	@ 0x6b
 800d824:	f001 fe98 	bl	800f558 <__assert_func>
 800d828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d82c:	6006      	str	r6, [r0, #0]
 800d82e:	60c6      	str	r6, [r0, #12]
 800d830:	69e6      	ldr	r6, [r4, #28]
 800d832:	68f3      	ldr	r3, [r6, #12]
 800d834:	b183      	cbz	r3, 800d858 <_Balloc+0x50>
 800d836:	69e3      	ldr	r3, [r4, #28]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d83e:	b9b8      	cbnz	r0, 800d870 <_Balloc+0x68>
 800d840:	2101      	movs	r1, #1
 800d842:	fa01 f605 	lsl.w	r6, r1, r5
 800d846:	1d72      	adds	r2, r6, #5
 800d848:	0092      	lsls	r2, r2, #2
 800d84a:	4620      	mov	r0, r4
 800d84c:	f001 fea2 	bl	800f594 <_calloc_r>
 800d850:	b160      	cbz	r0, 800d86c <_Balloc+0x64>
 800d852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d856:	e00e      	b.n	800d876 <_Balloc+0x6e>
 800d858:	2221      	movs	r2, #33	@ 0x21
 800d85a:	2104      	movs	r1, #4
 800d85c:	4620      	mov	r0, r4
 800d85e:	f001 fe99 	bl	800f594 <_calloc_r>
 800d862:	69e3      	ldr	r3, [r4, #28]
 800d864:	60f0      	str	r0, [r6, #12]
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1e4      	bne.n	800d836 <_Balloc+0x2e>
 800d86c:	2000      	movs	r0, #0
 800d86e:	bd70      	pop	{r4, r5, r6, pc}
 800d870:	6802      	ldr	r2, [r0, #0]
 800d872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d876:	2300      	movs	r3, #0
 800d878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d87c:	e7f7      	b.n	800d86e <_Balloc+0x66>
 800d87e:	bf00      	nop
 800d880:	08010442 	.word	0x08010442
 800d884:	080104c2 	.word	0x080104c2

0800d888 <_Bfree>:
 800d888:	b570      	push	{r4, r5, r6, lr}
 800d88a:	69c6      	ldr	r6, [r0, #28]
 800d88c:	4605      	mov	r5, r0
 800d88e:	460c      	mov	r4, r1
 800d890:	b976      	cbnz	r6, 800d8b0 <_Bfree+0x28>
 800d892:	2010      	movs	r0, #16
 800d894:	f7ff ff02 	bl	800d69c <malloc>
 800d898:	4602      	mov	r2, r0
 800d89a:	61e8      	str	r0, [r5, #28]
 800d89c:	b920      	cbnz	r0, 800d8a8 <_Bfree+0x20>
 800d89e:	4b09      	ldr	r3, [pc, #36]	@ (800d8c4 <_Bfree+0x3c>)
 800d8a0:	4809      	ldr	r0, [pc, #36]	@ (800d8c8 <_Bfree+0x40>)
 800d8a2:	218f      	movs	r1, #143	@ 0x8f
 800d8a4:	f001 fe58 	bl	800f558 <__assert_func>
 800d8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8ac:	6006      	str	r6, [r0, #0]
 800d8ae:	60c6      	str	r6, [r0, #12]
 800d8b0:	b13c      	cbz	r4, 800d8c2 <_Bfree+0x3a>
 800d8b2:	69eb      	ldr	r3, [r5, #28]
 800d8b4:	6862      	ldr	r2, [r4, #4]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8bc:	6021      	str	r1, [r4, #0]
 800d8be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8c2:	bd70      	pop	{r4, r5, r6, pc}
 800d8c4:	08010442 	.word	0x08010442
 800d8c8:	080104c2 	.word	0x080104c2

0800d8cc <__multadd>:
 800d8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d0:	690d      	ldr	r5, [r1, #16]
 800d8d2:	4607      	mov	r7, r0
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	461e      	mov	r6, r3
 800d8d8:	f101 0c14 	add.w	ip, r1, #20
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f8dc 3000 	ldr.w	r3, [ip]
 800d8e2:	b299      	uxth	r1, r3
 800d8e4:	fb02 6101 	mla	r1, r2, r1, r6
 800d8e8:	0c1e      	lsrs	r6, r3, #16
 800d8ea:	0c0b      	lsrs	r3, r1, #16
 800d8ec:	fb02 3306 	mla	r3, r2, r6, r3
 800d8f0:	b289      	uxth	r1, r1
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d8f8:	4285      	cmp	r5, r0
 800d8fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d8fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d902:	dcec      	bgt.n	800d8de <__multadd+0x12>
 800d904:	b30e      	cbz	r6, 800d94a <__multadd+0x7e>
 800d906:	68a3      	ldr	r3, [r4, #8]
 800d908:	42ab      	cmp	r3, r5
 800d90a:	dc19      	bgt.n	800d940 <__multadd+0x74>
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	4638      	mov	r0, r7
 800d910:	3101      	adds	r1, #1
 800d912:	f7ff ff79 	bl	800d808 <_Balloc>
 800d916:	4680      	mov	r8, r0
 800d918:	b928      	cbnz	r0, 800d926 <__multadd+0x5a>
 800d91a:	4602      	mov	r2, r0
 800d91c:	4b0c      	ldr	r3, [pc, #48]	@ (800d950 <__multadd+0x84>)
 800d91e:	480d      	ldr	r0, [pc, #52]	@ (800d954 <__multadd+0x88>)
 800d920:	21ba      	movs	r1, #186	@ 0xba
 800d922:	f001 fe19 	bl	800f558 <__assert_func>
 800d926:	6922      	ldr	r2, [r4, #16]
 800d928:	3202      	adds	r2, #2
 800d92a:	f104 010c 	add.w	r1, r4, #12
 800d92e:	0092      	lsls	r2, r2, #2
 800d930:	300c      	adds	r0, #12
 800d932:	f7ff f808 	bl	800c946 <memcpy>
 800d936:	4621      	mov	r1, r4
 800d938:	4638      	mov	r0, r7
 800d93a:	f7ff ffa5 	bl	800d888 <_Bfree>
 800d93e:	4644      	mov	r4, r8
 800d940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d944:	3501      	adds	r5, #1
 800d946:	615e      	str	r6, [r3, #20]
 800d948:	6125      	str	r5, [r4, #16]
 800d94a:	4620      	mov	r0, r4
 800d94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d950:	080104b1 	.word	0x080104b1
 800d954:	080104c2 	.word	0x080104c2

0800d958 <__s2b>:
 800d958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d95c:	460c      	mov	r4, r1
 800d95e:	4615      	mov	r5, r2
 800d960:	461f      	mov	r7, r3
 800d962:	2209      	movs	r2, #9
 800d964:	3308      	adds	r3, #8
 800d966:	4606      	mov	r6, r0
 800d968:	fb93 f3f2 	sdiv	r3, r3, r2
 800d96c:	2100      	movs	r1, #0
 800d96e:	2201      	movs	r2, #1
 800d970:	429a      	cmp	r2, r3
 800d972:	db09      	blt.n	800d988 <__s2b+0x30>
 800d974:	4630      	mov	r0, r6
 800d976:	f7ff ff47 	bl	800d808 <_Balloc>
 800d97a:	b940      	cbnz	r0, 800d98e <__s2b+0x36>
 800d97c:	4602      	mov	r2, r0
 800d97e:	4b19      	ldr	r3, [pc, #100]	@ (800d9e4 <__s2b+0x8c>)
 800d980:	4819      	ldr	r0, [pc, #100]	@ (800d9e8 <__s2b+0x90>)
 800d982:	21d3      	movs	r1, #211	@ 0xd3
 800d984:	f001 fde8 	bl	800f558 <__assert_func>
 800d988:	0052      	lsls	r2, r2, #1
 800d98a:	3101      	adds	r1, #1
 800d98c:	e7f0      	b.n	800d970 <__s2b+0x18>
 800d98e:	9b08      	ldr	r3, [sp, #32]
 800d990:	6143      	str	r3, [r0, #20]
 800d992:	2d09      	cmp	r5, #9
 800d994:	f04f 0301 	mov.w	r3, #1
 800d998:	6103      	str	r3, [r0, #16]
 800d99a:	dd16      	ble.n	800d9ca <__s2b+0x72>
 800d99c:	f104 0909 	add.w	r9, r4, #9
 800d9a0:	46c8      	mov	r8, r9
 800d9a2:	442c      	add	r4, r5
 800d9a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d9a8:	4601      	mov	r1, r0
 800d9aa:	3b30      	subs	r3, #48	@ 0x30
 800d9ac:	220a      	movs	r2, #10
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	f7ff ff8c 	bl	800d8cc <__multadd>
 800d9b4:	45a0      	cmp	r8, r4
 800d9b6:	d1f5      	bne.n	800d9a4 <__s2b+0x4c>
 800d9b8:	f1a5 0408 	sub.w	r4, r5, #8
 800d9bc:	444c      	add	r4, r9
 800d9be:	1b2d      	subs	r5, r5, r4
 800d9c0:	1963      	adds	r3, r4, r5
 800d9c2:	42bb      	cmp	r3, r7
 800d9c4:	db04      	blt.n	800d9d0 <__s2b+0x78>
 800d9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ca:	340a      	adds	r4, #10
 800d9cc:	2509      	movs	r5, #9
 800d9ce:	e7f6      	b.n	800d9be <__s2b+0x66>
 800d9d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	3b30      	subs	r3, #48	@ 0x30
 800d9d8:	220a      	movs	r2, #10
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ff76 	bl	800d8cc <__multadd>
 800d9e0:	e7ee      	b.n	800d9c0 <__s2b+0x68>
 800d9e2:	bf00      	nop
 800d9e4:	080104b1 	.word	0x080104b1
 800d9e8:	080104c2 	.word	0x080104c2

0800d9ec <__hi0bits>:
 800d9ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	bf36      	itet	cc
 800d9f4:	0403      	lslcc	r3, r0, #16
 800d9f6:	2000      	movcs	r0, #0
 800d9f8:	2010      	movcc	r0, #16
 800d9fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9fe:	bf3c      	itt	cc
 800da00:	021b      	lslcc	r3, r3, #8
 800da02:	3008      	addcc	r0, #8
 800da04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da08:	bf3c      	itt	cc
 800da0a:	011b      	lslcc	r3, r3, #4
 800da0c:	3004      	addcc	r0, #4
 800da0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da12:	bf3c      	itt	cc
 800da14:	009b      	lslcc	r3, r3, #2
 800da16:	3002      	addcc	r0, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	db05      	blt.n	800da28 <__hi0bits+0x3c>
 800da1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da20:	f100 0001 	add.w	r0, r0, #1
 800da24:	bf08      	it	eq
 800da26:	2020      	moveq	r0, #32
 800da28:	4770      	bx	lr

0800da2a <__lo0bits>:
 800da2a:	6803      	ldr	r3, [r0, #0]
 800da2c:	4602      	mov	r2, r0
 800da2e:	f013 0007 	ands.w	r0, r3, #7
 800da32:	d00b      	beq.n	800da4c <__lo0bits+0x22>
 800da34:	07d9      	lsls	r1, r3, #31
 800da36:	d421      	bmi.n	800da7c <__lo0bits+0x52>
 800da38:	0798      	lsls	r0, r3, #30
 800da3a:	bf49      	itett	mi
 800da3c:	085b      	lsrmi	r3, r3, #1
 800da3e:	089b      	lsrpl	r3, r3, #2
 800da40:	2001      	movmi	r0, #1
 800da42:	6013      	strmi	r3, [r2, #0]
 800da44:	bf5c      	itt	pl
 800da46:	6013      	strpl	r3, [r2, #0]
 800da48:	2002      	movpl	r0, #2
 800da4a:	4770      	bx	lr
 800da4c:	b299      	uxth	r1, r3
 800da4e:	b909      	cbnz	r1, 800da54 <__lo0bits+0x2a>
 800da50:	0c1b      	lsrs	r3, r3, #16
 800da52:	2010      	movs	r0, #16
 800da54:	b2d9      	uxtb	r1, r3
 800da56:	b909      	cbnz	r1, 800da5c <__lo0bits+0x32>
 800da58:	3008      	adds	r0, #8
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	0719      	lsls	r1, r3, #28
 800da5e:	bf04      	itt	eq
 800da60:	091b      	lsreq	r3, r3, #4
 800da62:	3004      	addeq	r0, #4
 800da64:	0799      	lsls	r1, r3, #30
 800da66:	bf04      	itt	eq
 800da68:	089b      	lsreq	r3, r3, #2
 800da6a:	3002      	addeq	r0, #2
 800da6c:	07d9      	lsls	r1, r3, #31
 800da6e:	d403      	bmi.n	800da78 <__lo0bits+0x4e>
 800da70:	085b      	lsrs	r3, r3, #1
 800da72:	f100 0001 	add.w	r0, r0, #1
 800da76:	d003      	beq.n	800da80 <__lo0bits+0x56>
 800da78:	6013      	str	r3, [r2, #0]
 800da7a:	4770      	bx	lr
 800da7c:	2000      	movs	r0, #0
 800da7e:	4770      	bx	lr
 800da80:	2020      	movs	r0, #32
 800da82:	4770      	bx	lr

0800da84 <__i2b>:
 800da84:	b510      	push	{r4, lr}
 800da86:	460c      	mov	r4, r1
 800da88:	2101      	movs	r1, #1
 800da8a:	f7ff febd 	bl	800d808 <_Balloc>
 800da8e:	4602      	mov	r2, r0
 800da90:	b928      	cbnz	r0, 800da9e <__i2b+0x1a>
 800da92:	4b05      	ldr	r3, [pc, #20]	@ (800daa8 <__i2b+0x24>)
 800da94:	4805      	ldr	r0, [pc, #20]	@ (800daac <__i2b+0x28>)
 800da96:	f240 1145 	movw	r1, #325	@ 0x145
 800da9a:	f001 fd5d 	bl	800f558 <__assert_func>
 800da9e:	2301      	movs	r3, #1
 800daa0:	6144      	str	r4, [r0, #20]
 800daa2:	6103      	str	r3, [r0, #16]
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	bf00      	nop
 800daa8:	080104b1 	.word	0x080104b1
 800daac:	080104c2 	.word	0x080104c2

0800dab0 <__multiply>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	4614      	mov	r4, r2
 800dab6:	690a      	ldr	r2, [r1, #16]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	429a      	cmp	r2, r3
 800dabc:	bfa8      	it	ge
 800dabe:	4623      	movge	r3, r4
 800dac0:	460f      	mov	r7, r1
 800dac2:	bfa4      	itt	ge
 800dac4:	460c      	movge	r4, r1
 800dac6:	461f      	movge	r7, r3
 800dac8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dacc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	6861      	ldr	r1, [r4, #4]
 800dad4:	eb0a 0609 	add.w	r6, sl, r9
 800dad8:	42b3      	cmp	r3, r6
 800dada:	b085      	sub	sp, #20
 800dadc:	bfb8      	it	lt
 800dade:	3101      	addlt	r1, #1
 800dae0:	f7ff fe92 	bl	800d808 <_Balloc>
 800dae4:	b930      	cbnz	r0, 800daf4 <__multiply+0x44>
 800dae6:	4602      	mov	r2, r0
 800dae8:	4b44      	ldr	r3, [pc, #272]	@ (800dbfc <__multiply+0x14c>)
 800daea:	4845      	ldr	r0, [pc, #276]	@ (800dc00 <__multiply+0x150>)
 800daec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800daf0:	f001 fd32 	bl	800f558 <__assert_func>
 800daf4:	f100 0514 	add.w	r5, r0, #20
 800daf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dafc:	462b      	mov	r3, r5
 800dafe:	2200      	movs	r2, #0
 800db00:	4543      	cmp	r3, r8
 800db02:	d321      	bcc.n	800db48 <__multiply+0x98>
 800db04:	f107 0114 	add.w	r1, r7, #20
 800db08:	f104 0214 	add.w	r2, r4, #20
 800db0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800db10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800db14:	9302      	str	r3, [sp, #8]
 800db16:	1b13      	subs	r3, r2, r4
 800db18:	3b15      	subs	r3, #21
 800db1a:	f023 0303 	bic.w	r3, r3, #3
 800db1e:	3304      	adds	r3, #4
 800db20:	f104 0715 	add.w	r7, r4, #21
 800db24:	42ba      	cmp	r2, r7
 800db26:	bf38      	it	cc
 800db28:	2304      	movcc	r3, #4
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	9b02      	ldr	r3, [sp, #8]
 800db2e:	9103      	str	r1, [sp, #12]
 800db30:	428b      	cmp	r3, r1
 800db32:	d80c      	bhi.n	800db4e <__multiply+0x9e>
 800db34:	2e00      	cmp	r6, #0
 800db36:	dd03      	ble.n	800db40 <__multiply+0x90>
 800db38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d05b      	beq.n	800dbf8 <__multiply+0x148>
 800db40:	6106      	str	r6, [r0, #16]
 800db42:	b005      	add	sp, #20
 800db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db48:	f843 2b04 	str.w	r2, [r3], #4
 800db4c:	e7d8      	b.n	800db00 <__multiply+0x50>
 800db4e:	f8b1 a000 	ldrh.w	sl, [r1]
 800db52:	f1ba 0f00 	cmp.w	sl, #0
 800db56:	d024      	beq.n	800dba2 <__multiply+0xf2>
 800db58:	f104 0e14 	add.w	lr, r4, #20
 800db5c:	46a9      	mov	r9, r5
 800db5e:	f04f 0c00 	mov.w	ip, #0
 800db62:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db66:	f8d9 3000 	ldr.w	r3, [r9]
 800db6a:	fa1f fb87 	uxth.w	fp, r7
 800db6e:	b29b      	uxth	r3, r3
 800db70:	fb0a 330b 	mla	r3, sl, fp, r3
 800db74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800db78:	f8d9 7000 	ldr.w	r7, [r9]
 800db7c:	4463      	add	r3, ip
 800db7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db82:	fb0a c70b 	mla	r7, sl, fp, ip
 800db86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800db90:	4572      	cmp	r2, lr
 800db92:	f849 3b04 	str.w	r3, [r9], #4
 800db96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800db9a:	d8e2      	bhi.n	800db62 <__multiply+0xb2>
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	f845 c003 	str.w	ip, [r5, r3]
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dba8:	3104      	adds	r1, #4
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	d021      	beq.n	800dbf4 <__multiply+0x144>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	f104 0c14 	add.w	ip, r4, #20
 800dbb6:	46ae      	mov	lr, r5
 800dbb8:	f04f 0a00 	mov.w	sl, #0
 800dbbc:	f8bc b000 	ldrh.w	fp, [ip]
 800dbc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dbc4:	fb09 770b 	mla	r7, r9, fp, r7
 800dbc8:	4457      	add	r7, sl
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dbd0:	f84e 3b04 	str.w	r3, [lr], #4
 800dbd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dbd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbdc:	f8be 3000 	ldrh.w	r3, [lr]
 800dbe0:	fb09 330a 	mla	r3, r9, sl, r3
 800dbe4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dbe8:	4562      	cmp	r2, ip
 800dbea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbee:	d8e5      	bhi.n	800dbbc <__multiply+0x10c>
 800dbf0:	9f01      	ldr	r7, [sp, #4]
 800dbf2:	51eb      	str	r3, [r5, r7]
 800dbf4:	3504      	adds	r5, #4
 800dbf6:	e799      	b.n	800db2c <__multiply+0x7c>
 800dbf8:	3e01      	subs	r6, #1
 800dbfa:	e79b      	b.n	800db34 <__multiply+0x84>
 800dbfc:	080104b1 	.word	0x080104b1
 800dc00:	080104c2 	.word	0x080104c2

0800dc04 <__pow5mult>:
 800dc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc08:	4615      	mov	r5, r2
 800dc0a:	f012 0203 	ands.w	r2, r2, #3
 800dc0e:	4607      	mov	r7, r0
 800dc10:	460e      	mov	r6, r1
 800dc12:	d007      	beq.n	800dc24 <__pow5mult+0x20>
 800dc14:	4c25      	ldr	r4, [pc, #148]	@ (800dcac <__pow5mult+0xa8>)
 800dc16:	3a01      	subs	r2, #1
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc1e:	f7ff fe55 	bl	800d8cc <__multadd>
 800dc22:	4606      	mov	r6, r0
 800dc24:	10ad      	asrs	r5, r5, #2
 800dc26:	d03d      	beq.n	800dca4 <__pow5mult+0xa0>
 800dc28:	69fc      	ldr	r4, [r7, #28]
 800dc2a:	b97c      	cbnz	r4, 800dc4c <__pow5mult+0x48>
 800dc2c:	2010      	movs	r0, #16
 800dc2e:	f7ff fd35 	bl	800d69c <malloc>
 800dc32:	4602      	mov	r2, r0
 800dc34:	61f8      	str	r0, [r7, #28]
 800dc36:	b928      	cbnz	r0, 800dc44 <__pow5mult+0x40>
 800dc38:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb0 <__pow5mult+0xac>)
 800dc3a:	481e      	ldr	r0, [pc, #120]	@ (800dcb4 <__pow5mult+0xb0>)
 800dc3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dc40:	f001 fc8a 	bl	800f558 <__assert_func>
 800dc44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc48:	6004      	str	r4, [r0, #0]
 800dc4a:	60c4      	str	r4, [r0, #12]
 800dc4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc54:	b94c      	cbnz	r4, 800dc6a <__pow5mult+0x66>
 800dc56:	f240 2171 	movw	r1, #625	@ 0x271
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	f7ff ff12 	bl	800da84 <__i2b>
 800dc60:	2300      	movs	r3, #0
 800dc62:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc66:	4604      	mov	r4, r0
 800dc68:	6003      	str	r3, [r0, #0]
 800dc6a:	f04f 0900 	mov.w	r9, #0
 800dc6e:	07eb      	lsls	r3, r5, #31
 800dc70:	d50a      	bpl.n	800dc88 <__pow5mult+0x84>
 800dc72:	4631      	mov	r1, r6
 800dc74:	4622      	mov	r2, r4
 800dc76:	4638      	mov	r0, r7
 800dc78:	f7ff ff1a 	bl	800dab0 <__multiply>
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	4680      	mov	r8, r0
 800dc80:	4638      	mov	r0, r7
 800dc82:	f7ff fe01 	bl	800d888 <_Bfree>
 800dc86:	4646      	mov	r6, r8
 800dc88:	106d      	asrs	r5, r5, #1
 800dc8a:	d00b      	beq.n	800dca4 <__pow5mult+0xa0>
 800dc8c:	6820      	ldr	r0, [r4, #0]
 800dc8e:	b938      	cbnz	r0, 800dca0 <__pow5mult+0x9c>
 800dc90:	4622      	mov	r2, r4
 800dc92:	4621      	mov	r1, r4
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff ff0b 	bl	800dab0 <__multiply>
 800dc9a:	6020      	str	r0, [r4, #0]
 800dc9c:	f8c0 9000 	str.w	r9, [r0]
 800dca0:	4604      	mov	r4, r0
 800dca2:	e7e4      	b.n	800dc6e <__pow5mult+0x6a>
 800dca4:	4630      	mov	r0, r6
 800dca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcaa:	bf00      	nop
 800dcac:	0801051c 	.word	0x0801051c
 800dcb0:	08010442 	.word	0x08010442
 800dcb4:	080104c2 	.word	0x080104c2

0800dcb8 <__lshift>:
 800dcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcbc:	460c      	mov	r4, r1
 800dcbe:	6849      	ldr	r1, [r1, #4]
 800dcc0:	6923      	ldr	r3, [r4, #16]
 800dcc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dcc6:	68a3      	ldr	r3, [r4, #8]
 800dcc8:	4607      	mov	r7, r0
 800dcca:	4691      	mov	r9, r2
 800dccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dcd0:	f108 0601 	add.w	r6, r8, #1
 800dcd4:	42b3      	cmp	r3, r6
 800dcd6:	db0b      	blt.n	800dcf0 <__lshift+0x38>
 800dcd8:	4638      	mov	r0, r7
 800dcda:	f7ff fd95 	bl	800d808 <_Balloc>
 800dcde:	4605      	mov	r5, r0
 800dce0:	b948      	cbnz	r0, 800dcf6 <__lshift+0x3e>
 800dce2:	4602      	mov	r2, r0
 800dce4:	4b28      	ldr	r3, [pc, #160]	@ (800dd88 <__lshift+0xd0>)
 800dce6:	4829      	ldr	r0, [pc, #164]	@ (800dd8c <__lshift+0xd4>)
 800dce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dcec:	f001 fc34 	bl	800f558 <__assert_func>
 800dcf0:	3101      	adds	r1, #1
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	e7ee      	b.n	800dcd4 <__lshift+0x1c>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	f100 0114 	add.w	r1, r0, #20
 800dcfc:	f100 0210 	add.w	r2, r0, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	4553      	cmp	r3, sl
 800dd04:	db33      	blt.n	800dd6e <__lshift+0xb6>
 800dd06:	6920      	ldr	r0, [r4, #16]
 800dd08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd0c:	f104 0314 	add.w	r3, r4, #20
 800dd10:	f019 091f 	ands.w	r9, r9, #31
 800dd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd1c:	d02b      	beq.n	800dd76 <__lshift+0xbe>
 800dd1e:	f1c9 0e20 	rsb	lr, r9, #32
 800dd22:	468a      	mov	sl, r1
 800dd24:	2200      	movs	r2, #0
 800dd26:	6818      	ldr	r0, [r3, #0]
 800dd28:	fa00 f009 	lsl.w	r0, r0, r9
 800dd2c:	4310      	orrs	r0, r2
 800dd2e:	f84a 0b04 	str.w	r0, [sl], #4
 800dd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd36:	459c      	cmp	ip, r3
 800dd38:	fa22 f20e 	lsr.w	r2, r2, lr
 800dd3c:	d8f3      	bhi.n	800dd26 <__lshift+0x6e>
 800dd3e:	ebac 0304 	sub.w	r3, ip, r4
 800dd42:	3b15      	subs	r3, #21
 800dd44:	f023 0303 	bic.w	r3, r3, #3
 800dd48:	3304      	adds	r3, #4
 800dd4a:	f104 0015 	add.w	r0, r4, #21
 800dd4e:	4584      	cmp	ip, r0
 800dd50:	bf38      	it	cc
 800dd52:	2304      	movcc	r3, #4
 800dd54:	50ca      	str	r2, [r1, r3]
 800dd56:	b10a      	cbz	r2, 800dd5c <__lshift+0xa4>
 800dd58:	f108 0602 	add.w	r6, r8, #2
 800dd5c:	3e01      	subs	r6, #1
 800dd5e:	4638      	mov	r0, r7
 800dd60:	612e      	str	r6, [r5, #16]
 800dd62:	4621      	mov	r1, r4
 800dd64:	f7ff fd90 	bl	800d888 <_Bfree>
 800dd68:	4628      	mov	r0, r5
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd72:	3301      	adds	r3, #1
 800dd74:	e7c5      	b.n	800dd02 <__lshift+0x4a>
 800dd76:	3904      	subs	r1, #4
 800dd78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd80:	459c      	cmp	ip, r3
 800dd82:	d8f9      	bhi.n	800dd78 <__lshift+0xc0>
 800dd84:	e7ea      	b.n	800dd5c <__lshift+0xa4>
 800dd86:	bf00      	nop
 800dd88:	080104b1 	.word	0x080104b1
 800dd8c:	080104c2 	.word	0x080104c2

0800dd90 <__mcmp>:
 800dd90:	690a      	ldr	r2, [r1, #16]
 800dd92:	4603      	mov	r3, r0
 800dd94:	6900      	ldr	r0, [r0, #16]
 800dd96:	1a80      	subs	r0, r0, r2
 800dd98:	b530      	push	{r4, r5, lr}
 800dd9a:	d10e      	bne.n	800ddba <__mcmp+0x2a>
 800dd9c:	3314      	adds	r3, #20
 800dd9e:	3114      	adds	r1, #20
 800dda0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dda4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dda8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ddac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ddb0:	4295      	cmp	r5, r2
 800ddb2:	d003      	beq.n	800ddbc <__mcmp+0x2c>
 800ddb4:	d205      	bcs.n	800ddc2 <__mcmp+0x32>
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddba:	bd30      	pop	{r4, r5, pc}
 800ddbc:	42a3      	cmp	r3, r4
 800ddbe:	d3f3      	bcc.n	800dda8 <__mcmp+0x18>
 800ddc0:	e7fb      	b.n	800ddba <__mcmp+0x2a>
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	e7f9      	b.n	800ddba <__mcmp+0x2a>
	...

0800ddc8 <__mdiff>:
 800ddc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	4689      	mov	r9, r1
 800ddce:	4606      	mov	r6, r0
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4648      	mov	r0, r9
 800ddd4:	4614      	mov	r4, r2
 800ddd6:	f7ff ffdb 	bl	800dd90 <__mcmp>
 800ddda:	1e05      	subs	r5, r0, #0
 800dddc:	d112      	bne.n	800de04 <__mdiff+0x3c>
 800ddde:	4629      	mov	r1, r5
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7ff fd11 	bl	800d808 <_Balloc>
 800dde6:	4602      	mov	r2, r0
 800dde8:	b928      	cbnz	r0, 800ddf6 <__mdiff+0x2e>
 800ddea:	4b3f      	ldr	r3, [pc, #252]	@ (800dee8 <__mdiff+0x120>)
 800ddec:	f240 2137 	movw	r1, #567	@ 0x237
 800ddf0:	483e      	ldr	r0, [pc, #248]	@ (800deec <__mdiff+0x124>)
 800ddf2:	f001 fbb1 	bl	800f558 <__assert_func>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddfc:	4610      	mov	r0, r2
 800ddfe:	b003      	add	sp, #12
 800de00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de04:	bfbc      	itt	lt
 800de06:	464b      	movlt	r3, r9
 800de08:	46a1      	movlt	r9, r4
 800de0a:	4630      	mov	r0, r6
 800de0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de10:	bfba      	itte	lt
 800de12:	461c      	movlt	r4, r3
 800de14:	2501      	movlt	r5, #1
 800de16:	2500      	movge	r5, #0
 800de18:	f7ff fcf6 	bl	800d808 <_Balloc>
 800de1c:	4602      	mov	r2, r0
 800de1e:	b918      	cbnz	r0, 800de28 <__mdiff+0x60>
 800de20:	4b31      	ldr	r3, [pc, #196]	@ (800dee8 <__mdiff+0x120>)
 800de22:	f240 2145 	movw	r1, #581	@ 0x245
 800de26:	e7e3      	b.n	800ddf0 <__mdiff+0x28>
 800de28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800de2c:	6926      	ldr	r6, [r4, #16]
 800de2e:	60c5      	str	r5, [r0, #12]
 800de30:	f109 0310 	add.w	r3, r9, #16
 800de34:	f109 0514 	add.w	r5, r9, #20
 800de38:	f104 0e14 	add.w	lr, r4, #20
 800de3c:	f100 0b14 	add.w	fp, r0, #20
 800de40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800de44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	46d9      	mov	r9, fp
 800de4c:	f04f 0c00 	mov.w	ip, #0
 800de50:	9b01      	ldr	r3, [sp, #4]
 800de52:	f85e 0b04 	ldr.w	r0, [lr], #4
 800de56:	f853 af04 	ldr.w	sl, [r3, #4]!
 800de5a:	9301      	str	r3, [sp, #4]
 800de5c:	fa1f f38a 	uxth.w	r3, sl
 800de60:	4619      	mov	r1, r3
 800de62:	b283      	uxth	r3, r0
 800de64:	1acb      	subs	r3, r1, r3
 800de66:	0c00      	lsrs	r0, r0, #16
 800de68:	4463      	add	r3, ip
 800de6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800de6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800de72:	b29b      	uxth	r3, r3
 800de74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800de78:	4576      	cmp	r6, lr
 800de7a:	f849 3b04 	str.w	r3, [r9], #4
 800de7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800de82:	d8e5      	bhi.n	800de50 <__mdiff+0x88>
 800de84:	1b33      	subs	r3, r6, r4
 800de86:	3b15      	subs	r3, #21
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	3415      	adds	r4, #21
 800de8e:	3304      	adds	r3, #4
 800de90:	42a6      	cmp	r6, r4
 800de92:	bf38      	it	cc
 800de94:	2304      	movcc	r3, #4
 800de96:	441d      	add	r5, r3
 800de98:	445b      	add	r3, fp
 800de9a:	461e      	mov	r6, r3
 800de9c:	462c      	mov	r4, r5
 800de9e:	4544      	cmp	r4, r8
 800dea0:	d30e      	bcc.n	800dec0 <__mdiff+0xf8>
 800dea2:	f108 0103 	add.w	r1, r8, #3
 800dea6:	1b49      	subs	r1, r1, r5
 800dea8:	f021 0103 	bic.w	r1, r1, #3
 800deac:	3d03      	subs	r5, #3
 800deae:	45a8      	cmp	r8, r5
 800deb0:	bf38      	it	cc
 800deb2:	2100      	movcc	r1, #0
 800deb4:	440b      	add	r3, r1
 800deb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800deba:	b191      	cbz	r1, 800dee2 <__mdiff+0x11a>
 800debc:	6117      	str	r7, [r2, #16]
 800debe:	e79d      	b.n	800ddfc <__mdiff+0x34>
 800dec0:	f854 1b04 	ldr.w	r1, [r4], #4
 800dec4:	46e6      	mov	lr, ip
 800dec6:	0c08      	lsrs	r0, r1, #16
 800dec8:	fa1c fc81 	uxtah	ip, ip, r1
 800decc:	4471      	add	r1, lr
 800dece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ded2:	b289      	uxth	r1, r1
 800ded4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ded8:	f846 1b04 	str.w	r1, [r6], #4
 800dedc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dee0:	e7dd      	b.n	800de9e <__mdiff+0xd6>
 800dee2:	3f01      	subs	r7, #1
 800dee4:	e7e7      	b.n	800deb6 <__mdiff+0xee>
 800dee6:	bf00      	nop
 800dee8:	080104b1 	.word	0x080104b1
 800deec:	080104c2 	.word	0x080104c2

0800def0 <__ulp>:
 800def0:	b082      	sub	sp, #8
 800def2:	ed8d 0b00 	vstr	d0, [sp]
 800def6:	9a01      	ldr	r2, [sp, #4]
 800def8:	4b0f      	ldr	r3, [pc, #60]	@ (800df38 <__ulp+0x48>)
 800defa:	4013      	ands	r3, r2
 800defc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800df00:	2b00      	cmp	r3, #0
 800df02:	dc08      	bgt.n	800df16 <__ulp+0x26>
 800df04:	425b      	negs	r3, r3
 800df06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800df0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df0e:	da04      	bge.n	800df1a <__ulp+0x2a>
 800df10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800df14:	4113      	asrs	r3, r2
 800df16:	2200      	movs	r2, #0
 800df18:	e008      	b.n	800df2c <__ulp+0x3c>
 800df1a:	f1a2 0314 	sub.w	r3, r2, #20
 800df1e:	2b1e      	cmp	r3, #30
 800df20:	bfda      	itte	le
 800df22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800df26:	40da      	lsrle	r2, r3
 800df28:	2201      	movgt	r2, #1
 800df2a:	2300      	movs	r3, #0
 800df2c:	4619      	mov	r1, r3
 800df2e:	4610      	mov	r0, r2
 800df30:	ec41 0b10 	vmov	d0, r0, r1
 800df34:	b002      	add	sp, #8
 800df36:	4770      	bx	lr
 800df38:	7ff00000 	.word	0x7ff00000

0800df3c <__b2d>:
 800df3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df40:	6906      	ldr	r6, [r0, #16]
 800df42:	f100 0814 	add.w	r8, r0, #20
 800df46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800df4a:	1f37      	subs	r7, r6, #4
 800df4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800df50:	4610      	mov	r0, r2
 800df52:	f7ff fd4b 	bl	800d9ec <__hi0bits>
 800df56:	f1c0 0320 	rsb	r3, r0, #32
 800df5a:	280a      	cmp	r0, #10
 800df5c:	600b      	str	r3, [r1, #0]
 800df5e:	491b      	ldr	r1, [pc, #108]	@ (800dfcc <__b2d+0x90>)
 800df60:	dc15      	bgt.n	800df8e <__b2d+0x52>
 800df62:	f1c0 0c0b 	rsb	ip, r0, #11
 800df66:	fa22 f30c 	lsr.w	r3, r2, ip
 800df6a:	45b8      	cmp	r8, r7
 800df6c:	ea43 0501 	orr.w	r5, r3, r1
 800df70:	bf34      	ite	cc
 800df72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df76:	2300      	movcs	r3, #0
 800df78:	3015      	adds	r0, #21
 800df7a:	fa02 f000 	lsl.w	r0, r2, r0
 800df7e:	fa23 f30c 	lsr.w	r3, r3, ip
 800df82:	4303      	orrs	r3, r0
 800df84:	461c      	mov	r4, r3
 800df86:	ec45 4b10 	vmov	d0, r4, r5
 800df8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df8e:	45b8      	cmp	r8, r7
 800df90:	bf3a      	itte	cc
 800df92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800df96:	f1a6 0708 	subcc.w	r7, r6, #8
 800df9a:	2300      	movcs	r3, #0
 800df9c:	380b      	subs	r0, #11
 800df9e:	d012      	beq.n	800dfc6 <__b2d+0x8a>
 800dfa0:	f1c0 0120 	rsb	r1, r0, #32
 800dfa4:	fa23 f401 	lsr.w	r4, r3, r1
 800dfa8:	4082      	lsls	r2, r0
 800dfaa:	4322      	orrs	r2, r4
 800dfac:	4547      	cmp	r7, r8
 800dfae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dfb2:	bf8c      	ite	hi
 800dfb4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dfb8:	2200      	movls	r2, #0
 800dfba:	4083      	lsls	r3, r0
 800dfbc:	40ca      	lsrs	r2, r1
 800dfbe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	e7de      	b.n	800df84 <__b2d+0x48>
 800dfc6:	ea42 0501 	orr.w	r5, r2, r1
 800dfca:	e7db      	b.n	800df84 <__b2d+0x48>
 800dfcc:	3ff00000 	.word	0x3ff00000

0800dfd0 <__d2b>:
 800dfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfd4:	460f      	mov	r7, r1
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	ec59 8b10 	vmov	r8, r9, d0
 800dfdc:	4616      	mov	r6, r2
 800dfde:	f7ff fc13 	bl	800d808 <_Balloc>
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	b930      	cbnz	r0, 800dff4 <__d2b+0x24>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	4b23      	ldr	r3, [pc, #140]	@ (800e078 <__d2b+0xa8>)
 800dfea:	4824      	ldr	r0, [pc, #144]	@ (800e07c <__d2b+0xac>)
 800dfec:	f240 310f 	movw	r1, #783	@ 0x30f
 800dff0:	f001 fab2 	bl	800f558 <__assert_func>
 800dff4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dff8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dffc:	b10d      	cbz	r5, 800e002 <__d2b+0x32>
 800dffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	f1b8 0300 	subs.w	r3, r8, #0
 800e008:	d023      	beq.n	800e052 <__d2b+0x82>
 800e00a:	4668      	mov	r0, sp
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	f7ff fd0c 	bl	800da2a <__lo0bits>
 800e012:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e016:	b1d0      	cbz	r0, 800e04e <__d2b+0x7e>
 800e018:	f1c0 0320 	rsb	r3, r0, #32
 800e01c:	fa02 f303 	lsl.w	r3, r2, r3
 800e020:	430b      	orrs	r3, r1
 800e022:	40c2      	lsrs	r2, r0
 800e024:	6163      	str	r3, [r4, #20]
 800e026:	9201      	str	r2, [sp, #4]
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	61a3      	str	r3, [r4, #24]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	bf0c      	ite	eq
 800e030:	2201      	moveq	r2, #1
 800e032:	2202      	movne	r2, #2
 800e034:	6122      	str	r2, [r4, #16]
 800e036:	b1a5      	cbz	r5, 800e062 <__d2b+0x92>
 800e038:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e03c:	4405      	add	r5, r0
 800e03e:	603d      	str	r5, [r7, #0]
 800e040:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e044:	6030      	str	r0, [r6, #0]
 800e046:	4620      	mov	r0, r4
 800e048:	b003      	add	sp, #12
 800e04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e04e:	6161      	str	r1, [r4, #20]
 800e050:	e7ea      	b.n	800e028 <__d2b+0x58>
 800e052:	a801      	add	r0, sp, #4
 800e054:	f7ff fce9 	bl	800da2a <__lo0bits>
 800e058:	9b01      	ldr	r3, [sp, #4]
 800e05a:	6163      	str	r3, [r4, #20]
 800e05c:	3020      	adds	r0, #32
 800e05e:	2201      	movs	r2, #1
 800e060:	e7e8      	b.n	800e034 <__d2b+0x64>
 800e062:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e066:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e06a:	6038      	str	r0, [r7, #0]
 800e06c:	6918      	ldr	r0, [r3, #16]
 800e06e:	f7ff fcbd 	bl	800d9ec <__hi0bits>
 800e072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e076:	e7e5      	b.n	800e044 <__d2b+0x74>
 800e078:	080104b1 	.word	0x080104b1
 800e07c:	080104c2 	.word	0x080104c2

0800e080 <__ratio>:
 800e080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e084:	b085      	sub	sp, #20
 800e086:	e9cd 1000 	strd	r1, r0, [sp]
 800e08a:	a902      	add	r1, sp, #8
 800e08c:	f7ff ff56 	bl	800df3c <__b2d>
 800e090:	9800      	ldr	r0, [sp, #0]
 800e092:	a903      	add	r1, sp, #12
 800e094:	ec55 4b10 	vmov	r4, r5, d0
 800e098:	f7ff ff50 	bl	800df3c <__b2d>
 800e09c:	9b01      	ldr	r3, [sp, #4]
 800e09e:	6919      	ldr	r1, [r3, #16]
 800e0a0:	9b00      	ldr	r3, [sp, #0]
 800e0a2:	691b      	ldr	r3, [r3, #16]
 800e0a4:	1ac9      	subs	r1, r1, r3
 800e0a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e0aa:	1a9b      	subs	r3, r3, r2
 800e0ac:	ec5b ab10 	vmov	sl, fp, d0
 800e0b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bfce      	itee	gt
 800e0b8:	462a      	movgt	r2, r5
 800e0ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e0be:	465a      	movle	r2, fp
 800e0c0:	462f      	mov	r7, r5
 800e0c2:	46d9      	mov	r9, fp
 800e0c4:	bfcc      	ite	gt
 800e0c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e0ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e0ce:	464b      	mov	r3, r9
 800e0d0:	4652      	mov	r2, sl
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 fbc1 	bl	800085c <__aeabi_ddiv>
 800e0da:	ec41 0b10 	vmov	d0, r0, r1
 800e0de:	b005      	add	sp, #20
 800e0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0e4 <__copybits>:
 800e0e4:	3901      	subs	r1, #1
 800e0e6:	b570      	push	{r4, r5, r6, lr}
 800e0e8:	1149      	asrs	r1, r1, #5
 800e0ea:	6914      	ldr	r4, [r2, #16]
 800e0ec:	3101      	adds	r1, #1
 800e0ee:	f102 0314 	add.w	r3, r2, #20
 800e0f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e0fa:	1f05      	subs	r5, r0, #4
 800e0fc:	42a3      	cmp	r3, r4
 800e0fe:	d30c      	bcc.n	800e11a <__copybits+0x36>
 800e100:	1aa3      	subs	r3, r4, r2
 800e102:	3b11      	subs	r3, #17
 800e104:	f023 0303 	bic.w	r3, r3, #3
 800e108:	3211      	adds	r2, #17
 800e10a:	42a2      	cmp	r2, r4
 800e10c:	bf88      	it	hi
 800e10e:	2300      	movhi	r3, #0
 800e110:	4418      	add	r0, r3
 800e112:	2300      	movs	r3, #0
 800e114:	4288      	cmp	r0, r1
 800e116:	d305      	bcc.n	800e124 <__copybits+0x40>
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e11e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e122:	e7eb      	b.n	800e0fc <__copybits+0x18>
 800e124:	f840 3b04 	str.w	r3, [r0], #4
 800e128:	e7f4      	b.n	800e114 <__copybits+0x30>

0800e12a <__any_on>:
 800e12a:	f100 0214 	add.w	r2, r0, #20
 800e12e:	6900      	ldr	r0, [r0, #16]
 800e130:	114b      	asrs	r3, r1, #5
 800e132:	4298      	cmp	r0, r3
 800e134:	b510      	push	{r4, lr}
 800e136:	db11      	blt.n	800e15c <__any_on+0x32>
 800e138:	dd0a      	ble.n	800e150 <__any_on+0x26>
 800e13a:	f011 011f 	ands.w	r1, r1, #31
 800e13e:	d007      	beq.n	800e150 <__any_on+0x26>
 800e140:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e144:	fa24 f001 	lsr.w	r0, r4, r1
 800e148:	fa00 f101 	lsl.w	r1, r0, r1
 800e14c:	428c      	cmp	r4, r1
 800e14e:	d10b      	bne.n	800e168 <__any_on+0x3e>
 800e150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e154:	4293      	cmp	r3, r2
 800e156:	d803      	bhi.n	800e160 <__any_on+0x36>
 800e158:	2000      	movs	r0, #0
 800e15a:	bd10      	pop	{r4, pc}
 800e15c:	4603      	mov	r3, r0
 800e15e:	e7f7      	b.n	800e150 <__any_on+0x26>
 800e160:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e164:	2900      	cmp	r1, #0
 800e166:	d0f5      	beq.n	800e154 <__any_on+0x2a>
 800e168:	2001      	movs	r0, #1
 800e16a:	e7f6      	b.n	800e15a <__any_on+0x30>

0800e16c <sulp>:
 800e16c:	b570      	push	{r4, r5, r6, lr}
 800e16e:	4604      	mov	r4, r0
 800e170:	460d      	mov	r5, r1
 800e172:	ec45 4b10 	vmov	d0, r4, r5
 800e176:	4616      	mov	r6, r2
 800e178:	f7ff feba 	bl	800def0 <__ulp>
 800e17c:	ec51 0b10 	vmov	r0, r1, d0
 800e180:	b17e      	cbz	r6, 800e1a2 <sulp+0x36>
 800e182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e186:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	dd09      	ble.n	800e1a2 <sulp+0x36>
 800e18e:	051b      	lsls	r3, r3, #20
 800e190:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e194:	2400      	movs	r4, #0
 800e196:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e19a:	4622      	mov	r2, r4
 800e19c:	462b      	mov	r3, r5
 800e19e:	f7f2 fa33 	bl	8000608 <__aeabi_dmul>
 800e1a2:	ec41 0b10 	vmov	d0, r0, r1
 800e1a6:	bd70      	pop	{r4, r5, r6, pc}

0800e1a8 <_strtod_l>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	b09f      	sub	sp, #124	@ 0x7c
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e1b6:	9005      	str	r0, [sp, #20]
 800e1b8:	f04f 0a00 	mov.w	sl, #0
 800e1bc:	f04f 0b00 	mov.w	fp, #0
 800e1c0:	460a      	mov	r2, r1
 800e1c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1c4:	7811      	ldrb	r1, [r2, #0]
 800e1c6:	292b      	cmp	r1, #43	@ 0x2b
 800e1c8:	d04a      	beq.n	800e260 <_strtod_l+0xb8>
 800e1ca:	d838      	bhi.n	800e23e <_strtod_l+0x96>
 800e1cc:	290d      	cmp	r1, #13
 800e1ce:	d832      	bhi.n	800e236 <_strtod_l+0x8e>
 800e1d0:	2908      	cmp	r1, #8
 800e1d2:	d832      	bhi.n	800e23a <_strtod_l+0x92>
 800e1d4:	2900      	cmp	r1, #0
 800e1d6:	d03b      	beq.n	800e250 <_strtod_l+0xa8>
 800e1d8:	2200      	movs	r2, #0
 800e1da:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e1dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e1de:	782a      	ldrb	r2, [r5, #0]
 800e1e0:	2a30      	cmp	r2, #48	@ 0x30
 800e1e2:	f040 80b3 	bne.w	800e34c <_strtod_l+0x1a4>
 800e1e6:	786a      	ldrb	r2, [r5, #1]
 800e1e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e1ec:	2a58      	cmp	r2, #88	@ 0x58
 800e1ee:	d16e      	bne.n	800e2ce <_strtod_l+0x126>
 800e1f0:	9302      	str	r3, [sp, #8]
 800e1f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e1f4:	9301      	str	r3, [sp, #4]
 800e1f6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	4a8e      	ldr	r2, [pc, #568]	@ (800e434 <_strtod_l+0x28c>)
 800e1fc:	9805      	ldr	r0, [sp, #20]
 800e1fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e200:	a919      	add	r1, sp, #100	@ 0x64
 800e202:	f001 fa43 	bl	800f68c <__gethex>
 800e206:	f010 060f 	ands.w	r6, r0, #15
 800e20a:	4604      	mov	r4, r0
 800e20c:	d005      	beq.n	800e21a <_strtod_l+0x72>
 800e20e:	2e06      	cmp	r6, #6
 800e210:	d128      	bne.n	800e264 <_strtod_l+0xbc>
 800e212:	3501      	adds	r5, #1
 800e214:	2300      	movs	r3, #0
 800e216:	9519      	str	r5, [sp, #100]	@ 0x64
 800e218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e21a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f040 858e 	bne.w	800ed3e <_strtod_l+0xb96>
 800e222:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e224:	b1cb      	cbz	r3, 800e25a <_strtod_l+0xb2>
 800e226:	4652      	mov	r2, sl
 800e228:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e22c:	ec43 2b10 	vmov	d0, r2, r3
 800e230:	b01f      	add	sp, #124	@ 0x7c
 800e232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e236:	2920      	cmp	r1, #32
 800e238:	d1ce      	bne.n	800e1d8 <_strtod_l+0x30>
 800e23a:	3201      	adds	r2, #1
 800e23c:	e7c1      	b.n	800e1c2 <_strtod_l+0x1a>
 800e23e:	292d      	cmp	r1, #45	@ 0x2d
 800e240:	d1ca      	bne.n	800e1d8 <_strtod_l+0x30>
 800e242:	2101      	movs	r1, #1
 800e244:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e246:	1c51      	adds	r1, r2, #1
 800e248:	9119      	str	r1, [sp, #100]	@ 0x64
 800e24a:	7852      	ldrb	r2, [r2, #1]
 800e24c:	2a00      	cmp	r2, #0
 800e24e:	d1c5      	bne.n	800e1dc <_strtod_l+0x34>
 800e250:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e252:	9419      	str	r4, [sp, #100]	@ 0x64
 800e254:	2b00      	cmp	r3, #0
 800e256:	f040 8570 	bne.w	800ed3a <_strtod_l+0xb92>
 800e25a:	4652      	mov	r2, sl
 800e25c:	465b      	mov	r3, fp
 800e25e:	e7e5      	b.n	800e22c <_strtod_l+0x84>
 800e260:	2100      	movs	r1, #0
 800e262:	e7ef      	b.n	800e244 <_strtod_l+0x9c>
 800e264:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e266:	b13a      	cbz	r2, 800e278 <_strtod_l+0xd0>
 800e268:	2135      	movs	r1, #53	@ 0x35
 800e26a:	a81c      	add	r0, sp, #112	@ 0x70
 800e26c:	f7ff ff3a 	bl	800e0e4 <__copybits>
 800e270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e272:	9805      	ldr	r0, [sp, #20]
 800e274:	f7ff fb08 	bl	800d888 <_Bfree>
 800e278:	3e01      	subs	r6, #1
 800e27a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e27c:	2e04      	cmp	r6, #4
 800e27e:	d806      	bhi.n	800e28e <_strtod_l+0xe6>
 800e280:	e8df f006 	tbb	[pc, r6]
 800e284:	201d0314 	.word	0x201d0314
 800e288:	14          	.byte	0x14
 800e289:	00          	.byte	0x00
 800e28a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e28e:	05e1      	lsls	r1, r4, #23
 800e290:	bf48      	it	mi
 800e292:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e296:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e29a:	0d1b      	lsrs	r3, r3, #20
 800e29c:	051b      	lsls	r3, r3, #20
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d1bb      	bne.n	800e21a <_strtod_l+0x72>
 800e2a2:	f7fe fb1b 	bl	800c8dc <__errno>
 800e2a6:	2322      	movs	r3, #34	@ 0x22
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	e7b6      	b.n	800e21a <_strtod_l+0x72>
 800e2ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e2b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e2b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e2b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e2bc:	e7e7      	b.n	800e28e <_strtod_l+0xe6>
 800e2be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e43c <_strtod_l+0x294>
 800e2c2:	e7e4      	b.n	800e28e <_strtod_l+0xe6>
 800e2c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e2c8:	f04f 3aff 	mov.w	sl, #4294967295
 800e2cc:	e7df      	b.n	800e28e <_strtod_l+0xe6>
 800e2ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2d0:	1c5a      	adds	r2, r3, #1
 800e2d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2d4:	785b      	ldrb	r3, [r3, #1]
 800e2d6:	2b30      	cmp	r3, #48	@ 0x30
 800e2d8:	d0f9      	beq.n	800e2ce <_strtod_l+0x126>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d09d      	beq.n	800e21a <_strtod_l+0x72>
 800e2de:	2301      	movs	r3, #1
 800e2e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2e4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	9308      	str	r3, [sp, #32]
 800e2ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2ec:	461f      	mov	r7, r3
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e2f2:	7805      	ldrb	r5, [r0, #0]
 800e2f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e2f8:	b2d9      	uxtb	r1, r3
 800e2fa:	2909      	cmp	r1, #9
 800e2fc:	d928      	bls.n	800e350 <_strtod_l+0x1a8>
 800e2fe:	494e      	ldr	r1, [pc, #312]	@ (800e438 <_strtod_l+0x290>)
 800e300:	2201      	movs	r2, #1
 800e302:	f001 f8ff 	bl	800f504 <strncmp>
 800e306:	2800      	cmp	r0, #0
 800e308:	d032      	beq.n	800e370 <_strtod_l+0x1c8>
 800e30a:	2000      	movs	r0, #0
 800e30c:	462a      	mov	r2, r5
 800e30e:	4681      	mov	r9, r0
 800e310:	463d      	mov	r5, r7
 800e312:	4603      	mov	r3, r0
 800e314:	2a65      	cmp	r2, #101	@ 0x65
 800e316:	d001      	beq.n	800e31c <_strtod_l+0x174>
 800e318:	2a45      	cmp	r2, #69	@ 0x45
 800e31a:	d114      	bne.n	800e346 <_strtod_l+0x19e>
 800e31c:	b91d      	cbnz	r5, 800e326 <_strtod_l+0x17e>
 800e31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e320:	4302      	orrs	r2, r0
 800e322:	d095      	beq.n	800e250 <_strtod_l+0xa8>
 800e324:	2500      	movs	r5, #0
 800e326:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e328:	1c62      	adds	r2, r4, #1
 800e32a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e32c:	7862      	ldrb	r2, [r4, #1]
 800e32e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e330:	d077      	beq.n	800e422 <_strtod_l+0x27a>
 800e332:	2a2d      	cmp	r2, #45	@ 0x2d
 800e334:	d07b      	beq.n	800e42e <_strtod_l+0x286>
 800e336:	f04f 0c00 	mov.w	ip, #0
 800e33a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e33e:	2909      	cmp	r1, #9
 800e340:	f240 8082 	bls.w	800e448 <_strtod_l+0x2a0>
 800e344:	9419      	str	r4, [sp, #100]	@ 0x64
 800e346:	f04f 0800 	mov.w	r8, #0
 800e34a:	e0a2      	b.n	800e492 <_strtod_l+0x2ea>
 800e34c:	2300      	movs	r3, #0
 800e34e:	e7c7      	b.n	800e2e0 <_strtod_l+0x138>
 800e350:	2f08      	cmp	r7, #8
 800e352:	bfd5      	itete	le
 800e354:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e356:	9908      	ldrgt	r1, [sp, #32]
 800e358:	fb02 3301 	mlale	r3, r2, r1, r3
 800e35c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e360:	f100 0001 	add.w	r0, r0, #1
 800e364:	bfd4      	ite	le
 800e366:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e368:	9308      	strgt	r3, [sp, #32]
 800e36a:	3701      	adds	r7, #1
 800e36c:	9019      	str	r0, [sp, #100]	@ 0x64
 800e36e:	e7bf      	b.n	800e2f0 <_strtod_l+0x148>
 800e370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e372:	1c5a      	adds	r2, r3, #1
 800e374:	9219      	str	r2, [sp, #100]	@ 0x64
 800e376:	785a      	ldrb	r2, [r3, #1]
 800e378:	b37f      	cbz	r7, 800e3da <_strtod_l+0x232>
 800e37a:	4681      	mov	r9, r0
 800e37c:	463d      	mov	r5, r7
 800e37e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e382:	2b09      	cmp	r3, #9
 800e384:	d912      	bls.n	800e3ac <_strtod_l+0x204>
 800e386:	2301      	movs	r3, #1
 800e388:	e7c4      	b.n	800e314 <_strtod_l+0x16c>
 800e38a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e38c:	1c5a      	adds	r2, r3, #1
 800e38e:	9219      	str	r2, [sp, #100]	@ 0x64
 800e390:	785a      	ldrb	r2, [r3, #1]
 800e392:	3001      	adds	r0, #1
 800e394:	2a30      	cmp	r2, #48	@ 0x30
 800e396:	d0f8      	beq.n	800e38a <_strtod_l+0x1e2>
 800e398:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e39c:	2b08      	cmp	r3, #8
 800e39e:	f200 84d3 	bhi.w	800ed48 <_strtod_l+0xba0>
 800e3a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3a6:	4681      	mov	r9, r0
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	3a30      	subs	r2, #48	@ 0x30
 800e3ae:	f100 0301 	add.w	r3, r0, #1
 800e3b2:	d02a      	beq.n	800e40a <_strtod_l+0x262>
 800e3b4:	4499      	add	r9, r3
 800e3b6:	eb00 0c05 	add.w	ip, r0, r5
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	210a      	movs	r1, #10
 800e3be:	4563      	cmp	r3, ip
 800e3c0:	d10d      	bne.n	800e3de <_strtod_l+0x236>
 800e3c2:	1c69      	adds	r1, r5, #1
 800e3c4:	4401      	add	r1, r0
 800e3c6:	4428      	add	r0, r5
 800e3c8:	2808      	cmp	r0, #8
 800e3ca:	dc16      	bgt.n	800e3fa <_strtod_l+0x252>
 800e3cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e3ce:	230a      	movs	r3, #10
 800e3d0:	fb03 2300 	mla	r3, r3, r0, r2
 800e3d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e018      	b.n	800e40c <_strtod_l+0x264>
 800e3da:	4638      	mov	r0, r7
 800e3dc:	e7da      	b.n	800e394 <_strtod_l+0x1ec>
 800e3de:	2b08      	cmp	r3, #8
 800e3e0:	f103 0301 	add.w	r3, r3, #1
 800e3e4:	dc03      	bgt.n	800e3ee <_strtod_l+0x246>
 800e3e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e3e8:	434e      	muls	r6, r1
 800e3ea:	960a      	str	r6, [sp, #40]	@ 0x28
 800e3ec:	e7e7      	b.n	800e3be <_strtod_l+0x216>
 800e3ee:	2b10      	cmp	r3, #16
 800e3f0:	bfde      	ittt	le
 800e3f2:	9e08      	ldrle	r6, [sp, #32]
 800e3f4:	434e      	mulle	r6, r1
 800e3f6:	9608      	strle	r6, [sp, #32]
 800e3f8:	e7e1      	b.n	800e3be <_strtod_l+0x216>
 800e3fa:	280f      	cmp	r0, #15
 800e3fc:	dceb      	bgt.n	800e3d6 <_strtod_l+0x22e>
 800e3fe:	9808      	ldr	r0, [sp, #32]
 800e400:	230a      	movs	r3, #10
 800e402:	fb03 2300 	mla	r3, r3, r0, r2
 800e406:	9308      	str	r3, [sp, #32]
 800e408:	e7e5      	b.n	800e3d6 <_strtod_l+0x22e>
 800e40a:	4629      	mov	r1, r5
 800e40c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e40e:	1c50      	adds	r0, r2, #1
 800e410:	9019      	str	r0, [sp, #100]	@ 0x64
 800e412:	7852      	ldrb	r2, [r2, #1]
 800e414:	4618      	mov	r0, r3
 800e416:	460d      	mov	r5, r1
 800e418:	e7b1      	b.n	800e37e <_strtod_l+0x1d6>
 800e41a:	f04f 0900 	mov.w	r9, #0
 800e41e:	2301      	movs	r3, #1
 800e420:	e77d      	b.n	800e31e <_strtod_l+0x176>
 800e422:	f04f 0c00 	mov.w	ip, #0
 800e426:	1ca2      	adds	r2, r4, #2
 800e428:	9219      	str	r2, [sp, #100]	@ 0x64
 800e42a:	78a2      	ldrb	r2, [r4, #2]
 800e42c:	e785      	b.n	800e33a <_strtod_l+0x192>
 800e42e:	f04f 0c01 	mov.w	ip, #1
 800e432:	e7f8      	b.n	800e426 <_strtod_l+0x27e>
 800e434:	08010630 	.word	0x08010630
 800e438:	08010618 	.word	0x08010618
 800e43c:	7ff00000 	.word	0x7ff00000
 800e440:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e442:	1c51      	adds	r1, r2, #1
 800e444:	9119      	str	r1, [sp, #100]	@ 0x64
 800e446:	7852      	ldrb	r2, [r2, #1]
 800e448:	2a30      	cmp	r2, #48	@ 0x30
 800e44a:	d0f9      	beq.n	800e440 <_strtod_l+0x298>
 800e44c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e450:	2908      	cmp	r1, #8
 800e452:	f63f af78 	bhi.w	800e346 <_strtod_l+0x19e>
 800e456:	3a30      	subs	r2, #48	@ 0x30
 800e458:	920e      	str	r2, [sp, #56]	@ 0x38
 800e45a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e45c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e45e:	f04f 080a 	mov.w	r8, #10
 800e462:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e464:	1c56      	adds	r6, r2, #1
 800e466:	9619      	str	r6, [sp, #100]	@ 0x64
 800e468:	7852      	ldrb	r2, [r2, #1]
 800e46a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e46e:	f1be 0f09 	cmp.w	lr, #9
 800e472:	d939      	bls.n	800e4e8 <_strtod_l+0x340>
 800e474:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e476:	1a76      	subs	r6, r6, r1
 800e478:	2e08      	cmp	r6, #8
 800e47a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e47e:	dc03      	bgt.n	800e488 <_strtod_l+0x2e0>
 800e480:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e482:	4588      	cmp	r8, r1
 800e484:	bfa8      	it	ge
 800e486:	4688      	movge	r8, r1
 800e488:	f1bc 0f00 	cmp.w	ip, #0
 800e48c:	d001      	beq.n	800e492 <_strtod_l+0x2ea>
 800e48e:	f1c8 0800 	rsb	r8, r8, #0
 800e492:	2d00      	cmp	r5, #0
 800e494:	d14e      	bne.n	800e534 <_strtod_l+0x38c>
 800e496:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e498:	4308      	orrs	r0, r1
 800e49a:	f47f aebe 	bne.w	800e21a <_strtod_l+0x72>
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f47f aed6 	bne.w	800e250 <_strtod_l+0xa8>
 800e4a4:	2a69      	cmp	r2, #105	@ 0x69
 800e4a6:	d028      	beq.n	800e4fa <_strtod_l+0x352>
 800e4a8:	dc25      	bgt.n	800e4f6 <_strtod_l+0x34e>
 800e4aa:	2a49      	cmp	r2, #73	@ 0x49
 800e4ac:	d025      	beq.n	800e4fa <_strtod_l+0x352>
 800e4ae:	2a4e      	cmp	r2, #78	@ 0x4e
 800e4b0:	f47f aece 	bne.w	800e250 <_strtod_l+0xa8>
 800e4b4:	499b      	ldr	r1, [pc, #620]	@ (800e724 <_strtod_l+0x57c>)
 800e4b6:	a819      	add	r0, sp, #100	@ 0x64
 800e4b8:	f001 fb0a 	bl	800fad0 <__match>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f43f aec7 	beq.w	800e250 <_strtod_l+0xa8>
 800e4c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	2b28      	cmp	r3, #40	@ 0x28
 800e4c8:	d12e      	bne.n	800e528 <_strtod_l+0x380>
 800e4ca:	4997      	ldr	r1, [pc, #604]	@ (800e728 <_strtod_l+0x580>)
 800e4cc:	aa1c      	add	r2, sp, #112	@ 0x70
 800e4ce:	a819      	add	r0, sp, #100	@ 0x64
 800e4d0:	f001 fb12 	bl	800faf8 <__hexnan>
 800e4d4:	2805      	cmp	r0, #5
 800e4d6:	d127      	bne.n	800e528 <_strtod_l+0x380>
 800e4d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e4da:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e4de:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e4e2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e4e6:	e698      	b.n	800e21a <_strtod_l+0x72>
 800e4e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e4ea:	fb08 2101 	mla	r1, r8, r1, r2
 800e4ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e4f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e4f4:	e7b5      	b.n	800e462 <_strtod_l+0x2ba>
 800e4f6:	2a6e      	cmp	r2, #110	@ 0x6e
 800e4f8:	e7da      	b.n	800e4b0 <_strtod_l+0x308>
 800e4fa:	498c      	ldr	r1, [pc, #560]	@ (800e72c <_strtod_l+0x584>)
 800e4fc:	a819      	add	r0, sp, #100	@ 0x64
 800e4fe:	f001 fae7 	bl	800fad0 <__match>
 800e502:	2800      	cmp	r0, #0
 800e504:	f43f aea4 	beq.w	800e250 <_strtod_l+0xa8>
 800e508:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e50a:	4989      	ldr	r1, [pc, #548]	@ (800e730 <_strtod_l+0x588>)
 800e50c:	3b01      	subs	r3, #1
 800e50e:	a819      	add	r0, sp, #100	@ 0x64
 800e510:	9319      	str	r3, [sp, #100]	@ 0x64
 800e512:	f001 fadd 	bl	800fad0 <__match>
 800e516:	b910      	cbnz	r0, 800e51e <_strtod_l+0x376>
 800e518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e51a:	3301      	adds	r3, #1
 800e51c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e51e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e740 <_strtod_l+0x598>
 800e522:	f04f 0a00 	mov.w	sl, #0
 800e526:	e678      	b.n	800e21a <_strtod_l+0x72>
 800e528:	4882      	ldr	r0, [pc, #520]	@ (800e734 <_strtod_l+0x58c>)
 800e52a:	f001 f80d 	bl	800f548 <nan>
 800e52e:	ec5b ab10 	vmov	sl, fp, d0
 800e532:	e672      	b.n	800e21a <_strtod_l+0x72>
 800e534:	eba8 0309 	sub.w	r3, r8, r9
 800e538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e53a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53c:	2f00      	cmp	r7, #0
 800e53e:	bf08      	it	eq
 800e540:	462f      	moveq	r7, r5
 800e542:	2d10      	cmp	r5, #16
 800e544:	462c      	mov	r4, r5
 800e546:	bfa8      	it	ge
 800e548:	2410      	movge	r4, #16
 800e54a:	f7f1 ffe3 	bl	8000514 <__aeabi_ui2d>
 800e54e:	2d09      	cmp	r5, #9
 800e550:	4682      	mov	sl, r0
 800e552:	468b      	mov	fp, r1
 800e554:	dc13      	bgt.n	800e57e <_strtod_l+0x3d6>
 800e556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f43f ae5e 	beq.w	800e21a <_strtod_l+0x72>
 800e55e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e560:	dd78      	ble.n	800e654 <_strtod_l+0x4ac>
 800e562:	2b16      	cmp	r3, #22
 800e564:	dc5f      	bgt.n	800e626 <_strtod_l+0x47e>
 800e566:	4974      	ldr	r1, [pc, #464]	@ (800e738 <_strtod_l+0x590>)
 800e568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e570:	4652      	mov	r2, sl
 800e572:	465b      	mov	r3, fp
 800e574:	f7f2 f848 	bl	8000608 <__aeabi_dmul>
 800e578:	4682      	mov	sl, r0
 800e57a:	468b      	mov	fp, r1
 800e57c:	e64d      	b.n	800e21a <_strtod_l+0x72>
 800e57e:	4b6e      	ldr	r3, [pc, #440]	@ (800e738 <_strtod_l+0x590>)
 800e580:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e584:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e588:	f7f2 f83e 	bl	8000608 <__aeabi_dmul>
 800e58c:	4682      	mov	sl, r0
 800e58e:	9808      	ldr	r0, [sp, #32]
 800e590:	468b      	mov	fp, r1
 800e592:	f7f1 ffbf 	bl	8000514 <__aeabi_ui2d>
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4650      	mov	r0, sl
 800e59c:	4659      	mov	r1, fp
 800e59e:	f7f1 fe7d 	bl	800029c <__adddf3>
 800e5a2:	2d0f      	cmp	r5, #15
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	468b      	mov	fp, r1
 800e5a8:	ddd5      	ble.n	800e556 <_strtod_l+0x3ae>
 800e5aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5ac:	1b2c      	subs	r4, r5, r4
 800e5ae:	441c      	add	r4, r3
 800e5b0:	2c00      	cmp	r4, #0
 800e5b2:	f340 8096 	ble.w	800e6e2 <_strtod_l+0x53a>
 800e5b6:	f014 030f 	ands.w	r3, r4, #15
 800e5ba:	d00a      	beq.n	800e5d2 <_strtod_l+0x42a>
 800e5bc:	495e      	ldr	r1, [pc, #376]	@ (800e738 <_strtod_l+0x590>)
 800e5be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	465b      	mov	r3, fp
 800e5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ca:	f7f2 f81d 	bl	8000608 <__aeabi_dmul>
 800e5ce:	4682      	mov	sl, r0
 800e5d0:	468b      	mov	fp, r1
 800e5d2:	f034 040f 	bics.w	r4, r4, #15
 800e5d6:	d073      	beq.n	800e6c0 <_strtod_l+0x518>
 800e5d8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e5dc:	dd48      	ble.n	800e670 <_strtod_l+0x4c8>
 800e5de:	2400      	movs	r4, #0
 800e5e0:	46a0      	mov	r8, r4
 800e5e2:	940a      	str	r4, [sp, #40]	@ 0x28
 800e5e4:	46a1      	mov	r9, r4
 800e5e6:	9a05      	ldr	r2, [sp, #20]
 800e5e8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e740 <_strtod_l+0x598>
 800e5ec:	2322      	movs	r3, #34	@ 0x22
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	f04f 0a00 	mov.w	sl, #0
 800e5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f43f ae0f 	beq.w	800e21a <_strtod_l+0x72>
 800e5fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e5fe:	9805      	ldr	r0, [sp, #20]
 800e600:	f7ff f942 	bl	800d888 <_Bfree>
 800e604:	9805      	ldr	r0, [sp, #20]
 800e606:	4649      	mov	r1, r9
 800e608:	f7ff f93e 	bl	800d888 <_Bfree>
 800e60c:	9805      	ldr	r0, [sp, #20]
 800e60e:	4641      	mov	r1, r8
 800e610:	f7ff f93a 	bl	800d888 <_Bfree>
 800e614:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e616:	9805      	ldr	r0, [sp, #20]
 800e618:	f7ff f936 	bl	800d888 <_Bfree>
 800e61c:	9805      	ldr	r0, [sp, #20]
 800e61e:	4621      	mov	r1, r4
 800e620:	f7ff f932 	bl	800d888 <_Bfree>
 800e624:	e5f9      	b.n	800e21a <_strtod_l+0x72>
 800e626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e628:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e62c:	4293      	cmp	r3, r2
 800e62e:	dbbc      	blt.n	800e5aa <_strtod_l+0x402>
 800e630:	4c41      	ldr	r4, [pc, #260]	@ (800e738 <_strtod_l+0x590>)
 800e632:	f1c5 050f 	rsb	r5, r5, #15
 800e636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e63a:	4652      	mov	r2, sl
 800e63c:	465b      	mov	r3, fp
 800e63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e642:	f7f1 ffe1 	bl	8000608 <__aeabi_dmul>
 800e646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e648:	1b5d      	subs	r5, r3, r5
 800e64a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e64e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e652:	e78f      	b.n	800e574 <_strtod_l+0x3cc>
 800e654:	3316      	adds	r3, #22
 800e656:	dba8      	blt.n	800e5aa <_strtod_l+0x402>
 800e658:	4b37      	ldr	r3, [pc, #220]	@ (800e738 <_strtod_l+0x590>)
 800e65a:	eba9 0808 	sub.w	r8, r9, r8
 800e65e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e662:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e666:	4650      	mov	r0, sl
 800e668:	4659      	mov	r1, fp
 800e66a:	f7f2 f8f7 	bl	800085c <__aeabi_ddiv>
 800e66e:	e783      	b.n	800e578 <_strtod_l+0x3d0>
 800e670:	4b32      	ldr	r3, [pc, #200]	@ (800e73c <_strtod_l+0x594>)
 800e672:	9308      	str	r3, [sp, #32]
 800e674:	2300      	movs	r3, #0
 800e676:	1124      	asrs	r4, r4, #4
 800e678:	4650      	mov	r0, sl
 800e67a:	4659      	mov	r1, fp
 800e67c:	461e      	mov	r6, r3
 800e67e:	2c01      	cmp	r4, #1
 800e680:	dc21      	bgt.n	800e6c6 <_strtod_l+0x51e>
 800e682:	b10b      	cbz	r3, 800e688 <_strtod_l+0x4e0>
 800e684:	4682      	mov	sl, r0
 800e686:	468b      	mov	fp, r1
 800e688:	492c      	ldr	r1, [pc, #176]	@ (800e73c <_strtod_l+0x594>)
 800e68a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e68e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e692:	4652      	mov	r2, sl
 800e694:	465b      	mov	r3, fp
 800e696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e69a:	f7f1 ffb5 	bl	8000608 <__aeabi_dmul>
 800e69e:	4b28      	ldr	r3, [pc, #160]	@ (800e740 <_strtod_l+0x598>)
 800e6a0:	460a      	mov	r2, r1
 800e6a2:	400b      	ands	r3, r1
 800e6a4:	4927      	ldr	r1, [pc, #156]	@ (800e744 <_strtod_l+0x59c>)
 800e6a6:	428b      	cmp	r3, r1
 800e6a8:	4682      	mov	sl, r0
 800e6aa:	d898      	bhi.n	800e5de <_strtod_l+0x436>
 800e6ac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	bf86      	itte	hi
 800e6b4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e748 <_strtod_l+0x5a0>
 800e6b8:	f04f 3aff 	movhi.w	sl, #4294967295
 800e6bc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	9308      	str	r3, [sp, #32]
 800e6c4:	e07a      	b.n	800e7bc <_strtod_l+0x614>
 800e6c6:	07e2      	lsls	r2, r4, #31
 800e6c8:	d505      	bpl.n	800e6d6 <_strtod_l+0x52e>
 800e6ca:	9b08      	ldr	r3, [sp, #32]
 800e6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d0:	f7f1 ff9a 	bl	8000608 <__aeabi_dmul>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	9a08      	ldr	r2, [sp, #32]
 800e6d8:	3208      	adds	r2, #8
 800e6da:	3601      	adds	r6, #1
 800e6dc:	1064      	asrs	r4, r4, #1
 800e6de:	9208      	str	r2, [sp, #32]
 800e6e0:	e7cd      	b.n	800e67e <_strtod_l+0x4d6>
 800e6e2:	d0ed      	beq.n	800e6c0 <_strtod_l+0x518>
 800e6e4:	4264      	negs	r4, r4
 800e6e6:	f014 020f 	ands.w	r2, r4, #15
 800e6ea:	d00a      	beq.n	800e702 <_strtod_l+0x55a>
 800e6ec:	4b12      	ldr	r3, [pc, #72]	@ (800e738 <_strtod_l+0x590>)
 800e6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6f2:	4650      	mov	r0, sl
 800e6f4:	4659      	mov	r1, fp
 800e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fa:	f7f2 f8af 	bl	800085c <__aeabi_ddiv>
 800e6fe:	4682      	mov	sl, r0
 800e700:	468b      	mov	fp, r1
 800e702:	1124      	asrs	r4, r4, #4
 800e704:	d0dc      	beq.n	800e6c0 <_strtod_l+0x518>
 800e706:	2c1f      	cmp	r4, #31
 800e708:	dd20      	ble.n	800e74c <_strtod_l+0x5a4>
 800e70a:	2400      	movs	r4, #0
 800e70c:	46a0      	mov	r8, r4
 800e70e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e710:	46a1      	mov	r9, r4
 800e712:	9a05      	ldr	r2, [sp, #20]
 800e714:	2322      	movs	r3, #34	@ 0x22
 800e716:	f04f 0a00 	mov.w	sl, #0
 800e71a:	f04f 0b00 	mov.w	fp, #0
 800e71e:	6013      	str	r3, [r2, #0]
 800e720:	e768      	b.n	800e5f4 <_strtod_l+0x44c>
 800e722:	bf00      	nop
 800e724:	08010409 	.word	0x08010409
 800e728:	0801061c 	.word	0x0801061c
 800e72c:	08010401 	.word	0x08010401
 800e730:	08010438 	.word	0x08010438
 800e734:	080107c5 	.word	0x080107c5
 800e738:	08010550 	.word	0x08010550
 800e73c:	08010528 	.word	0x08010528
 800e740:	7ff00000 	.word	0x7ff00000
 800e744:	7ca00000 	.word	0x7ca00000
 800e748:	7fefffff 	.word	0x7fefffff
 800e74c:	f014 0310 	ands.w	r3, r4, #16
 800e750:	bf18      	it	ne
 800e752:	236a      	movne	r3, #106	@ 0x6a
 800e754:	4ea9      	ldr	r6, [pc, #676]	@ (800e9fc <_strtod_l+0x854>)
 800e756:	9308      	str	r3, [sp, #32]
 800e758:	4650      	mov	r0, sl
 800e75a:	4659      	mov	r1, fp
 800e75c:	2300      	movs	r3, #0
 800e75e:	07e2      	lsls	r2, r4, #31
 800e760:	d504      	bpl.n	800e76c <_strtod_l+0x5c4>
 800e762:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e766:	f7f1 ff4f 	bl	8000608 <__aeabi_dmul>
 800e76a:	2301      	movs	r3, #1
 800e76c:	1064      	asrs	r4, r4, #1
 800e76e:	f106 0608 	add.w	r6, r6, #8
 800e772:	d1f4      	bne.n	800e75e <_strtod_l+0x5b6>
 800e774:	b10b      	cbz	r3, 800e77a <_strtod_l+0x5d2>
 800e776:	4682      	mov	sl, r0
 800e778:	468b      	mov	fp, r1
 800e77a:	9b08      	ldr	r3, [sp, #32]
 800e77c:	b1b3      	cbz	r3, 800e7ac <_strtod_l+0x604>
 800e77e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e782:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e786:	2b00      	cmp	r3, #0
 800e788:	4659      	mov	r1, fp
 800e78a:	dd0f      	ble.n	800e7ac <_strtod_l+0x604>
 800e78c:	2b1f      	cmp	r3, #31
 800e78e:	dd55      	ble.n	800e83c <_strtod_l+0x694>
 800e790:	2b34      	cmp	r3, #52	@ 0x34
 800e792:	bfde      	ittt	le
 800e794:	f04f 33ff 	movle.w	r3, #4294967295
 800e798:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e79c:	4093      	lslle	r3, r2
 800e79e:	f04f 0a00 	mov.w	sl, #0
 800e7a2:	bfcc      	ite	gt
 800e7a4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e7a8:	ea03 0b01 	andle.w	fp, r3, r1
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	4650      	mov	r0, sl
 800e7b2:	4659      	mov	r1, fp
 800e7b4:	f7f2 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d1a6      	bne.n	800e70a <_strtod_l+0x562>
 800e7bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e7c2:	9805      	ldr	r0, [sp, #20]
 800e7c4:	462b      	mov	r3, r5
 800e7c6:	463a      	mov	r2, r7
 800e7c8:	f7ff f8c6 	bl	800d958 <__s2b>
 800e7cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	f43f af05 	beq.w	800e5de <_strtod_l+0x436>
 800e7d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e7d6:	2a00      	cmp	r2, #0
 800e7d8:	eba9 0308 	sub.w	r3, r9, r8
 800e7dc:	bfa8      	it	ge
 800e7de:	2300      	movge	r3, #0
 800e7e0:	9312      	str	r3, [sp, #72]	@ 0x48
 800e7e2:	2400      	movs	r4, #0
 800e7e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e7e8:	9316      	str	r3, [sp, #88]	@ 0x58
 800e7ea:	46a0      	mov	r8, r4
 800e7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ee:	9805      	ldr	r0, [sp, #20]
 800e7f0:	6859      	ldr	r1, [r3, #4]
 800e7f2:	f7ff f809 	bl	800d808 <_Balloc>
 800e7f6:	4681      	mov	r9, r0
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	f43f aef4 	beq.w	800e5e6 <_strtod_l+0x43e>
 800e7fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e800:	691a      	ldr	r2, [r3, #16]
 800e802:	3202      	adds	r2, #2
 800e804:	f103 010c 	add.w	r1, r3, #12
 800e808:	0092      	lsls	r2, r2, #2
 800e80a:	300c      	adds	r0, #12
 800e80c:	f7fe f89b 	bl	800c946 <memcpy>
 800e810:	ec4b ab10 	vmov	d0, sl, fp
 800e814:	9805      	ldr	r0, [sp, #20]
 800e816:	aa1c      	add	r2, sp, #112	@ 0x70
 800e818:	a91b      	add	r1, sp, #108	@ 0x6c
 800e81a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e81e:	f7ff fbd7 	bl	800dfd0 <__d2b>
 800e822:	901a      	str	r0, [sp, #104]	@ 0x68
 800e824:	2800      	cmp	r0, #0
 800e826:	f43f aede 	beq.w	800e5e6 <_strtod_l+0x43e>
 800e82a:	9805      	ldr	r0, [sp, #20]
 800e82c:	2101      	movs	r1, #1
 800e82e:	f7ff f929 	bl	800da84 <__i2b>
 800e832:	4680      	mov	r8, r0
 800e834:	b948      	cbnz	r0, 800e84a <_strtod_l+0x6a2>
 800e836:	f04f 0800 	mov.w	r8, #0
 800e83a:	e6d4      	b.n	800e5e6 <_strtod_l+0x43e>
 800e83c:	f04f 32ff 	mov.w	r2, #4294967295
 800e840:	fa02 f303 	lsl.w	r3, r2, r3
 800e844:	ea03 0a0a 	and.w	sl, r3, sl
 800e848:	e7b0      	b.n	800e7ac <_strtod_l+0x604>
 800e84a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e84c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e84e:	2d00      	cmp	r5, #0
 800e850:	bfab      	itete	ge
 800e852:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e854:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e856:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e858:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e85a:	bfac      	ite	ge
 800e85c:	18ef      	addge	r7, r5, r3
 800e85e:	1b5e      	sublt	r6, r3, r5
 800e860:	9b08      	ldr	r3, [sp, #32]
 800e862:	1aed      	subs	r5, r5, r3
 800e864:	4415      	add	r5, r2
 800e866:	4b66      	ldr	r3, [pc, #408]	@ (800ea00 <_strtod_l+0x858>)
 800e868:	3d01      	subs	r5, #1
 800e86a:	429d      	cmp	r5, r3
 800e86c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e870:	da50      	bge.n	800e914 <_strtod_l+0x76c>
 800e872:	1b5b      	subs	r3, r3, r5
 800e874:	2b1f      	cmp	r3, #31
 800e876:	eba2 0203 	sub.w	r2, r2, r3
 800e87a:	f04f 0101 	mov.w	r1, #1
 800e87e:	dc3d      	bgt.n	800e8fc <_strtod_l+0x754>
 800e880:	fa01 f303 	lsl.w	r3, r1, r3
 800e884:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e886:	2300      	movs	r3, #0
 800e888:	9310      	str	r3, [sp, #64]	@ 0x40
 800e88a:	18bd      	adds	r5, r7, r2
 800e88c:	9b08      	ldr	r3, [sp, #32]
 800e88e:	42af      	cmp	r7, r5
 800e890:	4416      	add	r6, r2
 800e892:	441e      	add	r6, r3
 800e894:	463b      	mov	r3, r7
 800e896:	bfa8      	it	ge
 800e898:	462b      	movge	r3, r5
 800e89a:	42b3      	cmp	r3, r6
 800e89c:	bfa8      	it	ge
 800e89e:	4633      	movge	r3, r6
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	bfc2      	ittt	gt
 800e8a4:	1aed      	subgt	r5, r5, r3
 800e8a6:	1af6      	subgt	r6, r6, r3
 800e8a8:	1aff      	subgt	r7, r7, r3
 800e8aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	dd16      	ble.n	800e8de <_strtod_l+0x736>
 800e8b0:	4641      	mov	r1, r8
 800e8b2:	9805      	ldr	r0, [sp, #20]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	f7ff f9a5 	bl	800dc04 <__pow5mult>
 800e8ba:	4680      	mov	r8, r0
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d0ba      	beq.n	800e836 <_strtod_l+0x68e>
 800e8c0:	4601      	mov	r1, r0
 800e8c2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e8c4:	9805      	ldr	r0, [sp, #20]
 800e8c6:	f7ff f8f3 	bl	800dab0 <__multiply>
 800e8ca:	900e      	str	r0, [sp, #56]	@ 0x38
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	f43f ae8a 	beq.w	800e5e6 <_strtod_l+0x43e>
 800e8d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e8d4:	9805      	ldr	r0, [sp, #20]
 800e8d6:	f7fe ffd7 	bl	800d888 <_Bfree>
 800e8da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8de:	2d00      	cmp	r5, #0
 800e8e0:	dc1d      	bgt.n	800e91e <_strtod_l+0x776>
 800e8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd23      	ble.n	800e930 <_strtod_l+0x788>
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e8ec:	9805      	ldr	r0, [sp, #20]
 800e8ee:	f7ff f989 	bl	800dc04 <__pow5mult>
 800e8f2:	4681      	mov	r9, r0
 800e8f4:	b9e0      	cbnz	r0, 800e930 <_strtod_l+0x788>
 800e8f6:	f04f 0900 	mov.w	r9, #0
 800e8fa:	e674      	b.n	800e5e6 <_strtod_l+0x43e>
 800e8fc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e900:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e904:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e908:	35e2      	adds	r5, #226	@ 0xe2
 800e90a:	fa01 f305 	lsl.w	r3, r1, r5
 800e90e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e910:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e912:	e7ba      	b.n	800e88a <_strtod_l+0x6e2>
 800e914:	2300      	movs	r3, #0
 800e916:	9310      	str	r3, [sp, #64]	@ 0x40
 800e918:	2301      	movs	r3, #1
 800e91a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e91c:	e7b5      	b.n	800e88a <_strtod_l+0x6e2>
 800e91e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e920:	9805      	ldr	r0, [sp, #20]
 800e922:	462a      	mov	r2, r5
 800e924:	f7ff f9c8 	bl	800dcb8 <__lshift>
 800e928:	901a      	str	r0, [sp, #104]	@ 0x68
 800e92a:	2800      	cmp	r0, #0
 800e92c:	d1d9      	bne.n	800e8e2 <_strtod_l+0x73a>
 800e92e:	e65a      	b.n	800e5e6 <_strtod_l+0x43e>
 800e930:	2e00      	cmp	r6, #0
 800e932:	dd07      	ble.n	800e944 <_strtod_l+0x79c>
 800e934:	4649      	mov	r1, r9
 800e936:	9805      	ldr	r0, [sp, #20]
 800e938:	4632      	mov	r2, r6
 800e93a:	f7ff f9bd 	bl	800dcb8 <__lshift>
 800e93e:	4681      	mov	r9, r0
 800e940:	2800      	cmp	r0, #0
 800e942:	d0d8      	beq.n	800e8f6 <_strtod_l+0x74e>
 800e944:	2f00      	cmp	r7, #0
 800e946:	dd08      	ble.n	800e95a <_strtod_l+0x7b2>
 800e948:	4641      	mov	r1, r8
 800e94a:	9805      	ldr	r0, [sp, #20]
 800e94c:	463a      	mov	r2, r7
 800e94e:	f7ff f9b3 	bl	800dcb8 <__lshift>
 800e952:	4680      	mov	r8, r0
 800e954:	2800      	cmp	r0, #0
 800e956:	f43f ae46 	beq.w	800e5e6 <_strtod_l+0x43e>
 800e95a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e95c:	9805      	ldr	r0, [sp, #20]
 800e95e:	464a      	mov	r2, r9
 800e960:	f7ff fa32 	bl	800ddc8 <__mdiff>
 800e964:	4604      	mov	r4, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	f43f ae3d 	beq.w	800e5e6 <_strtod_l+0x43e>
 800e96c:	68c3      	ldr	r3, [r0, #12]
 800e96e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e970:	2300      	movs	r3, #0
 800e972:	60c3      	str	r3, [r0, #12]
 800e974:	4641      	mov	r1, r8
 800e976:	f7ff fa0b 	bl	800dd90 <__mcmp>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	da46      	bge.n	800ea0c <_strtod_l+0x864>
 800e97e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e980:	ea53 030a 	orrs.w	r3, r3, sl
 800e984:	d16c      	bne.n	800ea60 <_strtod_l+0x8b8>
 800e986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d168      	bne.n	800ea60 <_strtod_l+0x8b8>
 800e98e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e992:	0d1b      	lsrs	r3, r3, #20
 800e994:	051b      	lsls	r3, r3, #20
 800e996:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e99a:	d961      	bls.n	800ea60 <_strtod_l+0x8b8>
 800e99c:	6963      	ldr	r3, [r4, #20]
 800e99e:	b913      	cbnz	r3, 800e9a6 <_strtod_l+0x7fe>
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	dd5c      	ble.n	800ea60 <_strtod_l+0x8b8>
 800e9a6:	4621      	mov	r1, r4
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	9805      	ldr	r0, [sp, #20]
 800e9ac:	f7ff f984 	bl	800dcb8 <__lshift>
 800e9b0:	4641      	mov	r1, r8
 800e9b2:	4604      	mov	r4, r0
 800e9b4:	f7ff f9ec 	bl	800dd90 <__mcmp>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	dd51      	ble.n	800ea60 <_strtod_l+0x8b8>
 800e9bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9c0:	9a08      	ldr	r2, [sp, #32]
 800e9c2:	0d1b      	lsrs	r3, r3, #20
 800e9c4:	051b      	lsls	r3, r3, #20
 800e9c6:	2a00      	cmp	r2, #0
 800e9c8:	d06b      	beq.n	800eaa2 <_strtod_l+0x8fa>
 800e9ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e9ce:	d868      	bhi.n	800eaa2 <_strtod_l+0x8fa>
 800e9d0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e9d4:	f67f ae9d 	bls.w	800e712 <_strtod_l+0x56a>
 800e9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800ea04 <_strtod_l+0x85c>)
 800e9da:	4650      	mov	r0, sl
 800e9dc:	4659      	mov	r1, fp
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f7f1 fe12 	bl	8000608 <__aeabi_dmul>
 800e9e4:	4b08      	ldr	r3, [pc, #32]	@ (800ea08 <_strtod_l+0x860>)
 800e9e6:	400b      	ands	r3, r1
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	468b      	mov	fp, r1
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f47f ae05 	bne.w	800e5fc <_strtod_l+0x454>
 800e9f2:	9a05      	ldr	r2, [sp, #20]
 800e9f4:	2322      	movs	r3, #34	@ 0x22
 800e9f6:	6013      	str	r3, [r2, #0]
 800e9f8:	e600      	b.n	800e5fc <_strtod_l+0x454>
 800e9fa:	bf00      	nop
 800e9fc:	08010648 	.word	0x08010648
 800ea00:	fffffc02 	.word	0xfffffc02
 800ea04:	39500000 	.word	0x39500000
 800ea08:	7ff00000 	.word	0x7ff00000
 800ea0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ea10:	d165      	bne.n	800eade <_strtod_l+0x936>
 800ea12:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ea14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea18:	b35a      	cbz	r2, 800ea72 <_strtod_l+0x8ca>
 800ea1a:	4a9f      	ldr	r2, [pc, #636]	@ (800ec98 <_strtod_l+0xaf0>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d12b      	bne.n	800ea78 <_strtod_l+0x8d0>
 800ea20:	9b08      	ldr	r3, [sp, #32]
 800ea22:	4651      	mov	r1, sl
 800ea24:	b303      	cbz	r3, 800ea68 <_strtod_l+0x8c0>
 800ea26:	4b9d      	ldr	r3, [pc, #628]	@ (800ec9c <_strtod_l+0xaf4>)
 800ea28:	465a      	mov	r2, fp
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ea30:	f04f 32ff 	mov.w	r2, #4294967295
 800ea34:	d81b      	bhi.n	800ea6e <_strtod_l+0x8c6>
 800ea36:	0d1b      	lsrs	r3, r3, #20
 800ea38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea40:	4299      	cmp	r1, r3
 800ea42:	d119      	bne.n	800ea78 <_strtod_l+0x8d0>
 800ea44:	4b96      	ldr	r3, [pc, #600]	@ (800eca0 <_strtod_l+0xaf8>)
 800ea46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d102      	bne.n	800ea52 <_strtod_l+0x8aa>
 800ea4c:	3101      	adds	r1, #1
 800ea4e:	f43f adca 	beq.w	800e5e6 <_strtod_l+0x43e>
 800ea52:	4b92      	ldr	r3, [pc, #584]	@ (800ec9c <_strtod_l+0xaf4>)
 800ea54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea56:	401a      	ands	r2, r3
 800ea58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ea5c:	f04f 0a00 	mov.w	sl, #0
 800ea60:	9b08      	ldr	r3, [sp, #32]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1b8      	bne.n	800e9d8 <_strtod_l+0x830>
 800ea66:	e5c9      	b.n	800e5fc <_strtod_l+0x454>
 800ea68:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6c:	e7e8      	b.n	800ea40 <_strtod_l+0x898>
 800ea6e:	4613      	mov	r3, r2
 800ea70:	e7e6      	b.n	800ea40 <_strtod_l+0x898>
 800ea72:	ea53 030a 	orrs.w	r3, r3, sl
 800ea76:	d0a1      	beq.n	800e9bc <_strtod_l+0x814>
 800ea78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ea7a:	b1db      	cbz	r3, 800eab4 <_strtod_l+0x90c>
 800ea7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea7e:	4213      	tst	r3, r2
 800ea80:	d0ee      	beq.n	800ea60 <_strtod_l+0x8b8>
 800ea82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea84:	9a08      	ldr	r2, [sp, #32]
 800ea86:	4650      	mov	r0, sl
 800ea88:	4659      	mov	r1, fp
 800ea8a:	b1bb      	cbz	r3, 800eabc <_strtod_l+0x914>
 800ea8c:	f7ff fb6e 	bl	800e16c <sulp>
 800ea90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea94:	ec53 2b10 	vmov	r2, r3, d0
 800ea98:	f7f1 fc00 	bl	800029c <__adddf3>
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	468b      	mov	fp, r1
 800eaa0:	e7de      	b.n	800ea60 <_strtod_l+0x8b8>
 800eaa2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800eaa6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eaaa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eaae:	f04f 3aff 	mov.w	sl, #4294967295
 800eab2:	e7d5      	b.n	800ea60 <_strtod_l+0x8b8>
 800eab4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eab6:	ea13 0f0a 	tst.w	r3, sl
 800eaba:	e7e1      	b.n	800ea80 <_strtod_l+0x8d8>
 800eabc:	f7ff fb56 	bl	800e16c <sulp>
 800eac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eac4:	ec53 2b10 	vmov	r2, r3, d0
 800eac8:	f7f1 fbe6 	bl	8000298 <__aeabi_dsub>
 800eacc:	2200      	movs	r2, #0
 800eace:	2300      	movs	r3, #0
 800ead0:	4682      	mov	sl, r0
 800ead2:	468b      	mov	fp, r1
 800ead4:	f7f2 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d0c1      	beq.n	800ea60 <_strtod_l+0x8b8>
 800eadc:	e619      	b.n	800e712 <_strtod_l+0x56a>
 800eade:	4641      	mov	r1, r8
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff facd 	bl	800e080 <__ratio>
 800eae6:	ec57 6b10 	vmov	r6, r7, d0
 800eaea:	2200      	movs	r2, #0
 800eaec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	f7f2 f804 	bl	8000b00 <__aeabi_dcmple>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d06f      	beq.n	800ebdc <_strtod_l+0xa34>
 800eafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d17a      	bne.n	800ebf8 <_strtod_l+0xa50>
 800eb02:	f1ba 0f00 	cmp.w	sl, #0
 800eb06:	d158      	bne.n	800ebba <_strtod_l+0xa12>
 800eb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d15a      	bne.n	800ebc8 <_strtod_l+0xa20>
 800eb12:	4b64      	ldr	r3, [pc, #400]	@ (800eca4 <_strtod_l+0xafc>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	4630      	mov	r0, r6
 800eb18:	4639      	mov	r1, r7
 800eb1a:	f7f1 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d159      	bne.n	800ebd6 <_strtod_l+0xa2e>
 800eb22:	4630      	mov	r0, r6
 800eb24:	4639      	mov	r1, r7
 800eb26:	4b60      	ldr	r3, [pc, #384]	@ (800eca8 <_strtod_l+0xb00>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f7f1 fd6d 	bl	8000608 <__aeabi_dmul>
 800eb2e:	4606      	mov	r6, r0
 800eb30:	460f      	mov	r7, r1
 800eb32:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800eb36:	9606      	str	r6, [sp, #24]
 800eb38:	9307      	str	r3, [sp, #28]
 800eb3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb3e:	4d57      	ldr	r5, [pc, #348]	@ (800ec9c <_strtod_l+0xaf4>)
 800eb40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb46:	401d      	ands	r5, r3
 800eb48:	4b58      	ldr	r3, [pc, #352]	@ (800ecac <_strtod_l+0xb04>)
 800eb4a:	429d      	cmp	r5, r3
 800eb4c:	f040 80b2 	bne.w	800ecb4 <_strtod_l+0xb0c>
 800eb50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eb52:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800eb56:	ec4b ab10 	vmov	d0, sl, fp
 800eb5a:	f7ff f9c9 	bl	800def0 <__ulp>
 800eb5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb62:	ec51 0b10 	vmov	r0, r1, d0
 800eb66:	f7f1 fd4f 	bl	8000608 <__aeabi_dmul>
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	465b      	mov	r3, fp
 800eb6e:	f7f1 fb95 	bl	800029c <__adddf3>
 800eb72:	460b      	mov	r3, r1
 800eb74:	4949      	ldr	r1, [pc, #292]	@ (800ec9c <_strtod_l+0xaf4>)
 800eb76:	4a4e      	ldr	r2, [pc, #312]	@ (800ecb0 <_strtod_l+0xb08>)
 800eb78:	4019      	ands	r1, r3
 800eb7a:	4291      	cmp	r1, r2
 800eb7c:	4682      	mov	sl, r0
 800eb7e:	d942      	bls.n	800ec06 <_strtod_l+0xa5e>
 800eb80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eb82:	4b47      	ldr	r3, [pc, #284]	@ (800eca0 <_strtod_l+0xaf8>)
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d103      	bne.n	800eb90 <_strtod_l+0x9e8>
 800eb88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	f43f ad2b 	beq.w	800e5e6 <_strtod_l+0x43e>
 800eb90:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800eca0 <_strtod_l+0xaf8>
 800eb94:	f04f 3aff 	mov.w	sl, #4294967295
 800eb98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb9a:	9805      	ldr	r0, [sp, #20]
 800eb9c:	f7fe fe74 	bl	800d888 <_Bfree>
 800eba0:	9805      	ldr	r0, [sp, #20]
 800eba2:	4649      	mov	r1, r9
 800eba4:	f7fe fe70 	bl	800d888 <_Bfree>
 800eba8:	9805      	ldr	r0, [sp, #20]
 800ebaa:	4641      	mov	r1, r8
 800ebac:	f7fe fe6c 	bl	800d888 <_Bfree>
 800ebb0:	9805      	ldr	r0, [sp, #20]
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	f7fe fe68 	bl	800d888 <_Bfree>
 800ebb8:	e618      	b.n	800e7ec <_strtod_l+0x644>
 800ebba:	f1ba 0f01 	cmp.w	sl, #1
 800ebbe:	d103      	bne.n	800ebc8 <_strtod_l+0xa20>
 800ebc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f43f ada5 	beq.w	800e712 <_strtod_l+0x56a>
 800ebc8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ec78 <_strtod_l+0xad0>
 800ebcc:	4f35      	ldr	r7, [pc, #212]	@ (800eca4 <_strtod_l+0xafc>)
 800ebce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ebd2:	2600      	movs	r6, #0
 800ebd4:	e7b1      	b.n	800eb3a <_strtod_l+0x992>
 800ebd6:	4f34      	ldr	r7, [pc, #208]	@ (800eca8 <_strtod_l+0xb00>)
 800ebd8:	2600      	movs	r6, #0
 800ebda:	e7aa      	b.n	800eb32 <_strtod_l+0x98a>
 800ebdc:	4b32      	ldr	r3, [pc, #200]	@ (800eca8 <_strtod_l+0xb00>)
 800ebde:	4630      	mov	r0, r6
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f7f1 fd10 	bl	8000608 <__aeabi_dmul>
 800ebe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebea:	4606      	mov	r6, r0
 800ebec:	460f      	mov	r7, r1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d09f      	beq.n	800eb32 <_strtod_l+0x98a>
 800ebf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ebf6:	e7a0      	b.n	800eb3a <_strtod_l+0x992>
 800ebf8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ec80 <_strtod_l+0xad8>
 800ebfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ec00:	ec57 6b17 	vmov	r6, r7, d7
 800ec04:	e799      	b.n	800eb3a <_strtod_l+0x992>
 800ec06:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ec0a:	9b08      	ldr	r3, [sp, #32]
 800ec0c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d1c1      	bne.n	800eb98 <_strtod_l+0x9f0>
 800ec14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ec18:	0d1b      	lsrs	r3, r3, #20
 800ec1a:	051b      	lsls	r3, r3, #20
 800ec1c:	429d      	cmp	r5, r3
 800ec1e:	d1bb      	bne.n	800eb98 <_strtod_l+0x9f0>
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f2 f850 	bl	8000cc8 <__aeabi_d2lz>
 800ec28:	f7f1 fcc0 	bl	80005ac <__aeabi_l2d>
 800ec2c:	4602      	mov	r2, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	4630      	mov	r0, r6
 800ec32:	4639      	mov	r1, r7
 800ec34:	f7f1 fb30 	bl	8000298 <__aeabi_dsub>
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ec40:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ec44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec46:	ea46 060a 	orr.w	r6, r6, sl
 800ec4a:	431e      	orrs	r6, r3
 800ec4c:	d06f      	beq.n	800ed2e <_strtod_l+0xb86>
 800ec4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec88 <_strtod_l+0xae0>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	f7f1 ff4a 	bl	8000aec <__aeabi_dcmplt>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f47f accf 	bne.w	800e5fc <_strtod_l+0x454>
 800ec5e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ec90 <_strtod_l+0xae8>)
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec68:	f7f1 ff5e 	bl	8000b28 <__aeabi_dcmpgt>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d093      	beq.n	800eb98 <_strtod_l+0x9f0>
 800ec70:	e4c4      	b.n	800e5fc <_strtod_l+0x454>
 800ec72:	bf00      	nop
 800ec74:	f3af 8000 	nop.w
 800ec78:	00000000 	.word	0x00000000
 800ec7c:	bff00000 	.word	0xbff00000
 800ec80:	00000000 	.word	0x00000000
 800ec84:	3ff00000 	.word	0x3ff00000
 800ec88:	94a03595 	.word	0x94a03595
 800ec8c:	3fdfffff 	.word	0x3fdfffff
 800ec90:	35afe535 	.word	0x35afe535
 800ec94:	3fe00000 	.word	0x3fe00000
 800ec98:	000fffff 	.word	0x000fffff
 800ec9c:	7ff00000 	.word	0x7ff00000
 800eca0:	7fefffff 	.word	0x7fefffff
 800eca4:	3ff00000 	.word	0x3ff00000
 800eca8:	3fe00000 	.word	0x3fe00000
 800ecac:	7fe00000 	.word	0x7fe00000
 800ecb0:	7c9fffff 	.word	0x7c9fffff
 800ecb4:	9b08      	ldr	r3, [sp, #32]
 800ecb6:	b323      	cbz	r3, 800ed02 <_strtod_l+0xb5a>
 800ecb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ecbc:	d821      	bhi.n	800ed02 <_strtod_l+0xb5a>
 800ecbe:	a328      	add	r3, pc, #160	@ (adr r3, 800ed60 <_strtod_l+0xbb8>)
 800ecc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f7f1 ff1a 	bl	8000b00 <__aeabi_dcmple>
 800eccc:	b1a0      	cbz	r0, 800ecf8 <_strtod_l+0xb50>
 800ecce:	4639      	mov	r1, r7
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7f1 ff71 	bl	8000bb8 <__aeabi_d2uiz>
 800ecd6:	2801      	cmp	r0, #1
 800ecd8:	bf38      	it	cc
 800ecda:	2001      	movcc	r0, #1
 800ecdc:	f7f1 fc1a 	bl	8000514 <__aeabi_ui2d>
 800ece0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ece2:	4606      	mov	r6, r0
 800ece4:	460f      	mov	r7, r1
 800ece6:	b9fb      	cbnz	r3, 800ed28 <_strtod_l+0xb80>
 800ece8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ecec:	9014      	str	r0, [sp, #80]	@ 0x50
 800ecee:	9315      	str	r3, [sp, #84]	@ 0x54
 800ecf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ecf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ecf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ecfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ecfe:	1b5b      	subs	r3, r3, r5
 800ed00:	9311      	str	r3, [sp, #68]	@ 0x44
 800ed02:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ed06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ed0a:	f7ff f8f1 	bl	800def0 <__ulp>
 800ed0e:	4650      	mov	r0, sl
 800ed10:	ec53 2b10 	vmov	r2, r3, d0
 800ed14:	4659      	mov	r1, fp
 800ed16:	f7f1 fc77 	bl	8000608 <__aeabi_dmul>
 800ed1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ed1e:	f7f1 fabd 	bl	800029c <__adddf3>
 800ed22:	4682      	mov	sl, r0
 800ed24:	468b      	mov	fp, r1
 800ed26:	e770      	b.n	800ec0a <_strtod_l+0xa62>
 800ed28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ed2c:	e7e0      	b.n	800ecf0 <_strtod_l+0xb48>
 800ed2e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ed68 <_strtod_l+0xbc0>)
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	f7f1 feda 	bl	8000aec <__aeabi_dcmplt>
 800ed38:	e798      	b.n	800ec6c <_strtod_l+0xac4>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed3e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ed40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	f7ff ba6d 	b.w	800e222 <_strtod_l+0x7a>
 800ed48:	2a65      	cmp	r2, #101	@ 0x65
 800ed4a:	f43f ab66 	beq.w	800e41a <_strtod_l+0x272>
 800ed4e:	2a45      	cmp	r2, #69	@ 0x45
 800ed50:	f43f ab63 	beq.w	800e41a <_strtod_l+0x272>
 800ed54:	2301      	movs	r3, #1
 800ed56:	f7ff bb9e 	b.w	800e496 <_strtod_l+0x2ee>
 800ed5a:	bf00      	nop
 800ed5c:	f3af 8000 	nop.w
 800ed60:	ffc00000 	.word	0xffc00000
 800ed64:	41dfffff 	.word	0x41dfffff
 800ed68:	94a03595 	.word	0x94a03595
 800ed6c:	3fcfffff 	.word	0x3fcfffff

0800ed70 <_strtod_r>:
 800ed70:	4b01      	ldr	r3, [pc, #4]	@ (800ed78 <_strtod_r+0x8>)
 800ed72:	f7ff ba19 	b.w	800e1a8 <_strtod_l>
 800ed76:	bf00      	nop
 800ed78:	20000328 	.word	0x20000328

0800ed7c <_strtol_l.constprop.0>:
 800ed7c:	2b24      	cmp	r3, #36	@ 0x24
 800ed7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed82:	4686      	mov	lr, r0
 800ed84:	4690      	mov	r8, r2
 800ed86:	d801      	bhi.n	800ed8c <_strtol_l.constprop.0+0x10>
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d106      	bne.n	800ed9a <_strtol_l.constprop.0+0x1e>
 800ed8c:	f7fd fda6 	bl	800c8dc <__errno>
 800ed90:	2316      	movs	r3, #22
 800ed92:	6003      	str	r3, [r0, #0]
 800ed94:	2000      	movs	r0, #0
 800ed96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed9a:	4834      	ldr	r0, [pc, #208]	@ (800ee6c <_strtol_l.constprop.0+0xf0>)
 800ed9c:	460d      	mov	r5, r1
 800ed9e:	462a      	mov	r2, r5
 800eda0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eda4:	5d06      	ldrb	r6, [r0, r4]
 800eda6:	f016 0608 	ands.w	r6, r6, #8
 800edaa:	d1f8      	bne.n	800ed9e <_strtol_l.constprop.0+0x22>
 800edac:	2c2d      	cmp	r4, #45	@ 0x2d
 800edae:	d12d      	bne.n	800ee0c <_strtol_l.constprop.0+0x90>
 800edb0:	782c      	ldrb	r4, [r5, #0]
 800edb2:	2601      	movs	r6, #1
 800edb4:	1c95      	adds	r5, r2, #2
 800edb6:	f033 0210 	bics.w	r2, r3, #16
 800edba:	d109      	bne.n	800edd0 <_strtol_l.constprop.0+0x54>
 800edbc:	2c30      	cmp	r4, #48	@ 0x30
 800edbe:	d12a      	bne.n	800ee16 <_strtol_l.constprop.0+0x9a>
 800edc0:	782a      	ldrb	r2, [r5, #0]
 800edc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800edc6:	2a58      	cmp	r2, #88	@ 0x58
 800edc8:	d125      	bne.n	800ee16 <_strtol_l.constprop.0+0x9a>
 800edca:	786c      	ldrb	r4, [r5, #1]
 800edcc:	2310      	movs	r3, #16
 800edce:	3502      	adds	r5, #2
 800edd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800edd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800edd8:	2200      	movs	r2, #0
 800edda:	fbbc f9f3 	udiv	r9, ip, r3
 800edde:	4610      	mov	r0, r2
 800ede0:	fb03 ca19 	mls	sl, r3, r9, ip
 800ede4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ede8:	2f09      	cmp	r7, #9
 800edea:	d81b      	bhi.n	800ee24 <_strtol_l.constprop.0+0xa8>
 800edec:	463c      	mov	r4, r7
 800edee:	42a3      	cmp	r3, r4
 800edf0:	dd27      	ble.n	800ee42 <_strtol_l.constprop.0+0xc6>
 800edf2:	1c57      	adds	r7, r2, #1
 800edf4:	d007      	beq.n	800ee06 <_strtol_l.constprop.0+0x8a>
 800edf6:	4581      	cmp	r9, r0
 800edf8:	d320      	bcc.n	800ee3c <_strtol_l.constprop.0+0xc0>
 800edfa:	d101      	bne.n	800ee00 <_strtol_l.constprop.0+0x84>
 800edfc:	45a2      	cmp	sl, r4
 800edfe:	db1d      	blt.n	800ee3c <_strtol_l.constprop.0+0xc0>
 800ee00:	fb00 4003 	mla	r0, r0, r3, r4
 800ee04:	2201      	movs	r2, #1
 800ee06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee0a:	e7eb      	b.n	800ede4 <_strtol_l.constprop.0+0x68>
 800ee0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ee0e:	bf04      	itt	eq
 800ee10:	782c      	ldrbeq	r4, [r5, #0]
 800ee12:	1c95      	addeq	r5, r2, #2
 800ee14:	e7cf      	b.n	800edb6 <_strtol_l.constprop.0+0x3a>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1da      	bne.n	800edd0 <_strtol_l.constprop.0+0x54>
 800ee1a:	2c30      	cmp	r4, #48	@ 0x30
 800ee1c:	bf0c      	ite	eq
 800ee1e:	2308      	moveq	r3, #8
 800ee20:	230a      	movne	r3, #10
 800ee22:	e7d5      	b.n	800edd0 <_strtol_l.constprop.0+0x54>
 800ee24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ee28:	2f19      	cmp	r7, #25
 800ee2a:	d801      	bhi.n	800ee30 <_strtol_l.constprop.0+0xb4>
 800ee2c:	3c37      	subs	r4, #55	@ 0x37
 800ee2e:	e7de      	b.n	800edee <_strtol_l.constprop.0+0x72>
 800ee30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ee34:	2f19      	cmp	r7, #25
 800ee36:	d804      	bhi.n	800ee42 <_strtol_l.constprop.0+0xc6>
 800ee38:	3c57      	subs	r4, #87	@ 0x57
 800ee3a:	e7d8      	b.n	800edee <_strtol_l.constprop.0+0x72>
 800ee3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee40:	e7e1      	b.n	800ee06 <_strtol_l.constprop.0+0x8a>
 800ee42:	1c53      	adds	r3, r2, #1
 800ee44:	d108      	bne.n	800ee58 <_strtol_l.constprop.0+0xdc>
 800ee46:	2322      	movs	r3, #34	@ 0x22
 800ee48:	f8ce 3000 	str.w	r3, [lr]
 800ee4c:	4660      	mov	r0, ip
 800ee4e:	f1b8 0f00 	cmp.w	r8, #0
 800ee52:	d0a0      	beq.n	800ed96 <_strtol_l.constprop.0+0x1a>
 800ee54:	1e69      	subs	r1, r5, #1
 800ee56:	e006      	b.n	800ee66 <_strtol_l.constprop.0+0xea>
 800ee58:	b106      	cbz	r6, 800ee5c <_strtol_l.constprop.0+0xe0>
 800ee5a:	4240      	negs	r0, r0
 800ee5c:	f1b8 0f00 	cmp.w	r8, #0
 800ee60:	d099      	beq.n	800ed96 <_strtol_l.constprop.0+0x1a>
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	d1f6      	bne.n	800ee54 <_strtol_l.constprop.0+0xd8>
 800ee66:	f8c8 1000 	str.w	r1, [r8]
 800ee6a:	e794      	b.n	800ed96 <_strtol_l.constprop.0+0x1a>
 800ee6c:	08010671 	.word	0x08010671

0800ee70 <_strtol_r>:
 800ee70:	f7ff bf84 	b.w	800ed7c <_strtol_l.constprop.0>

0800ee74 <__ssputs_r>:
 800ee74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee78:	688e      	ldr	r6, [r1, #8]
 800ee7a:	461f      	mov	r7, r3
 800ee7c:	42be      	cmp	r6, r7
 800ee7e:	680b      	ldr	r3, [r1, #0]
 800ee80:	4682      	mov	sl, r0
 800ee82:	460c      	mov	r4, r1
 800ee84:	4690      	mov	r8, r2
 800ee86:	d82d      	bhi.n	800eee4 <__ssputs_r+0x70>
 800ee88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ee8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ee90:	d026      	beq.n	800eee0 <__ssputs_r+0x6c>
 800ee92:	6965      	ldr	r5, [r4, #20]
 800ee94:	6909      	ldr	r1, [r1, #16]
 800ee96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee9a:	eba3 0901 	sub.w	r9, r3, r1
 800ee9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eea2:	1c7b      	adds	r3, r7, #1
 800eea4:	444b      	add	r3, r9
 800eea6:	106d      	asrs	r5, r5, #1
 800eea8:	429d      	cmp	r5, r3
 800eeaa:	bf38      	it	cc
 800eeac:	461d      	movcc	r5, r3
 800eeae:	0553      	lsls	r3, r2, #21
 800eeb0:	d527      	bpl.n	800ef02 <__ssputs_r+0x8e>
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	f7fe fc1c 	bl	800d6f0 <_malloc_r>
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b360      	cbz	r0, 800ef16 <__ssputs_r+0xa2>
 800eebc:	6921      	ldr	r1, [r4, #16]
 800eebe:	464a      	mov	r2, r9
 800eec0:	f7fd fd41 	bl	800c946 <memcpy>
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eeca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	6126      	str	r6, [r4, #16]
 800eed2:	6165      	str	r5, [r4, #20]
 800eed4:	444e      	add	r6, r9
 800eed6:	eba5 0509 	sub.w	r5, r5, r9
 800eeda:	6026      	str	r6, [r4, #0]
 800eedc:	60a5      	str	r5, [r4, #8]
 800eede:	463e      	mov	r6, r7
 800eee0:	42be      	cmp	r6, r7
 800eee2:	d900      	bls.n	800eee6 <__ssputs_r+0x72>
 800eee4:	463e      	mov	r6, r7
 800eee6:	6820      	ldr	r0, [r4, #0]
 800eee8:	4632      	mov	r2, r6
 800eeea:	4641      	mov	r1, r8
 800eeec:	f000 faf0 	bl	800f4d0 <memmove>
 800eef0:	68a3      	ldr	r3, [r4, #8]
 800eef2:	1b9b      	subs	r3, r3, r6
 800eef4:	60a3      	str	r3, [r4, #8]
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	4433      	add	r3, r6
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	2000      	movs	r0, #0
 800eefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef02:	462a      	mov	r2, r5
 800ef04:	f000 fea5 	bl	800fc52 <_realloc_r>
 800ef08:	4606      	mov	r6, r0
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d1e0      	bne.n	800eed0 <__ssputs_r+0x5c>
 800ef0e:	6921      	ldr	r1, [r4, #16]
 800ef10:	4650      	mov	r0, sl
 800ef12:	f7fe fb79 	bl	800d608 <_free_r>
 800ef16:	230c      	movs	r3, #12
 800ef18:	f8ca 3000 	str.w	r3, [sl]
 800ef1c:	89a3      	ldrh	r3, [r4, #12]
 800ef1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef22:	81a3      	strh	r3, [r4, #12]
 800ef24:	f04f 30ff 	mov.w	r0, #4294967295
 800ef28:	e7e9      	b.n	800eefe <__ssputs_r+0x8a>
	...

0800ef2c <_svfiprintf_r>:
 800ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef30:	4698      	mov	r8, r3
 800ef32:	898b      	ldrh	r3, [r1, #12]
 800ef34:	061b      	lsls	r3, r3, #24
 800ef36:	b09d      	sub	sp, #116	@ 0x74
 800ef38:	4607      	mov	r7, r0
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	4614      	mov	r4, r2
 800ef3e:	d510      	bpl.n	800ef62 <_svfiprintf_r+0x36>
 800ef40:	690b      	ldr	r3, [r1, #16]
 800ef42:	b973      	cbnz	r3, 800ef62 <_svfiprintf_r+0x36>
 800ef44:	2140      	movs	r1, #64	@ 0x40
 800ef46:	f7fe fbd3 	bl	800d6f0 <_malloc_r>
 800ef4a:	6028      	str	r0, [r5, #0]
 800ef4c:	6128      	str	r0, [r5, #16]
 800ef4e:	b930      	cbnz	r0, 800ef5e <_svfiprintf_r+0x32>
 800ef50:	230c      	movs	r3, #12
 800ef52:	603b      	str	r3, [r7, #0]
 800ef54:	f04f 30ff 	mov.w	r0, #4294967295
 800ef58:	b01d      	add	sp, #116	@ 0x74
 800ef5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef5e:	2340      	movs	r3, #64	@ 0x40
 800ef60:	616b      	str	r3, [r5, #20]
 800ef62:	2300      	movs	r3, #0
 800ef64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef66:	2320      	movs	r3, #32
 800ef68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef70:	2330      	movs	r3, #48	@ 0x30
 800ef72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f110 <_svfiprintf_r+0x1e4>
 800ef76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef7a:	f04f 0901 	mov.w	r9, #1
 800ef7e:	4623      	mov	r3, r4
 800ef80:	469a      	mov	sl, r3
 800ef82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef86:	b10a      	cbz	r2, 800ef8c <_svfiprintf_r+0x60>
 800ef88:	2a25      	cmp	r2, #37	@ 0x25
 800ef8a:	d1f9      	bne.n	800ef80 <_svfiprintf_r+0x54>
 800ef8c:	ebba 0b04 	subs.w	fp, sl, r4
 800ef90:	d00b      	beq.n	800efaa <_svfiprintf_r+0x7e>
 800ef92:	465b      	mov	r3, fp
 800ef94:	4622      	mov	r2, r4
 800ef96:	4629      	mov	r1, r5
 800ef98:	4638      	mov	r0, r7
 800ef9a:	f7ff ff6b 	bl	800ee74 <__ssputs_r>
 800ef9e:	3001      	adds	r0, #1
 800efa0:	f000 80a7 	beq.w	800f0f2 <_svfiprintf_r+0x1c6>
 800efa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efa6:	445a      	add	r2, fp
 800efa8:	9209      	str	r2, [sp, #36]	@ 0x24
 800efaa:	f89a 3000 	ldrb.w	r3, [sl]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 809f 	beq.w	800f0f2 <_svfiprintf_r+0x1c6>
 800efb4:	2300      	movs	r3, #0
 800efb6:	f04f 32ff 	mov.w	r2, #4294967295
 800efba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efbe:	f10a 0a01 	add.w	sl, sl, #1
 800efc2:	9304      	str	r3, [sp, #16]
 800efc4:	9307      	str	r3, [sp, #28]
 800efc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800efca:	931a      	str	r3, [sp, #104]	@ 0x68
 800efcc:	4654      	mov	r4, sl
 800efce:	2205      	movs	r2, #5
 800efd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd4:	484e      	ldr	r0, [pc, #312]	@ (800f110 <_svfiprintf_r+0x1e4>)
 800efd6:	f7f1 f903 	bl	80001e0 <memchr>
 800efda:	9a04      	ldr	r2, [sp, #16]
 800efdc:	b9d8      	cbnz	r0, 800f016 <_svfiprintf_r+0xea>
 800efde:	06d0      	lsls	r0, r2, #27
 800efe0:	bf44      	itt	mi
 800efe2:	2320      	movmi	r3, #32
 800efe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efe8:	0711      	lsls	r1, r2, #28
 800efea:	bf44      	itt	mi
 800efec:	232b      	movmi	r3, #43	@ 0x2b
 800efee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eff2:	f89a 3000 	ldrb.w	r3, [sl]
 800eff6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eff8:	d015      	beq.n	800f026 <_svfiprintf_r+0xfa>
 800effa:	9a07      	ldr	r2, [sp, #28]
 800effc:	4654      	mov	r4, sl
 800effe:	2000      	movs	r0, #0
 800f000:	f04f 0c0a 	mov.w	ip, #10
 800f004:	4621      	mov	r1, r4
 800f006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f00a:	3b30      	subs	r3, #48	@ 0x30
 800f00c:	2b09      	cmp	r3, #9
 800f00e:	d94b      	bls.n	800f0a8 <_svfiprintf_r+0x17c>
 800f010:	b1b0      	cbz	r0, 800f040 <_svfiprintf_r+0x114>
 800f012:	9207      	str	r2, [sp, #28]
 800f014:	e014      	b.n	800f040 <_svfiprintf_r+0x114>
 800f016:	eba0 0308 	sub.w	r3, r0, r8
 800f01a:	fa09 f303 	lsl.w	r3, r9, r3
 800f01e:	4313      	orrs	r3, r2
 800f020:	9304      	str	r3, [sp, #16]
 800f022:	46a2      	mov	sl, r4
 800f024:	e7d2      	b.n	800efcc <_svfiprintf_r+0xa0>
 800f026:	9b03      	ldr	r3, [sp, #12]
 800f028:	1d19      	adds	r1, r3, #4
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	9103      	str	r1, [sp, #12]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	bfbb      	ittet	lt
 800f032:	425b      	neglt	r3, r3
 800f034:	f042 0202 	orrlt.w	r2, r2, #2
 800f038:	9307      	strge	r3, [sp, #28]
 800f03a:	9307      	strlt	r3, [sp, #28]
 800f03c:	bfb8      	it	lt
 800f03e:	9204      	strlt	r2, [sp, #16]
 800f040:	7823      	ldrb	r3, [r4, #0]
 800f042:	2b2e      	cmp	r3, #46	@ 0x2e
 800f044:	d10a      	bne.n	800f05c <_svfiprintf_r+0x130>
 800f046:	7863      	ldrb	r3, [r4, #1]
 800f048:	2b2a      	cmp	r3, #42	@ 0x2a
 800f04a:	d132      	bne.n	800f0b2 <_svfiprintf_r+0x186>
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	1d1a      	adds	r2, r3, #4
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	9203      	str	r2, [sp, #12]
 800f054:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f058:	3402      	adds	r4, #2
 800f05a:	9305      	str	r3, [sp, #20]
 800f05c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f120 <_svfiprintf_r+0x1f4>
 800f060:	7821      	ldrb	r1, [r4, #0]
 800f062:	2203      	movs	r2, #3
 800f064:	4650      	mov	r0, sl
 800f066:	f7f1 f8bb 	bl	80001e0 <memchr>
 800f06a:	b138      	cbz	r0, 800f07c <_svfiprintf_r+0x150>
 800f06c:	9b04      	ldr	r3, [sp, #16]
 800f06e:	eba0 000a 	sub.w	r0, r0, sl
 800f072:	2240      	movs	r2, #64	@ 0x40
 800f074:	4082      	lsls	r2, r0
 800f076:	4313      	orrs	r3, r2
 800f078:	3401      	adds	r4, #1
 800f07a:	9304      	str	r3, [sp, #16]
 800f07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f080:	4824      	ldr	r0, [pc, #144]	@ (800f114 <_svfiprintf_r+0x1e8>)
 800f082:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f086:	2206      	movs	r2, #6
 800f088:	f7f1 f8aa 	bl	80001e0 <memchr>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d036      	beq.n	800f0fe <_svfiprintf_r+0x1d2>
 800f090:	4b21      	ldr	r3, [pc, #132]	@ (800f118 <_svfiprintf_r+0x1ec>)
 800f092:	bb1b      	cbnz	r3, 800f0dc <_svfiprintf_r+0x1b0>
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	3307      	adds	r3, #7
 800f098:	f023 0307 	bic.w	r3, r3, #7
 800f09c:	3308      	adds	r3, #8
 800f09e:	9303      	str	r3, [sp, #12]
 800f0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0a2:	4433      	add	r3, r6
 800f0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0a6:	e76a      	b.n	800ef7e <_svfiprintf_r+0x52>
 800f0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ac:	460c      	mov	r4, r1
 800f0ae:	2001      	movs	r0, #1
 800f0b0:	e7a8      	b.n	800f004 <_svfiprintf_r+0xd8>
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	3401      	adds	r4, #1
 800f0b6:	9305      	str	r3, [sp, #20]
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	f04f 0c0a 	mov.w	ip, #10
 800f0be:	4620      	mov	r0, r4
 800f0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0c4:	3a30      	subs	r2, #48	@ 0x30
 800f0c6:	2a09      	cmp	r2, #9
 800f0c8:	d903      	bls.n	800f0d2 <_svfiprintf_r+0x1a6>
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0c6      	beq.n	800f05c <_svfiprintf_r+0x130>
 800f0ce:	9105      	str	r1, [sp, #20]
 800f0d0:	e7c4      	b.n	800f05c <_svfiprintf_r+0x130>
 800f0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	2301      	movs	r3, #1
 800f0da:	e7f0      	b.n	800f0be <_svfiprintf_r+0x192>
 800f0dc:	ab03      	add	r3, sp, #12
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	462a      	mov	r2, r5
 800f0e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f11c <_svfiprintf_r+0x1f0>)
 800f0e4:	a904      	add	r1, sp, #16
 800f0e6:	4638      	mov	r0, r7
 800f0e8:	f7fc fbe2 	bl	800b8b0 <_printf_float>
 800f0ec:	1c42      	adds	r2, r0, #1
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	d1d6      	bne.n	800f0a0 <_svfiprintf_r+0x174>
 800f0f2:	89ab      	ldrh	r3, [r5, #12]
 800f0f4:	065b      	lsls	r3, r3, #25
 800f0f6:	f53f af2d 	bmi.w	800ef54 <_svfiprintf_r+0x28>
 800f0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0fc:	e72c      	b.n	800ef58 <_svfiprintf_r+0x2c>
 800f0fe:	ab03      	add	r3, sp, #12
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	462a      	mov	r2, r5
 800f104:	4b05      	ldr	r3, [pc, #20]	@ (800f11c <_svfiprintf_r+0x1f0>)
 800f106:	a904      	add	r1, sp, #16
 800f108:	4638      	mov	r0, r7
 800f10a:	f7fc fe69 	bl	800bde0 <_printf_i>
 800f10e:	e7ed      	b.n	800f0ec <_svfiprintf_r+0x1c0>
 800f110:	08010771 	.word	0x08010771
 800f114:	0801077b 	.word	0x0801077b
 800f118:	0800b8b1 	.word	0x0800b8b1
 800f11c:	0800ee75 	.word	0x0800ee75
 800f120:	08010777 	.word	0x08010777

0800f124 <__sfputc_r>:
 800f124:	6893      	ldr	r3, [r2, #8]
 800f126:	3b01      	subs	r3, #1
 800f128:	2b00      	cmp	r3, #0
 800f12a:	b410      	push	{r4}
 800f12c:	6093      	str	r3, [r2, #8]
 800f12e:	da08      	bge.n	800f142 <__sfputc_r+0x1e>
 800f130:	6994      	ldr	r4, [r2, #24]
 800f132:	42a3      	cmp	r3, r4
 800f134:	db01      	blt.n	800f13a <__sfputc_r+0x16>
 800f136:	290a      	cmp	r1, #10
 800f138:	d103      	bne.n	800f142 <__sfputc_r+0x1e>
 800f13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f13e:	f000 b933 	b.w	800f3a8 <__swbuf_r>
 800f142:	6813      	ldr	r3, [r2, #0]
 800f144:	1c58      	adds	r0, r3, #1
 800f146:	6010      	str	r0, [r2, #0]
 800f148:	7019      	strb	r1, [r3, #0]
 800f14a:	4608      	mov	r0, r1
 800f14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f150:	4770      	bx	lr

0800f152 <__sfputs_r>:
 800f152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f154:	4606      	mov	r6, r0
 800f156:	460f      	mov	r7, r1
 800f158:	4614      	mov	r4, r2
 800f15a:	18d5      	adds	r5, r2, r3
 800f15c:	42ac      	cmp	r4, r5
 800f15e:	d101      	bne.n	800f164 <__sfputs_r+0x12>
 800f160:	2000      	movs	r0, #0
 800f162:	e007      	b.n	800f174 <__sfputs_r+0x22>
 800f164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f168:	463a      	mov	r2, r7
 800f16a:	4630      	mov	r0, r6
 800f16c:	f7ff ffda 	bl	800f124 <__sfputc_r>
 800f170:	1c43      	adds	r3, r0, #1
 800f172:	d1f3      	bne.n	800f15c <__sfputs_r+0xa>
 800f174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f178 <_vfiprintf_r>:
 800f178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f17c:	460d      	mov	r5, r1
 800f17e:	b09d      	sub	sp, #116	@ 0x74
 800f180:	4614      	mov	r4, r2
 800f182:	4698      	mov	r8, r3
 800f184:	4606      	mov	r6, r0
 800f186:	b118      	cbz	r0, 800f190 <_vfiprintf_r+0x18>
 800f188:	6a03      	ldr	r3, [r0, #32]
 800f18a:	b90b      	cbnz	r3, 800f190 <_vfiprintf_r+0x18>
 800f18c:	f7fd faa8 	bl	800c6e0 <__sinit>
 800f190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f192:	07d9      	lsls	r1, r3, #31
 800f194:	d405      	bmi.n	800f1a2 <_vfiprintf_r+0x2a>
 800f196:	89ab      	ldrh	r3, [r5, #12]
 800f198:	059a      	lsls	r2, r3, #22
 800f19a:	d402      	bmi.n	800f1a2 <_vfiprintf_r+0x2a>
 800f19c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f19e:	f7fd fbc8 	bl	800c932 <__retarget_lock_acquire_recursive>
 800f1a2:	89ab      	ldrh	r3, [r5, #12]
 800f1a4:	071b      	lsls	r3, r3, #28
 800f1a6:	d501      	bpl.n	800f1ac <_vfiprintf_r+0x34>
 800f1a8:	692b      	ldr	r3, [r5, #16]
 800f1aa:	b99b      	cbnz	r3, 800f1d4 <_vfiprintf_r+0x5c>
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f000 f938 	bl	800f424 <__swsetup_r>
 800f1b4:	b170      	cbz	r0, 800f1d4 <_vfiprintf_r+0x5c>
 800f1b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1b8:	07dc      	lsls	r4, r3, #31
 800f1ba:	d504      	bpl.n	800f1c6 <_vfiprintf_r+0x4e>
 800f1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c0:	b01d      	add	sp, #116	@ 0x74
 800f1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c6:	89ab      	ldrh	r3, [r5, #12]
 800f1c8:	0598      	lsls	r0, r3, #22
 800f1ca:	d4f7      	bmi.n	800f1bc <_vfiprintf_r+0x44>
 800f1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ce:	f7fd fbb1 	bl	800c934 <__retarget_lock_release_recursive>
 800f1d2:	e7f3      	b.n	800f1bc <_vfiprintf_r+0x44>
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1d8:	2320      	movs	r3, #32
 800f1da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1de:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1e2:	2330      	movs	r3, #48	@ 0x30
 800f1e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f394 <_vfiprintf_r+0x21c>
 800f1e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1ec:	f04f 0901 	mov.w	r9, #1
 800f1f0:	4623      	mov	r3, r4
 800f1f2:	469a      	mov	sl, r3
 800f1f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1f8:	b10a      	cbz	r2, 800f1fe <_vfiprintf_r+0x86>
 800f1fa:	2a25      	cmp	r2, #37	@ 0x25
 800f1fc:	d1f9      	bne.n	800f1f2 <_vfiprintf_r+0x7a>
 800f1fe:	ebba 0b04 	subs.w	fp, sl, r4
 800f202:	d00b      	beq.n	800f21c <_vfiprintf_r+0xa4>
 800f204:	465b      	mov	r3, fp
 800f206:	4622      	mov	r2, r4
 800f208:	4629      	mov	r1, r5
 800f20a:	4630      	mov	r0, r6
 800f20c:	f7ff ffa1 	bl	800f152 <__sfputs_r>
 800f210:	3001      	adds	r0, #1
 800f212:	f000 80a7 	beq.w	800f364 <_vfiprintf_r+0x1ec>
 800f216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f218:	445a      	add	r2, fp
 800f21a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f21c:	f89a 3000 	ldrb.w	r3, [sl]
 800f220:	2b00      	cmp	r3, #0
 800f222:	f000 809f 	beq.w	800f364 <_vfiprintf_r+0x1ec>
 800f226:	2300      	movs	r3, #0
 800f228:	f04f 32ff 	mov.w	r2, #4294967295
 800f22c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f230:	f10a 0a01 	add.w	sl, sl, #1
 800f234:	9304      	str	r3, [sp, #16]
 800f236:	9307      	str	r3, [sp, #28]
 800f238:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f23c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f23e:	4654      	mov	r4, sl
 800f240:	2205      	movs	r2, #5
 800f242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f246:	4853      	ldr	r0, [pc, #332]	@ (800f394 <_vfiprintf_r+0x21c>)
 800f248:	f7f0 ffca 	bl	80001e0 <memchr>
 800f24c:	9a04      	ldr	r2, [sp, #16]
 800f24e:	b9d8      	cbnz	r0, 800f288 <_vfiprintf_r+0x110>
 800f250:	06d1      	lsls	r1, r2, #27
 800f252:	bf44      	itt	mi
 800f254:	2320      	movmi	r3, #32
 800f256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f25a:	0713      	lsls	r3, r2, #28
 800f25c:	bf44      	itt	mi
 800f25e:	232b      	movmi	r3, #43	@ 0x2b
 800f260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f264:	f89a 3000 	ldrb.w	r3, [sl]
 800f268:	2b2a      	cmp	r3, #42	@ 0x2a
 800f26a:	d015      	beq.n	800f298 <_vfiprintf_r+0x120>
 800f26c:	9a07      	ldr	r2, [sp, #28]
 800f26e:	4654      	mov	r4, sl
 800f270:	2000      	movs	r0, #0
 800f272:	f04f 0c0a 	mov.w	ip, #10
 800f276:	4621      	mov	r1, r4
 800f278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f27c:	3b30      	subs	r3, #48	@ 0x30
 800f27e:	2b09      	cmp	r3, #9
 800f280:	d94b      	bls.n	800f31a <_vfiprintf_r+0x1a2>
 800f282:	b1b0      	cbz	r0, 800f2b2 <_vfiprintf_r+0x13a>
 800f284:	9207      	str	r2, [sp, #28]
 800f286:	e014      	b.n	800f2b2 <_vfiprintf_r+0x13a>
 800f288:	eba0 0308 	sub.w	r3, r0, r8
 800f28c:	fa09 f303 	lsl.w	r3, r9, r3
 800f290:	4313      	orrs	r3, r2
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	46a2      	mov	sl, r4
 800f296:	e7d2      	b.n	800f23e <_vfiprintf_r+0xc6>
 800f298:	9b03      	ldr	r3, [sp, #12]
 800f29a:	1d19      	adds	r1, r3, #4
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	9103      	str	r1, [sp, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfbb      	ittet	lt
 800f2a4:	425b      	neglt	r3, r3
 800f2a6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2aa:	9307      	strge	r3, [sp, #28]
 800f2ac:	9307      	strlt	r3, [sp, #28]
 800f2ae:	bfb8      	it	lt
 800f2b0:	9204      	strlt	r2, [sp, #16]
 800f2b2:	7823      	ldrb	r3, [r4, #0]
 800f2b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2b6:	d10a      	bne.n	800f2ce <_vfiprintf_r+0x156>
 800f2b8:	7863      	ldrb	r3, [r4, #1]
 800f2ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2bc:	d132      	bne.n	800f324 <_vfiprintf_r+0x1ac>
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	1d1a      	adds	r2, r3, #4
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	9203      	str	r2, [sp, #12]
 800f2c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2ca:	3402      	adds	r4, #2
 800f2cc:	9305      	str	r3, [sp, #20]
 800f2ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3a4 <_vfiprintf_r+0x22c>
 800f2d2:	7821      	ldrb	r1, [r4, #0]
 800f2d4:	2203      	movs	r2, #3
 800f2d6:	4650      	mov	r0, sl
 800f2d8:	f7f0 ff82 	bl	80001e0 <memchr>
 800f2dc:	b138      	cbz	r0, 800f2ee <_vfiprintf_r+0x176>
 800f2de:	9b04      	ldr	r3, [sp, #16]
 800f2e0:	eba0 000a 	sub.w	r0, r0, sl
 800f2e4:	2240      	movs	r2, #64	@ 0x40
 800f2e6:	4082      	lsls	r2, r0
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	3401      	adds	r4, #1
 800f2ec:	9304      	str	r3, [sp, #16]
 800f2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f2:	4829      	ldr	r0, [pc, #164]	@ (800f398 <_vfiprintf_r+0x220>)
 800f2f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2f8:	2206      	movs	r2, #6
 800f2fa:	f7f0 ff71 	bl	80001e0 <memchr>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	d03f      	beq.n	800f382 <_vfiprintf_r+0x20a>
 800f302:	4b26      	ldr	r3, [pc, #152]	@ (800f39c <_vfiprintf_r+0x224>)
 800f304:	bb1b      	cbnz	r3, 800f34e <_vfiprintf_r+0x1d6>
 800f306:	9b03      	ldr	r3, [sp, #12]
 800f308:	3307      	adds	r3, #7
 800f30a:	f023 0307 	bic.w	r3, r3, #7
 800f30e:	3308      	adds	r3, #8
 800f310:	9303      	str	r3, [sp, #12]
 800f312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f314:	443b      	add	r3, r7
 800f316:	9309      	str	r3, [sp, #36]	@ 0x24
 800f318:	e76a      	b.n	800f1f0 <_vfiprintf_r+0x78>
 800f31a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f31e:	460c      	mov	r4, r1
 800f320:	2001      	movs	r0, #1
 800f322:	e7a8      	b.n	800f276 <_vfiprintf_r+0xfe>
 800f324:	2300      	movs	r3, #0
 800f326:	3401      	adds	r4, #1
 800f328:	9305      	str	r3, [sp, #20]
 800f32a:	4619      	mov	r1, r3
 800f32c:	f04f 0c0a 	mov.w	ip, #10
 800f330:	4620      	mov	r0, r4
 800f332:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f336:	3a30      	subs	r2, #48	@ 0x30
 800f338:	2a09      	cmp	r2, #9
 800f33a:	d903      	bls.n	800f344 <_vfiprintf_r+0x1cc>
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d0c6      	beq.n	800f2ce <_vfiprintf_r+0x156>
 800f340:	9105      	str	r1, [sp, #20]
 800f342:	e7c4      	b.n	800f2ce <_vfiprintf_r+0x156>
 800f344:	fb0c 2101 	mla	r1, ip, r1, r2
 800f348:	4604      	mov	r4, r0
 800f34a:	2301      	movs	r3, #1
 800f34c:	e7f0      	b.n	800f330 <_vfiprintf_r+0x1b8>
 800f34e:	ab03      	add	r3, sp, #12
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	462a      	mov	r2, r5
 800f354:	4b12      	ldr	r3, [pc, #72]	@ (800f3a0 <_vfiprintf_r+0x228>)
 800f356:	a904      	add	r1, sp, #16
 800f358:	4630      	mov	r0, r6
 800f35a:	f7fc faa9 	bl	800b8b0 <_printf_float>
 800f35e:	4607      	mov	r7, r0
 800f360:	1c78      	adds	r0, r7, #1
 800f362:	d1d6      	bne.n	800f312 <_vfiprintf_r+0x19a>
 800f364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f366:	07d9      	lsls	r1, r3, #31
 800f368:	d405      	bmi.n	800f376 <_vfiprintf_r+0x1fe>
 800f36a:	89ab      	ldrh	r3, [r5, #12]
 800f36c:	059a      	lsls	r2, r3, #22
 800f36e:	d402      	bmi.n	800f376 <_vfiprintf_r+0x1fe>
 800f370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f372:	f7fd fadf 	bl	800c934 <__retarget_lock_release_recursive>
 800f376:	89ab      	ldrh	r3, [r5, #12]
 800f378:	065b      	lsls	r3, r3, #25
 800f37a:	f53f af1f 	bmi.w	800f1bc <_vfiprintf_r+0x44>
 800f37e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f380:	e71e      	b.n	800f1c0 <_vfiprintf_r+0x48>
 800f382:	ab03      	add	r3, sp, #12
 800f384:	9300      	str	r3, [sp, #0]
 800f386:	462a      	mov	r2, r5
 800f388:	4b05      	ldr	r3, [pc, #20]	@ (800f3a0 <_vfiprintf_r+0x228>)
 800f38a:	a904      	add	r1, sp, #16
 800f38c:	4630      	mov	r0, r6
 800f38e:	f7fc fd27 	bl	800bde0 <_printf_i>
 800f392:	e7e4      	b.n	800f35e <_vfiprintf_r+0x1e6>
 800f394:	08010771 	.word	0x08010771
 800f398:	0801077b 	.word	0x0801077b
 800f39c:	0800b8b1 	.word	0x0800b8b1
 800f3a0:	0800f153 	.word	0x0800f153
 800f3a4:	08010777 	.word	0x08010777

0800f3a8 <__swbuf_r>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	460e      	mov	r6, r1
 800f3ac:	4614      	mov	r4, r2
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	b118      	cbz	r0, 800f3ba <__swbuf_r+0x12>
 800f3b2:	6a03      	ldr	r3, [r0, #32]
 800f3b4:	b90b      	cbnz	r3, 800f3ba <__swbuf_r+0x12>
 800f3b6:	f7fd f993 	bl	800c6e0 <__sinit>
 800f3ba:	69a3      	ldr	r3, [r4, #24]
 800f3bc:	60a3      	str	r3, [r4, #8]
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	071a      	lsls	r2, r3, #28
 800f3c2:	d501      	bpl.n	800f3c8 <__swbuf_r+0x20>
 800f3c4:	6923      	ldr	r3, [r4, #16]
 800f3c6:	b943      	cbnz	r3, 800f3da <__swbuf_r+0x32>
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 f82a 	bl	800f424 <__swsetup_r>
 800f3d0:	b118      	cbz	r0, 800f3da <__swbuf_r+0x32>
 800f3d2:	f04f 37ff 	mov.w	r7, #4294967295
 800f3d6:	4638      	mov	r0, r7
 800f3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	6922      	ldr	r2, [r4, #16]
 800f3de:	1a98      	subs	r0, r3, r2
 800f3e0:	6963      	ldr	r3, [r4, #20]
 800f3e2:	b2f6      	uxtb	r6, r6
 800f3e4:	4283      	cmp	r3, r0
 800f3e6:	4637      	mov	r7, r6
 800f3e8:	dc05      	bgt.n	800f3f6 <__swbuf_r+0x4e>
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4628      	mov	r0, r5
 800f3ee:	f7fd f8af 	bl	800c550 <_fflush_r>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d1ed      	bne.n	800f3d2 <__swbuf_r+0x2a>
 800f3f6:	68a3      	ldr	r3, [r4, #8]
 800f3f8:	3b01      	subs	r3, #1
 800f3fa:	60a3      	str	r3, [r4, #8]
 800f3fc:	6823      	ldr	r3, [r4, #0]
 800f3fe:	1c5a      	adds	r2, r3, #1
 800f400:	6022      	str	r2, [r4, #0]
 800f402:	701e      	strb	r6, [r3, #0]
 800f404:	6962      	ldr	r2, [r4, #20]
 800f406:	1c43      	adds	r3, r0, #1
 800f408:	429a      	cmp	r2, r3
 800f40a:	d004      	beq.n	800f416 <__swbuf_r+0x6e>
 800f40c:	89a3      	ldrh	r3, [r4, #12]
 800f40e:	07db      	lsls	r3, r3, #31
 800f410:	d5e1      	bpl.n	800f3d6 <__swbuf_r+0x2e>
 800f412:	2e0a      	cmp	r6, #10
 800f414:	d1df      	bne.n	800f3d6 <__swbuf_r+0x2e>
 800f416:	4621      	mov	r1, r4
 800f418:	4628      	mov	r0, r5
 800f41a:	f7fd f899 	bl	800c550 <_fflush_r>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d0d9      	beq.n	800f3d6 <__swbuf_r+0x2e>
 800f422:	e7d6      	b.n	800f3d2 <__swbuf_r+0x2a>

0800f424 <__swsetup_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4b29      	ldr	r3, [pc, #164]	@ (800f4cc <__swsetup_r+0xa8>)
 800f428:	4605      	mov	r5, r0
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	460c      	mov	r4, r1
 800f42e:	b118      	cbz	r0, 800f438 <__swsetup_r+0x14>
 800f430:	6a03      	ldr	r3, [r0, #32]
 800f432:	b90b      	cbnz	r3, 800f438 <__swsetup_r+0x14>
 800f434:	f7fd f954 	bl	800c6e0 <__sinit>
 800f438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f43c:	0719      	lsls	r1, r3, #28
 800f43e:	d422      	bmi.n	800f486 <__swsetup_r+0x62>
 800f440:	06da      	lsls	r2, r3, #27
 800f442:	d407      	bmi.n	800f454 <__swsetup_r+0x30>
 800f444:	2209      	movs	r2, #9
 800f446:	602a      	str	r2, [r5, #0]
 800f448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f44c:	81a3      	strh	r3, [r4, #12]
 800f44e:	f04f 30ff 	mov.w	r0, #4294967295
 800f452:	e033      	b.n	800f4bc <__swsetup_r+0x98>
 800f454:	0758      	lsls	r0, r3, #29
 800f456:	d512      	bpl.n	800f47e <__swsetup_r+0x5a>
 800f458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f45a:	b141      	cbz	r1, 800f46e <__swsetup_r+0x4a>
 800f45c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f460:	4299      	cmp	r1, r3
 800f462:	d002      	beq.n	800f46a <__swsetup_r+0x46>
 800f464:	4628      	mov	r0, r5
 800f466:	f7fe f8cf 	bl	800d608 <_free_r>
 800f46a:	2300      	movs	r3, #0
 800f46c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f474:	81a3      	strh	r3, [r4, #12]
 800f476:	2300      	movs	r3, #0
 800f478:	6063      	str	r3, [r4, #4]
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	89a3      	ldrh	r3, [r4, #12]
 800f480:	f043 0308 	orr.w	r3, r3, #8
 800f484:	81a3      	strh	r3, [r4, #12]
 800f486:	6923      	ldr	r3, [r4, #16]
 800f488:	b94b      	cbnz	r3, 800f49e <__swsetup_r+0x7a>
 800f48a:	89a3      	ldrh	r3, [r4, #12]
 800f48c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f494:	d003      	beq.n	800f49e <__swsetup_r+0x7a>
 800f496:	4621      	mov	r1, r4
 800f498:	4628      	mov	r0, r5
 800f49a:	f000 fc4d 	bl	800fd38 <__smakebuf_r>
 800f49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4a2:	f013 0201 	ands.w	r2, r3, #1
 800f4a6:	d00a      	beq.n	800f4be <__swsetup_r+0x9a>
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	60a2      	str	r2, [r4, #8]
 800f4ac:	6962      	ldr	r2, [r4, #20]
 800f4ae:	4252      	negs	r2, r2
 800f4b0:	61a2      	str	r2, [r4, #24]
 800f4b2:	6922      	ldr	r2, [r4, #16]
 800f4b4:	b942      	cbnz	r2, 800f4c8 <__swsetup_r+0xa4>
 800f4b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f4ba:	d1c5      	bne.n	800f448 <__swsetup_r+0x24>
 800f4bc:	bd38      	pop	{r3, r4, r5, pc}
 800f4be:	0799      	lsls	r1, r3, #30
 800f4c0:	bf58      	it	pl
 800f4c2:	6962      	ldrpl	r2, [r4, #20]
 800f4c4:	60a2      	str	r2, [r4, #8]
 800f4c6:	e7f4      	b.n	800f4b2 <__swsetup_r+0x8e>
 800f4c8:	2000      	movs	r0, #0
 800f4ca:	e7f7      	b.n	800f4bc <__swsetup_r+0x98>
 800f4cc:	200002d8 	.word	0x200002d8

0800f4d0 <memmove>:
 800f4d0:	4288      	cmp	r0, r1
 800f4d2:	b510      	push	{r4, lr}
 800f4d4:	eb01 0402 	add.w	r4, r1, r2
 800f4d8:	d902      	bls.n	800f4e0 <memmove+0x10>
 800f4da:	4284      	cmp	r4, r0
 800f4dc:	4623      	mov	r3, r4
 800f4de:	d807      	bhi.n	800f4f0 <memmove+0x20>
 800f4e0:	1e43      	subs	r3, r0, #1
 800f4e2:	42a1      	cmp	r1, r4
 800f4e4:	d008      	beq.n	800f4f8 <memmove+0x28>
 800f4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4ee:	e7f8      	b.n	800f4e2 <memmove+0x12>
 800f4f0:	4402      	add	r2, r0
 800f4f2:	4601      	mov	r1, r0
 800f4f4:	428a      	cmp	r2, r1
 800f4f6:	d100      	bne.n	800f4fa <memmove+0x2a>
 800f4f8:	bd10      	pop	{r4, pc}
 800f4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f502:	e7f7      	b.n	800f4f4 <memmove+0x24>

0800f504 <strncmp>:
 800f504:	b510      	push	{r4, lr}
 800f506:	b16a      	cbz	r2, 800f524 <strncmp+0x20>
 800f508:	3901      	subs	r1, #1
 800f50a:	1884      	adds	r4, r0, r2
 800f50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f510:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f514:	429a      	cmp	r2, r3
 800f516:	d103      	bne.n	800f520 <strncmp+0x1c>
 800f518:	42a0      	cmp	r0, r4
 800f51a:	d001      	beq.n	800f520 <strncmp+0x1c>
 800f51c:	2a00      	cmp	r2, #0
 800f51e:	d1f5      	bne.n	800f50c <strncmp+0x8>
 800f520:	1ad0      	subs	r0, r2, r3
 800f522:	bd10      	pop	{r4, pc}
 800f524:	4610      	mov	r0, r2
 800f526:	e7fc      	b.n	800f522 <strncmp+0x1e>

0800f528 <_sbrk_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d06      	ldr	r5, [pc, #24]	@ (800f544 <_sbrk_r+0x1c>)
 800f52c:	2300      	movs	r3, #0
 800f52e:	4604      	mov	r4, r0
 800f530:	4608      	mov	r0, r1
 800f532:	602b      	str	r3, [r5, #0]
 800f534:	f7f3 f9ce 	bl	80028d4 <_sbrk>
 800f538:	1c43      	adds	r3, r0, #1
 800f53a:	d102      	bne.n	800f542 <_sbrk_r+0x1a>
 800f53c:	682b      	ldr	r3, [r5, #0]
 800f53e:	b103      	cbz	r3, 800f542 <_sbrk_r+0x1a>
 800f540:	6023      	str	r3, [r4, #0]
 800f542:	bd38      	pop	{r3, r4, r5, pc}
 800f544:	20001274 	.word	0x20001274

0800f548 <nan>:
 800f548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f550 <nan+0x8>
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	00000000 	.word	0x00000000
 800f554:	7ff80000 	.word	0x7ff80000

0800f558 <__assert_func>:
 800f558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f55a:	4614      	mov	r4, r2
 800f55c:	461a      	mov	r2, r3
 800f55e:	4b09      	ldr	r3, [pc, #36]	@ (800f584 <__assert_func+0x2c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4605      	mov	r5, r0
 800f564:	68d8      	ldr	r0, [r3, #12]
 800f566:	b954      	cbnz	r4, 800f57e <__assert_func+0x26>
 800f568:	4b07      	ldr	r3, [pc, #28]	@ (800f588 <__assert_func+0x30>)
 800f56a:	461c      	mov	r4, r3
 800f56c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f570:	9100      	str	r1, [sp, #0]
 800f572:	462b      	mov	r3, r5
 800f574:	4905      	ldr	r1, [pc, #20]	@ (800f58c <__assert_func+0x34>)
 800f576:	f000 fba7 	bl	800fcc8 <fiprintf>
 800f57a:	f000 fc3b 	bl	800fdf4 <abort>
 800f57e:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <__assert_func+0x38>)
 800f580:	e7f4      	b.n	800f56c <__assert_func+0x14>
 800f582:	bf00      	nop
 800f584:	200002d8 	.word	0x200002d8
 800f588:	080107c5 	.word	0x080107c5
 800f58c:	08010797 	.word	0x08010797
 800f590:	0801078a 	.word	0x0801078a

0800f594 <_calloc_r>:
 800f594:	b570      	push	{r4, r5, r6, lr}
 800f596:	fba1 5402 	umull	r5, r4, r1, r2
 800f59a:	b93c      	cbnz	r4, 800f5ac <_calloc_r+0x18>
 800f59c:	4629      	mov	r1, r5
 800f59e:	f7fe f8a7 	bl	800d6f0 <_malloc_r>
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	b928      	cbnz	r0, 800f5b2 <_calloc_r+0x1e>
 800f5a6:	2600      	movs	r6, #0
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	220c      	movs	r2, #12
 800f5ae:	6002      	str	r2, [r0, #0]
 800f5b0:	e7f9      	b.n	800f5a6 <_calloc_r+0x12>
 800f5b2:	462a      	mov	r2, r5
 800f5b4:	4621      	mov	r1, r4
 800f5b6:	f7fd f93e 	bl	800c836 <memset>
 800f5ba:	e7f5      	b.n	800f5a8 <_calloc_r+0x14>

0800f5bc <rshift>:
 800f5bc:	6903      	ldr	r3, [r0, #16]
 800f5be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f5c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f5ca:	f100 0414 	add.w	r4, r0, #20
 800f5ce:	dd45      	ble.n	800f65c <rshift+0xa0>
 800f5d0:	f011 011f 	ands.w	r1, r1, #31
 800f5d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f5d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f5dc:	d10c      	bne.n	800f5f8 <rshift+0x3c>
 800f5de:	f100 0710 	add.w	r7, r0, #16
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	42b1      	cmp	r1, r6
 800f5e6:	d334      	bcc.n	800f652 <rshift+0x96>
 800f5e8:	1a9b      	subs	r3, r3, r2
 800f5ea:	009b      	lsls	r3, r3, #2
 800f5ec:	1eea      	subs	r2, r5, #3
 800f5ee:	4296      	cmp	r6, r2
 800f5f0:	bf38      	it	cc
 800f5f2:	2300      	movcc	r3, #0
 800f5f4:	4423      	add	r3, r4
 800f5f6:	e015      	b.n	800f624 <rshift+0x68>
 800f5f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f5fc:	f1c1 0820 	rsb	r8, r1, #32
 800f600:	40cf      	lsrs	r7, r1
 800f602:	f105 0e04 	add.w	lr, r5, #4
 800f606:	46a1      	mov	r9, r4
 800f608:	4576      	cmp	r6, lr
 800f60a:	46f4      	mov	ip, lr
 800f60c:	d815      	bhi.n	800f63a <rshift+0x7e>
 800f60e:	1a9a      	subs	r2, r3, r2
 800f610:	0092      	lsls	r2, r2, #2
 800f612:	3a04      	subs	r2, #4
 800f614:	3501      	adds	r5, #1
 800f616:	42ae      	cmp	r6, r5
 800f618:	bf38      	it	cc
 800f61a:	2200      	movcc	r2, #0
 800f61c:	18a3      	adds	r3, r4, r2
 800f61e:	50a7      	str	r7, [r4, r2]
 800f620:	b107      	cbz	r7, 800f624 <rshift+0x68>
 800f622:	3304      	adds	r3, #4
 800f624:	1b1a      	subs	r2, r3, r4
 800f626:	42a3      	cmp	r3, r4
 800f628:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f62c:	bf08      	it	eq
 800f62e:	2300      	moveq	r3, #0
 800f630:	6102      	str	r2, [r0, #16]
 800f632:	bf08      	it	eq
 800f634:	6143      	streq	r3, [r0, #20]
 800f636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f63a:	f8dc c000 	ldr.w	ip, [ip]
 800f63e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f642:	ea4c 0707 	orr.w	r7, ip, r7
 800f646:	f849 7b04 	str.w	r7, [r9], #4
 800f64a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f64e:	40cf      	lsrs	r7, r1
 800f650:	e7da      	b.n	800f608 <rshift+0x4c>
 800f652:	f851 cb04 	ldr.w	ip, [r1], #4
 800f656:	f847 cf04 	str.w	ip, [r7, #4]!
 800f65a:	e7c3      	b.n	800f5e4 <rshift+0x28>
 800f65c:	4623      	mov	r3, r4
 800f65e:	e7e1      	b.n	800f624 <rshift+0x68>

0800f660 <__hexdig_fun>:
 800f660:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f664:	2b09      	cmp	r3, #9
 800f666:	d802      	bhi.n	800f66e <__hexdig_fun+0xe>
 800f668:	3820      	subs	r0, #32
 800f66a:	b2c0      	uxtb	r0, r0
 800f66c:	4770      	bx	lr
 800f66e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f672:	2b05      	cmp	r3, #5
 800f674:	d801      	bhi.n	800f67a <__hexdig_fun+0x1a>
 800f676:	3847      	subs	r0, #71	@ 0x47
 800f678:	e7f7      	b.n	800f66a <__hexdig_fun+0xa>
 800f67a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f67e:	2b05      	cmp	r3, #5
 800f680:	d801      	bhi.n	800f686 <__hexdig_fun+0x26>
 800f682:	3827      	subs	r0, #39	@ 0x27
 800f684:	e7f1      	b.n	800f66a <__hexdig_fun+0xa>
 800f686:	2000      	movs	r0, #0
 800f688:	4770      	bx	lr
	...

0800f68c <__gethex>:
 800f68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f690:	b085      	sub	sp, #20
 800f692:	468a      	mov	sl, r1
 800f694:	9302      	str	r3, [sp, #8]
 800f696:	680b      	ldr	r3, [r1, #0]
 800f698:	9001      	str	r0, [sp, #4]
 800f69a:	4690      	mov	r8, r2
 800f69c:	1c9c      	adds	r4, r3, #2
 800f69e:	46a1      	mov	r9, r4
 800f6a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f6a4:	2830      	cmp	r0, #48	@ 0x30
 800f6a6:	d0fa      	beq.n	800f69e <__gethex+0x12>
 800f6a8:	eba9 0303 	sub.w	r3, r9, r3
 800f6ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800f6b0:	f7ff ffd6 	bl	800f660 <__hexdig_fun>
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d168      	bne.n	800f78c <__gethex+0x100>
 800f6ba:	49a0      	ldr	r1, [pc, #640]	@ (800f93c <__gethex+0x2b0>)
 800f6bc:	2201      	movs	r2, #1
 800f6be:	4648      	mov	r0, r9
 800f6c0:	f7ff ff20 	bl	800f504 <strncmp>
 800f6c4:	4607      	mov	r7, r0
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	d167      	bne.n	800f79a <__gethex+0x10e>
 800f6ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f6ce:	4626      	mov	r6, r4
 800f6d0:	f7ff ffc6 	bl	800f660 <__hexdig_fun>
 800f6d4:	2800      	cmp	r0, #0
 800f6d6:	d062      	beq.n	800f79e <__gethex+0x112>
 800f6d8:	4623      	mov	r3, r4
 800f6da:	7818      	ldrb	r0, [r3, #0]
 800f6dc:	2830      	cmp	r0, #48	@ 0x30
 800f6de:	4699      	mov	r9, r3
 800f6e0:	f103 0301 	add.w	r3, r3, #1
 800f6e4:	d0f9      	beq.n	800f6da <__gethex+0x4e>
 800f6e6:	f7ff ffbb 	bl	800f660 <__hexdig_fun>
 800f6ea:	fab0 f580 	clz	r5, r0
 800f6ee:	096d      	lsrs	r5, r5, #5
 800f6f0:	f04f 0b01 	mov.w	fp, #1
 800f6f4:	464a      	mov	r2, r9
 800f6f6:	4616      	mov	r6, r2
 800f6f8:	3201      	adds	r2, #1
 800f6fa:	7830      	ldrb	r0, [r6, #0]
 800f6fc:	f7ff ffb0 	bl	800f660 <__hexdig_fun>
 800f700:	2800      	cmp	r0, #0
 800f702:	d1f8      	bne.n	800f6f6 <__gethex+0x6a>
 800f704:	498d      	ldr	r1, [pc, #564]	@ (800f93c <__gethex+0x2b0>)
 800f706:	2201      	movs	r2, #1
 800f708:	4630      	mov	r0, r6
 800f70a:	f7ff fefb 	bl	800f504 <strncmp>
 800f70e:	2800      	cmp	r0, #0
 800f710:	d13f      	bne.n	800f792 <__gethex+0x106>
 800f712:	b944      	cbnz	r4, 800f726 <__gethex+0x9a>
 800f714:	1c74      	adds	r4, r6, #1
 800f716:	4622      	mov	r2, r4
 800f718:	4616      	mov	r6, r2
 800f71a:	3201      	adds	r2, #1
 800f71c:	7830      	ldrb	r0, [r6, #0]
 800f71e:	f7ff ff9f 	bl	800f660 <__hexdig_fun>
 800f722:	2800      	cmp	r0, #0
 800f724:	d1f8      	bne.n	800f718 <__gethex+0x8c>
 800f726:	1ba4      	subs	r4, r4, r6
 800f728:	00a7      	lsls	r7, r4, #2
 800f72a:	7833      	ldrb	r3, [r6, #0]
 800f72c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f730:	2b50      	cmp	r3, #80	@ 0x50
 800f732:	d13e      	bne.n	800f7b2 <__gethex+0x126>
 800f734:	7873      	ldrb	r3, [r6, #1]
 800f736:	2b2b      	cmp	r3, #43	@ 0x2b
 800f738:	d033      	beq.n	800f7a2 <__gethex+0x116>
 800f73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f73c:	d034      	beq.n	800f7a8 <__gethex+0x11c>
 800f73e:	1c71      	adds	r1, r6, #1
 800f740:	2400      	movs	r4, #0
 800f742:	7808      	ldrb	r0, [r1, #0]
 800f744:	f7ff ff8c 	bl	800f660 <__hexdig_fun>
 800f748:	1e43      	subs	r3, r0, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b18      	cmp	r3, #24
 800f74e:	d830      	bhi.n	800f7b2 <__gethex+0x126>
 800f750:	f1a0 0210 	sub.w	r2, r0, #16
 800f754:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f758:	f7ff ff82 	bl	800f660 <__hexdig_fun>
 800f75c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f760:	fa5f fc8c 	uxtb.w	ip, ip
 800f764:	f1bc 0f18 	cmp.w	ip, #24
 800f768:	f04f 030a 	mov.w	r3, #10
 800f76c:	d91e      	bls.n	800f7ac <__gethex+0x120>
 800f76e:	b104      	cbz	r4, 800f772 <__gethex+0xe6>
 800f770:	4252      	negs	r2, r2
 800f772:	4417      	add	r7, r2
 800f774:	f8ca 1000 	str.w	r1, [sl]
 800f778:	b1ed      	cbz	r5, 800f7b6 <__gethex+0x12a>
 800f77a:	f1bb 0f00 	cmp.w	fp, #0
 800f77e:	bf0c      	ite	eq
 800f780:	2506      	moveq	r5, #6
 800f782:	2500      	movne	r5, #0
 800f784:	4628      	mov	r0, r5
 800f786:	b005      	add	sp, #20
 800f788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78c:	2500      	movs	r5, #0
 800f78e:	462c      	mov	r4, r5
 800f790:	e7b0      	b.n	800f6f4 <__gethex+0x68>
 800f792:	2c00      	cmp	r4, #0
 800f794:	d1c7      	bne.n	800f726 <__gethex+0x9a>
 800f796:	4627      	mov	r7, r4
 800f798:	e7c7      	b.n	800f72a <__gethex+0x9e>
 800f79a:	464e      	mov	r6, r9
 800f79c:	462f      	mov	r7, r5
 800f79e:	2501      	movs	r5, #1
 800f7a0:	e7c3      	b.n	800f72a <__gethex+0x9e>
 800f7a2:	2400      	movs	r4, #0
 800f7a4:	1cb1      	adds	r1, r6, #2
 800f7a6:	e7cc      	b.n	800f742 <__gethex+0xb6>
 800f7a8:	2401      	movs	r4, #1
 800f7aa:	e7fb      	b.n	800f7a4 <__gethex+0x118>
 800f7ac:	fb03 0002 	mla	r0, r3, r2, r0
 800f7b0:	e7ce      	b.n	800f750 <__gethex+0xc4>
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	e7de      	b.n	800f774 <__gethex+0xe8>
 800f7b6:	eba6 0309 	sub.w	r3, r6, r9
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	4629      	mov	r1, r5
 800f7be:	2b07      	cmp	r3, #7
 800f7c0:	dc0a      	bgt.n	800f7d8 <__gethex+0x14c>
 800f7c2:	9801      	ldr	r0, [sp, #4]
 800f7c4:	f7fe f820 	bl	800d808 <_Balloc>
 800f7c8:	4604      	mov	r4, r0
 800f7ca:	b940      	cbnz	r0, 800f7de <__gethex+0x152>
 800f7cc:	4b5c      	ldr	r3, [pc, #368]	@ (800f940 <__gethex+0x2b4>)
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	21e4      	movs	r1, #228	@ 0xe4
 800f7d2:	485c      	ldr	r0, [pc, #368]	@ (800f944 <__gethex+0x2b8>)
 800f7d4:	f7ff fec0 	bl	800f558 <__assert_func>
 800f7d8:	3101      	adds	r1, #1
 800f7da:	105b      	asrs	r3, r3, #1
 800f7dc:	e7ef      	b.n	800f7be <__gethex+0x132>
 800f7de:	f100 0a14 	add.w	sl, r0, #20
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	4655      	mov	r5, sl
 800f7e6:	469b      	mov	fp, r3
 800f7e8:	45b1      	cmp	r9, r6
 800f7ea:	d337      	bcc.n	800f85c <__gethex+0x1d0>
 800f7ec:	f845 bb04 	str.w	fp, [r5], #4
 800f7f0:	eba5 050a 	sub.w	r5, r5, sl
 800f7f4:	10ad      	asrs	r5, r5, #2
 800f7f6:	6125      	str	r5, [r4, #16]
 800f7f8:	4658      	mov	r0, fp
 800f7fa:	f7fe f8f7 	bl	800d9ec <__hi0bits>
 800f7fe:	016d      	lsls	r5, r5, #5
 800f800:	f8d8 6000 	ldr.w	r6, [r8]
 800f804:	1a2d      	subs	r5, r5, r0
 800f806:	42b5      	cmp	r5, r6
 800f808:	dd54      	ble.n	800f8b4 <__gethex+0x228>
 800f80a:	1bad      	subs	r5, r5, r6
 800f80c:	4629      	mov	r1, r5
 800f80e:	4620      	mov	r0, r4
 800f810:	f7fe fc8b 	bl	800e12a <__any_on>
 800f814:	4681      	mov	r9, r0
 800f816:	b178      	cbz	r0, 800f838 <__gethex+0x1ac>
 800f818:	1e6b      	subs	r3, r5, #1
 800f81a:	1159      	asrs	r1, r3, #5
 800f81c:	f003 021f 	and.w	r2, r3, #31
 800f820:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f824:	f04f 0901 	mov.w	r9, #1
 800f828:	fa09 f202 	lsl.w	r2, r9, r2
 800f82c:	420a      	tst	r2, r1
 800f82e:	d003      	beq.n	800f838 <__gethex+0x1ac>
 800f830:	454b      	cmp	r3, r9
 800f832:	dc36      	bgt.n	800f8a2 <__gethex+0x216>
 800f834:	f04f 0902 	mov.w	r9, #2
 800f838:	4629      	mov	r1, r5
 800f83a:	4620      	mov	r0, r4
 800f83c:	f7ff febe 	bl	800f5bc <rshift>
 800f840:	442f      	add	r7, r5
 800f842:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f846:	42bb      	cmp	r3, r7
 800f848:	da42      	bge.n	800f8d0 <__gethex+0x244>
 800f84a:	9801      	ldr	r0, [sp, #4]
 800f84c:	4621      	mov	r1, r4
 800f84e:	f7fe f81b 	bl	800d888 <_Bfree>
 800f852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f854:	2300      	movs	r3, #0
 800f856:	6013      	str	r3, [r2, #0]
 800f858:	25a3      	movs	r5, #163	@ 0xa3
 800f85a:	e793      	b.n	800f784 <__gethex+0xf8>
 800f85c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f860:	2a2e      	cmp	r2, #46	@ 0x2e
 800f862:	d012      	beq.n	800f88a <__gethex+0x1fe>
 800f864:	2b20      	cmp	r3, #32
 800f866:	d104      	bne.n	800f872 <__gethex+0x1e6>
 800f868:	f845 bb04 	str.w	fp, [r5], #4
 800f86c:	f04f 0b00 	mov.w	fp, #0
 800f870:	465b      	mov	r3, fp
 800f872:	7830      	ldrb	r0, [r6, #0]
 800f874:	9303      	str	r3, [sp, #12]
 800f876:	f7ff fef3 	bl	800f660 <__hexdig_fun>
 800f87a:	9b03      	ldr	r3, [sp, #12]
 800f87c:	f000 000f 	and.w	r0, r0, #15
 800f880:	4098      	lsls	r0, r3
 800f882:	ea4b 0b00 	orr.w	fp, fp, r0
 800f886:	3304      	adds	r3, #4
 800f888:	e7ae      	b.n	800f7e8 <__gethex+0x15c>
 800f88a:	45b1      	cmp	r9, r6
 800f88c:	d8ea      	bhi.n	800f864 <__gethex+0x1d8>
 800f88e:	492b      	ldr	r1, [pc, #172]	@ (800f93c <__gethex+0x2b0>)
 800f890:	9303      	str	r3, [sp, #12]
 800f892:	2201      	movs	r2, #1
 800f894:	4630      	mov	r0, r6
 800f896:	f7ff fe35 	bl	800f504 <strncmp>
 800f89a:	9b03      	ldr	r3, [sp, #12]
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d1e1      	bne.n	800f864 <__gethex+0x1d8>
 800f8a0:	e7a2      	b.n	800f7e8 <__gethex+0x15c>
 800f8a2:	1ea9      	subs	r1, r5, #2
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f7fe fc40 	bl	800e12a <__any_on>
 800f8aa:	2800      	cmp	r0, #0
 800f8ac:	d0c2      	beq.n	800f834 <__gethex+0x1a8>
 800f8ae:	f04f 0903 	mov.w	r9, #3
 800f8b2:	e7c1      	b.n	800f838 <__gethex+0x1ac>
 800f8b4:	da09      	bge.n	800f8ca <__gethex+0x23e>
 800f8b6:	1b75      	subs	r5, r6, r5
 800f8b8:	4621      	mov	r1, r4
 800f8ba:	9801      	ldr	r0, [sp, #4]
 800f8bc:	462a      	mov	r2, r5
 800f8be:	f7fe f9fb 	bl	800dcb8 <__lshift>
 800f8c2:	1b7f      	subs	r7, r7, r5
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	f100 0a14 	add.w	sl, r0, #20
 800f8ca:	f04f 0900 	mov.w	r9, #0
 800f8ce:	e7b8      	b.n	800f842 <__gethex+0x1b6>
 800f8d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f8d4:	42bd      	cmp	r5, r7
 800f8d6:	dd6f      	ble.n	800f9b8 <__gethex+0x32c>
 800f8d8:	1bed      	subs	r5, r5, r7
 800f8da:	42ae      	cmp	r6, r5
 800f8dc:	dc34      	bgt.n	800f948 <__gethex+0x2bc>
 800f8de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8e2:	2b02      	cmp	r3, #2
 800f8e4:	d022      	beq.n	800f92c <__gethex+0x2a0>
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d024      	beq.n	800f934 <__gethex+0x2a8>
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d115      	bne.n	800f91a <__gethex+0x28e>
 800f8ee:	42ae      	cmp	r6, r5
 800f8f0:	d113      	bne.n	800f91a <__gethex+0x28e>
 800f8f2:	2e01      	cmp	r6, #1
 800f8f4:	d10b      	bne.n	800f90e <__gethex+0x282>
 800f8f6:	9a02      	ldr	r2, [sp, #8]
 800f8f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8fc:	6013      	str	r3, [r2, #0]
 800f8fe:	2301      	movs	r3, #1
 800f900:	6123      	str	r3, [r4, #16]
 800f902:	f8ca 3000 	str.w	r3, [sl]
 800f906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f908:	2562      	movs	r5, #98	@ 0x62
 800f90a:	601c      	str	r4, [r3, #0]
 800f90c:	e73a      	b.n	800f784 <__gethex+0xf8>
 800f90e:	1e71      	subs	r1, r6, #1
 800f910:	4620      	mov	r0, r4
 800f912:	f7fe fc0a 	bl	800e12a <__any_on>
 800f916:	2800      	cmp	r0, #0
 800f918:	d1ed      	bne.n	800f8f6 <__gethex+0x26a>
 800f91a:	9801      	ldr	r0, [sp, #4]
 800f91c:	4621      	mov	r1, r4
 800f91e:	f7fd ffb3 	bl	800d888 <_Bfree>
 800f922:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f924:	2300      	movs	r3, #0
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	2550      	movs	r5, #80	@ 0x50
 800f92a:	e72b      	b.n	800f784 <__gethex+0xf8>
 800f92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1f3      	bne.n	800f91a <__gethex+0x28e>
 800f932:	e7e0      	b.n	800f8f6 <__gethex+0x26a>
 800f934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d1dd      	bne.n	800f8f6 <__gethex+0x26a>
 800f93a:	e7ee      	b.n	800f91a <__gethex+0x28e>
 800f93c:	08010618 	.word	0x08010618
 800f940:	080104b1 	.word	0x080104b1
 800f944:	080107c6 	.word	0x080107c6
 800f948:	1e6f      	subs	r7, r5, #1
 800f94a:	f1b9 0f00 	cmp.w	r9, #0
 800f94e:	d130      	bne.n	800f9b2 <__gethex+0x326>
 800f950:	b127      	cbz	r7, 800f95c <__gethex+0x2d0>
 800f952:	4639      	mov	r1, r7
 800f954:	4620      	mov	r0, r4
 800f956:	f7fe fbe8 	bl	800e12a <__any_on>
 800f95a:	4681      	mov	r9, r0
 800f95c:	117a      	asrs	r2, r7, #5
 800f95e:	2301      	movs	r3, #1
 800f960:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f964:	f007 071f 	and.w	r7, r7, #31
 800f968:	40bb      	lsls	r3, r7
 800f96a:	4213      	tst	r3, r2
 800f96c:	4629      	mov	r1, r5
 800f96e:	4620      	mov	r0, r4
 800f970:	bf18      	it	ne
 800f972:	f049 0902 	orrne.w	r9, r9, #2
 800f976:	f7ff fe21 	bl	800f5bc <rshift>
 800f97a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f97e:	1b76      	subs	r6, r6, r5
 800f980:	2502      	movs	r5, #2
 800f982:	f1b9 0f00 	cmp.w	r9, #0
 800f986:	d047      	beq.n	800fa18 <__gethex+0x38c>
 800f988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	d015      	beq.n	800f9bc <__gethex+0x330>
 800f990:	2b03      	cmp	r3, #3
 800f992:	d017      	beq.n	800f9c4 <__gethex+0x338>
 800f994:	2b01      	cmp	r3, #1
 800f996:	d109      	bne.n	800f9ac <__gethex+0x320>
 800f998:	f019 0f02 	tst.w	r9, #2
 800f99c:	d006      	beq.n	800f9ac <__gethex+0x320>
 800f99e:	f8da 3000 	ldr.w	r3, [sl]
 800f9a2:	ea49 0903 	orr.w	r9, r9, r3
 800f9a6:	f019 0f01 	tst.w	r9, #1
 800f9aa:	d10e      	bne.n	800f9ca <__gethex+0x33e>
 800f9ac:	f045 0510 	orr.w	r5, r5, #16
 800f9b0:	e032      	b.n	800fa18 <__gethex+0x38c>
 800f9b2:	f04f 0901 	mov.w	r9, #1
 800f9b6:	e7d1      	b.n	800f95c <__gethex+0x2d0>
 800f9b8:	2501      	movs	r5, #1
 800f9ba:	e7e2      	b.n	800f982 <__gethex+0x2f6>
 800f9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9be:	f1c3 0301 	rsb	r3, r3, #1
 800f9c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d0f0      	beq.n	800f9ac <__gethex+0x320>
 800f9ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f9ce:	f104 0314 	add.w	r3, r4, #20
 800f9d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f9d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f9da:	f04f 0c00 	mov.w	ip, #0
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f9e8:	d01b      	beq.n	800fa22 <__gethex+0x396>
 800f9ea:	3201      	adds	r2, #1
 800f9ec:	6002      	str	r2, [r0, #0]
 800f9ee:	2d02      	cmp	r5, #2
 800f9f0:	f104 0314 	add.w	r3, r4, #20
 800f9f4:	d13c      	bne.n	800fa70 <__gethex+0x3e4>
 800f9f6:	f8d8 2000 	ldr.w	r2, [r8]
 800f9fa:	3a01      	subs	r2, #1
 800f9fc:	42b2      	cmp	r2, r6
 800f9fe:	d109      	bne.n	800fa14 <__gethex+0x388>
 800fa00:	1171      	asrs	r1, r6, #5
 800fa02:	2201      	movs	r2, #1
 800fa04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa08:	f006 061f 	and.w	r6, r6, #31
 800fa0c:	fa02 f606 	lsl.w	r6, r2, r6
 800fa10:	421e      	tst	r6, r3
 800fa12:	d13a      	bne.n	800fa8a <__gethex+0x3fe>
 800fa14:	f045 0520 	orr.w	r5, r5, #32
 800fa18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa1a:	601c      	str	r4, [r3, #0]
 800fa1c:	9b02      	ldr	r3, [sp, #8]
 800fa1e:	601f      	str	r7, [r3, #0]
 800fa20:	e6b0      	b.n	800f784 <__gethex+0xf8>
 800fa22:	4299      	cmp	r1, r3
 800fa24:	f843 cc04 	str.w	ip, [r3, #-4]
 800fa28:	d8d9      	bhi.n	800f9de <__gethex+0x352>
 800fa2a:	68a3      	ldr	r3, [r4, #8]
 800fa2c:	459b      	cmp	fp, r3
 800fa2e:	db17      	blt.n	800fa60 <__gethex+0x3d4>
 800fa30:	6861      	ldr	r1, [r4, #4]
 800fa32:	9801      	ldr	r0, [sp, #4]
 800fa34:	3101      	adds	r1, #1
 800fa36:	f7fd fee7 	bl	800d808 <_Balloc>
 800fa3a:	4681      	mov	r9, r0
 800fa3c:	b918      	cbnz	r0, 800fa46 <__gethex+0x3ba>
 800fa3e:	4b1a      	ldr	r3, [pc, #104]	@ (800faa8 <__gethex+0x41c>)
 800fa40:	4602      	mov	r2, r0
 800fa42:	2184      	movs	r1, #132	@ 0x84
 800fa44:	e6c5      	b.n	800f7d2 <__gethex+0x146>
 800fa46:	6922      	ldr	r2, [r4, #16]
 800fa48:	3202      	adds	r2, #2
 800fa4a:	f104 010c 	add.w	r1, r4, #12
 800fa4e:	0092      	lsls	r2, r2, #2
 800fa50:	300c      	adds	r0, #12
 800fa52:	f7fc ff78 	bl	800c946 <memcpy>
 800fa56:	4621      	mov	r1, r4
 800fa58:	9801      	ldr	r0, [sp, #4]
 800fa5a:	f7fd ff15 	bl	800d888 <_Bfree>
 800fa5e:	464c      	mov	r4, r9
 800fa60:	6923      	ldr	r3, [r4, #16]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa68:	6122      	str	r2, [r4, #16]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	615a      	str	r2, [r3, #20]
 800fa6e:	e7be      	b.n	800f9ee <__gethex+0x362>
 800fa70:	6922      	ldr	r2, [r4, #16]
 800fa72:	455a      	cmp	r2, fp
 800fa74:	dd0b      	ble.n	800fa8e <__gethex+0x402>
 800fa76:	2101      	movs	r1, #1
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f7ff fd9f 	bl	800f5bc <rshift>
 800fa7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa82:	3701      	adds	r7, #1
 800fa84:	42bb      	cmp	r3, r7
 800fa86:	f6ff aee0 	blt.w	800f84a <__gethex+0x1be>
 800fa8a:	2501      	movs	r5, #1
 800fa8c:	e7c2      	b.n	800fa14 <__gethex+0x388>
 800fa8e:	f016 061f 	ands.w	r6, r6, #31
 800fa92:	d0fa      	beq.n	800fa8a <__gethex+0x3fe>
 800fa94:	4453      	add	r3, sl
 800fa96:	f1c6 0620 	rsb	r6, r6, #32
 800fa9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fa9e:	f7fd ffa5 	bl	800d9ec <__hi0bits>
 800faa2:	42b0      	cmp	r0, r6
 800faa4:	dbe7      	blt.n	800fa76 <__gethex+0x3ea>
 800faa6:	e7f0      	b.n	800fa8a <__gethex+0x3fe>
 800faa8:	080104b1 	.word	0x080104b1

0800faac <L_shift>:
 800faac:	f1c2 0208 	rsb	r2, r2, #8
 800fab0:	0092      	lsls	r2, r2, #2
 800fab2:	b570      	push	{r4, r5, r6, lr}
 800fab4:	f1c2 0620 	rsb	r6, r2, #32
 800fab8:	6843      	ldr	r3, [r0, #4]
 800faba:	6804      	ldr	r4, [r0, #0]
 800fabc:	fa03 f506 	lsl.w	r5, r3, r6
 800fac0:	432c      	orrs	r4, r5
 800fac2:	40d3      	lsrs	r3, r2
 800fac4:	6004      	str	r4, [r0, #0]
 800fac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800faca:	4288      	cmp	r0, r1
 800facc:	d3f4      	bcc.n	800fab8 <L_shift+0xc>
 800face:	bd70      	pop	{r4, r5, r6, pc}

0800fad0 <__match>:
 800fad0:	b530      	push	{r4, r5, lr}
 800fad2:	6803      	ldr	r3, [r0, #0]
 800fad4:	3301      	adds	r3, #1
 800fad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fada:	b914      	cbnz	r4, 800fae2 <__match+0x12>
 800fadc:	6003      	str	r3, [r0, #0]
 800fade:	2001      	movs	r0, #1
 800fae0:	bd30      	pop	{r4, r5, pc}
 800fae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fae6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800faea:	2d19      	cmp	r5, #25
 800faec:	bf98      	it	ls
 800faee:	3220      	addls	r2, #32
 800faf0:	42a2      	cmp	r2, r4
 800faf2:	d0f0      	beq.n	800fad6 <__match+0x6>
 800faf4:	2000      	movs	r0, #0
 800faf6:	e7f3      	b.n	800fae0 <__match+0x10>

0800faf8 <__hexnan>:
 800faf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fafc:	680b      	ldr	r3, [r1, #0]
 800fafe:	6801      	ldr	r1, [r0, #0]
 800fb00:	115e      	asrs	r6, r3, #5
 800fb02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fb06:	f013 031f 	ands.w	r3, r3, #31
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	bf18      	it	ne
 800fb0e:	3604      	addne	r6, #4
 800fb10:	2500      	movs	r5, #0
 800fb12:	1f37      	subs	r7, r6, #4
 800fb14:	4682      	mov	sl, r0
 800fb16:	4690      	mov	r8, r2
 800fb18:	9301      	str	r3, [sp, #4]
 800fb1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fb1e:	46b9      	mov	r9, r7
 800fb20:	463c      	mov	r4, r7
 800fb22:	9502      	str	r5, [sp, #8]
 800fb24:	46ab      	mov	fp, r5
 800fb26:	784a      	ldrb	r2, [r1, #1]
 800fb28:	1c4b      	adds	r3, r1, #1
 800fb2a:	9303      	str	r3, [sp, #12]
 800fb2c:	b342      	cbz	r2, 800fb80 <__hexnan+0x88>
 800fb2e:	4610      	mov	r0, r2
 800fb30:	9105      	str	r1, [sp, #20]
 800fb32:	9204      	str	r2, [sp, #16]
 800fb34:	f7ff fd94 	bl	800f660 <__hexdig_fun>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d151      	bne.n	800fbe0 <__hexnan+0xe8>
 800fb3c:	9a04      	ldr	r2, [sp, #16]
 800fb3e:	9905      	ldr	r1, [sp, #20]
 800fb40:	2a20      	cmp	r2, #32
 800fb42:	d818      	bhi.n	800fb76 <__hexnan+0x7e>
 800fb44:	9b02      	ldr	r3, [sp, #8]
 800fb46:	459b      	cmp	fp, r3
 800fb48:	dd13      	ble.n	800fb72 <__hexnan+0x7a>
 800fb4a:	454c      	cmp	r4, r9
 800fb4c:	d206      	bcs.n	800fb5c <__hexnan+0x64>
 800fb4e:	2d07      	cmp	r5, #7
 800fb50:	dc04      	bgt.n	800fb5c <__hexnan+0x64>
 800fb52:	462a      	mov	r2, r5
 800fb54:	4649      	mov	r1, r9
 800fb56:	4620      	mov	r0, r4
 800fb58:	f7ff ffa8 	bl	800faac <L_shift>
 800fb5c:	4544      	cmp	r4, r8
 800fb5e:	d952      	bls.n	800fc06 <__hexnan+0x10e>
 800fb60:	2300      	movs	r3, #0
 800fb62:	f1a4 0904 	sub.w	r9, r4, #4
 800fb66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb6a:	f8cd b008 	str.w	fp, [sp, #8]
 800fb6e:	464c      	mov	r4, r9
 800fb70:	461d      	mov	r5, r3
 800fb72:	9903      	ldr	r1, [sp, #12]
 800fb74:	e7d7      	b.n	800fb26 <__hexnan+0x2e>
 800fb76:	2a29      	cmp	r2, #41	@ 0x29
 800fb78:	d157      	bne.n	800fc2a <__hexnan+0x132>
 800fb7a:	3102      	adds	r1, #2
 800fb7c:	f8ca 1000 	str.w	r1, [sl]
 800fb80:	f1bb 0f00 	cmp.w	fp, #0
 800fb84:	d051      	beq.n	800fc2a <__hexnan+0x132>
 800fb86:	454c      	cmp	r4, r9
 800fb88:	d206      	bcs.n	800fb98 <__hexnan+0xa0>
 800fb8a:	2d07      	cmp	r5, #7
 800fb8c:	dc04      	bgt.n	800fb98 <__hexnan+0xa0>
 800fb8e:	462a      	mov	r2, r5
 800fb90:	4649      	mov	r1, r9
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7ff ff8a 	bl	800faac <L_shift>
 800fb98:	4544      	cmp	r4, r8
 800fb9a:	d936      	bls.n	800fc0a <__hexnan+0x112>
 800fb9c:	f1a8 0204 	sub.w	r2, r8, #4
 800fba0:	4623      	mov	r3, r4
 800fba2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fba6:	f842 1f04 	str.w	r1, [r2, #4]!
 800fbaa:	429f      	cmp	r7, r3
 800fbac:	d2f9      	bcs.n	800fba2 <__hexnan+0xaa>
 800fbae:	1b3b      	subs	r3, r7, r4
 800fbb0:	f023 0303 	bic.w	r3, r3, #3
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	3401      	adds	r4, #1
 800fbb8:	3e03      	subs	r6, #3
 800fbba:	42b4      	cmp	r4, r6
 800fbbc:	bf88      	it	hi
 800fbbe:	2304      	movhi	r3, #4
 800fbc0:	4443      	add	r3, r8
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f843 2b04 	str.w	r2, [r3], #4
 800fbc8:	429f      	cmp	r7, r3
 800fbca:	d2fb      	bcs.n	800fbc4 <__hexnan+0xcc>
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	b91b      	cbnz	r3, 800fbd8 <__hexnan+0xe0>
 800fbd0:	4547      	cmp	r7, r8
 800fbd2:	d128      	bne.n	800fc26 <__hexnan+0x12e>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	2005      	movs	r0, #5
 800fbda:	b007      	add	sp, #28
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbe0:	3501      	adds	r5, #1
 800fbe2:	2d08      	cmp	r5, #8
 800fbe4:	f10b 0b01 	add.w	fp, fp, #1
 800fbe8:	dd06      	ble.n	800fbf8 <__hexnan+0x100>
 800fbea:	4544      	cmp	r4, r8
 800fbec:	d9c1      	bls.n	800fb72 <__hexnan+0x7a>
 800fbee:	2300      	movs	r3, #0
 800fbf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbf4:	2501      	movs	r5, #1
 800fbf6:	3c04      	subs	r4, #4
 800fbf8:	6822      	ldr	r2, [r4, #0]
 800fbfa:	f000 000f 	and.w	r0, r0, #15
 800fbfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc02:	6020      	str	r0, [r4, #0]
 800fc04:	e7b5      	b.n	800fb72 <__hexnan+0x7a>
 800fc06:	2508      	movs	r5, #8
 800fc08:	e7b3      	b.n	800fb72 <__hexnan+0x7a>
 800fc0a:	9b01      	ldr	r3, [sp, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0dd      	beq.n	800fbcc <__hexnan+0xd4>
 800fc10:	f1c3 0320 	rsb	r3, r3, #32
 800fc14:	f04f 32ff 	mov.w	r2, #4294967295
 800fc18:	40da      	lsrs	r2, r3
 800fc1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fc1e:	4013      	ands	r3, r2
 800fc20:	f846 3c04 	str.w	r3, [r6, #-4]
 800fc24:	e7d2      	b.n	800fbcc <__hexnan+0xd4>
 800fc26:	3f04      	subs	r7, #4
 800fc28:	e7d0      	b.n	800fbcc <__hexnan+0xd4>
 800fc2a:	2004      	movs	r0, #4
 800fc2c:	e7d5      	b.n	800fbda <__hexnan+0xe2>

0800fc2e <__ascii_mbtowc>:
 800fc2e:	b082      	sub	sp, #8
 800fc30:	b901      	cbnz	r1, 800fc34 <__ascii_mbtowc+0x6>
 800fc32:	a901      	add	r1, sp, #4
 800fc34:	b142      	cbz	r2, 800fc48 <__ascii_mbtowc+0x1a>
 800fc36:	b14b      	cbz	r3, 800fc4c <__ascii_mbtowc+0x1e>
 800fc38:	7813      	ldrb	r3, [r2, #0]
 800fc3a:	600b      	str	r3, [r1, #0]
 800fc3c:	7812      	ldrb	r2, [r2, #0]
 800fc3e:	1e10      	subs	r0, r2, #0
 800fc40:	bf18      	it	ne
 800fc42:	2001      	movne	r0, #1
 800fc44:	b002      	add	sp, #8
 800fc46:	4770      	bx	lr
 800fc48:	4610      	mov	r0, r2
 800fc4a:	e7fb      	b.n	800fc44 <__ascii_mbtowc+0x16>
 800fc4c:	f06f 0001 	mvn.w	r0, #1
 800fc50:	e7f8      	b.n	800fc44 <__ascii_mbtowc+0x16>

0800fc52 <_realloc_r>:
 800fc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	4680      	mov	r8, r0
 800fc58:	4615      	mov	r5, r2
 800fc5a:	460c      	mov	r4, r1
 800fc5c:	b921      	cbnz	r1, 800fc68 <_realloc_r+0x16>
 800fc5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc62:	4611      	mov	r1, r2
 800fc64:	f7fd bd44 	b.w	800d6f0 <_malloc_r>
 800fc68:	b92a      	cbnz	r2, 800fc76 <_realloc_r+0x24>
 800fc6a:	f7fd fccd 	bl	800d608 <_free_r>
 800fc6e:	2400      	movs	r4, #0
 800fc70:	4620      	mov	r0, r4
 800fc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc76:	f000 f8c4 	bl	800fe02 <_malloc_usable_size_r>
 800fc7a:	4285      	cmp	r5, r0
 800fc7c:	4606      	mov	r6, r0
 800fc7e:	d802      	bhi.n	800fc86 <_realloc_r+0x34>
 800fc80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc84:	d8f4      	bhi.n	800fc70 <_realloc_r+0x1e>
 800fc86:	4629      	mov	r1, r5
 800fc88:	4640      	mov	r0, r8
 800fc8a:	f7fd fd31 	bl	800d6f0 <_malloc_r>
 800fc8e:	4607      	mov	r7, r0
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d0ec      	beq.n	800fc6e <_realloc_r+0x1c>
 800fc94:	42b5      	cmp	r5, r6
 800fc96:	462a      	mov	r2, r5
 800fc98:	4621      	mov	r1, r4
 800fc9a:	bf28      	it	cs
 800fc9c:	4632      	movcs	r2, r6
 800fc9e:	f7fc fe52 	bl	800c946 <memcpy>
 800fca2:	4621      	mov	r1, r4
 800fca4:	4640      	mov	r0, r8
 800fca6:	f7fd fcaf 	bl	800d608 <_free_r>
 800fcaa:	463c      	mov	r4, r7
 800fcac:	e7e0      	b.n	800fc70 <_realloc_r+0x1e>

0800fcae <__ascii_wctomb>:
 800fcae:	4603      	mov	r3, r0
 800fcb0:	4608      	mov	r0, r1
 800fcb2:	b141      	cbz	r1, 800fcc6 <__ascii_wctomb+0x18>
 800fcb4:	2aff      	cmp	r2, #255	@ 0xff
 800fcb6:	d904      	bls.n	800fcc2 <__ascii_wctomb+0x14>
 800fcb8:	228a      	movs	r2, #138	@ 0x8a
 800fcba:	601a      	str	r2, [r3, #0]
 800fcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc0:	4770      	bx	lr
 800fcc2:	700a      	strb	r2, [r1, #0]
 800fcc4:	2001      	movs	r0, #1
 800fcc6:	4770      	bx	lr

0800fcc8 <fiprintf>:
 800fcc8:	b40e      	push	{r1, r2, r3}
 800fcca:	b503      	push	{r0, r1, lr}
 800fccc:	4601      	mov	r1, r0
 800fcce:	ab03      	add	r3, sp, #12
 800fcd0:	4805      	ldr	r0, [pc, #20]	@ (800fce8 <fiprintf+0x20>)
 800fcd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcd6:	6800      	ldr	r0, [r0, #0]
 800fcd8:	9301      	str	r3, [sp, #4]
 800fcda:	f7ff fa4d 	bl	800f178 <_vfiprintf_r>
 800fcde:	b002      	add	sp, #8
 800fce0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fce4:	b003      	add	sp, #12
 800fce6:	4770      	bx	lr
 800fce8:	200002d8 	.word	0x200002d8

0800fcec <__swhatbuf_r>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	460c      	mov	r4, r1
 800fcf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcf4:	2900      	cmp	r1, #0
 800fcf6:	b096      	sub	sp, #88	@ 0x58
 800fcf8:	4615      	mov	r5, r2
 800fcfa:	461e      	mov	r6, r3
 800fcfc:	da0d      	bge.n	800fd1a <__swhatbuf_r+0x2e>
 800fcfe:	89a3      	ldrh	r3, [r4, #12]
 800fd00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd04:	f04f 0100 	mov.w	r1, #0
 800fd08:	bf14      	ite	ne
 800fd0a:	2340      	movne	r3, #64	@ 0x40
 800fd0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd10:	2000      	movs	r0, #0
 800fd12:	6031      	str	r1, [r6, #0]
 800fd14:	602b      	str	r3, [r5, #0]
 800fd16:	b016      	add	sp, #88	@ 0x58
 800fd18:	bd70      	pop	{r4, r5, r6, pc}
 800fd1a:	466a      	mov	r2, sp
 800fd1c:	f000 f848 	bl	800fdb0 <_fstat_r>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	dbec      	blt.n	800fcfe <__swhatbuf_r+0x12>
 800fd24:	9901      	ldr	r1, [sp, #4]
 800fd26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd2e:	4259      	negs	r1, r3
 800fd30:	4159      	adcs	r1, r3
 800fd32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd36:	e7eb      	b.n	800fd10 <__swhatbuf_r+0x24>

0800fd38 <__smakebuf_r>:
 800fd38:	898b      	ldrh	r3, [r1, #12]
 800fd3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd3c:	079d      	lsls	r5, r3, #30
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460c      	mov	r4, r1
 800fd42:	d507      	bpl.n	800fd54 <__smakebuf_r+0x1c>
 800fd44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	6123      	str	r3, [r4, #16]
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	6163      	str	r3, [r4, #20]
 800fd50:	b003      	add	sp, #12
 800fd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd54:	ab01      	add	r3, sp, #4
 800fd56:	466a      	mov	r2, sp
 800fd58:	f7ff ffc8 	bl	800fcec <__swhatbuf_r>
 800fd5c:	9f00      	ldr	r7, [sp, #0]
 800fd5e:	4605      	mov	r5, r0
 800fd60:	4639      	mov	r1, r7
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7fd fcc4 	bl	800d6f0 <_malloc_r>
 800fd68:	b948      	cbnz	r0, 800fd7e <__smakebuf_r+0x46>
 800fd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd6e:	059a      	lsls	r2, r3, #22
 800fd70:	d4ee      	bmi.n	800fd50 <__smakebuf_r+0x18>
 800fd72:	f023 0303 	bic.w	r3, r3, #3
 800fd76:	f043 0302 	orr.w	r3, r3, #2
 800fd7a:	81a3      	strh	r3, [r4, #12]
 800fd7c:	e7e2      	b.n	800fd44 <__smakebuf_r+0xc>
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	6020      	str	r0, [r4, #0]
 800fd82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd86:	81a3      	strh	r3, [r4, #12]
 800fd88:	9b01      	ldr	r3, [sp, #4]
 800fd8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd8e:	b15b      	cbz	r3, 800fda8 <__smakebuf_r+0x70>
 800fd90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd94:	4630      	mov	r0, r6
 800fd96:	f000 f81d 	bl	800fdd4 <_isatty_r>
 800fd9a:	b128      	cbz	r0, 800fda8 <__smakebuf_r+0x70>
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	f023 0303 	bic.w	r3, r3, #3
 800fda2:	f043 0301 	orr.w	r3, r3, #1
 800fda6:	81a3      	strh	r3, [r4, #12]
 800fda8:	89a3      	ldrh	r3, [r4, #12]
 800fdaa:	431d      	orrs	r5, r3
 800fdac:	81a5      	strh	r5, [r4, #12]
 800fdae:	e7cf      	b.n	800fd50 <__smakebuf_r+0x18>

0800fdb0 <_fstat_r>:
 800fdb0:	b538      	push	{r3, r4, r5, lr}
 800fdb2:	4d07      	ldr	r5, [pc, #28]	@ (800fdd0 <_fstat_r+0x20>)
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	4608      	mov	r0, r1
 800fdba:	4611      	mov	r1, r2
 800fdbc:	602b      	str	r3, [r5, #0]
 800fdbe:	f7f2 fd61 	bl	8002884 <_fstat>
 800fdc2:	1c43      	adds	r3, r0, #1
 800fdc4:	d102      	bne.n	800fdcc <_fstat_r+0x1c>
 800fdc6:	682b      	ldr	r3, [r5, #0]
 800fdc8:	b103      	cbz	r3, 800fdcc <_fstat_r+0x1c>
 800fdca:	6023      	str	r3, [r4, #0]
 800fdcc:	bd38      	pop	{r3, r4, r5, pc}
 800fdce:	bf00      	nop
 800fdd0:	20001274 	.word	0x20001274

0800fdd4 <_isatty_r>:
 800fdd4:	b538      	push	{r3, r4, r5, lr}
 800fdd6:	4d06      	ldr	r5, [pc, #24]	@ (800fdf0 <_isatty_r+0x1c>)
 800fdd8:	2300      	movs	r3, #0
 800fdda:	4604      	mov	r4, r0
 800fddc:	4608      	mov	r0, r1
 800fdde:	602b      	str	r3, [r5, #0]
 800fde0:	f7f2 fd60 	bl	80028a4 <_isatty>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_isatty_r+0x1a>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_isatty_r+0x1a>
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	20001274 	.word	0x20001274

0800fdf4 <abort>:
 800fdf4:	b508      	push	{r3, lr}
 800fdf6:	2006      	movs	r0, #6
 800fdf8:	f000 f834 	bl	800fe64 <raise>
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	f7f2 fcf1 	bl	80027e4 <_exit>

0800fe02 <_malloc_usable_size_r>:
 800fe02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe06:	1f18      	subs	r0, r3, #4
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	bfbc      	itt	lt
 800fe0c:	580b      	ldrlt	r3, [r1, r0]
 800fe0e:	18c0      	addlt	r0, r0, r3
 800fe10:	4770      	bx	lr

0800fe12 <_raise_r>:
 800fe12:	291f      	cmp	r1, #31
 800fe14:	b538      	push	{r3, r4, r5, lr}
 800fe16:	4605      	mov	r5, r0
 800fe18:	460c      	mov	r4, r1
 800fe1a:	d904      	bls.n	800fe26 <_raise_r+0x14>
 800fe1c:	2316      	movs	r3, #22
 800fe1e:	6003      	str	r3, [r0, #0]
 800fe20:	f04f 30ff 	mov.w	r0, #4294967295
 800fe24:	bd38      	pop	{r3, r4, r5, pc}
 800fe26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fe28:	b112      	cbz	r2, 800fe30 <_raise_r+0x1e>
 800fe2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe2e:	b94b      	cbnz	r3, 800fe44 <_raise_r+0x32>
 800fe30:	4628      	mov	r0, r5
 800fe32:	f000 f831 	bl	800fe98 <_getpid_r>
 800fe36:	4622      	mov	r2, r4
 800fe38:	4601      	mov	r1, r0
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe40:	f000 b818 	b.w	800fe74 <_kill_r>
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d00a      	beq.n	800fe5e <_raise_r+0x4c>
 800fe48:	1c59      	adds	r1, r3, #1
 800fe4a:	d103      	bne.n	800fe54 <_raise_r+0x42>
 800fe4c:	2316      	movs	r3, #22
 800fe4e:	6003      	str	r3, [r0, #0]
 800fe50:	2001      	movs	r0, #1
 800fe52:	e7e7      	b.n	800fe24 <_raise_r+0x12>
 800fe54:	2100      	movs	r1, #0
 800fe56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	4798      	blx	r3
 800fe5e:	2000      	movs	r0, #0
 800fe60:	e7e0      	b.n	800fe24 <_raise_r+0x12>
	...

0800fe64 <raise>:
 800fe64:	4b02      	ldr	r3, [pc, #8]	@ (800fe70 <raise+0xc>)
 800fe66:	4601      	mov	r1, r0
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	f7ff bfd2 	b.w	800fe12 <_raise_r>
 800fe6e:	bf00      	nop
 800fe70:	200002d8 	.word	0x200002d8

0800fe74 <_kill_r>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	4d07      	ldr	r5, [pc, #28]	@ (800fe94 <_kill_r+0x20>)
 800fe78:	2300      	movs	r3, #0
 800fe7a:	4604      	mov	r4, r0
 800fe7c:	4608      	mov	r0, r1
 800fe7e:	4611      	mov	r1, r2
 800fe80:	602b      	str	r3, [r5, #0]
 800fe82:	f7f2 fc9f 	bl	80027c4 <_kill>
 800fe86:	1c43      	adds	r3, r0, #1
 800fe88:	d102      	bne.n	800fe90 <_kill_r+0x1c>
 800fe8a:	682b      	ldr	r3, [r5, #0]
 800fe8c:	b103      	cbz	r3, 800fe90 <_kill_r+0x1c>
 800fe8e:	6023      	str	r3, [r4, #0]
 800fe90:	bd38      	pop	{r3, r4, r5, pc}
 800fe92:	bf00      	nop
 800fe94:	20001274 	.word	0x20001274

0800fe98 <_getpid_r>:
 800fe98:	f7f2 bc8c 	b.w	80027b4 <_getpid>

0800fe9c <sqrtf>:
 800fe9c:	b508      	push	{r3, lr}
 800fe9e:	ed2d 8b02 	vpush	{d8}
 800fea2:	eeb0 8a40 	vmov.f32	s16, s0
 800fea6:	f000 f817 	bl	800fed8 <__ieee754_sqrtf>
 800feaa:	eeb4 8a48 	vcmp.f32	s16, s16
 800feae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb2:	d60c      	bvs.n	800fece <sqrtf+0x32>
 800feb4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fed4 <sqrtf+0x38>
 800feb8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800febc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fec0:	d505      	bpl.n	800fece <sqrtf+0x32>
 800fec2:	f7fc fd0b 	bl	800c8dc <__errno>
 800fec6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800feca:	2321      	movs	r3, #33	@ 0x21
 800fecc:	6003      	str	r3, [r0, #0]
 800fece:	ecbd 8b02 	vpop	{d8}
 800fed2:	bd08      	pop	{r3, pc}
 800fed4:	00000000 	.word	0x00000000

0800fed8 <__ieee754_sqrtf>:
 800fed8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fedc:	4770      	bx	lr
	...

0800fee0 <_init>:
 800fee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fee2:	bf00      	nop
 800fee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fee6:	bc08      	pop	{r3}
 800fee8:	469e      	mov	lr, r3
 800feea:	4770      	bx	lr

0800feec <_fini>:
 800feec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feee:	bf00      	nop
 800fef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fef2:	bc08      	pop	{r3}
 800fef4:	469e      	mov	lr, r3
 800fef6:	4770      	bx	lr
