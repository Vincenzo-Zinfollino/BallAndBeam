
RangeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7cc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800e970  0800e970  0000f970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edd0  0800edd0  00010494  2**0
                  CONTENTS
  4 .ARM          00000008  0800edd0  0800edd0  0000fdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edd8  0800edd8  00010494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edd8  0800edd8  0000fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eddc  0800eddc  0000fddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  0800ede0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd4  20000494  0800f274  00010494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001168  0800f274  00011168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac6c  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320c  00000000  00000000  0002b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a0  00000000  00000000  0002e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ee  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c0  00000000  00000000  000309ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b38f  00000000  00000000  0004a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099ef5  00000000  00000000  0006571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000727c  00000000  00000000  000ff658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  001068d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e954 	.word	0x0800e954

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	0800e954 	.word	0x0800e954

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_GPIO_EXTI_Callback>:
uint8_t ready=0;
uint16_t mill;
system_t sys;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == LidarTrigger_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <HAL_GPIO_EXTI_Callback+0x16>
    {
     ready=1; // lidar new lecture ready
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <HAL_GPIO_EXTI_Callback+0x24>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
     //mill=lidar_lee_mm(DIR_S);


    }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200004b0 	.word	0x200004b0

0800101c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

	if(htim->Instance== TIM10){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d118      	bne.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x44>
		 printf("Inter \n");
 800102e:	480f      	ldr	r0, [pc, #60]	@ (800106c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001030:	f00a f8f2 	bl	800b218 <puts>
		 fflush(stdout);
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f009 ffae 	bl	800af9c <fflush>

		//mill= lidar_lee_mm(DIR_S);

		 if (ready==1){
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d10b      	bne.n	8001060 <HAL_TIM_PeriodElapsedCallback+0x44>

			 printf("Inter1 \n");
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800104a:	f00a f8e5 	bl	800b218 <puts>
			fflush(stdout);
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4618      	mov	r0, r3
 8001056:	f009 ffa1 	bl	800af9c <fflush>

			measure_ball_position(&sys);
 800105a:	4808      	ldr	r0, [pc, #32]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800105c:	f000 f851 	bl	8001102 <measure_ball_position>
			//ready=0;

		}
	}
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40014400 	.word	0x40014400
 800106c:	0800e970 	.word	0x0800e970
 8001070:	200002d8 	.word	0x200002d8
 8001074:	200004b0 	.word	0x200004b0
 8001078:	0800e978 	.word	0x0800e978
 800107c:	200004b4 	.word	0x200004b4

08001080 <setupReadingTimer>:


void setupReadingTimer(TIM_HandleTypeDef *htim){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	uint16_t ARR=62499;
 8001088:	f24f 4323 	movw	r3, #62499	@ 0xf423
 800108c:	81fb      	strh	r3, [r7, #14]

  //	ARR=(Read_TS*clock_freq)/Prescaler_lidar;
	__HAL_TIM_SET_PRESCALER(htim, Prescaler_lidar);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(htim, ARR);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	89fa      	ldrh	r2, [r7, #14]
 800109e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(htim); /* start the sampling timer */
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f008 f90c 	bl	80092c4 <HAL_TIM_Base_Start_IT>

	htim->Instance->EGR = TIM_EGR_UG;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	615a      	str	r2, [r3, #20]
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <system_init>:



void system_init(system_t *sys, uint8_t dir,uint32_t ts){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]

	uint8_t i;

	for (i=0; i<5; i++){
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e00c      	b.n	80010ea <system_init+0x2e>

		rbclear( (((ringbuffer_t *) sys)+i ) );
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	4413      	add	r3, r2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 fcd2 	bl	8001a88 <rbclear>
	for (i=0; i<5; i++){
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3301      	adds	r3, #1
 80010e8:	75fb      	strb	r3, [r7, #23]
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d9ef      	bls.n	80010d0 <system_init+0x14>

	//initializing lidar sensor

	//lidar_init( dir);

  	cont_lidar_init( dir, ts);// continuous reading inizializzation
 80010f0:	7afb      	ldrb	r3, [r7, #11]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fde3 	bl	8006cc0 <cont_lidar_init>


}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <measure_ball_position>:

void measure_ball_position(system_t *sys){
 8001102:	b480      	push	{r7}
 8001104:	b085      	sub	sp, #20
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]

	uint16_t pos=0;
 800110a:	2300      	movs	r3, #0
 800110c:	81fb      	strh	r3, [r7, #14]
	//pos=lidar_lee_mm(DIR_S);
	//mill=pos;

}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	0000      	movs	r0, r0
 800111c:	0000      	movs	r0, r0
	...

08001120 <ball_estimation>:


void ball_estimation(system_t *sys){
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b08a      	sub	sp, #40	@ 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	float velest;

	float pos_1,pos_2;


	uint8_t i=0;
 8001128:	2300      	movs	r3, #0
 800112a:	77fb      	strb	r3, [r7, #31]

	for(i=0; i<5;i++){
 800112c:	2300      	movs	r3, #0
 800112e:	77fb      	strb	r3, [r7, #31]
 8001130:	e014      	b.n	800115c <ball_estimation+0x3c>

		rbget(&sys->Ball_pos,i,&pos);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001138:	f997 101f 	ldrsb.w	r1, [r7, #31]
 800113c:	f107 0214 	add.w	r2, r7, #20
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fc61 	bl	8001a08 <rbget>
		prec+=pos;
 8001146:	edd7 7a05 	vldr	s15, [r7, #20]
 800114a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800114e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001152:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	for(i=0; i<5;i++){
 8001156:	7ffb      	ldrb	r3, [r7, #31]
 8001158:	3301      	adds	r3, #1
 800115a:	77fb      	strb	r3, [r7, #31]
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d9e7      	bls.n	8001132 <ball_estimation+0x12>

	}

	for(i=0;i<5;i++){
 8001162:	2300      	movs	r3, #0
 8001164:	77fb      	strb	r3, [r7, #31]
 8001166:	e016      	b.n	8001196 <ball_estimation+0x76>
		rbget(&sys->Ball_pos,5+i,&pos);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	3305      	adds	r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	b25b      	sxtb	r3, r3
 8001176:	f107 0214 	add.w	r2, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	f000 fc44 	bl	8001a08 <rbget>
		succ+=pos;
 8001180:	edd7 7a05 	vldr	s15, [r7, #20]
 8001184:	ed97 7a08 	vldr	s14, [r7, #32]
 8001188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118c:	edc7 7a08 	vstr	s15, [r7, #32]
	for(i=0;i<5;i++){
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	3301      	adds	r3, #1
 8001194:	77fb      	strb	r3, [r7, #31]
 8001196:	7ffb      	ldrb	r3, [r7, #31]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d9e5      	bls.n	8001168 <ball_estimation+0x48>
	}

	prec /=5;
 800119c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011a0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80011a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	rblast(&sys->Ball_pos,&pos_2);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80011b2:	f107 0208 	add.w	r2, r7, #8
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fbf5 	bl	80019a8 <rblast>
	rbget(&sys->Ball_pos, (&sys->Ball_pos.tail)-1,&pos_1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 70ca 	add.w	r0, r3, #404	@ 0x194
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	f107 020c 	add.w	r2, r7, #12
 80011d2:	4619      	mov	r1, r3
 80011d4:	f000 fc18 	bl	8001a08 <rbget>

	pos=0.20*pos_2+(1-0.20)*prec; // Poors man Kalman filter
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9bc 	bl	8000558 <__aeabi_f2d>
 80011e0:	a338      	add	r3, pc, #224	@ (adr r3, 80012c4 <ball_estimation+0x1a4>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa0f 	bl	8000608 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4614      	mov	r4, r2
 80011f0:	461d      	mov	r5, r3
 80011f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011f4:	f7ff f9b0 	bl	8000558 <__aeabi_f2d>
 80011f8:	a334      	add	r3, pc, #208	@ (adr r3, 80012cc <ball_estimation+0x1ac>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fa03 	bl	8000608 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f847 	bl	800029c <__adddf3>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fcef 	bl	8000bf8 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	617b      	str	r3, [r7, #20]
	rbpush(&sys->Ball_pos_filtered,pos);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f503 734a 	add.w	r3, r3, #808	@ 0x328
 8001224:	edd7 7a05 	vldr	s15, [r7, #20]
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fb73 	bl	8001918 <rbpush>


    rblast(&sys->Ball_vel,&vel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 8001238:	f107 0210 	add.w	r2, r7, #16
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fbb2 	bl	80019a8 <rblast>

	velest=0.80*vel+(1-0.8)*((pos_2-pos_1)/Read_TS);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f986 	bl	8000558 <__aeabi_f2d>
 800124c:	a31f      	add	r3, pc, #124	@ (adr r3, 80012cc <ball_estimation+0x1ac>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9d9 	bl	8000608 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001262:	edd7 7a03 	vldr	s15, [r7, #12]
 8001266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126a:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80012c0 <ball_estimation+0x1a0>
 800126e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001272:	ee16 0a90 	vmov	r0, s13
 8001276:	f7ff f96f 	bl	8000558 <__aeabi_f2d>
 800127a:	a30f      	add	r3, pc, #60	@ (adr r3, 80012b8 <ball_estimation+0x198>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f7ff f9c2 	bl	8000608 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f806 	bl	800029c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fcae 	bl	8000bf8 <__aeabi_d2f>
 800129c:	4603      	mov	r3, r0
 800129e:	61bb      	str	r3, [r7, #24]
	rbpush(&sys->Ball_vel,velest);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f203 43bc 	addw	r3, r3, #1212	@ 0x4bc
 80012a6:	ed97 0a06 	vldr	s0, [r7, #24]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fb34 	bl	8001918 <rbpush>





}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	@ 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bdb0      	pop	{r4, r5, r7, pc}
 80012b8:	99999998 	.word	0x99999998
 80012bc:	3fc99999 	.word	0x3fc99999
 80012c0:	43520000 	.word	0x43520000
 80012c4:	9999999a 	.word	0x9999999a
 80012c8:	3fc99999 	.word	0x3fc99999
 80012cc:	9999999a 	.word	0x9999999a
 80012d0:	3fe99999 	.word	0x3fe99999

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db12      	blt.n	8001348 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	490a      	ldr	r1, [pc, #40]	@ (8001354 <__NVIC_DisableIRQ+0x44>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	3320      	adds	r3, #32
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800133c:	f3bf 8f4f 	dsb	sy
}
 8001340:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001342:	f3bf 8f6f 	isb	sy
}
 8001346:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100

08001358 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001360:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001364:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001370:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001374:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001378:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00b      	beq.n	8001398 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001380:	e000      	b.n	8001384 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001382:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001384:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f9      	beq.n	8001382 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800138e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80013ac:	f005 ff4a 	bl	8007244 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b0:	f000 f880 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b4:	f000 fa10 	bl	80017d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013b8:	f000 f9e4 	bl	8001784 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013bc:	f000 f8e4 	bl	8001588 <MX_I2C1_Init>
  MX_TIM1_Init();
 80013c0:	f000 f910 	bl	80015e4 <MX_TIM1_Init>
  MX_TIM10_Init();
 80013c4:	f000 f9b4 	bl	8001730 <MX_TIM10_Init>
  MX_TIM3_Init();
 80013c8:	f000 f964 	bl	8001694 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
 // lidar_init(dir_s1);



  system_init( &sys , DIR_S,Read_TS);
 80013cc:	22d2      	movs	r2, #210	@ 0xd2
 80013ce:	2152      	movs	r1, #82	@ 0x52
 80013d0:	482b      	ldr	r0, [pc, #172]	@ (8001480 <main+0xd8>)
 80013d2:	f7ff fe73 	bl	80010bc <system_init>
  HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	@ 0x64
 80013d8:	f005 ffa6 	bl	8007328 <HAL_Delay>
  setupReadingTimer(&htim10);
 80013dc:	4829      	ldr	r0, [pc, #164]	@ (8001484 <main+0xdc>)
 80013de:	f7ff fe4f 	bl	8001080 <setupReadingTimer>
  startMeasurement();
 80013e2:	f005 fcfd 	bl	8006de0 <startMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      ready=0;
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <main+0xe0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
      NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
 80013ec:	2019      	movs	r0, #25
 80013ee:	f7ff ff8f 	bl	8001310 <__NVIC_DisableIRQ>
	  millimeter =getRangeData();
 80013f2:	f005 fd01 	bl	8006df8 <getRangeData>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <main+0xe4>)
 80013fc:	801a      	strh	r2, [r3, #0]
      distance=(float) millimeter;
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <main+0xe4>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <main+0xe8>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
	 printf(" read %f\n",distance);
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <main+0xe8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f89f 	bl	8000558 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	481d      	ldr	r0, [pc, #116]	@ (8001494 <main+0xec>)
 8001420:	f009 fe92 	bl	800b148 <iprintf>
	 fflush(stdout);
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <main+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4618      	mov	r0, r3
 800142c:	f009 fdb6 	bl	800af9c <fflush>
	 NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001430:	2019      	movs	r0, #25
 8001432:	f7ff ff4f 	bl	80012d4 <__NVIC_EnableIRQ>
	 if(!isFirstReading==0){
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <main+0xf4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <main+0xa8>
     rbpush(&sys.Ball_pos, distance);
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <main+0xe8>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	4815      	ldr	r0, [pc, #84]	@ (80014a0 <main+0xf8>)
 800144a:	f000 fa65 	bl	8001918 <rbpush>
 800144e:	e002      	b.n	8001456 <main+0xae>
	 }else{
		  isFirstReading=1;// evita d'inserire nel buffer il primo valore che proviene dal sensore poich è sempre errato
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <main+0xf4>)
 8001452:	2201      	movs	r2, #1
 8001454:	701a      	strb	r2, [r3, #0]
	 }
     ball_estimation(&sys);
 8001456:	480a      	ldr	r0, [pc, #40]	@ (8001480 <main+0xd8>)
 8001458:	f7ff fe62 	bl	8001120 <ball_estimation>
     rblast(&sys.Ball_pos_filtered,&filteredpos);
 800145c:	4911      	ldr	r1, [pc, #68]	@ (80014a4 <main+0xfc>)
 800145e:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <main+0x100>)
 8001460:	f000 faa2 	bl	80019a8 <rblast>
     filteredpos=filteredpos;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <main+0xfc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0e      	ldr	r2, [pc, #56]	@ (80014a4 <main+0xfc>)
 800146a:	6013      	str	r3, [r2, #0]

     rblast(&sys.Ball_vel,&vel);
 800146c:	490f      	ldr	r1, [pc, #60]	@ (80014ac <main+0x104>)
 800146e:	4810      	ldr	r0, [pc, #64]	@ (80014b0 <main+0x108>)
 8001470:	f000 fa9a 	bl	80019a8 <rblast>

     vel=vel;
 8001474:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <main+0x104>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <main+0x104>)
 800147a:	6013      	str	r3, [r2, #0]
  {
 800147c:	e7b3      	b.n	80013e6 <main+0x3e>
 800147e:	bf00      	nop
 8001480:	200004b4 	.word	0x200004b4
 8001484:	20000d7c 	.word	0x20000d7c
 8001488:	200004b0 	.word	0x200004b0
 800148c:	20000e0c 	.word	0x20000e0c
 8001490:	20000e10 	.word	0x20000e10
 8001494:	0800e980 	.word	0x0800e980
 8001498:	200002d8 	.word	0x200002d8
 800149c:	20000e1c 	.word	0x20000e1c
 80014a0:	20000648 	.word	0x20000648
 80014a4:	20000e14 	.word	0x20000e14
 80014a8:	200007dc 	.word	0x200007dc
 80014ac:	20000e18 	.word	0x20000e18
 80014b0:	20000970 	.word	0x20000970

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0320 	add.w	r3, r7, #32
 80014be:	2230      	movs	r2, #48	@ 0x30
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f009 ffa8 	bl	800b418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <SystemClock_Config+0xcc>)
 80014e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <SystemClock_Config+0xcc>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a21      	ldr	r2, [pc, #132]	@ (8001584 <SystemClock_Config+0xd0>)
 80014fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <SystemClock_Config+0xd0>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001514:	2301      	movs	r3, #1
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001518:	2310      	movs	r3, #16
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151c:	2302      	movs	r3, #2
 800151e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001524:	2310      	movs	r3, #16
 8001526:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001528:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800152e:	2304      	movs	r3, #4
 8001530:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001532:	2304      	movs	r3, #4
 8001534:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4618      	mov	r0, r3
 800153c:	f007 f9da 	bl	80088f4 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001546:	f000 f9e0 	bl	800190a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2102      	movs	r1, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f007 fc3c 	bl	8008de4 <HAL_RCC_ClockConfig>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001572:	f000 f9ca 	bl	800190a <Error_Handler>
  }
}
 8001576:	bf00      	nop
 8001578:	3750      	adds	r7, #80	@ 0x50
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000

08001588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_I2C1_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <MX_I2C1_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_I2C1_Init+0x50>)
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_I2C1_Init+0x58>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015c6:	f006 f99b 	bl	8007900 <HAL_I2C_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 f99b 	bl	800190a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000c98 	.word	0x20000c98
 80015dc:	40005400 	.word	0x40005400
 80015e0:	000186a0 	.word	0x000186a0

080015e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f009 ff10 	bl	800b418 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_TIM1_Init+0xac>)
 8001604:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_TIM1_Init+0xa8>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001614:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001618:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_TIM1_Init+0xa8>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800162c:	2301      	movs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001634:	2301      	movs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001658:	f007 fe96 	bl	8009388 <HAL_TIM_Encoder_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001662:	f000 f952 	bl	800190a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	@ (800168c <MX_TIM1_Init+0xa8>)
 8001674:	f008 fa34 	bl	8009ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800167e:	f000 f944 	bl	800190a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3730      	adds	r7, #48	@ 0x30
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000cec 	.word	0x20000cec
 8001690:	40010000 	.word	0x40010000

08001694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016b2:	4a1e      	ldr	r2, [pc, #120]	@ (800172c <MX_TIM3_Init+0x98>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1343;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016b8:	f240 523f 	movw	r2, #1343	@ 0x53f
 80016bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1a      	ldr	r3, [pc, #104]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 80016c4:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016c6:	f24f 4223 	movw	r2, #62499	@ 0xf423
 80016ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016d8:	4813      	ldr	r0, [pc, #76]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016da:	f007 fda3 	bl	8009224 <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016e4:	f000 f911 	bl	800190a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4619      	mov	r1, r3
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <MX_TIM3_Init+0x94>)
 80016f6:	f007 ffdd 	bl	80096b4 <HAL_TIM_ConfigClockSource>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001700:	f000 f903 	bl	800190a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	463b      	mov	r3, r7
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_TIM3_Init+0x94>)
 8001712:	f008 f9e5 	bl	8009ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800171c:	f000 f8f5 	bl	800190a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000d34 	.word	0x20000d34
 800172c:	40000400 	.word	0x40000400

08001730 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_TIM10_Init+0x4c>)
 8001736:	4a12      	ldr	r2, [pc, #72]	@ (8001780 <MX_TIM10_Init+0x50>)
 8001738:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1343;
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_TIM10_Init+0x4c>)
 800173c:	f240 523f 	movw	r2, #1343	@ 0x53f
 8001740:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_TIM10_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 62499;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_TIM10_Init+0x4c>)
 800174a:	f24f 4223 	movw	r2, #62499	@ 0xf423
 800174e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <MX_TIM10_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_TIM10_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn,7,0);
 800175c:	2200      	movs	r2, #0
 800175e:	2107      	movs	r1, #7
 8001760:	2019      	movs	r0, #25
 8001762:	f005 fee0 	bl	8007526 <HAL_NVIC_SetPriority>
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_TIM10_Init+0x4c>)
 8001768:	f007 fd5c 	bl	8009224 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM10_Init+0x46>
  {
    Error_Handler();
 8001772:	f000 f8ca 	bl	800190a <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000d7c 	.word	0x20000d7c
 8001780:	40014400 	.word	0x40014400

08001784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <MX_USART2_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_USART2_UART_Init+0x4c>)
 80017bc:	f008 fa12 	bl	8009be4 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f8a0 	bl	800190a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000dc4 	.word	0x20000dc4
 80017d4:	40004400 	.word	0x40004400

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b3c      	ldr	r3, [pc, #240]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a3b      	ldr	r2, [pc, #236]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a34      	ldr	r2, [pc, #208]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b2b      	ldr	r3, [pc, #172]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <MX_GPIO_Init+0x10c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2120      	movs	r1, #32
 8001862:	4821      	ldr	r0, [pc, #132]	@ (80018e8 <MX_GPIO_Init+0x110>)
 8001864:	f006 f81a 	bl	800789c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001868:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4619      	mov	r1, r3
 800187e:	481b      	ldr	r0, [pc, #108]	@ (80018ec <MX_GPIO_Init+0x114>)
 8001880:	f005 fe88 	bl	8007594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LidarTrigger_Pin */
  GPIO_InitStruct.Pin = LidarTrigger_Pin;
 8001884:	2301      	movs	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188e:	2302      	movs	r3, #2
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LidarTrigger_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4814      	ldr	r0, [pc, #80]	@ (80018ec <MX_GPIO_Init+0x114>)
 800189a:	f005 fe7b 	bl	8007594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800189e:	2320      	movs	r3, #32
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <MX_GPIO_Init+0x110>)
 80018b6:	f005 fe6d 	bl	8007594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2006      	movs	r0, #6
 80018c0:	f005 fe31 	bl	8007526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80018c4:	2006      	movs	r0, #6
 80018c6:	f005 fe4a 	bl	800755e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	2028      	movs	r0, #40	@ 0x28
 80018d0:	f005 fe29 	bl	8007526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018d4:	2028      	movs	r0, #40	@ 0x28
 80018d6:	f005 fe42 	bl	800755e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	@ 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020800 	.word	0x40020800

080018f0 <__io_putchar>:

/* USER CODE BEGIN 4 */


int __io_putchar(int ch) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    ITM_SendChar(ch);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fd2c 	bl	8001358 <ITM_SendChar>
    return ch;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190e:	b672      	cpsid	i
}
 8001910:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001912:	bf00      	nop
 8001914:	e7fd      	b.n	8001912 <Error_Handler+0x8>
	...

08001918 <rbpush>:
- rbelement_t data: value that will be pushed in the ring buffer;
@outputs: 
- rberror_t: whether the push operation was completed. By the nature of the circular buffer: if the buffer is full then the oldest value will be overwritten.
@#
*/
rberror_t rbpush(ringbuffer_t *buffer, rbelement_t data){
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	ed87 0a00 	vstr	s0, [r7]
    buffer->buffer[buffer->tail] = data;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	601a      	str	r2, [r3, #0]
    buffer->tail++;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	b2da      	uxtb	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	701a      	strb	r2, [r3, #0]
    buffer->tail %= RBUF_SZ; /* avoid that tail goes outside the boundaries of the buffer */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4a17      	ldr	r2, [pc, #92]	@ (80019a4 <rbpush+0x8c>)
 8001946:	fba2 1203 	umull	r1, r2, r2, r3
 800194a:	0952      	lsrs	r2, r2, #5
 800194c:	2164      	movs	r1, #100	@ 0x64
 800194e:	fb01 f202 	mul.w	r2, r1, r2
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	701a      	strb	r2, [r3, #0]
    /* the buffer can only hold RBUF_SZ elements, so old ones will be overwritten */
    if(buffer->length == RBUF_SZ){
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	2b64      	cmp	r3, #100	@ 0x64
 8001960:	d113      	bne.n	800198a <rbpush+0x72>
        /* overwriting data: also move head forward */
        buffer->head++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	785b      	ldrb	r3, [r3, #1]
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	705a      	strb	r2, [r3, #1]
        buffer->head %= RBUF_SZ; /* avoid that head goes outside the boundaries of the buffer */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <rbpush+0x8c>)
 8001974:	fba2 1203 	umull	r1, r2, r2, r3
 8001978:	0952      	lsrs	r2, r2, #5
 800197a:	2164      	movs	r1, #100	@ 0x64
 800197c:	fb01 f202 	mul.w	r2, r1, r2
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	b2da      	uxtb	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	705a      	strb	r2, [r3, #1]
 8001988:	e005      	b.n	8001996 <rbpush+0x7e>
    }else{
        buffer->length++;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	3301      	adds	r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	709a      	strb	r2, [r3, #2]
    }
    return 1;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	51eb851f 	.word	0x51eb851f

080019a8 <rblast>:
- rbelement_t \*data: pointer to the variable that will be taken from the buffer;
@outputs: 
- rbelement_t: whether the operation was concluded successfully.
@#
*/
rberror_t rblast(ringbuffer_t *buffer, rbelement_t *data){
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    if(buffer->length == 0){
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	789b      	ldrb	r3, [r3, #2]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <rblast+0x28>
    	*data = buffer->buffer[buffer->head]; /* avoids having random values as output */
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	601a      	str	r2, [r3, #0]
        return 0; // operation failed
 80019cc:	2300      	movs	r3, #0
 80019ce:	e015      	b.n	80019fc <rblast+0x54>
    }
    // uint8_t index = (uint8_t) ((buffer->tail-1+RBUF_SZ)%RBUF_SZ);
    int8_t index = buffer->tail-1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	73fb      	strb	r3, [r7, #15]
    if(index < 0){
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da03      	bge.n	80019ea <rblast+0x42>
        index += RBUF_SZ;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	3364      	adds	r3, #100	@ 0x64
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	73fb      	strb	r3, [r7, #15]
    }
    *data = buffer->buffer[(uint8_t) index];
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]
    return 1;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <rbget>:


rberror_t rbget(ringbuffer_t *buffer, int8_t i, rbelement_t *data){
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	460b      	mov	r3, r1
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	72fb      	strb	r3, [r7, #11]
    if(i < 0 || i >= buffer->length){
 8001a16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db05      	blt.n	8001a2a <rbget+0x22>
 8001a1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	7892      	ldrb	r2, [r2, #2]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	db0a      	blt.n	8001a40 <rbget+0x38>
        /* out of bounds */
        *data =  buffer->buffer[buffer->head];
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	785b      	ldrb	r3, [r3, #1]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3304      	adds	r3, #4
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	601a      	str	r2, [r3, #0]
        return 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01a      	b.n	8001a76 <rbget+0x6e>
    }
    uint8_t index = (uint8_t) ((buffer->head+i) % RBUF_SZ);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <rbget+0x7c>)
 8001a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a52:	1151      	asrs	r1, r2, #5
 8001a54:	17da      	asrs	r2, r3, #31
 8001a56:	1a8a      	subs	r2, r1, r2
 8001a58:	2164      	movs	r1, #100	@ 0x64
 8001a5a:	fb01 f202 	mul.w	r2, r1, r2
 8001a5e:	1a9a      	subs	r2, r3, r2
 8001a60:	4613      	mov	r3, r2
 8001a62:	75fb      	strb	r3, [r7, #23]
    *data = buffer->buffer[index];
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	601a      	str	r2, [r3, #0]
    return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	51eb851f 	.word	0x51eb851f

08001a88 <rbclear>:
- ringbuffer_t \*buffer: buffer to clear;
@outputs: 
- void;
@#
*/
void rbclear(ringbuffer_t *buffer){
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
    for(i = 0; i < RBUF_SZ; i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
 8001a98:	e00a      	b.n	8001ab0 <rbclear+0x28>
        buffer->buffer[i] = 0;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    for(i = 0; i < RBUF_SZ; i++){
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	3301      	adds	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	2b63      	cmp	r3, #99	@ 0x63
 8001ab4:	d9f1      	bls.n	8001a9a <rbclear+0x12>
    }
    buffer->length = 0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	709a      	strb	r2, [r3, #2]
    buffer->head = 0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	705a      	strb	r2, [r3, #1]
    buffer->tail = 0;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a08      	ldr	r2, [pc, #32]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b12:	2007      	movs	r0, #7
 8001b14:	f005 fcfc 	bl	8007510 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a19      	ldr	r2, [pc, #100]	@ (8001ba8 <HAL_I2C_MspInit+0x84>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12b      	bne.n	8001b9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b62:	23c0      	movs	r3, #192	@ 0xc0
 8001b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b72:	2304      	movs	r3, #4
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <HAL_I2C_MspInit+0x8c>)
 8001b7e:	f005 fd09 	bl	8007594 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_I2C_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	@ 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c48 <HAL_TIM_Encoder_MspInit+0x94>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d134      	bne.n	8001c40 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b1c      	ldr	r3, [pc, #112]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a1b      	ldr	r2, [pc, #108]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_TIM_Encoder_MspInit+0x98>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4809      	ldr	r0, [pc, #36]	@ (8001c50 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c2c:	f005 fcb2 	bl	8007594 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2100      	movs	r1, #0
 8001c34:	2019      	movs	r0, #25
 8001c36:	f005 fc76 	bl	8007526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f005 fc8f 	bl	800755e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <HAL_TIM_Base_MspInit+0x80>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d116      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	201d      	movs	r0, #29
 8001c88:	f005 fc4d 	bl	8007526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c8c:	201d      	movs	r0, #29
 8001c8e:	f005 fc66 	bl	800755e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c92:	e01a      	b.n	8001cca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a10      	ldr	r2, [pc, #64]	@ (8001cdc <HAL_TIM_Base_MspInit+0x88>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d115      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_TIM_Base_MspInit+0x84>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2019      	movs	r0, #25
 8001cc0:	f005 fc31 	bl	8007526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cc4:	2019      	movs	r0, #25
 8001cc6:	f005 fc4a 	bl	800755e <HAL_NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40014400 	.word	0x40014400

08001ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_UART_MspInit+0x84>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12b      	bne.n	8001d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	4b18      	ldr	r3, [pc, #96]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_UART_MspInit+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d56:	f005 fc1d 	bl	8007594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	@ 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40004400 	.word	0x40004400
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <NMI_Handler+0x4>

08001d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <MemManage_Handler+0x4>

08001d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc6:	f005 fa8f 	bl	80072e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LidarTrigger_Pin);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f005 fd7c 	bl	80078d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001de2:	f007 fb77 	bl	80094d4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001de6:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001de8:	f007 fb74 	bl	80094d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000cec 	.word	0x20000cec
 8001df4:	20000d7c 	.word	0x20000d7c

08001df8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <TIM3_IRQHandler+0x10>)
 8001dfe:	f007 fb69 	bl	80094d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000d34 	.word	0x20000d34

08001e0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e14:	f005 fd5c 	bl	80078d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_kill>:

int _kill(int pid, int sig)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e36:	f009 fb41 	bl	800b4bc <__errno>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2216      	movs	r2, #22
 8001e3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_exit>:

void _exit (int status)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ffe7 	bl	8001e2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5e:	bf00      	nop
 8001e60:	e7fd      	b.n	8001e5e <_exit+0x12>

08001e62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e00a      	b.n	8001e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e74:	f3af 8000 	nop.w
 8001e78:	4601      	mov	r1, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	b2ca      	uxtb	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbf0      	blt.n	8001e74 <_read+0x12>
  }

  return len;
 8001e92:	687b      	ldr	r3, [r7, #4]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e009      	b.n	8001ec2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	60ba      	str	r2, [r7, #8]
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd1a 	bl	80018f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	dbf1      	blt.n	8001eae <_write+0x12>
  }
  return len;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_close>:

int _close(int file)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001efc:	605a      	str	r2, [r3, #4]
  return 0;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_isatty>:

int _isatty(int file)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f44:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <_sbrk+0x5c>)
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <_sbrk+0x60>)
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f50:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <_sbrk+0x64>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	@ (8001fa4 <_sbrk+0x68>)
 8001f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <_sbrk+0x64>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d207      	bcs.n	8001f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f6c:	f009 faa6 	bl	800b4bc <__errno>
 8001f70:	4603      	mov	r3, r0
 8001f72:	220c      	movs	r2, #12
 8001f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e009      	b.n	8001f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f82:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a05      	ldr	r2, [pc, #20]	@ (8001fa0 <_sbrk+0x64>)
 8001f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20020000 	.word	0x20020000
 8001f9c:	00000400 	.word	0x00000400
 8001fa0:	20000e20 	.word	0x20000e20
 8001fa4:	20001168 	.word	0x20001168

08001fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	@ (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd0:	f7ff ffea 	bl	8001fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fd6:	490d      	ldr	r1, [pc, #52]	@ (800200c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fdc:	e002      	b.n	8001fe4 <LoopCopyDataInit>

08001fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fe2:	3304      	adds	r3, #4

08001fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe8:	d3f9      	bcc.n	8001fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fec:	4c0a      	ldr	r4, [pc, #40]	@ (8002018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff0:	e001      	b.n	8001ff6 <LoopFillZerobss>

08001ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff4:	3204      	adds	r2, #4

08001ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff8:	d3fb      	bcc.n	8001ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f009 fa65 	bl	800b4c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7ff f9d3 	bl	80013a8 <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8002010:	0800ede0 	.word	0x0800ede0
  ldr r2, =_sbss
 8002014:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 8002018:	20001168 	.word	0x20001168

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>

0800201e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800202c:	6839      	ldr	r1, [r7, #0]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f001 fcd5 	bl	80039de <VL53L0X_get_offset_calibration_data_micro_meter>
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002038:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b096      	sub	sp, #88	@ 0x58
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002052:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800205a:	2200      	movs	r2, #0
 800205c:	2188      	movs	r1, #136	@ 0x88
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f004 ff90 	bl	8006f84 <VL53L0X_WrByte>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002078:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002082:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a9e      	ldr	r2, [pc, #632]	@ (8002304 <VL53L0X_DataInit+0x2c0>)
 800208a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a9d      	ldr	r2, [pc, #628]	@ (8002308 <VL53L0X_DataInit+0x2c4>)
 8002092:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fac0 	bl	8002628 <VL53L0X_GetDeviceParameters>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80020ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d112      	bne.n	80020dc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80020b6:	2300      	movs	r3, #0
 80020b8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80020ba:	2300      	movs	r3, #0
 80020bc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f103 0410 	add.w	r4, r3, #16
 80020c4:	f107 0510 	add.w	r5, r7, #16
 80020c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2264      	movs	r2, #100	@ 0x64
 80020e0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80020ea:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80020f4:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80020fe:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800210a:	2201      	movs	r2, #1
 800210c:	2180      	movs	r1, #128	@ 0x80
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f004 ff38 	bl	8006f84 <VL53L0X_WrByte>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800211c:	4313      	orrs	r3, r2
 800211e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002122:	2201      	movs	r2, #1
 8002124:	21ff      	movs	r1, #255	@ 0xff
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f004 ff2c 	bl	8006f84 <VL53L0X_WrByte>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002134:	4313      	orrs	r3, r2
 8002136:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f004 ff20 	bl	8006f84 <VL53L0X_WrByte>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800214c:	4313      	orrs	r3, r2
 800214e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002152:	f107 030f 	add.w	r3, r7, #15
 8002156:	461a      	mov	r2, r3
 8002158:	2191      	movs	r1, #145	@ 0x91
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f004 ffc6 	bl	80070ec <VL53L0X_RdByte>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002168:	4313      	orrs	r3, r2
 800216a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002176:	2201      	movs	r2, #1
 8002178:	2100      	movs	r1, #0
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f004 ff02 	bl	8006f84 <VL53L0X_WrByte>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002188:	4313      	orrs	r3, r2
 800218a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800218e:	2200      	movs	r2, #0
 8002190:	21ff      	movs	r1, #255	@ 0xff
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f004 fef6 	bl	8006f84 <VL53L0X_WrByte>
 8002198:	4603      	mov	r3, r0
 800219a:	461a      	mov	r2, r3
 800219c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2180      	movs	r1, #128	@ 0x80
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f004 feea 	bl	8006f84 <VL53L0X_WrByte>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80021c2:	e014      	b.n	80021ee <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80021c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d114      	bne.n	80021f6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80021cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2201      	movs	r2, #1
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fd65 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80021e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ea:	3301      	adds	r3, #1
 80021ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80021ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	dde7      	ble.n	80021c4 <VL53L0X_DataInit+0x180>
 80021f4:	e000      	b.n	80021f8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80021f6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80021f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002200:	2200      	movs	r2, #0
 8002202:	2102      	movs	r1, #2
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fd4d 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002210:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002218:	2200      	movs	r2, #0
 800221a:	2103      	movs	r1, #3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 fd41 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002228:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002230:	2200      	movs	r2, #0
 8002232:	2104      	movs	r1, #4
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fd35 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
 800223a:	4603      	mov	r3, r0
 800223c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002240:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002248:	2200      	movs	r2, #0
 800224a:	2105      	movs	r1, #5
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fd29 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002258:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800225c:	2b00      	cmp	r3, #0
 800225e:	d108      	bne.n	8002272 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002260:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8002264:	2100      	movs	r1, #0
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fdcc 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002272:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800227a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800227e:	2101      	movs	r1, #1
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fdbf 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800228c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002294:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8002298:	2102      	movs	r1, #2
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fdb2 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022a6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80022ae:	2200      	movs	r2, #0
 80022b0:	2103      	movs	r1, #3
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 fda6 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80022be:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	22ff      	movs	r2, #255	@ 0xff
 80022ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80022ce:	22ff      	movs	r2, #255	@ 0xff
 80022d0:	2101      	movs	r1, #1
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fe56 	bl	8006f84 <VL53L0X_WrByte>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80022e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80022f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3758      	adds	r7, #88	@ 0x58
 80022fe:	46bd      	mov	sp, r7
 8002300:	bdb0      	pop	{r4, r5, r7, pc}
 8002302:	bf00      	nop
 8002304:	00016b85 	.word	0x00016b85
 8002308:	000970a4 	.word	0x000970a4

0800230c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b09e      	sub	sp, #120	@ 0x78
 8002310:	af02      	add	r7, sp, #8
 8002312:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800231a:	f107 031c 	add.w	r3, r7, #28
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f009 f878 	bl	800b418 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002348:	2101      	movs	r1, #1
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f002 fa9d 	bl	800488a <VL53L0X_get_info_from_device>
 8002350:	4603      	mov	r3, r0
 8002352:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800235c:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8002364:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002368:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800236c:	2b01      	cmp	r3, #1
 800236e:	d80d      	bhi.n	800238c <VL53L0X_StaticInit+0x80>
 8002370:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002374:	2b01      	cmp	r3, #1
 8002376:	d102      	bne.n	800237e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002378:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800237a:	2b20      	cmp	r3, #32
 800237c:	d806      	bhi.n	800238c <VL53L0X_StaticInit+0x80>
 800237e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10e      	bne.n	80023a4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d90b      	bls.n	80023a4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800238c:	f107 0218 	add.w	r2, r7, #24
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f001 fd1c 	bl	8003dd4 <VL53L0X_perform_ref_spad_management>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80023a2:	e009      	b.n	80023b8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80023a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80023a8:	461a      	mov	r2, r3
 80023aa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f001 ff1d 	bl	80041ec <VL53L0X_set_reference_spads>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80023b8:	4b93      	ldr	r3, [pc, #588]	@ (8002608 <VL53L0X_StaticInit+0x2fc>)
 80023ba:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80023bc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10f      	bne.n	80023e4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80023ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80023ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80023dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023de:	e001      	b.n	80023e4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80023e0:	4b89      	ldr	r3, [pc, #548]	@ (8002608 <VL53L0X_StaticInit+0x2fc>)
 80023e2:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80023e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80023ec:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f003 fdec 	bl	8005fcc <VL53L0X_load_tuning_settings>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80023fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2304      	movs	r3, #4
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f001 f919 	bl	8003644 <VL53L0X_SetGpioConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002418:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800241c:	2b00      	cmp	r3, #0
 800241e:	d121      	bne.n	8002464 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002420:	2201      	movs	r2, #1
 8002422:	21ff      	movs	r1, #255	@ 0xff
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f004 fdad 	bl	8006f84 <VL53L0X_WrByte>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8002430:	f107 031a 	add.w	r3, r7, #26
 8002434:	461a      	mov	r2, r3
 8002436:	2184      	movs	r1, #132	@ 0x84
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f004 fe81 	bl	8007140 <VL53L0X_RdWord>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002446:	4313      	orrs	r3, r2
 8002448:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800244c:	2200      	movs	r2, #0
 800244e:	21ff      	movs	r1, #255	@ 0xff
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f004 fd97 	bl	8006f84 <VL53L0X_WrByte>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800245e:	4313      	orrs	r3, r2
 8002460:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002464:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002468:	2b00      	cmp	r3, #0
 800246a:	d104      	bne.n	8002476 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800246c:	8b7b      	ldrh	r3, [r7, #26]
 800246e:	011a      	lsls	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8002476:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800247a:	2b00      	cmp	r3, #0
 800247c:	d108      	bne.n	8002490 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800247e:	f107 031c 	add.w	r3, r7, #28
 8002482:	4619      	mov	r1, r3
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f8cf 	bl	8002628 <VL53L0X_GetDeviceParameters>
 800248a:	4603      	mov	r3, r0
 800248c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8002490:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002494:	2b00      	cmp	r3, #0
 8002496:	d110      	bne.n	80024ba <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8002498:	f107 0319 	add.w	r3, r7, #25
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f991 	bl	80027c6 <VL53L0X_GetFractionEnable>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80024aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80024b2:	7e7a      	ldrb	r2, [r7, #25]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80024ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f103 0410 	add.w	r4, r3, #16
 80024c8:	f107 051c 	add.w	r5, r7, #28
 80024cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80024e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d111      	bne.n	800250c <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80024e8:	f107 0319 	add.w	r3, r7, #25
 80024ec:	461a      	mov	r2, r3
 80024ee:	2101      	movs	r1, #1
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f004 fdfb 	bl	80070ec <VL53L0X_RdByte>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80024fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8002504:	7e7a      	ldrb	r2, [r7, #25]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800250c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f9c9 	bl	80028b0 <VL53L0X_SetSequenceStepEnable>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8002524:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800252c:	2200      	movs	r2, #0
 800252e:	2102      	movs	r1, #2
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9bd 	bl	80028b0 <VL53L0X_SetSequenceStepEnable>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800253c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002540:	2b00      	cmp	r3, #0
 8002542:	d103      	bne.n	800254c <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2203      	movs	r2, #3
 8002548:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800254c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002554:	f107 0313 	add.w	r3, r7, #19
 8002558:	461a      	mov	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f98f 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8002562:	4603      	mov	r3, r0
 8002564:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002568:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002570:	7cfa      	ldrb	r2, [r7, #19]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8002578:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8002580:	f107 0313 	add.w	r3, r7, #19
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f979 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002594:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002598:	2b00      	cmp	r3, #0
 800259a:	d103      	bne.n	80025a4 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800259c:	7cfa      	ldrb	r2, [r7, #19]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80025a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	461a      	mov	r2, r3
 80025b2:	2103      	movs	r1, #3
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f002 fee7 	bl	8005388 <get_sequence_step_timeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80025c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80025d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80025d8:	f107 030c 	add.w	r3, r7, #12
 80025dc:	461a      	mov	r2, r3
 80025de:	2104      	movs	r1, #4
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f002 fed1 	bl	8005388 <get_sequence_step_timeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80025ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8002600:	4618      	mov	r0, r3
 8002602:	3770      	adds	r7, #112	@ 0x70
 8002604:	46bd      	mov	sp, r7
 8002606:	bdb0      	pop	{r4, r5, r7, pc}
 8002608:	200001bc 	.word	0x200001bc

0800260c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8002614:	239d      	movs	r3, #157	@ 0x9d
 8002616:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8002618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8b0 	bl	80027a0 <VL53L0X_GetDeviceMode>
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d107      	bne.n	800265c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	3308      	adds	r3, #8
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 faaa 	bl	8002bac <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800265c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3310      	adds	r3, #16
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 fae0 	bl	8002c3e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d107      	bne.n	800269a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3314      	adds	r3, #20
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fcc4 	bl	800201e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d134      	bne.n	800270c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	e02a      	b.n	80026fe <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d12a      	bne.n	8002706 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	b299      	uxth	r1, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3308      	adds	r3, #8
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	461a      	mov	r2, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fc00 	bl	8002ec8 <VL53L0X_GetLimitCheckValue>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d117      	bne.n	800270a <VL53L0X_GetDeviceParameters+0xe2>

				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	b299      	uxth	r1, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3318      	adds	r3, #24
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	461a      	mov	r2, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fb67 	bl	8002dbc <VL53L0X_GetLimitCheckEnable>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b05      	cmp	r3, #5
 8002702:	ddd1      	ble.n	80026a8 <VL53L0X_GetDeviceParameters+0x80>
 8002704:	e002      	b.n	800270c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800270a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800270c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	333c      	adds	r3, #60	@ 0x3c
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fc62 	bl	8002fe4 <VL53L0X_GetWrapAroundCheckEnable>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d107      	bne.n	800273c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3304      	adds	r3, #4
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f879 	bl	800282a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	2b15      	cmp	r3, #21
 800275c:	bf8c      	ite	hi
 800275e:	2201      	movhi	r2, #1
 8002760:	2200      	movls	r2, #0
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	2a00      	cmp	r2, #0
 8002766:	d10f      	bne.n	8002788 <VL53L0X_SetDeviceMode+0x40>
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <VL53L0X_SetDeviceMode+0x54>)
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	741a      	strb	r2, [r3, #16]
		break;
 8002786:	e001      	b.n	800278c <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8002788:	23f8      	movs	r3, #248	@ 0xf8
 800278a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	0030000b 	.word	0x0030000b

080027a0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7c1a      	ldrb	r2, [r3, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80027b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	2109      	movs	r1, #9
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f004 fc87 	bl	80070ec <VL53L0X_RdByte>
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80027f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800280e:	2300      	movs	r3, #0
 8002810:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8002812:	6839      	ldr	r1, [r7, #0]
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f003 fa47 	bl	8005ca8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8002838:	6839      	ldr	r1, [r7, #0]
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f003 fb14 	bl	8005e68 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	70fb      	strb	r3, [r7, #3]
 800285c:	4613      	mov	r3, r2
 800285e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8002864:	78ba      	ldrb	r2, [r7, #2]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f002 ff5e 	bl	800572c <VL53L0X_set_vcsel_pulse_period>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8002874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	460b      	mov	r3, r1
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	4619      	mov	r1, r3
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f003 f9ce 	bl	8005c3a <VL53L0X_get_vcsel_pulse_period>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80028a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	70fb      	strb	r3, [r7, #3]
 80028bc:	4613      	mov	r3, r2
 80028be:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80028cc:	f107 030f 	add.w	r3, r7, #15
 80028d0:	461a      	mov	r2, r3
 80028d2:	2101      	movs	r1, #1
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f004 fc09 	bl	80070ec <VL53L0X_RdByte>
 80028da:	4603      	mov	r3, r0
 80028dc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80028e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d159      	bne.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80028ea:	78bb      	ldrb	r3, [r7, #2]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d12b      	bne.n	8002948 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d825      	bhi.n	8002942 <VL53L0X_SetSequenceStepEnable+0x92>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <VL53L0X_SetSequenceStepEnable+0x4c>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002911 	.word	0x08002911
 8002900:	0800291b 	.word	0x0800291b
 8002904:	08002925 	.word	0x08002925
 8002908:	0800292f 	.word	0x0800292f
 800290c:	08002939 	.word	0x08002939
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8002910:	7dbb      	ldrb	r3, [r7, #22]
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	75bb      	strb	r3, [r7, #22]
				break;
 8002918:	e041      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800291a:	7dbb      	ldrb	r3, [r7, #22]
 800291c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8002920:	75bb      	strb	r3, [r7, #22]
				break;
 8002922:	e03c      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8002924:	7dbb      	ldrb	r3, [r7, #22]
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	75bb      	strb	r3, [r7, #22]
				break;
 800292c:	e037      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800292e:	7dbb      	ldrb	r3, [r7, #22]
 8002930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002934:	75bb      	strb	r3, [r7, #22]
				break;
 8002936:	e032      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8002938:	7dbb      	ldrb	r3, [r7, #22]
 800293a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800293e:	75bb      	strb	r3, [r7, #22]
				break;
 8002940:	e02d      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002942:	23fc      	movs	r3, #252	@ 0xfc
 8002944:	75fb      	strb	r3, [r7, #23]
 8002946:	e02a      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	2b04      	cmp	r3, #4
 800294c:	d825      	bhi.n	800299a <VL53L0X_SetSequenceStepEnable+0xea>
 800294e:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002969 	.word	0x08002969
 8002958:	08002973 	.word	0x08002973
 800295c:	0800297d 	.word	0x0800297d
 8002960:	08002987 	.word	0x08002987
 8002964:	08002991 	.word	0x08002991
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8002968:	7dbb      	ldrb	r3, [r7, #22]
 800296a:	f023 0310 	bic.w	r3, r3, #16
 800296e:	75bb      	strb	r3, [r7, #22]
				break;
 8002970:	e015      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8002972:	7dbb      	ldrb	r3, [r7, #22]
 8002974:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002978:	75bb      	strb	r3, [r7, #22]
				break;
 800297a:	e010      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800297c:	7dbb      	ldrb	r3, [r7, #22]
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	75bb      	strb	r3, [r7, #22]
				break;
 8002984:	e00b      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8002986:	7dbb      	ldrb	r3, [r7, #22]
 8002988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800298c:	75bb      	strb	r3, [r7, #22]
				break;
 800298e:	e006      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8002990:	7dbb      	ldrb	r3, [r7, #22]
 8002992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002996:	75bb      	strb	r3, [r7, #22]
				break;
 8002998:	e001      	b.n	800299e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800299a:	23fc      	movs	r3, #252	@ 0xfc
 800299c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	7dba      	ldrb	r2, [r7, #22]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d01e      	beq.n	80029e4 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80029a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 80029ae:	7dbb      	ldrb	r3, [r7, #22]
 80029b0:	461a      	mov	r2, r3
 80029b2:	2101      	movs	r1, #1
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f004 fae5 	bl	8006f84 <VL53L0X_WrByte>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80029be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7dba      	ldrb	r2, [r7, #22]
 80029ca:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80029ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ff10 	bl	8002804 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80029e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	460b      	mov	r3, r1
 80029fc:	72fb      	strb	r3, [r7, #11]
 80029fe:	4613      	mov	r3, r2
 8002a00:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d836      	bhi.n	8002a80 <sequence_step_enabled+0x90>
 8002a12:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <sequence_step_enabled+0x28>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a2d 	.word	0x08002a2d
 8002a1c:	08002a3f 	.word	0x08002a3f
 8002a20:	08002a51 	.word	0x08002a51
 8002a24:	08002a63 	.word	0x08002a63
 8002a28:	08002a75 	.word	0x08002a75
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002a2c:	7abb      	ldrb	r3, [r7, #10]
 8002a2e:	111b      	asrs	r3, r3, #4
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	701a      	strb	r2, [r3, #0]
		break;
 8002a3c:	e022      	b.n	8002a84 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002a3e:	7abb      	ldrb	r3, [r7, #10]
 8002a40:	10db      	asrs	r3, r3, #3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	701a      	strb	r2, [r3, #0]
		break;
 8002a4e:	e019      	b.n	8002a84 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002a50:	7abb      	ldrb	r3, [r7, #10]
 8002a52:	109b      	asrs	r3, r3, #2
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	701a      	strb	r2, [r3, #0]
		break;
 8002a60:	e010      	b.n	8002a84 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002a62:	7abb      	ldrb	r3, [r7, #10]
 8002a64:	119b      	asrs	r3, r3, #6
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	701a      	strb	r2, [r3, #0]
		break;
 8002a72:	e007      	b.n	8002a84 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002a74:	7abb      	ldrb	r3, [r7, #10]
 8002a76:	09db      	lsrs	r3, r3, #7
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	701a      	strb	r2, [r3, #0]
		break;
 8002a7e:	e001      	b.n	8002a84 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002a80:	23fc      	movs	r3, #252	@ 0xfc
 8002a82:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002aa6:	f107 030e 	add.w	r3, r7, #14
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2101      	movs	r1, #1
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f004 fb1c 	bl	80070ec <VL53L0X_RdByte>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8002ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8002ac0:	7bba      	ldrb	r2, [r7, #14]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ff92 	bl	80029f0 <sequence_step_enabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d108      	bne.n	8002aea <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8002ad8:	7bba      	ldrb	r2, [r7, #14]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	3302      	adds	r3, #2
 8002ade:	2101      	movs	r1, #1
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff85 	bl	80029f0 <sequence_step_enabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d108      	bne.n	8002b04 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8002af2:	7bba      	ldrb	r2, [r7, #14]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	2102      	movs	r1, #2
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ff78 	bl	80029f0 <sequence_step_enabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8002b0c:	7bba      	ldrb	r2, [r7, #14]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	3303      	adds	r3, #3
 8002b12:	2103      	movs	r1, #3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff6b 	bl	80029f0 <sequence_step_enabled>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d108      	bne.n	8002b38 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8002b26:	7bba      	ldrb	r2, [r7, #14]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ff5e 	bl	80029f0 <sequence_step_enabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002b52:	f107 030e 	add.w	r3, r7, #14
 8002b56:	461a      	mov	r2, r3
 8002b58:	21f8      	movs	r1, #248	@ 0xf8
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f004 faf0 	bl	8007140 <VL53L0X_RdWord>
 8002b60:	4603      	mov	r3, r0
 8002b62:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d112      	bne.n	8002b92 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 8002b6c:	89fb      	ldrh	r3, [r7, #14]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8002b72:	89fb      	ldrh	r3, [r7, #14]
 8002b74:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e001      	b.n	8002b84 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	2104      	movs	r1, #4
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f004 fa49 	bl	8007020 <VL53L0X_WrDWord>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002bba:	f107 030c 	add.w	r3, r7, #12
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	21f8      	movs	r1, #248	@ 0xf8
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f004 fabc 	bl	8007140 <VL53L0X_RdWord>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2104      	movs	r1, #4
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f004 fae5 	bl	80071ac <VL53L0X_RdDWord>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10c      	bne.n	8002c08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8002bee:	89bb      	ldrh	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7f1b      	ldrb	r3, [r3, #28]
 8002c26:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7bba      	ldrb	r2, [r7, #14]
 8002c2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8002c4c:	f107 030e 	add.w	r3, r7, #14
 8002c50:	461a      	mov	r2, r3
 8002c52:	2120      	movs	r1, #32
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f004 fa73 	bl	8007140 <VL53L0X_RdWord>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8002c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	771a      	strb	r2, [r3, #28]
 8002c7e:	e00b      	b.n	8002c98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d902      	bls.n	8002cd0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002cca:	23fc      	movs	r3, #252	@ 0xfc
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e05b      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73bb      	strb	r3, [r7, #14]
 8002ce2:	e00a      	b.n	8002cfa <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002ce4:	887b      	ldrh	r3, [r7, #2]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002cfa:	887b      	ldrh	r3, [r7, #2]
 8002cfc:	2b05      	cmp	r3, #5
 8002cfe:	d841      	bhi.n	8002d84 <VL53L0X_SetLimitCheckEnable+0xe0>
 8002d00:	a201      	add	r2, pc, #4	@ (adr r2, 8002d08 <VL53L0X_SetLimitCheckEnable+0x64>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d21 	.word	0x08002d21
 8002d0c:	08002d2b 	.word	0x08002d2b
 8002d10:	08002d41 	.word	0x08002d41
 8002d14:	08002d4b 	.word	0x08002d4b
 8002d18:	08002d55 	.word	0x08002d55
 8002d1c:	08002d6d 	.word	0x08002d6d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8002d28:	e02e      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	2144      	movs	r1, #68	@ 0x44
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f004 f949 	bl	8006fcc <VL53L0X_WrWord>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	75fb      	strb	r3, [r7, #23]

			break;
 8002d3e:	e023      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8002d48:	e01e      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8002d52:	e019      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002d5a:	7b7b      	ldrb	r3, [r7, #13]
 8002d5c:	22fe      	movs	r2, #254	@ 0xfe
 8002d5e:	2160      	movs	r1, #96	@ 0x60
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f004 f98f 	bl	8007084 <VL53L0X_UpdateByte>
 8002d66:	4603      	mov	r3, r0
 8002d68:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8002d6a:	e00d      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8002d72:	7b7b      	ldrb	r3, [r7, #13]
 8002d74:	22ef      	movs	r2, #239	@ 0xef
 8002d76:	2160      	movs	r1, #96	@ 0x60
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f004 f983 	bl	8007084 <VL53L0X_UpdateByte>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8002d82:	e001      	b.n	8002d88 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002d84:	23fc      	movs	r3, #252	@ 0xfc
 8002d86:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10f      	bne.n	8002db0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002da2:	e005      	b.n	8002db0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002dce:	897b      	ldrh	r3, [r7, #10]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d905      	bls.n	8002de0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002dd4:	23fc      	movs	r3, #252	@ 0xfc
 8002dd6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e008      	b.n	8002df2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002de0:	897b      	ldrh	r3, [r7, #10]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dea:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7dba      	ldrb	r2, [r7, #22]
 8002df0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8002e16:	897b      	ldrh	r3, [r7, #10]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e20:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002e28:	897b      	ldrh	r3, [r7, #10]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e040      	b.n	8002eba <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8002e38:	897b      	ldrh	r3, [r7, #10]
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d830      	bhi.n	8002ea0 <VL53L0X_SetLimitCheckValue+0x9c>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <VL53L0X_SetLimitCheckValue+0x40>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e5d 	.word	0x08002e5d
 8002e48:	08002e65 	.word	0x08002e65
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e83 	.word	0x08002e83
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002e8b 	.word	0x08002e8b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8002e62:	e01f      	b.n	8002ea4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2144      	movs	r1, #68	@ 0x44
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f004 f8ac 	bl	8006fcc <VL53L0X_WrWord>
 8002e74:	4603      	mov	r3, r0
 8002e76:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002e78:	e014      	b.n	8002ea4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8002e80:	e010      	b.n	8002ea4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002e88:	e00c      	b.n	8002ea4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	2164      	movs	r1, #100	@ 0x64
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f004 f899 	bl	8006fcc <VL53L0X_WrWord>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002e9e:	e001      	b.n	8002ea4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002ea0:	23fc      	movs	r3, #252	@ 0xfc
 8002ea2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002eac:	897b      	ldrh	r3, [r7, #10]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop

08002ec8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002ede:	897b      	ldrh	r3, [r7, #10]
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d847      	bhi.n	8002f74 <VL53L0X_GetLimitCheckValue+0xac>
 8002ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <VL53L0X_GetLimitCheckValue+0x24>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002f11 	.word	0x08002f11
 8002ef4:	08002f37 	.word	0x08002f37
 8002ef8:	08002f43 	.word	0x08002f43
 8002efc:	08002f4f 	.word	0x08002f4f
 8002f00:	08002f4f 	.word	0x08002f4f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	77bb      	strb	r3, [r7, #30]
		break;
 8002f0e:	e033      	b.n	8002f78 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002f10:	f107 0316 	add.w	r3, r7, #22
 8002f14:	461a      	mov	r2, r3
 8002f16:	2144      	movs	r1, #68	@ 0x44
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f004 f911 	bl	8007140 <VL53L0X_RdWord>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002f22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002f2a:	8afb      	ldrh	r3, [r7, #22]
 8002f2c:	025b      	lsls	r3, r3, #9
 8002f2e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77bb      	strb	r3, [r7, #30]
		break;
 8002f34:	e020      	b.n	8002f78 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77bb      	strb	r3, [r7, #30]
		break;
 8002f40:	e01a      	b.n	8002f78 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	77bb      	strb	r3, [r7, #30]
		break;
 8002f4c:	e014      	b.n	8002f78 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8002f4e:	f107 0316 	add.w	r3, r7, #22
 8002f52:	461a      	mov	r2, r3
 8002f54:	2164      	movs	r1, #100	@ 0x64
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f004 f8f2 	bl	8007140 <VL53L0X_RdWord>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8002f60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8002f68:	8afb      	ldrh	r3, [r7, #22]
 8002f6a:	025b      	lsls	r3, r3, #9
 8002f6c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77bb      	strb	r3, [r7, #30]
		break;
 8002f72:	e001      	b.n	8002f78 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002f74:	23fc      	movs	r3, #252	@ 0xfc
 8002f76:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d12a      	bne.n	8002fd6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8002f80:	7fbb      	ldrb	r3, [r7, #30]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d124      	bne.n	8002fd0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d110      	bne.n	8002fae <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	330c      	adds	r3, #12
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002fac:	e013      	b.n	8002fd6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002fb4:	897b      	ldrh	r3, [r7, #10]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8002fce:	e002      	b.n	8002fd6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002fd6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop

08002fe4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8002ff2:	f107 030e 	add.w	r3, r7, #14
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f004 f876 	bl	80070ec <VL53L0X_RdByte>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10e      	bne.n	800302a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800300c:	7bba      	ldrb	r2, [r7, #14]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	b25b      	sxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	da03      	bge.n	8003024 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e002      	b.n	800302a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800303c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003054:	f107 030e 	add.w	r3, r7, #14
 8003058:	4619      	mov	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fba0 	bl	80027a0 <VL53L0X_GetDeviceMode>
 8003060:	4603      	mov	r3, r0
 8003062:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800306c:	7bbb      	ldrb	r3, [r7, #14]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d104      	bne.n	800307c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f898 	bl	80031a8 <VL53L0X_StartMeasurement>
 8003078:	4603      	mov	r3, r0
 800307a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800307c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d104      	bne.n	800308e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f001 fb33 	bl	80046f0 <VL53L0X_measurement_poll_for_completion>
 800308a:	4603      	mov	r3, r0
 800308c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003096:	7bbb      	ldrb	r3, [r7, #14]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d103      	bne.n	80030a4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80030a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030bc:	2300      	movs	r3, #0
 80030be:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80030c0:	2301      	movs	r3, #1
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f001 fad5 	bl	8004676 <VL53L0X_perform_ref_calibration>
 80030cc:	4603      	mov	r3, r0
 80030ce:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80030d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80030f2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80030f4:	7dbb      	ldrb	r3, [r7, #22]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80030fa:	7dbb      	ldrb	r3, [r7, #22]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d002      	beq.n	8003106 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003100:	7dbb      	ldrb	r3, [r7, #22]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d147      	bne.n	8003196 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003106:	f107 030c 	add.w	r3, r7, #12
 800310a:	f107 0210 	add.w	r2, r7, #16
 800310e:	2101      	movs	r1, #1
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fbb9 	bl	8003888 <VL53L0X_GetInterruptThresholds>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003120:	d803      	bhi.n	800312a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003122:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003124:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8003128:	d935      	bls.n	8003196 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800312a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d131      	bne.n	8003196 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003138:	491a      	ldr	r1, [pc, #104]	@ (80031a4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f002 ff46 	bl	8005fcc <VL53L0X_load_tuning_settings>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]
 8003144:	e027      	b.n	8003196 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003146:	2204      	movs	r2, #4
 8003148:	21ff      	movs	r1, #255	@ 0xff
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f003 ff1a 	bl	8006f84 <VL53L0X_WrByte>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	4313      	orrs	r3, r2
 8003158:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800315a:	2200      	movs	r2, #0
 800315c:	2170      	movs	r1, #112	@ 0x70
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f003 ff10 	bl	8006f84 <VL53L0X_WrByte>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	4313      	orrs	r3, r2
 800316c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800316e:	2200      	movs	r2, #0
 8003170:	21ff      	movs	r1, #255	@ 0xff
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f003 ff06 	bl	8006f84 <VL53L0X_WrByte>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	4313      	orrs	r3, r2
 8003180:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003182:	2200      	movs	r2, #0
 8003184:	2180      	movs	r1, #128	@ 0x80
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f003 fefc 	bl	8006f84 <VL53L0X_WrByte>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	4313      	orrs	r3, r2
 8003194:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003196:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000004 	.word	0x20000004

080031a8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80031b8:	f107 030e 	add.w	r3, r7, #14
 80031bc:	4619      	mov	r1, r3
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff faee 	bl	80027a0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80031c4:	2201      	movs	r2, #1
 80031c6:	2180      	movs	r1, #128	@ 0x80
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f003 fedb 	bl	8006f84 <VL53L0X_WrByte>
 80031ce:	4603      	mov	r3, r0
 80031d0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80031d2:	2201      	movs	r2, #1
 80031d4:	21ff      	movs	r1, #255	@ 0xff
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f003 fed4 	bl	8006f84 <VL53L0X_WrByte>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80031e0:	2200      	movs	r2, #0
 80031e2:	2100      	movs	r1, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f003 fecd 	bl	8006f84 <VL53L0X_WrByte>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 80031f4:	461a      	mov	r2, r3
 80031f6:	2191      	movs	r1, #145	@ 0x91
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f003 fec3 	bl	8006f84 <VL53L0X_WrByte>
 80031fe:	4603      	mov	r3, r0
 8003200:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003202:	2201      	movs	r2, #1
 8003204:	2100      	movs	r1, #0
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f003 febc 	bl	8006f84 <VL53L0X_WrByte>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003210:	2200      	movs	r2, #0
 8003212:	21ff      	movs	r1, #255	@ 0xff
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f003 feb5 	bl	8006f84 <VL53L0X_WrByte>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800321e:	2200      	movs	r2, #0
 8003220:	2180      	movs	r1, #128	@ 0x80
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f003 feae 	bl	8006f84 <VL53L0X_WrByte>
 8003228:	4603      	mov	r3, r0
 800322a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d054      	beq.n	80032dc <VL53L0X_StartMeasurement+0x134>
 8003232:	2b03      	cmp	r3, #3
 8003234:	dc6c      	bgt.n	8003310 <VL53L0X_StartMeasurement+0x168>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <VL53L0X_StartMeasurement+0x98>
 800323a:	2b01      	cmp	r3, #1
 800323c:	d034      	beq.n	80032a8 <VL53L0X_StartMeasurement+0x100>
 800323e:	e067      	b.n	8003310 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003240:	2201      	movs	r2, #1
 8003242:	2100      	movs	r1, #0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f003 fe9d 	bl	8006f84 <VL53L0X_WrByte>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d15d      	bne.n	8003316 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8003264:	f107 030d 	add.w	r3, r7, #13
 8003268:	461a      	mov	r2, r3
 800326a:	2100      	movs	r1, #0
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f003 ff3d 	bl	80070ec <VL53L0X_RdByte>
 8003272:	4603      	mov	r3, r0
 8003274:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800327c:	7b7a      	ldrb	r2, [r7, #13]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	4013      	ands	r3, r2
 8003282:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	429a      	cmp	r2, r3
 8003288:	d107      	bne.n	800329a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800328a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003298:	d3e1      	bcc.n	800325e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80032a0:	d339      	bcc.n	8003316 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80032a2:	23f9      	movs	r3, #249	@ 0xf9
 80032a4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80032a6:	e036      	b.n	8003316 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80032a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80032b0:	2101      	movs	r1, #1
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ff12 	bl	80030dc <VL53L0X_CheckAndLoadInterruptSettings>
 80032b8:	4603      	mov	r3, r0
 80032ba:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80032bc:	2202      	movs	r2, #2
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f003 fe5f 	bl	8006f84 <VL53L0X_WrByte>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80032ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d123      	bne.n	800331a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2204      	movs	r2, #4
 80032d6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 80032da:	e01e      	b.n	800331a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80032dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80032e4:	2101      	movs	r1, #1
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fef8 	bl	80030dc <VL53L0X_CheckAndLoadInterruptSettings>
 80032ec:	4603      	mov	r3, r0
 80032ee:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80032f0:	2204      	movs	r2, #4
 80032f2:	2100      	movs	r1, #0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f003 fe45 	bl	8006f84 <VL53L0X_WrByte>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80032fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2204      	movs	r2, #4
 800330a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800330e:	e006      	b.n	800331e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003310:	23f8      	movs	r3, #248	@ 0xf8
 8003312:	75fb      	strb	r3, [r7, #23]
 8003314:	e004      	b.n	8003320 <VL53L0X_StartMeasurement+0x178>
		break;
 8003316:	bf00      	nop
 8003318:	e002      	b.n	8003320 <VL53L0X_StartMeasurement+0x178>
		break;
 800331a:	bf00      	nop
 800331c:	e000      	b.n	8003320 <VL53L0X_StartMeasurement+0x178>
		break;
 800331e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8003340:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003342:	7bbb      	ldrb	r3, [r7, #14]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d112      	bne.n	800336e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003348:	f107 0308 	add.w	r3, r7, #8
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fb0e 	bl	8003970 <VL53L0X_GetInterruptMaskStatus>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d103      	bne.n	8003366 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e01c      	b.n	80033a0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e018      	b.n	80033a0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800336e:	f107 030d 	add.w	r3, r7, #13
 8003372:	461a      	mov	r2, r3
 8003374:	2114      	movs	r1, #20
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f003 feb8 	bl	80070ec <VL53L0X_RdByte>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003388:	7b7b      	ldrb	r3, [r7, #13]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e002      	b.n	80033a0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80033a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b096      	sub	sp, #88	@ 0x58
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80033bc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80033c0:	230c      	movs	r3, #12
 80033c2:	2114      	movs	r1, #20
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f003 fdb1 	bl	8006f2c <VL53L0X_ReadMulti>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80033d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 80c8 	bne.w	800356a <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80033e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80033f2:	4413      	add	r3, r2
 80033f4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80033fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	b29b      	uxth	r3, r3
 8003406:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800340a:	4413      	add	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	025b      	lsls	r3, r3, #9
 8003410:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003416:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003418:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	b29b      	uxth	r3, r3
 8003420:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003424:	4413      	add	r3, r2
 8003426:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800342a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800342e:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003434:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	b29b      	uxth	r3, r3
 800343c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003440:	4413      	add	r3, r2
 8003442:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800344c:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800344e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003452:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800345c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8003464:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8003468:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800346a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800346e:	d046      	beq.n	80034fe <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8003470:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003472:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800347e:	4a58      	ldr	r2, [pc, #352]	@ (80035e0 <VL53L0X_GetRangingMeasurementData+0x234>)
 8003480:	fb82 1203 	smull	r1, r2, r2, r3
 8003484:	1192      	asrs	r2, r2, #6
 8003486:	17db      	asrs	r3, r3, #31
 8003488:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800348a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7f1b      	ldrb	r3, [r3, #28]
 8003498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800349c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02c      	beq.n	80034fe <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80034a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	121a      	asrs	r2, r3, #8
					<= 0) {
 80034b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d10d      	bne.n	80034d2 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 80034b6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 80034be:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 80034c2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80034c6:	e016      	b.n	80034f6 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 80034c8:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 80034cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80034d0:	e011      	b.n	80034f6 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80034d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d8:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80034dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80034de:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80034e6:	121b      	asrs	r3, r3, #8
 80034e8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80034ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ec:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80034f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80034f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034fa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80034fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8003506:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800350a:	089b      	lsrs	r3, r3, #2
 800350c:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8003512:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003516:	b2db      	uxtb	r3, r3
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	75da      	strb	r2, [r3, #23]
 8003520:	e006      	b.n	8003530 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003528:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2200      	movs	r2, #0
 800352e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8003530:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8003534:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8003538:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800353c:	9301      	str	r3, [sp, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f003 f9de 	bl	8006908 <VL53L0X_get_pal_range_status>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003554:	4313      	orrs	r3, r2
 8003556:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800355a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8003562:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800356a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800356e:	2b00      	cmp	r3, #0
 8003570:	d12f      	bne.n	80035d2 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f107 040c 	add.w	r4, r7, #12
 8003578:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800357c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800357e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003584:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800358c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800359a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80035a0:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80035a6:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80035ac:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80035b2:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80035b8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 80035c2:	f107 050c 	add.w	r5, r7, #12
 80035c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035d2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3750      	adds	r7, #80	@ 0x50
 80035da:	46bd      	mov	sp, r7
 80035dc:	bdb0      	pop	{r4, r5, r7, pc}
 80035de:	bf00      	nop
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80035f2:	2100      	movs	r1, #0
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff f8a7 	bl	8002748 <VL53L0X_SetDeviceMode>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7ff fd1e 	bl	8003048 <VL53L0X_PerformSingleMeasurement>
 800360c:	4603      	mov	r3, r0
 800360e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d105      	bne.n	8003624 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff fec6 	bl	80033ac <VL53L0X_GetRangingMeasurementData>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8003624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d105      	bne.n	8003638 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f95e 	bl	80038f0 <VL53L0X_ClearInterruptMask>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8003638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	70fb      	strb	r3, [r7, #3]
 8003656:	460b      	mov	r3, r1
 8003658:	70bb      	strb	r3, [r7, #2]
 800365a:	4613      	mov	r3, r2
 800365c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8003668:	23f6      	movs	r3, #246	@ 0xf6
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e105      	b.n	800387a <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800366e:	78bb      	ldrb	r3, [r7, #2]
 8003670:	2b14      	cmp	r3, #20
 8003672:	d110      	bne.n	8003696 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003674:	7e3b      	ldrb	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800367a:	2310      	movs	r3, #16
 800367c:	73bb      	strb	r3, [r7, #14]
 800367e:	e001      	b.n	8003684 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8003680:	2301      	movs	r3, #1
 8003682:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	461a      	mov	r2, r3
 8003688:	2184      	movs	r1, #132	@ 0x84
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f003 fc7a 	bl	8006f84 <VL53L0X_WrByte>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]
 8003694:	e0f1      	b.n	800387a <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8003696:	78bb      	ldrb	r3, [r7, #2]
 8003698:	2b15      	cmp	r3, #21
 800369a:	f040 8097 	bne.w	80037cc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800369e:	2201      	movs	r2, #1
 80036a0:	21ff      	movs	r1, #255	@ 0xff
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f003 fc6e 	bl	8006f84 <VL53L0X_WrByte>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f003 fc64 	bl	8006f84 <VL53L0X_WrByte>
 80036bc:	4603      	mov	r3, r0
 80036be:	461a      	mov	r2, r3
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80036c6:	2200      	movs	r2, #0
 80036c8:	21ff      	movs	r1, #255	@ 0xff
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f003 fc5a 	bl	8006f84 <VL53L0X_WrByte>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80036da:	2201      	movs	r2, #1
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f003 fc50 	bl	8006f84 <VL53L0X_WrByte>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80036ee:	2202      	movs	r2, #2
 80036f0:	2185      	movs	r1, #133	@ 0x85
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f003 fc46 	bl	8006f84 <VL53L0X_WrByte>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	4313      	orrs	r3, r2
 8003700:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8003702:	2204      	movs	r2, #4
 8003704:	21ff      	movs	r1, #255	@ 0xff
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f003 fc3c 	bl	8006f84 <VL53L0X_WrByte>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	4313      	orrs	r3, r2
 8003714:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8003716:	2200      	movs	r2, #0
 8003718:	21cd      	movs	r1, #205	@ 0xcd
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f003 fc32 	bl	8006f84 <VL53L0X_WrByte>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	4313      	orrs	r3, r2
 8003728:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800372a:	2211      	movs	r2, #17
 800372c:	21cc      	movs	r1, #204	@ 0xcc
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f003 fc28 	bl	8006f84 <VL53L0X_WrByte>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	4313      	orrs	r3, r2
 800373c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800373e:	2207      	movs	r2, #7
 8003740:	21ff      	movs	r1, #255	@ 0xff
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f003 fc1e 	bl	8006f84 <VL53L0X_WrByte>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4313      	orrs	r3, r2
 8003750:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8003752:	2200      	movs	r2, #0
 8003754:	21be      	movs	r1, #190	@ 0xbe
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f003 fc14 	bl	8006f84 <VL53L0X_WrByte>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4313      	orrs	r3, r2
 8003764:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8003766:	2206      	movs	r2, #6
 8003768:	21ff      	movs	r1, #255	@ 0xff
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f003 fc0a 	bl	8006f84 <VL53L0X_WrByte>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	4313      	orrs	r3, r2
 8003778:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800377a:	2209      	movs	r2, #9
 800377c:	21cc      	movs	r1, #204	@ 0xcc
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f003 fc00 	bl	8006f84 <VL53L0X_WrByte>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	7bfb      	ldrb	r3, [r7, #15]
 800378a:	4313      	orrs	r3, r2
 800378c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800378e:	2200      	movs	r2, #0
 8003790:	21ff      	movs	r1, #255	@ 0xff
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f003 fbf6 	bl	8006f84 <VL53L0X_WrByte>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	4313      	orrs	r3, r2
 80037a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80037a2:	2201      	movs	r2, #1
 80037a4:	21ff      	movs	r1, #255	@ 0xff
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f003 fbec 	bl	8006f84 <VL53L0X_WrByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f003 fbe2 	bl	8006f84 <VL53L0X_WrByte>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e056      	b.n	800387a <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80037cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d120      	bne.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 80037d4:	787b      	ldrb	r3, [r7, #1]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d81b      	bhi.n	8003812 <VL53L0X_SetGpioConfig+0x1ce>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <VL53L0X_SetGpioConfig+0x19c>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f5 	.word	0x080037f5
 80037e4:	080037fb 	.word	0x080037fb
 80037e8:	08003801 	.word	0x08003801
 80037ec:	08003807 	.word	0x08003807
 80037f0:	0800380d 	.word	0x0800380d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73bb      	strb	r3, [r7, #14]
				break;
 80037f8:	e00d      	b.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73bb      	strb	r3, [r7, #14]
				break;
 80037fe:	e00a      	b.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8003800:	2302      	movs	r3, #2
 8003802:	73bb      	strb	r3, [r7, #14]
				break;
 8003804:	e007      	b.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8003806:	2303      	movs	r3, #3
 8003808:	73bb      	strb	r3, [r7, #14]
				break;
 800380a:	e004      	b.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800380c:	2304      	movs	r3, #4
 800380e:	73bb      	strb	r3, [r7, #14]
				break;
 8003810:	e001      	b.n	8003816 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8003812:	23f5      	movs	r3, #245	@ 0xf5
 8003814:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800381e:	7bbb      	ldrb	r3, [r7, #14]
 8003820:	461a      	mov	r2, r3
 8003822:	210a      	movs	r1, #10
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f003 fbad 	bl	8006f84 <VL53L0X_WrByte>
 800382a:	4603      	mov	r3, r0
 800382c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8003836:	7e3b      	ldrb	r3, [r7, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	73bb      	strb	r3, [r7, #14]
 8003840:	e001      	b.n	8003846 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8003842:	2310      	movs	r3, #16
 8003844:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8003846:	7bbb      	ldrb	r3, [r7, #14]
 8003848:	22ef      	movs	r2, #239	@ 0xef
 800384a:	2184      	movs	r1, #132	@ 0x84
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f003 fc19 	bl	8007084 <VL53L0X_UpdateByte>
 8003852:	4603      	mov	r3, r0
 8003854:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	787a      	ldrb	r2, [r7, #1]
 8003862:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800386e:	2100      	movs	r1, #0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f83d 	bl	80038f0 <VL53L0X_ClearInterruptMask>
 8003876:	4603      	mov	r3, r0
 8003878:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop

08003888 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	460b      	mov	r3, r1
 8003896:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	461a      	mov	r2, r3
 80038a2:	210e      	movs	r1, #14
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f003 fc4b 	bl	8007140 <VL53L0X_RdWord>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80038ae:	8abb      	ldrh	r3, [r7, #20]
 80038b0:	045a      	lsls	r2, r3, #17
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <VL53L0X_GetInterruptThresholds+0x64>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80038ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10e      	bne.n	80038e0 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	461a      	mov	r2, r3
 80038c8:	210c      	movs	r1, #12
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f003 fc38 	bl	8007140 <VL53L0X_RdWord>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80038d4:	8abb      	ldrh	r3, [r7, #20]
 80038d6:	045a      	lsls	r2, r3, #17
 80038d8:	4b04      	ldr	r3, [pc, #16]	@ (80038ec <VL53L0X_GetInterruptThresholds+0x64>)
 80038da:	4013      	ands	r3, r2
		*pThresholdHigh =
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80038e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	1ffe0000 	.word	0x1ffe0000

080038f0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8003902:	2201      	movs	r2, #1
 8003904:	210b      	movs	r1, #11
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f003 fb3c 	bl	8006f84 <VL53L0X_WrByte>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8003910:	2200      	movs	r2, #0
 8003912:	210b      	movs	r1, #11
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f003 fb35 	bl	8006f84 <VL53L0X_WrByte>
 800391a:	4603      	mov	r3, r0
 800391c:	461a      	mov	r2, r3
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	4313      	orrs	r3, r2
 8003922:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8003924:	f107 030d 	add.w	r3, r7, #13
 8003928:	461a      	mov	r2, r3
 800392a:	2113      	movs	r1, #19
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f003 fbdd 	bl	80070ec <VL53L0X_RdByte>
 8003932:	4603      	mov	r3, r0
 8003934:	461a      	mov	r2, r3
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	4313      	orrs	r3, r2
 800393a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800393c:	7bbb      	ldrb	r3, [r7, #14]
 800393e:	3301      	adds	r3, #1
 8003940:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8003942:	7b7b      	ldrb	r3, [r7, #13]
 8003944:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003948:	2b00      	cmp	r3, #0
 800394a:	d006      	beq.n	800395a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800394c:	7bbb      	ldrb	r3, [r7, #14]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d803      	bhi.n	800395a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8003952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0d3      	beq.n	8003902 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800395a:	7bbb      	ldrb	r3, [r7, #14]
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8003960:	23f4      	movs	r3, #244	@ 0xf4
 8003962:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003964:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800397e:	f107 030e 	add.w	r3, r7, #14
 8003982:	461a      	mov	r2, r3
 8003984:	2113      	movs	r1, #19
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f003 fbb0 	bl	80070ec <VL53L0X_RdByte>
 800398c:	4603      	mov	r3, r0
 800398e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	f003 0207 	and.w	r2, r3, #7
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800399a:	7bbb      	ldrb	r3, [r7, #14]
 800399c:	f003 0318 	and.w	r3, r3, #24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80039a4:	23fa      	movs	r3, #250	@ 0xfa
 80039a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80039a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fa03 	bl	8003dd4 <VL53L0X_perform_ref_spad_management>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80039d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80039ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80039f0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80039f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039f6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80039f8:	f107 0308 	add.w	r3, r7, #8
 80039fc:	461a      	mov	r2, r3
 80039fe:	2128      	movs	r1, #40	@ 0x28
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f003 fb9d 	bl	8007140 <VL53L0X_RdWord>
 8003a06:	4603      	mov	r3, r0
 8003a08:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d11e      	bne.n	8003a50 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	dd0b      	ble.n	8003a40 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8003a28:	893a      	ldrh	r2, [r7, #8]
 8003a2a:	897b      	ldrh	r3, [r7, #10]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	b21b      	sxth	r3, r3
 8003a32:	461a      	mov	r2, r3
					* 250;
 8003a34:	23fa      	movs	r3, #250	@ 0xfa
 8003a36:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	e007      	b.n	8003a50 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	b21b      	sxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	23fa      	movs	r3, #250	@ 0xfa
 8003a48:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8003a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b08b      	sub	sp, #44	@ 0x2c
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295
 8003a78:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	fb01 f202 	mul.w	r2, r1, r2
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a9a:	e030      	b.n	8003afe <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d11e      	bne.n	8003af0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8003ab2:	7ffa      	ldrb	r2, [r7, #31]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	fa42 f303 	asr.w	r3, r2, r3
 8003aba:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8003ac0:	e016      	b.n	8003af0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8003ac2:	7ffb      	ldrb	r3, [r7, #31]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <get_next_good_spad+0x88>
				success = 1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	fb03 f202 	mul.w	r2, r3, r2
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	4413      	add	r3, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	601a      	str	r2, [r3, #0]
				break;
 8003ae2:	e009      	b.n	8003af8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	3301      	adds	r3, #1
 8003aee:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3e4      	bcc.n	8003ac2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	3301      	adds	r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d202      	bcs.n	8003b0c <get_next_good_spad+0xb0>
 8003b06:	7fbb      	ldrb	r3, [r7, #30]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0c7      	beq.n	8003a9c <get_next_good_spad+0x40>
		}
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	372c      	adds	r7, #44	@ 0x2c
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8003b2a:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <is_aperture+0x30>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <is_aperture+0x22>
		isAperture = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	200002b0 	.word	0x200002b0

08003b4c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	@ 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003b5c:	2308      	movs	r3, #8
 8003b5e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b72:	69b9      	ldr	r1, [r7, #24]
 8003b74:	fb01 f202 	mul.w	r2, r1, r2
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003b84:	23ce      	movs	r3, #206	@ 0xce
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e010      	b.n	8003bac <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	b25a      	sxtb	r2, r3
 8003b94:	2101      	movs	r1, #1
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b259      	sxtb	r1, r3
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	b2ca      	uxtb	r2, r1
 8003baa:	701a      	strb	r2, [r3, #0]

	return status;
 8003bac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3724      	adds	r7, #36	@ 0x24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	21b0      	movs	r1, #176	@ 0xb0
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f003 f97d 	bl	8006ecc <VL53L0X_WriteMulti>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8003bec:	2306      	movs	r3, #6
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	21b0      	movs	r1, #176	@ 0xb0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f003 f99a 	bl	8006f2c <VL53L0X_ReadMulti>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8003bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	@ 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	460b      	mov	r3, r1
 8003c16:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8003c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c24:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003c26:	2300      	movs	r3, #0
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2a:	e02b      	b.n	8003c84 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	6a3a      	ldr	r2, [r7, #32]
 8003c32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff11 	bl	8003a5c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d103      	bne.n	8003c4a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003c42:	23ce      	movs	r3, #206	@ 0xce
 8003c44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8003c48:	e020      	b.n	8003c8c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c50:	4413      	add	r3, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff60 	bl	8003b18 <is_aperture>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	7afb      	ldrb	r3, [r7, #11]
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003c62:	23ce      	movs	r3, #206	@ 0xce
 8003c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8003c68:	e010      	b.n	8003c8c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8003c6e:	6a3a      	ldr	r2, [r7, #32]
 8003c70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c72:	6838      	ldr	r0, [r7, #0]
 8003c74:	f7ff ff6a 	bl	8003b4c <enable_spad_bit>
		currentSpad++;
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	3301      	adds	r3, #1
 8003c82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d3cf      	bcc.n	8003c2c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003c8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c8e:	6a3a      	ldr	r2, [r7, #32]
 8003c90:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8003c92:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff ff8d 	bl	8003bbc <set_ref_spad_map>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003ca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d121      	bne.n	8003cf4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8003cb0:	f107 0314 	add.w	r3, r7, #20
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff ff93 	bl	8003be2 <get_ref_spad_map>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003cc6:	e011      	b.n	8003cec <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	4413      	add	r3, r2
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	f107 0114 	add.w	r1, r7, #20
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	440b      	add	r3, r1
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d003      	beq.n	8003ce6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003cde:	23ce      	movs	r3, #206	@ 0xce
 8003ce0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8003ce4:	e006      	b.n	8003cf4 <enable_ref_spads+0xec>
			}
			i++;
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8003cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d3e9      	bcc.n	8003cc8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8003cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3730      	adds	r7, #48	@ 0x30
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003d1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8003d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8003d28:	22c0      	movs	r2, #192	@ 0xc0
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f003 f929 	bl	8006f84 <VL53L0X_WrByte>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8003d38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff fc4c 	bl	80035e4 <VL53L0X_PerformSingleRangingMeasurement>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8003d52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	21ff      	movs	r1, #255	@ 0xff
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f003 f910 	bl	8006f84 <VL53L0X_WrByte>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003d6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	21b6      	movs	r1, #182	@ 0xb6
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f003 f9e2 	bl	8007140 <VL53L0X_RdWord>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8003d82:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	21ff      	movs	r1, #255	@ 0xff
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f003 f8f8 	bl	8006f84 <VL53L0X_WrByte>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003d9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d112      	bne.n	8003dc8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003da2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003da6:	461a      	mov	r2, r3
 8003da8:	2101      	movs	r1, #1
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f003 f8ea 	bl	8006f84 <VL53L0X_WrByte>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003db6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003dc4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8003dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	@ 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b09d      	sub	sp, #116	@ 0x74
 8003dd8:	af06      	add	r7, sp, #24
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8003de6:	23b4      	movs	r3, #180	@ 0xb4
 8003de8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8003dec:	2303      	movs	r3, #3
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8003df0:	232c      	movs	r3, #44	@ 0x2c
 8003df2:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8003e00:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003e04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8003e0e:	2306      	movs	r3, #6
 8003e10:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8003e38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3e:	e009      	b.n	8003e54 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e50:	3301      	adds	r3, #1
 8003e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3f1      	bcc.n	8003e40 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	21ff      	movs	r1, #255	@ 0xff
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f003 f88f 	bl	8006f84 <VL53L0X_WrByte>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003e6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003e74:	2200      	movs	r2, #0
 8003e76:	214f      	movs	r1, #79	@ 0x4f
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f003 f883 	bl	8006f84 <VL53L0X_WrByte>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003e84:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003e8c:	222c      	movs	r2, #44	@ 0x2c
 8003e8e:	214e      	movs	r1, #78	@ 0x4e
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f003 f877 	bl	8006f84 <VL53L0X_WrByte>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003e9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d107      	bne.n	8003eb4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	21ff      	movs	r1, #255	@ 0xff
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f003 f86b 	bl	8006f84 <VL53L0X_WrByte>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003eb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003ebc:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	21b6      	movs	r1, #182	@ 0xb6
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f003 f85d 	bl	8006f84 <VL53L0X_WrByte>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8003ed0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d107      	bne.n	8003ee8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2180      	movs	r1, #128	@ 0x80
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f003 f851 	bl	8006f84 <VL53L0X_WrByte>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8003ee8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8003ef0:	f107 0210 	add.w	r2, r7, #16
 8003ef4:	f107 0111 	add.w	r1, r7, #17
 8003ef8:	2300      	movs	r3, #0
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fbbb 	bl	8004676 <VL53L0X_perform_ref_calibration>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8003f06:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d121      	bne.n	8003f52 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8003f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f14:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f1c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8003f2a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003f2e:	f107 0218 	add.w	r2, r7, #24
 8003f32:	9204      	str	r2, [sp, #16]
 8003f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f36:	9203      	str	r2, [sp, #12]
 8003f38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003f3a:	9202      	str	r2, [sp, #8]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	4623      	mov	r3, r4
 8003f44:	4602      	mov	r2, r0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fe5e 	bl	8003c08 <enable_ref_spads>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f52:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d174      	bne.n	8004044 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8003f5e:	f107 0312 	add.w	r3, r7, #18
 8003f62:	4619      	mov	r1, r3
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff fecb 	bl	8003d00 <perform_ref_signal_measurement>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003f70:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d161      	bne.n	800403c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003f78:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003f7a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d25d      	bcs.n	800403c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f84:	e009      	b.n	8003f9a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f96:	3301      	adds	r3, #1
 8003f98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3f1      	bcc.n	8003f86 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8003fa2:	e002      	b.n	8003faa <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003faa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8003fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fdb0 	bl	8003b18 <is_aperture>
 8003fb8:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <VL53L0X_perform_ref_spad_management+0x1f2>
 8003fbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3ee      	bcc.n	8003fa4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8003fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fcc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8003fda:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8003fde:	f107 0218 	add.w	r2, r7, #24
 8003fe2:	9204      	str	r2, [sp, #16]
 8003fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fe6:	9203      	str	r2, [sp, #12]
 8003fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003fea:	9202      	str	r2, [sp, #8]
 8003fec:	9301      	str	r3, [sp, #4]
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4623      	mov	r3, r4
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff fe06 	bl	8003c08 <enable_ref_spads>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004002:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11b      	bne.n	8004042 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800400e:	f107 0312 	add.w	r3, r7, #18
 8004012:	4619      	mov	r1, r3
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f7ff fe73 	bl	8003d00 <perform_ref_signal_measurement>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004020:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10c      	bne.n	8004042 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004028:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800402a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800402c:	429a      	cmp	r2, r3
 800402e:	d208      	bcs.n	8004042 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004030:	2301      	movs	r3, #1
 8004032:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8004036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004038:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800403a:	e002      	b.n	8004042 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004040:	e000      	b.n	8004044 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004042:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004044:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004048:	2b00      	cmp	r3, #0
 800404a:	f040 80af 	bne.w	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800404e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004050:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004052:	429a      	cmp	r2, r3
 8004054:	f240 80aa 	bls.w	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800405a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800406e:	4618      	mov	r0, r3
 8004070:	f007 fa59 	bl	800b526 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004074:	8a7b      	ldrh	r3, [r7, #18]
 8004076:	461a      	mov	r2, r3
 8004078:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bfb8      	it	lt
 8004080:	425b      	neglt	r3, r3
 8004082:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800408a:	e086      	b.n	800419a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800409a:	f7ff fcdf 	bl	8003a5c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d103      	bne.n	80040ae <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80040a6:	23ce      	movs	r3, #206	@ 0xce
 80040a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 80040ac:	e07e      	b.n	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80040ae:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4413      	add	r3, r2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fd2e 	bl	8003b18 <is_aperture>
 80040bc:	4603      	mov	r3, r0
 80040be:	461a      	mov	r2, r3
 80040c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 80040cc:	e06e      	b.n	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80040ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d0:	3301      	adds	r3, #1
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 80040de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80040e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fd32 	bl	8003b4c <enable_spad_bit>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80040ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10c      	bne.n	8004110 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80040f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f8:	3301      	adds	r3, #1
 80040fa:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 8004102:	4619      	mov	r1, r3
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff fd59 	bl	8003bbc <set_ref_spad_map>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004110:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004114:	2b00      	cmp	r3, #0
 8004116:	d146      	bne.n	80041a6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004118:	f107 0312 	add.w	r3, r7, #18
 800411c:	4619      	mov	r1, r3
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fdee 	bl	8003d00 <perform_ref_signal_measurement>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800412a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13b      	bne.n	80041aa <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004132:	8a7b      	ldrh	r3, [r7, #18]
 8004134:	461a      	mov	r2, r3
 8004136:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	bfb8      	it	lt
 800413e:	425b      	neglt	r3, r3
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004142:	8a7b      	ldrh	r3, [r7, #18]
 8004144:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004146:	429a      	cmp	r2, r3
 8004148:	d21c      	bcs.n	8004184 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414e:	429a      	cmp	r2, r3
 8004150:	d914      	bls.n	800417c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004152:	f107 031c 	add.w	r3, r7, #28
 8004156:	4619      	mov	r1, r3
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff fd2f 	bl	8003bbc <set_ref_spad_map>
 800415e:	4603      	mov	r3, r0
 8004160:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800416a:	f107 011c 	add.w	r1, r7, #28
 800416e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004170:	4618      	mov	r0, r3
 8004172:	f007 f9d8 	bl	800b526 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	3b01      	subs	r3, #1
 800417a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004182:	e00a      	b.n	800419a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800418e:	f107 031c 	add.w	r3, r7, #28
 8004192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004194:	4618      	mov	r0, r3
 8004196:	f007 f9c6 	bl	800b526 <memcpy>
		while (!complete) {
 800419a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f43f af74 	beq.w	800408c <VL53L0X_perform_ref_spad_management+0x2b8>
 80041a4:	e002      	b.n	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80041aa:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80041ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d115      	bne.n	80041e0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041b8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80041c0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	781a      	ldrb	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80041e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	375c      	adds	r7, #92	@ 0x5c
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd90      	pop	{r4, r7, pc}

080041ec <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b093      	sub	sp, #76	@ 0x4c
 80041f0:	af06      	add	r7, sp, #24
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	4613      	mov	r3, r2
 80041f8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 8004204:	23b4      	movs	r3, #180	@ 0xb4
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800420a:	2306      	movs	r3, #6
 800420c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800420e:	232c      	movs	r3, #44	@ 0x2c
 8004210:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004212:	2201      	movs	r2, #1
 8004214:	21ff      	movs	r1, #255	@ 0xff
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f002 feb4 	bl	8006f84 <VL53L0X_WrByte>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004222:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004226:	2b00      	cmp	r3, #0
 8004228:	d107      	bne.n	800423a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800422a:	2200      	movs	r2, #0
 800422c:	214f      	movs	r1, #79	@ 0x4f
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f002 fea8 	bl	8006f84 <VL53L0X_WrByte>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800423a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800423e:	2b00      	cmp	r3, #0
 8004240:	d107      	bne.n	8004252 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004242:	222c      	movs	r2, #44	@ 0x2c
 8004244:	214e      	movs	r1, #78	@ 0x4e
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f002 fe9c 	bl	8006f84 <VL53L0X_WrByte>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004252:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004256:	2b00      	cmp	r3, #0
 8004258:	d107      	bne.n	800426a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800425a:	2200      	movs	r2, #0
 800425c:	21ff      	movs	r1, #255	@ 0xff
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f002 fe90 	bl	8006f84 <VL53L0X_WrByte>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800426a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004272:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004276:	461a      	mov	r2, r3
 8004278:	21b6      	movs	r1, #182	@ 0xb6
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f002 fe82 	bl	8006f84 <VL53L0X_WrByte>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	e009      	b.n	80042a0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	4413      	add	r3, r2
 8004292:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	3301      	adds	r3, #1
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d3f1      	bcc.n	800428c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80042ae:	e002      	b.n	80042b6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	3301      	adds	r3, #1
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80042b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	4413      	add	r3, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fc2a 	bl	8003b18 <is_aperture>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d103      	bne.n	80042d2 <VL53L0X_set_reference_spads+0xe6>
 80042ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3ee      	bcc.n	80042b0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 80042de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042e2:	79f9      	ldrb	r1, [r7, #7]
 80042e4:	f107 0214 	add.w	r2, r7, #20
 80042e8:	9204      	str	r2, [sp, #16]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	9203      	str	r2, [sp, #12]
 80042ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f0:	9202      	str	r2, [sp, #8]
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4623      	mov	r3, r4
 80042fa:	4602      	mov	r2, r0
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f7ff fc83 	bl	8003c08 <enable_ref_spads>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004308:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10c      	bne.n	800432a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	79fa      	ldrb	r2, [r7, #7]
 8004326:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800432a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800432e:	4618      	mov	r0, r3
 8004330:	3734      	adds	r7, #52	@ 0x34
 8004332:	46bd      	mov	sp, r7
 8004334:	bd90      	pop	{r4, r7, pc}

08004336 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	2100      	movs	r1, #0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f002 fe12 	bl	8006f84 <VL53L0X_WrByte>
 8004360:	4603      	mov	r3, r0
 8004362:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d104      	bne.n	8004376 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f9bf 	bl	80046f0 <VL53L0X_measurement_poll_for_completion>
 8004372:	4603      	mov	r3, r0
 8004374:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800437e:	2100      	movs	r1, #0
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fab5 	bl	80038f0 <VL53L0X_ClearInterruptMask>
 8004386:	4603      	mov	r3, r0
 8004388:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800438a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004392:	2200      	movs	r2, #0
 8004394:	2100      	movs	r1, #0
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f002 fdf4 	bl	8006f84 <VL53L0X_WrByte>
 800439c:	4603      	mov	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]

	return Status;
 80043a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	461a      	mov	r2, r3
 80043ba:	4603      	mov	r3, r0
 80043bc:	70fb      	strb	r3, [r7, #3]
 80043be:	460b      	mov	r3, r1
 80043c0:	70bb      	strb	r3, [r7, #2]
 80043c2:	4613      	mov	r3, r2
 80043c4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80043ce:	2201      	movs	r2, #1
 80043d0:	21ff      	movs	r1, #255	@ 0xff
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f002 fdd6 	bl	8006f84 <VL53L0X_WrByte>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	4313      	orrs	r3, r2
 80043e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f002 fdcc 	bl	8006f84 <VL53L0X_WrByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80043f6:	2200      	movs	r2, #0
 80043f8:	21ff      	movs	r1, #255	@ 0xff
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f002 fdc2 	bl	8006f84 <VL53L0X_WrByte>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	4313      	orrs	r3, r2
 8004408:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01e      	beq.n	800444e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004410:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d009      	beq.n	800442c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	21cb      	movs	r1, #203	@ 0xcb
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f002 fe65 	bl	80070ec <VL53L0X_RdByte>
 8004422:	4603      	mov	r3, r0
 8004424:	461a      	mov	r2, r3
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	4313      	orrs	r3, r2
 800442a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800442c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02a      	beq.n	800448a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004434:	f107 030e 	add.w	r3, r7, #14
 8004438:	461a      	mov	r2, r3
 800443a:	21ee      	movs	r1, #238	@ 0xee
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f002 fe55 	bl	80070ec <VL53L0X_RdByte>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4313      	orrs	r3, r2
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e01d      	b.n	800448a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800444e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8004456:	78bb      	ldrb	r3, [r7, #2]
 8004458:	461a      	mov	r2, r3
 800445a:	21cb      	movs	r1, #203	@ 0xcb
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f002 fd91 	bl	8006f84 <VL53L0X_WrByte>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	4313      	orrs	r3, r2
 800446a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800446c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8004474:	787b      	ldrb	r3, [r7, #1]
 8004476:	2280      	movs	r2, #128	@ 0x80
 8004478:	21ee      	movs	r1, #238	@ 0xee
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f002 fe02 	bl	8007084 <VL53L0X_UpdateByte>
 8004480:	4603      	mov	r3, r0
 8004482:	461a      	mov	r2, r3
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	4313      	orrs	r3, r2
 8004488:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800448a:	2201      	movs	r2, #1
 800448c:	21ff      	movs	r1, #255	@ 0xff
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f002 fd78 	bl	8006f84 <VL53L0X_WrByte>
 8004494:	4603      	mov	r3, r0
 8004496:	461a      	mov	r2, r3
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	4313      	orrs	r3, r2
 800449c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800449e:	2201      	movs	r2, #1
 80044a0:	2100      	movs	r1, #0
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f002 fd6e 	bl	8006f84 <VL53L0X_WrByte>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	7bfb      	ldrb	r3, [r7, #15]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80044b2:	2200      	movs	r2, #0
 80044b4:	21ff      	movs	r1, #255	@ 0xff
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f002 fd64 	bl	8006f84 <VL53L0X_WrByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80044c6:	7bbb      	ldrb	r3, [r7, #14]
 80044c8:	f023 0310 	bic.w	r3, r3, #16
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	701a      	strb	r2, [r3, #0]

	return Status;
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08a      	sub	sp, #40	@ 0x28
 80044e2:	af04      	add	r7, sp, #16
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	4611      	mov	r1, r2
 80044ea:	461a      	mov	r2, r3
 80044ec:	460b      	mov	r3, r1
 80044ee:	71fb      	strb	r3, [r7, #7]
 80044f0:	4613      	mov	r3, r2
 80044f2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8004508:	79bb      	ldrb	r3, [r7, #6]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8004514:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8004516:	2201      	movs	r2, #1
 8004518:	2101      	movs	r1, #1
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f002 fd32 	bl	8006f84 <VL53L0X_WrByte>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8004524:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800452c:	2140      	movs	r1, #64	@ 0x40
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff ff01 	bl	8004336 <VL53L0X_perform_single_ref_calibration>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d115      	bne.n	800456c <VL53L0X_perform_vhv_calibration+0x8e>
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d112      	bne.n	800456c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004546:	7d39      	ldrb	r1, [r7, #20]
 8004548:	7d7a      	ldrb	r2, [r7, #21]
 800454a:	2300      	movs	r3, #0
 800454c:	9303      	str	r3, [sp, #12]
 800454e:	2301      	movs	r3, #1
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	f107 0313 	add.w	r3, r7, #19
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	460b      	mov	r3, r1
 800455e:	2101      	movs	r1, #1
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7ff ff23 	bl	80043ac <VL53L0X_ref_calibration_io>
 8004566:	4603      	mov	r3, r0
 8004568:	75fb      	strb	r3, [r7, #23]
 800456a:	e002      	b.n	8004572 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8004572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d112      	bne.n	80045a0 <VL53L0X_perform_vhv_calibration+0xc2>
 800457a:	79bb      	ldrb	r3, [r7, #6]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00f      	beq.n	80045a0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004580:	7dbb      	ldrb	r3, [r7, #22]
 8004582:	461a      	mov	r2, r3
 8004584:	2101      	movs	r1, #1
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f002 fcfc 	bl	8006f84 <VL53L0X_WrByte>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8004590:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	7dba      	ldrb	r2, [r7, #22]
 800459c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80045a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	@ 0x28
 80045b0:	af04      	add	r7, sp, #16
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	4611      	mov	r1, r2
 80045b8:	461a      	mov	r2, r3
 80045ba:	460b      	mov	r3, r1
 80045bc:	71fb      	strb	r3, [r7, #7]
 80045be:	4613      	mov	r3, r2
 80045c0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80045d2:	79bb      	ldrb	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 80045de:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80045e0:	2202      	movs	r2, #2
 80045e2:	2101      	movs	r1, #1
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f002 fccd 	bl	8006f84 <VL53L0X_WrByte>
 80045ea:	4603      	mov	r3, r0
 80045ec:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80045ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d105      	bne.n	8004602 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80045f6:	2100      	movs	r1, #0
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff fe9c 	bl	8004336 <VL53L0X_perform_single_ref_calibration>
 80045fe:	4603      	mov	r3, r0
 8004600:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8004602:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d115      	bne.n	8004636 <VL53L0X_perform_phase_calibration+0x8a>
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d112      	bne.n	8004636 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8004610:	7d39      	ldrb	r1, [r7, #20]
 8004612:	7d7a      	ldrb	r2, [r7, #21]
 8004614:	2301      	movs	r3, #1
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	2300      	movs	r3, #0
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	f107 0313 	add.w	r3, r7, #19
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	460b      	mov	r3, r1
 8004628:	2101      	movs	r1, #1
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7ff febe 	bl	80043ac <VL53L0X_ref_calibration_io>
 8004630:	4603      	mov	r3, r0
 8004632:	75fb      	strb	r3, [r7, #23]
 8004634:	e002      	b.n	800463c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800463c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d112      	bne.n	800466a <VL53L0X_perform_phase_calibration+0xbe>
 8004644:	79bb      	ldrb	r3, [r7, #6]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00f      	beq.n	800466a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800464a:	7dbb      	ldrb	r3, [r7, #22]
 800464c:	461a      	mov	r2, r3
 800464e:	2101      	movs	r1, #1
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f002 fc97 	bl	8006f84 <VL53L0X_WrByte>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800465a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d103      	bne.n	800466a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	7dba      	ldrb	r2, [r7, #22]
 8004666:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800466a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b086      	sub	sp, #24
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8004692:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	2300      	movs	r3, #0
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff ff1f 	bl	80044de <VL53L0X_perform_vhv_calibration>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80046a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff7a 	bl	80045ac <VL53L0X_perform_phase_calibration>
 80046b8:	4603      	mov	r3, r0
 80046ba:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80046bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10f      	bne.n	80046e4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80046c4:	7dbb      	ldrb	r3, [r7, #22]
 80046c6:	461a      	mov	r2, r3
 80046c8:	2101      	movs	r1, #1
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f002 fc5a 	bl	8006f84 <VL53L0X_WrByte>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80046d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	7dba      	ldrb	r2, [r7, #22]
 80046e0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80046e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8004704:	f107 030f 	add.w	r3, r7, #15
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe fe0e 	bl	800332c <VL53L0X_GetMeasurementDataReady>
 8004710:	4603      	mov	r3, r0
 8004712:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8004714:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d110      	bne.n	800473e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d00f      	beq.n	8004742 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3301      	adds	r3, #1
 8004726:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800472e:	d302      	bcc.n	8004736 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004730:	23f9      	movs	r3, #249	@ 0xf9
 8004732:	75fb      	strb	r3, [r7, #23]
			break;
 8004734:	e006      	b.n	8004744 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f002 fd74 	bl	8007224 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800473c:	e7e2      	b.n	8004704 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8004742:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8004744:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	3301      	adds	r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800478e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80047a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80047ac:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80047ae:	e002      	b.n	80047b6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d8f8      	bhi.n	80047b0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80047be:	e017      	b.n	80047f0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d30b      	bcc.n	80047e4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e002      	b.n	80047ea <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e4      	bne.n	80047c0 <VL53L0X_isqrt+0x24>
	}

	return res;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8004810:	2200      	movs	r2, #0
 8004812:	2183      	movs	r1, #131	@ 0x83
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f002 fbb5 	bl	8006f84 <VL53L0X_WrByte>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	4313      	orrs	r3, r2
 8004822:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8004824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11e      	bne.n	800486a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8004830:	f107 030f 	add.w	r3, r7, #15
 8004834:	461a      	mov	r2, r3
 8004836:	2183      	movs	r1, #131	@ 0x83
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f002 fc57 	bl	80070ec <VL53L0X_RdByte>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <VL53L0X_device_read_strobe+0x5a>
 8004848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	3301      	adds	r3, #1
 8004854:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800485c:	d3e8      	bcc.n	8004830 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004864:	d301      	bcc.n	800486a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8004866:	23f9      	movs	r3, #249	@ 0xf9
 8004868:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800486a:	2201      	movs	r2, #1
 800486c:	2183      	movs	r1, #131	@ 0x83
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f002 fb88 	bl	8006f84 <VL53L0X_WrByte>
 8004874:	4603      	mov	r3, r0
 8004876:	461a      	mov	r2, r3
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	4313      	orrs	r3, r2
 800487c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800487e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b098      	sub	sp, #96	@ 0x60
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80048ba:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80048be:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80048d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80048d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048da:	2b07      	cmp	r3, #7
 80048dc:	f000 8408 	beq.w	80050f0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80048e0:	2201      	movs	r2, #1
 80048e2:	2180      	movs	r1, #128	@ 0x80
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f002 fb4d 	bl	8006f84 <VL53L0X_WrByte>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80048f8:	2201      	movs	r2, #1
 80048fa:	21ff      	movs	r1, #255	@ 0xff
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f002 fb41 	bl	8006f84 <VL53L0X_WrByte>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800490a:	4313      	orrs	r3, r2
 800490c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004910:	2200      	movs	r2, #0
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f002 fb35 	bl	8006f84 <VL53L0X_WrByte>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004922:	4313      	orrs	r3, r2
 8004924:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8004928:	2206      	movs	r2, #6
 800492a:	21ff      	movs	r1, #255	@ 0xff
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f002 fb29 	bl	8006f84 <VL53L0X_WrByte>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800493a:	4313      	orrs	r3, r2
 800493c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8004940:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8004944:	461a      	mov	r2, r3
 8004946:	2183      	movs	r1, #131	@ 0x83
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f002 fbcf 	bl	80070ec <VL53L0X_RdByte>
 800494e:	4603      	mov	r3, r0
 8004950:	461a      	mov	r2, r3
 8004952:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004956:	4313      	orrs	r3, r2
 8004958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800495c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004960:	f043 0304 	orr.w	r3, r3, #4
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	2183      	movs	r1, #131	@ 0x83
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 fb0a 	bl	8006f84 <VL53L0X_WrByte>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004978:	4313      	orrs	r3, r2
 800497a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800497e:	2207      	movs	r2, #7
 8004980:	21ff      	movs	r1, #255	@ 0xff
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f002 fafe 	bl	8006f84 <VL53L0X_WrByte>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004990:	4313      	orrs	r3, r2
 8004992:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8004996:	2201      	movs	r2, #1
 8004998:	2181      	movs	r1, #129	@ 0x81
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f002 faf2 	bl	8006f84 <VL53L0X_WrByte>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f002 fc38 	bl	8007224 <VL53L0X_PollingDelay>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049bc:	4313      	orrs	r3, r2
 80049be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80049c2:	2201      	movs	r2, #1
 80049c4:	2180      	movs	r1, #128	@ 0x80
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f002 fadc 	bl	8006f84 <VL53L0X_WrByte>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461a      	mov	r2, r3
 80049d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8098 	beq.w	8004b16 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80049e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049ea:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 8091 	bne.w	8004b16 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80049f4:	226b      	movs	r2, #107	@ 0x6b
 80049f6:	2194      	movs	r1, #148	@ 0x94
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f002 fac3 	bl	8006f84 <VL53L0X_WrByte>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461a      	mov	r2, r3
 8004a02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff fef9 	bl	8004804 <VL53L0X_device_read_strobe>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a20:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a24:	461a      	mov	r2, r3
 8004a26:	2190      	movs	r1, #144	@ 0x90
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f002 fbbf 	bl	80071ac <VL53L0X_RdDWord>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a46:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4c:	0bdb      	lsrs	r3, r3, #15
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004a58:	2224      	movs	r2, #36	@ 0x24
 8004a5a:	2194      	movs	r1, #148	@ 0x94
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f002 fa91 	bl	8006f84 <VL53L0X_WrByte>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461a      	mov	r2, r3
 8004a66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fec7 	bl	8004804 <VL53L0X_device_read_strobe>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004a84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2190      	movs	r1, #144	@ 0x90
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f002 fb8d 	bl	80071ac <VL53L0X_RdDWord>
 8004a92:	4603      	mov	r3, r0
 8004a94:	461a      	mov	r2, r3
 8004a96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	0e1b      	lsrs	r3, r3, #24
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8004abe:	2225      	movs	r2, #37	@ 0x25
 8004ac0:	2194      	movs	r1, #148	@ 0x94
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f002 fa5e 	bl	8006f84 <VL53L0X_WrByte>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	461a      	mov	r2, r3
 8004acc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe94 	bl	8004804 <VL53L0X_device_read_strobe>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004aea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004aee:	461a      	mov	r2, r3
 8004af0:	2190      	movs	r1, #144	@ 0x90
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f002 fb5a 	bl	80071ac <VL53L0X_RdDWord>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8004b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8189 	beq.w	8004e34 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8004b22:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004b26:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8182 	bne.w	8004e34 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8004b30:	2202      	movs	r2, #2
 8004b32:	2194      	movs	r1, #148	@ 0x94
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f002 fa25 	bl	8006f84 <VL53L0X_WrByte>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fe5b 	bl	8004804 <VL53L0X_device_read_strobe>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004b5c:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8004b60:	461a      	mov	r2, r3
 8004b62:	2190      	movs	r1, #144	@ 0x90
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f002 fac1 	bl	80070ec <VL53L0X_RdByte>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004b78:	227b      	movs	r2, #123	@ 0x7b
 8004b7a:	2194      	movs	r1, #148	@ 0x94
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f002 fa01 	bl	8006f84 <VL53L0X_WrByte>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fe37 	bl	8004804 <VL53L0X_device_read_strobe>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004ba4:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2190      	movs	r1, #144	@ 0x90
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f002 fa9d 	bl	80070ec <VL53L0X_RdByte>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8004bc0:	2277      	movs	r2, #119	@ 0x77
 8004bc2:	2194      	movs	r1, #148	@ 0x94
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f002 f9dd 	bl	8006f84 <VL53L0X_WrByte>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff fe13 	bl	8004804 <VL53L0X_device_read_strobe>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004bec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	2190      	movs	r1, #144	@ 0x90
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f002 fad9 	bl	80071ac <VL53L0X_RdDWord>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8004c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0a:	0e5b      	lsrs	r3, r3, #25
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	0c9b      	lsrs	r3, r3, #18
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	0adb      	lsrs	r3, r3, #11
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8004c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8004c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8004c52:	2278      	movs	r2, #120	@ 0x78
 8004c54:	2194      	movs	r1, #148	@ 0x94
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f002 f994 	bl	8006f84 <VL53L0X_WrByte>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fdca 	bl	8004804 <VL53L0X_device_read_strobe>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461a      	mov	r2, r3
 8004c74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004c7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c82:	461a      	mov	r2, r3
 8004c84:	2190      	movs	r1, #144	@ 0x90
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f002 fa90 	bl	80071ac <VL53L0X_RdDWord>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9c:	0f5b      	lsrs	r3, r3, #29
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004caa:	4413      	add	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	0d9b      	lsrs	r3, r3, #22
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	0bdb      	lsrs	r3, r3, #15
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	0a1b      	lsrs	r3, r3, #8
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8004cfa:	2279      	movs	r2, #121	@ 0x79
 8004cfc:	2194      	movs	r1, #148	@ 0x94
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f002 f940 	bl	8006f84 <VL53L0X_WrByte>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff fd76 	bl	8004804 <VL53L0X_device_read_strobe>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d20:	4313      	orrs	r3, r2
 8004d22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004d26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2190      	movs	r1, #144	@ 0x90
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f002 fa3c 	bl	80071ac <VL53L0X_RdDWord>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8004d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d44:	0e9b      	lsrs	r3, r3, #26
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d4c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8004d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004d52:	4413      	add	r3, r2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	0cdb      	lsrs	r3, r3, #19
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	0b1b      	lsrs	r3, r3, #12
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8004d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004d94:	227a      	movs	r2, #122	@ 0x7a
 8004d96:	2194      	movs	r1, #148	@ 0x94
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f002 f8f3 	bl	8006f84 <VL53L0X_WrByte>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fd29 	bl	8004804 <VL53L0X_device_read_strobe>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004dc0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2190      	movs	r1, #144	@ 0x90
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f002 f9ef 	bl	80071ac <VL53L0X_RdDWord>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	0f9b      	lsrs	r3, r3, #30
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8004de8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004dec:	4413      	add	r3, r2
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8004df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df4:	0ddb      	lsrs	r3, r3, #23
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8004e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80f1 	beq.w	8005022 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8004e40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e44:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 80ea 	bne.w	8005022 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004e4e:	227b      	movs	r2, #123	@ 0x7b
 8004e50:	2194      	movs	r1, #148	@ 0x94
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f002 f896 	bl	8006f84 <VL53L0X_WrByte>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fccc 	bl	8004804 <VL53L0X_device_read_strobe>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004e7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2190      	movs	r1, #144	@ 0x90
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f002 f992 	bl	80071ac <VL53L0X_RdDWord>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004e96:	227c      	movs	r2, #124	@ 0x7c
 8004e98:	2194      	movs	r1, #148	@ 0x94
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f002 f872 	bl	8006f84 <VL53L0X_WrByte>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fca8 	bl	8004804 <VL53L0X_device_read_strobe>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8004ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2190      	movs	r1, #144	@ 0x90
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f002 f96e 	bl	80071ac <VL53L0X_RdDWord>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8004ede:	2273      	movs	r2, #115	@ 0x73
 8004ee0:	2194      	movs	r1, #148	@ 0x94
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f002 f84e 	bl	8006f84 <VL53L0X_WrByte>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fc84 	bl	8004804 <VL53L0X_device_read_strobe>
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004f0a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f0e:	461a      	mov	r2, r3
 8004f10:	2190      	movs	r1, #144	@ 0x90
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f002 f94a 	bl	80071ac <VL53L0X_RdDWord>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8004f2e:	2274      	movs	r2, #116	@ 0x74
 8004f30:	2194      	movs	r1, #148	@ 0x94
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f002 f826 	bl	8006f84 <VL53L0X_WrByte>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fc5c 	bl	8004804 <VL53L0X_device_read_strobe>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004f5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004f5e:	461a      	mov	r2, r3
 8004f60:	2190      	movs	r1, #144	@ 0x90
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f002 f922 	bl	80071ac <VL53L0X_RdDWord>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004f7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8004f80:	2275      	movs	r2, #117	@ 0x75
 8004f82:	2194      	movs	r1, #148	@ 0x94
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 fffd 	bl	8006f84 <VL53L0X_WrByte>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fc33 	bl	8004804 <VL53L0X_device_read_strobe>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004fac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	2190      	movs	r1, #144	@ 0x90
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f002 f8f9 	bl	80071ac <VL53L0X_RdDWord>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8004fd0:	2276      	movs	r2, #118	@ 0x76
 8004fd2:	2194      	movs	r1, #148	@ 0x94
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f001 ffd5 	bl	8006f84 <VL53L0X_WrByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fc0b 	bl	8004804 <VL53L0X_device_read_strobe>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004ffc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005000:	461a      	mov	r2, r3
 8005002:	2190      	movs	r1, #144	@ 0x90
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f002 f8d1 	bl	80071ac <VL53L0X_RdDWord>
 800500a:	4603      	mov	r3, r0
 800500c:	461a      	mov	r2, r3
 800500e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005012:	4313      	orrs	r3, r2
 8005014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800501c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800501e:	4313      	orrs	r3, r2
 8005020:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005022:	2200      	movs	r2, #0
 8005024:	2181      	movs	r1, #129	@ 0x81
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 ffac 	bl	8006f84 <VL53L0X_WrByte>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005034:	4313      	orrs	r3, r2
 8005036:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800503a:	2206      	movs	r2, #6
 800503c:	21ff      	movs	r1, #255	@ 0xff
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 ffa0 	bl	8006f84 <VL53L0X_WrByte>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800504c:	4313      	orrs	r3, r2
 800504e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005052:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8005056:	461a      	mov	r2, r3
 8005058:	2183      	movs	r1, #131	@ 0x83
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f002 f846 	bl	80070ec <VL53L0X_RdByte>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005068:	4313      	orrs	r3, r2
 800506a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800506e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005072:	f023 0304 	bic.w	r3, r3, #4
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	2183      	movs	r1, #131	@ 0x83
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 ff81 	bl	8006f84 <VL53L0X_WrByte>
 8005082:	4603      	mov	r3, r0
 8005084:	461a      	mov	r2, r3
 8005086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800508a:	4313      	orrs	r3, r2
 800508c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005090:	2201      	movs	r2, #1
 8005092:	21ff      	movs	r1, #255	@ 0xff
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f001 ff75 	bl	8006f84 <VL53L0X_WrByte>
 800509a:	4603      	mov	r3, r0
 800509c:	461a      	mov	r2, r3
 800509e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80050a8:	2201      	movs	r2, #1
 80050aa:	2100      	movs	r1, #0
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 ff69 	bl	8006f84 <VL53L0X_WrByte>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80050c0:	2200      	movs	r2, #0
 80050c2:	21ff      	movs	r1, #255	@ 0xff
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f001 ff5d 	bl	8006f84 <VL53L0X_WrByte>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461a      	mov	r2, r3
 80050ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80050d8:	2200      	movs	r2, #0
 80050da:	2180      	movs	r1, #128	@ 0x80
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 ff51 	bl	8006f84 <VL53L0X_WrByte>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80050f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 808f 	bne.w	8005218 <VL53L0X_get_info_from_device+0x98e>
 80050fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80050fe:	2b07      	cmp	r3, #7
 8005100:	f000 808a 	beq.w	8005218 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800510e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005112:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005116:	2b00      	cmp	r3, #0
 8005118:	d11e      	bne.n	8005158 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 8005120:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800512a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800512e:	2300      	movs	r3, #0
 8005130:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005132:	e00e      	b.n	8005152 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005134:	f107 0208 	add.w	r2, r7, #8
 8005138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513a:	4413      	add	r3, r2
 800513c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005142:	4413      	add	r3, r2
 8005144:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8005148:	460a      	mov	r2, r1
 800514a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800514c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514e:	3301      	adds	r3, #1
 8005150:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005154:	2b05      	cmp	r3, #5
 8005156:	dded      	ble.n	8005134 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d018      	beq.n	8005194 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005162:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005166:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800516e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005178:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	33f3      	adds	r3, #243	@ 0xf3
 8005186:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005188:	f107 0310 	add.w	r3, r7, #16
 800518c:	4619      	mov	r1, r3
 800518e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005190:	f006 f9c1 	bl	800b516 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d030      	beq.n	8005200 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800519e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80051a2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d12a      	bne.n	8005200 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80051ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051bc:	025b      	lsls	r3, r3, #9
 80051be:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80051ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d011      	beq.n	80051f8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80051d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80051d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80051dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80051e8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 80051ec:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80051f0:	425b      	negs	r3, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 80051f8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005200:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	4313      	orrs	r3, r2
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800520e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005218:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800521c:	4618      	mov	r0, r3
 800521e:	3760      	adds	r7, #96	@ 0x60
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	460b      	mov	r3, r1
 800522e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005230:	f240 6277 	movw	r2, #1655	@ 0x677
 8005234:	f04f 0300 	mov.w	r3, #0
 8005238:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800523c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8005240:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005252:	68bb      	ldr	r3, [r7, #8]
}
 8005254:	4618      	mov	r0, r3
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d015      	beq.n	80052a6 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3b01      	subs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005280:	e005      	b.n	800528e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	3301      	adds	r3, #1
 800528c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2bff      	cmp	r3, #255	@ 0xff
 8005292:	d8f6      	bhi.n	8005282 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005294:	89fb      	ldrh	r3, [r7, #14]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	b29b      	uxth	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80052a2:	4413      	add	r3, r2
 80052a4:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80052a6:	8afb      	ldrh	r3, [r7, #22]

}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	0a12      	lsrs	r2, r2, #8
 80052ca:	b292      	uxth	r2, r2
 80052cc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	4619      	mov	r1, r3
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff ff94 	bl	8005224 <VL53L0X_calc_macro_period_ps>
 80052fc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005304:	4a0a      	ldr	r2, [pc, #40]	@ (8005330 <VL53L0X_calc_timeout_mclks+0x50>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005314:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	441a      	add	r2, r3
	timeout_period_mclks =
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8005326:	69fb      	ldr	r3, [r7, #28]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	10624dd3 	.word	0x10624dd3

08005334 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	460b      	mov	r3, r1
 800533e:	807b      	strh	r3, [r7, #2]
 8005340:	4613      	mov	r3, r2
 8005342:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005348:	787b      	ldrb	r3, [r7, #1]
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff69 	bl	8005224 <VL53L0X_calc_macro_period_ps>
 8005352:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <VL53L0X_calc_timeout_us+0x50>)
 800535c:	fba2 2303 	umull	r2, r3, r2, r3
 8005360:	099b      	lsrs	r3, r3, #6
 8005362:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005364:	887b      	ldrh	r3, [r7, #2]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	fb02 f303 	mul.w	r3, r2, r3
 800536c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 8005370:	4a04      	ldr	r2, [pc, #16]	@ (8005384 <VL53L0X_calc_timeout_us+0x50>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800537a:	697b      	ldr	r3, [r7, #20]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	10624dd3 	.word	0x10624dd3

08005388 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	@ 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	460b      	mov	r3, r1
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80053ae:	7afb      	ldrb	r3, [r7, #11]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <get_sequence_step_timeout+0x38>
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d002      	beq.n	80053c0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80053ba:	7afb      	ldrb	r3, [r7, #11]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d127      	bne.n	8005410 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80053c0:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80053c4:	461a      	mov	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7fd fa59 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80053d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80053dc:	f107 0320 	add.w	r3, r7, #32
 80053e0:	461a      	mov	r2, r3
 80053e2:	2146      	movs	r1, #70	@ 0x46
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f001 fe81 	bl	80070ec <VL53L0X_RdByte>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80053f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff5d 	bl	80052b4 <VL53L0X_decode_timeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80053fe:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005402:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005404:	4619      	mov	r1, r3
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff ff94 	bl	8005334 <VL53L0X_calc_timeout_us>
 800540c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800540e:	e092      	b.n	8005536 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d135      	bne.n	8005482 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005416:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800541a:	461a      	mov	r2, r3
 800541c:	2100      	movs	r1, #0
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7fd fa2e 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005424:	4603      	mov	r3, r0
 8005426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800542a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 8081 	bne.w	8005536 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005434:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8005438:	461a      	mov	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7fd fa1f 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8005448:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 8005450:	f107 031e 	add.w	r3, r7, #30
 8005454:	461a      	mov	r2, r3
 8005456:	2151      	movs	r1, #81	@ 0x51
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 fe71 	bl	8007140 <VL53L0X_RdWord>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005464:	8bfb      	ldrh	r3, [r7, #30]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ff24 	bl	80052b4 <VL53L0X_decode_timeout>
 800546c:	4603      	mov	r3, r0
 800546e:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005470:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8005474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005476:	4619      	mov	r1, r3
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f7ff ff5b 	bl	8005334 <VL53L0X_calc_timeout_us>
 800547e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8005480:	e059      	b.n	8005536 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d156      	bne.n	8005536 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f7fd fb00 	bl	8002a94 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01d      	beq.n	80054da <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800549e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80054a2:	461a      	mov	r2, r3
 80054a4:	2100      	movs	r1, #0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fd f9ea 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80054b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10f      	bne.n	80054da <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 80054ba:	f107 031e 	add.w	r3, r7, #30
 80054be:	461a      	mov	r2, r3
 80054c0:	2151      	movs	r1, #81	@ 0x51
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f001 fe3c 	bl	8007140 <VL53L0X_RdWord>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80054ce:	8bfb      	ldrh	r3, [r7, #30]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff feef 	bl	80052b4 <VL53L0X_decode_timeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80054da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80054e2:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80054e6:	461a      	mov	r2, r3
 80054e8:	2101      	movs	r1, #1
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7fd f9c8 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80054f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	461a      	mov	r2, r3
 8005504:	2171      	movs	r1, #113	@ 0x71
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f001 fe1a 	bl	8007140 <VL53L0X_RdWord>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8005512:	8bbb      	ldrh	r3, [r7, #28]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fecd 	bl	80052b4 <VL53L0X_decode_timeout>
 800551a:	4603      	mov	r3, r0
 800551c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800551e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005520:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005526:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800552a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800552c:	4619      	mov	r1, r3
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff ff00 	bl	8005334 <VL53L0X_calc_timeout_us>
 8005534:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800553a:	601a      	str	r2, [r3, #0]

	return Status;
 800553c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005540:	4618      	mov	r0, r3
 8005542:	3730      	adds	r7, #48	@ 0x30
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	@ 0x28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	460b      	mov	r3, r1
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005556:	2300      	movs	r3, #0
 8005558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800555c:	7afb      	ldrb	r3, [r7, #11]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <set_sequence_step_timeout+0x26>
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d002      	beq.n	800556e <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d138      	bne.n	80055e0 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800556e:	f107 031b 	add.w	r3, r7, #27
 8005572:	461a      	mov	r2, r3
 8005574:	2100      	movs	r1, #0
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7fd f982 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8005582:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005586:	2b00      	cmp	r3, #0
 8005588:	d11a      	bne.n	80055c0 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800558a:	7efb      	ldrb	r3, [r7, #27]
 800558c:	461a      	mov	r2, r3
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fea5 	bl	80052e0 <VL53L0X_calc_timeout_mclks>
 8005596:	4603      	mov	r3, r0
 8005598:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800559a:	8bbb      	ldrh	r3, [r7, #28]
 800559c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a0:	d903      	bls.n	80055aa <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80055a2:	23ff      	movs	r3, #255	@ 0xff
 80055a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80055a8:	e004      	b.n	80055b4 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80055aa:	8bbb      	ldrh	r3, [r7, #28]
 80055ac:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80055ae:	3b01      	subs	r3, #1
 80055b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80055b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80055c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 80ab 	bne.w	8005720 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80055ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055ce:	461a      	mov	r2, r3
 80055d0:	2146      	movs	r1, #70	@ 0x46
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f001 fcd6 	bl	8006f84 <VL53L0X_WrByte>
 80055d8:	4603      	mov	r3, r0
 80055da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80055de:	e09f      	b.n	8005720 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80055e0:	7afb      	ldrb	r3, [r7, #11]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d135      	bne.n	8005652 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80055e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11b      	bne.n	8005626 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80055ee:	f107 031b 	add.w	r3, r7, #27
 80055f2:	461a      	mov	r2, r3
 80055f4:	2100      	movs	r1, #0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7fd f942 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8005602:	7efb      	ldrb	r3, [r7, #27]
 8005604:	461a      	mov	r2, r3
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff fe69 	bl	80052e0 <VL53L0X_calc_timeout_mclks>
 800560e:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8005610:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8005612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fe23 	bl	8005260 <VL53L0X_encode_timeout>
 800561a:	4603      	mov	r3, r0
 800561c:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800561e:	8b3a      	ldrh	r2, [r7, #24]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005626:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800562e:	8b3b      	ldrh	r3, [r7, #24]
 8005630:	461a      	mov	r2, r3
 8005632:	2151      	movs	r1, #81	@ 0x51
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f001 fcc9 	bl	8006fcc <VL53L0X_WrWord>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8005640:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005644:	2b00      	cmp	r3, #0
 8005646:	d16b      	bne.n	8005720 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 8005650:	e066      	b.n	8005720 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	2b04      	cmp	r3, #4
 8005656:	d160      	bne.n	800571a <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8005658:	f107 0310 	add.w	r3, r7, #16
 800565c:	4619      	mov	r1, r3
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f7fd fa18 	bl	8002a94 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d01d      	beq.n	80056aa <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800566e:	f107 031b 	add.w	r3, r7, #27
 8005672:	461a      	mov	r2, r3
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7fd f902 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8005682:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10f      	bne.n	80056aa <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800568a:	f107 0318 	add.w	r3, r7, #24
 800568e:	461a      	mov	r2, r3
 8005690:	2151      	movs	r1, #81	@ 0x51
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 fd54 	bl	8007140 <VL53L0X_RdWord>
 8005698:	4603      	mov	r3, r0
 800569a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800569e:	8b3b      	ldrh	r3, [r7, #24]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fe07 	bl	80052b4 <VL53L0X_decode_timeout>
 80056a6:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80056a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80056aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80056b2:	f107 031b 	add.w	r3, r7, #27
 80056b6:	461a      	mov	r2, r3
 80056b8:	2101      	movs	r1, #1
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7fd f8e0 	bl	8002880 <VL53L0X_GetVcselPulsePeriod>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80056c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d128      	bne.n	8005720 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80056ce:	7efb      	ldrb	r3, [r7, #27]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff fe03 	bl	80052e0 <VL53L0X_calc_timeout_mclks>
 80056da:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80056dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80056de:	6a3a      	ldr	r2, [r7, #32]
 80056e0:	4413      	add	r3, r2
 80056e2:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80056e4:	6a38      	ldr	r0, [r7, #32]
 80056e6:	f7ff fdbb 	bl	8005260 <VL53L0X_encode_timeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80056ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d108      	bne.n	8005708 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80056f6:	8bfb      	ldrh	r3, [r7, #30]
 80056f8:	461a      	mov	r2, r3
 80056fa:	2171      	movs	r1, #113	@ 0x71
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f001 fc65 	bl	8006fcc <VL53L0X_WrWord>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8005708:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800570c:	2b00      	cmp	r3, #0
 800570e:	d107      	bne.n	8005720 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8005718:	e002      	b.n	8005720 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800571a:	23fc      	movs	r3, #252	@ 0xfc
 800571c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 8005720:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005724:	4618      	mov	r0, r3
 8005726:	3728      	adds	r7, #40	@ 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	@ 0x28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
 8005738:	4613      	mov	r3, r2
 800573a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800573c:	2300      	movs	r3, #0
 800573e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8005742:	230c      	movs	r3, #12
 8005744:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8005748:	2312      	movs	r3, #18
 800574a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800574e:	2308      	movs	r3, #8
 8005750:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8005754:	230e      	movs	r3, #14
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800575e:	78bb      	ldrb	r3, [r7, #2]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800576a:	23fc      	movs	r3, #252	@ 0xfc
 800576c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005770:	e020      	b.n	80057b4 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <VL53L0X_set_vcsel_pulse_period+0x68>
 8005778:	78ba      	ldrb	r2, [r7, #2]
 800577a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800577e:	429a      	cmp	r2, r3
 8005780:	d304      	bcc.n	800578c <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8005782:	78ba      	ldrb	r2, [r7, #2]
 8005784:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005788:	429a      	cmp	r2, r3
 800578a:	d903      	bls.n	8005794 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800578c:	23fc      	movs	r3, #252	@ 0xfc
 800578e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005792:	e00f      	b.n	80057b4 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d10c      	bne.n	80057b4 <VL53L0X_set_vcsel_pulse_period+0x88>
 800579a:	78ba      	ldrb	r2, [r7, #2]
 800579c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d304      	bcc.n	80057ae <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80057a4:	78ba      	ldrb	r2, [r7, #2]
 80057a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d902      	bls.n	80057b4 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057ae:	23fc      	movs	r3, #252	@ 0xfc
 80057b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80057b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80057bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80057c0:	e237      	b.n	8005c32 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d150      	bne.n	800586a <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80057c8:	78bb      	ldrb	r3, [r7, #2]
 80057ca:	2b0c      	cmp	r3, #12
 80057cc:	d110      	bne.n	80057f0 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 80057ce:	2218      	movs	r2, #24
 80057d0:	2157      	movs	r1, #87	@ 0x57
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 fbd6 	bl	8006f84 <VL53L0X_WrByte>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80057de:	2208      	movs	r2, #8
 80057e0:	2156      	movs	r1, #86	@ 0x56
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fbce 	bl	8006f84 <VL53L0X_WrByte>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80057ee:	e17f      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80057f0:	78bb      	ldrb	r3, [r7, #2]
 80057f2:	2b0e      	cmp	r3, #14
 80057f4:	d110      	bne.n	8005818 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80057f6:	2230      	movs	r2, #48	@ 0x30
 80057f8:	2157      	movs	r1, #87	@ 0x57
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fbc2 	bl	8006f84 <VL53L0X_WrByte>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8005806:	2208      	movs	r2, #8
 8005808:	2156      	movs	r1, #86	@ 0x56
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 fbba 	bl	8006f84 <VL53L0X_WrByte>
 8005810:	4603      	mov	r3, r0
 8005812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005816:	e16b      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8005818:	78bb      	ldrb	r3, [r7, #2]
 800581a:	2b10      	cmp	r3, #16
 800581c:	d110      	bne.n	8005840 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	2157      	movs	r1, #87	@ 0x57
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fbae 	bl	8006f84 <VL53L0X_WrByte>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800582e:	2208      	movs	r2, #8
 8005830:	2156      	movs	r1, #86	@ 0x56
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f001 fba6 	bl	8006f84 <VL53L0X_WrByte>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800583e:	e157      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8005840:	78bb      	ldrb	r3, [r7, #2]
 8005842:	2b12      	cmp	r3, #18
 8005844:	f040 8154 	bne.w	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005848:	2250      	movs	r2, #80	@ 0x50
 800584a:	2157      	movs	r1, #87	@ 0x57
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f001 fb99 	bl	8006f84 <VL53L0X_WrByte>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8005858:	2208      	movs	r2, #8
 800585a:	2156      	movs	r1, #86	@ 0x56
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fb91 	bl	8006f84 <VL53L0X_WrByte>
 8005862:	4603      	mov	r3, r0
 8005864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005868:	e142      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	2b01      	cmp	r3, #1
 800586e:	f040 813f 	bne.w	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8005872:	78bb      	ldrb	r3, [r7, #2]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d14c      	bne.n	8005912 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8005878:	2210      	movs	r2, #16
 800587a:	2148      	movs	r1, #72	@ 0x48
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fb81 	bl	8006f84 <VL53L0X_WrByte>
 8005882:	4603      	mov	r3, r0
 8005884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8005888:	2208      	movs	r2, #8
 800588a:	2147      	movs	r1, #71	@ 0x47
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 fb79 	bl	8006f84 <VL53L0X_WrByte>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005898:	2202      	movs	r2, #2
 800589a:	2132      	movs	r1, #50	@ 0x32
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fb71 	bl	8006f84 <VL53L0X_WrByte>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80058b0:	220c      	movs	r2, #12
 80058b2:	2130      	movs	r1, #48	@ 0x30
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fb65 	bl	8006f84 <VL53L0X_WrByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058c8:	2201      	movs	r2, #1
 80058ca:	21ff      	movs	r1, #255	@ 0xff
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fb59 	bl	8006f84 <VL53L0X_WrByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	461a      	mov	r2, r3
 80058d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058da:	4313      	orrs	r3, r2
 80058dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80058e0:	2230      	movs	r2, #48	@ 0x30
 80058e2:	2130      	movs	r1, #48	@ 0x30
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fb4d 	bl	8006f84 <VL53L0X_WrByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058f8:	2200      	movs	r2, #0
 80058fa:	21ff      	movs	r1, #255	@ 0xff
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f001 fb41 	bl	8006f84 <VL53L0X_WrByte>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800590a:	4313      	orrs	r3, r2
 800590c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005910:	e0ee      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8005912:	78bb      	ldrb	r3, [r7, #2]
 8005914:	2b0a      	cmp	r3, #10
 8005916:	d14c      	bne.n	80059b2 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8005918:	2228      	movs	r2, #40	@ 0x28
 800591a:	2148      	movs	r1, #72	@ 0x48
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fb31 	bl	8006f84 <VL53L0X_WrByte>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8005928:	2208      	movs	r2, #8
 800592a:	2147      	movs	r1, #71	@ 0x47
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 fb29 	bl	8006f84 <VL53L0X_WrByte>
 8005932:	4603      	mov	r3, r0
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005938:	2203      	movs	r2, #3
 800593a:	2132      	movs	r1, #50	@ 0x32
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f001 fb21 	bl	8006f84 <VL53L0X_WrByte>
 8005942:	4603      	mov	r3, r0
 8005944:	461a      	mov	r2, r3
 8005946:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800594a:	4313      	orrs	r3, r2
 800594c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005950:	2209      	movs	r2, #9
 8005952:	2130      	movs	r1, #48	@ 0x30
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fb15 	bl	8006f84 <VL53L0X_WrByte>
 800595a:	4603      	mov	r3, r0
 800595c:	461a      	mov	r2, r3
 800595e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005962:	4313      	orrs	r3, r2
 8005964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005968:	2201      	movs	r2, #1
 800596a:	21ff      	movs	r1, #255	@ 0xff
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 fb09 	bl	8006f84 <VL53L0X_WrByte>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800597a:	4313      	orrs	r3, r2
 800597c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005980:	2220      	movs	r2, #32
 8005982:	2130      	movs	r1, #48	@ 0x30
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f001 fafd 	bl	8006f84 <VL53L0X_WrByte>
 800598a:	4603      	mov	r3, r0
 800598c:	461a      	mov	r2, r3
 800598e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005992:	4313      	orrs	r3, r2
 8005994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005998:	2200      	movs	r2, #0
 800599a:	21ff      	movs	r1, #255	@ 0xff
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f001 faf1 	bl	8006f84 <VL53L0X_WrByte>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80059b0:	e09e      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80059b2:	78bb      	ldrb	r3, [r7, #2]
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d14c      	bne.n	8005a52 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80059b8:	2238      	movs	r2, #56	@ 0x38
 80059ba:	2148      	movs	r1, #72	@ 0x48
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fae1 	bl	8006f84 <VL53L0X_WrByte>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80059c8:	2208      	movs	r2, #8
 80059ca:	2147      	movs	r1, #71	@ 0x47
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fad9 	bl	8006f84 <VL53L0X_WrByte>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80059d8:	2203      	movs	r2, #3
 80059da:	2132      	movs	r1, #50	@ 0x32
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f001 fad1 	bl	8006f84 <VL53L0X_WrByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80059f0:	2208      	movs	r2, #8
 80059f2:	2130      	movs	r1, #48	@ 0x30
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fac5 	bl	8006f84 <VL53L0X_WrByte>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	21ff      	movs	r1, #255	@ 0xff
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fab9 	bl	8006f84 <VL53L0X_WrByte>
 8005a12:	4603      	mov	r3, r0
 8005a14:	461a      	mov	r2, r3
 8005a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005a20:	2220      	movs	r2, #32
 8005a22:	2130      	movs	r1, #48	@ 0x30
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 faad 	bl	8006f84 <VL53L0X_WrByte>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	21ff      	movs	r1, #255	@ 0xff
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 faa1 	bl	8006f84 <VL53L0X_WrByte>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a50:	e04e      	b.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005a52:	78bb      	ldrb	r3, [r7, #2]
 8005a54:	2b0e      	cmp	r3, #14
 8005a56:	d14b      	bne.n	8005af0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8005a58:	2248      	movs	r2, #72	@ 0x48
 8005a5a:	2148      	movs	r1, #72	@ 0x48
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f001 fa91 	bl	8006f84 <VL53L0X_WrByte>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8005a68:	2208      	movs	r2, #8
 8005a6a:	2147      	movs	r1, #71	@ 0x47
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fa89 	bl	8006f84 <VL53L0X_WrByte>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8005a78:	2203      	movs	r2, #3
 8005a7a:	2132      	movs	r1, #50	@ 0x32
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fa81 	bl	8006f84 <VL53L0X_WrByte>
 8005a82:	4603      	mov	r3, r0
 8005a84:	461a      	mov	r2, r3
 8005a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005a90:	2207      	movs	r2, #7
 8005a92:	2130      	movs	r1, #48	@ 0x30
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 fa75 	bl	8006f84 <VL53L0X_WrByte>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	21ff      	movs	r1, #255	@ 0xff
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 fa69 	bl	8006f84 <VL53L0X_WrByte>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	2130      	movs	r1, #48	@ 0x30
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 fa5d 	bl	8006f84 <VL53L0X_WrByte>
 8005aca:	4603      	mov	r3, r0
 8005acc:	461a      	mov	r2, r3
 8005ace:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	21ff      	movs	r1, #255	@ 0xff
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f001 fa51 	bl	8006f84 <VL53L0X_WrByte>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8005af0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d17e      	bne.n	8005bf6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8005af8:	78bb      	ldrb	r3, [r7, #2]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fe3b 	bl	8004776 <VL53L0X_encode_vcsel_period>
 8005b00:	4603      	mov	r3, r0
 8005b02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d045      	beq.n	8005b9c <VL53L0X_set_vcsel_pulse_period+0x470>
 8005b10:	e06e      	b.n	8005bf0 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	461a      	mov	r2, r3
 8005b18:	2103      	movs	r1, #3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fc34 	bl	8005388 <get_sequence_step_timeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005b26:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8005b2e:	f107 0310 	add.w	r3, r7, #16
 8005b32:	461a      	mov	r2, r3
 8005b34:	2102      	movs	r1, #2
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fc26 	bl	8005388 <get_sequence_step_timeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005b42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8005b4a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2150      	movs	r1, #80	@ 0x50
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fa16 	bl	8006f84 <VL53L0X_WrByte>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005b5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fceb 	bl	8005548 <set_sequence_step_timeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8005b78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	461a      	mov	r2, r3
 8005b84:	2102      	movs	r1, #2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fcde 	bl	8005548 <set_sequence_step_timeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	78ba      	ldrb	r2, [r7, #2]
 8005b96:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005b9a:	e02c      	b.n	8005bf6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005b9c:	f107 0318 	add.w	r3, r7, #24
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fbef 	bl	8005388 <get_sequence_step_timeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d109      	bne.n	8005bcc <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8005bb8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2170      	movs	r1, #112	@ 0x70
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f001 f9df 	bl	8006f84 <VL53L0X_WrByte>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005bcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d108      	bne.n	8005be6 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2104      	movs	r1, #4
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff fcb4 	bl	8005548 <set_sequence_step_timeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	78ba      	ldrb	r2, [r7, #2]
 8005bea:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005bee:	e002      	b.n	8005bf6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005bf0:	23fc      	movs	r3, #252	@ 0xfc
 8005bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8005bf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fc fdfc 	bl	8002804 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8005c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8005c1a:	f107 010f 	add.w	r1, r7, #15
 8005c1e:	2301      	movs	r3, #1
 8005c20:	2200      	movs	r2, #0
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fe fcc2 	bl	80045ac <VL53L0X_perform_phase_calibration>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8005c2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3728      	adds	r7, #40	@ 0x28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	460b      	mov	r3, r1
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d00a      	beq.n	8005c6c <VL53L0X_get_vcsel_pulse_period+0x32>
 8005c56:	e013      	b.n	8005c80 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005c58:	f107 0316 	add.w	r3, r7, #22
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	2150      	movs	r1, #80	@ 0x50
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f001 fa43 	bl	80070ec <VL53L0X_RdByte>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005c6a:	e00b      	b.n	8005c84 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005c6c:	f107 0316 	add.w	r3, r7, #22
 8005c70:	461a      	mov	r2, r3
 8005c72:	2170      	movs	r1, #112	@ 0x70
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f001 fa39 	bl	80070ec <VL53L0X_RdByte>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005c7e:	e001      	b.n	8005c84 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c80:	23fc      	movs	r3, #252	@ 0xfc
 8005c82:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005c8c:	7dbb      	ldrb	r3, [r7, #22]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fd5e 	bl	8004750 <VL53L0X_decode_vcsel_period>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	701a      	strb	r2, [r3, #0]

	return Status;
 8005c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b092      	sub	sp, #72	@ 0x48
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005cb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005cbc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005cbe:	f240 7376 	movw	r3, #1910	@ 0x776
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8005cc4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005cca:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005cce:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8005cd0:	f240 234e 	movw	r3, #590	@ 0x24e
 8005cd4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8005cd6:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005cdc:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005ce2:	f240 2326 	movw	r3, #550	@ 0x226
 8005ce6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8005cec:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005cf0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d205      	bcs.n	8005d0a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005cfe:	23fc      	movs	r3, #252	@ 0xfc
 8005d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8005d04:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d08:	e0aa      	b.n	8005e60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8005d0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7fc feb9 	bl	8002a94 <VL53L0X_GetSequenceStepEnables>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8005d28:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d15b      	bne.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8005d30:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d105      	bne.n	8005d42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8005d36:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d052      	beq.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8005d42:	f107 0310 	add.w	r3, r7, #16
 8005d46:	461a      	mov	r2, r3
 8005d48:	2102      	movs	r1, #2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7ff fb1c 	bl	8005388 <get_sequence_step_timeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8005d56:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8005d5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d62:	e07d      	b.n	8005e60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005d64:	7d3b      	ldrb	r3, [r7, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00f      	beq.n	8005d8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8005d6a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6e:	4413      	add	r3, r2
 8005d70:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d204      	bcs.n	8005d84 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8005d7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d82:	e002      	b.n	8005d8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005d84:	23fc      	movs	r3, #252	@ 0xfc
 8005d86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8005d8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8005d92:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005d96:	e063      	b.n	8005e60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d011      	beq.n	8005dc2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da2:	4413      	add	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d204      	bcs.n	8005dba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005db0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005db8:	e016      	b.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005dba:	23fc      	movs	r3, #252	@ 0xfc
 8005dbc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005dc0:	e012      	b.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005dc2:	7d7b      	ldrb	r3, [r7, #21]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00f      	beq.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dcc:	4413      	add	r3, r2
 8005dce:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005dd0:	69fa      	ldr	r2, [r7, #28]
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d204      	bcs.n	8005de2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005dd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de0:	e002      	b.n	8005de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005de2:	23fc      	movs	r3, #252	@ 0xfc
 8005de4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005de8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005df0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005df4:	e034      	b.n	8005e60 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d019      	beq.n	8005e30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	461a      	mov	r2, r3
 8005e02:	2103      	movs	r1, #3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff fabf 	bl	8005388 <get_sequence_step_timeout>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e14:	4413      	add	r3, r2
 8005e16:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d204      	bcs.n	8005e2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8005e20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e28:	e002      	b.n	8005e30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005e2a:	23fc      	movs	r3, #252	@ 0xfc
 8005e2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8005e30:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8005e38:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00e      	beq.n	8005e5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8005e3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8005e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e48:	2104      	movs	r1, #4
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff fb7c 	bl	8005548 <set_sequence_step_timeout>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005e5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3748      	adds	r7, #72	@ 0x48
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b090      	sub	sp, #64	@ 0x40
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e72:	2300      	movs	r3, #0
 8005e74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005e78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e7c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005e7e:	f240 7376 	movw	r3, #1910	@ 0x776
 8005e82:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005e84:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005e8a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005e8e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005e90:	f240 234e 	movw	r3, #590	@ 0x24e
 8005e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005e96:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8005e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8005e9c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005ea2:	f240 2326 	movw	r3, #550	@ 0x226
 8005ea6:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8005eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb0:	441a      	add	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005eb6:	f107 0318 	add.w	r3, r7, #24
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fc fde9 	bl	8002a94 <VL53L0X_GetSequenceStepEnables>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005ec8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005ed0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005ed4:	e075      	b.n	8005fc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005ed6:	7e3b      	ldrb	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8005edc:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005ee2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d030      	beq.n	8005f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005ee8:	f107 0310 	add.w	r3, r7, #16
 8005eec:	461a      	mov	r2, r3
 8005eee:	2102      	movs	r1, #2
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fa49 	bl	8005388 <get_sequence_step_timeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8005efc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d122      	bne.n	8005f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8005f04:	7e3b      	ldrb	r3, [r7, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005f0e:	6939      	ldr	r1, [r7, #16]
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f14:	441a      	add	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8005f1a:	7ebb      	ldrb	r3, [r7, #26]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8005f24:	6939      	ldr	r1, [r7, #16]
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	440b      	add	r3, r1
 8005f2a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f2c:	441a      	add	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e00a      	b.n	8005f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8005f34:	7e7b      	ldrb	r3, [r7, #25]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f42:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8005f44:	441a      	add	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d114      	bne.n	8005f7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005f52:	7efb      	ldrb	r3, [r7, #27]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2103      	movs	r1, #3
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7ff fa11 	bl	8005388 <get_sequence_step_timeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005f76:	441a      	add	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d114      	bne.n	8005fae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005f84:	7f3b      	ldrb	r3, [r7, #28]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2104      	movs	r1, #4
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff f9f8 	bl	8005388 <get_sequence_step_timeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005fa8:	441a      	add	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005fae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3740      	adds	r7, #64	@ 0x40
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8005fde:	e0c6      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	74fb      	strb	r3, [r7, #19]
		Index++;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	2bff      	cmp	r3, #255	@ 0xff
 8005ff4:	f040 808d 	bne.w	8006112 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	747b      	strb	r3, [r7, #17]
			Index++;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	3301      	adds	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006008:	7c7b      	ldrb	r3, [r7, #17]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d87e      	bhi.n	800610c <VL53L0X_load_tuning_settings+0x140>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <VL53L0X_load_tuning_settings+0x48>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006025 	.word	0x08006025
 8006018:	0800605f 	.word	0x0800605f
 800601c:	08006099 	.word	0x08006099
 8006020:	080060d3 	.word	0x080060d3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	743b      	strb	r3, [r7, #16]
				Index++;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	3301      	adds	r3, #1
 8006032:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	4413      	add	r3, r2
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006044:	7c3b      	ldrb	r3, [r7, #16]
 8006046:	b29b      	uxth	r3, r3
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	b29a      	uxth	r2, r3
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	b29b      	uxth	r3, r3
 8006050:	4413      	add	r3, r2
 8006052:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	89ba      	ldrh	r2, [r7, #12]
 8006058:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800605c:	e087      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	4413      	add	r3, r2
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	743b      	strb	r3, [r7, #16]
				Index++;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3301      	adds	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	4413      	add	r3, r2
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3301      	adds	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800607e:	7c3b      	ldrb	r3, [r7, #16]
 8006080:	b29b      	uxth	r3, r3
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	b29a      	uxth	r2, r3
 8006086:	7bfb      	ldrb	r3, [r7, #15]
 8006088:	b29b      	uxth	r3, r3
 800608a:	4413      	add	r3, r2
 800608c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	89ba      	ldrh	r2, [r7, #12]
 8006092:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 8006096:	e06a      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4413      	add	r3, r2
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	743b      	strb	r3, [r7, #16]
				Index++;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	3301      	adds	r3, #1
 80060a6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	4413      	add	r3, r2
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	3301      	adds	r3, #1
 80060b6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80060b8:	7c3b      	ldrb	r3, [r7, #16]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	b29a      	uxth	r2, r3
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	89ba      	ldrh	r2, [r7, #12]
 80060cc:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 80060d0:	e04d      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	4413      	add	r3, r2
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	743b      	strb	r3, [r7, #16]
				Index++;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	3301      	adds	r3, #1
 80060e0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	4413      	add	r3, r2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	73fb      	strb	r3, [r7, #15]
				Index++;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3301      	adds	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80060f2:	7c3b      	ldrb	r3, [r7, #16]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	021b      	lsls	r3, r3, #8
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	7bfb      	ldrb	r3, [r7, #15]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	4413      	add	r3, r2
 8006100:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	89ba      	ldrh	r2, [r7, #12]
 8006106:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800610a:	e030      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800610c:	23fc      	movs	r3, #252	@ 0xfc
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e02d      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d828      	bhi.n	800616a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	4413      	add	r3, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	3301      	adds	r3, #1
 8006126:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006128:	2300      	movs	r3, #0
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	e00f      	b.n	800614e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	4413      	add	r3, r2
 8006134:	7819      	ldrb	r1, [r3, #0]
 8006136:	f107 0208 	add.w	r2, r7, #8
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	4413      	add	r3, r2
 800613e:	460a      	mov	r2, r1
 8006140:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	3301      	adds	r3, #1
 8006146:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	3301      	adds	r3, #1
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	7cfb      	ldrb	r3, [r7, #19]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	429a      	cmp	r2, r3
 8006154:	dbeb      	blt.n	800612e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	f107 0208 	add.w	r2, r7, #8
 800615c:	7cb9      	ldrb	r1, [r7, #18]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 feb4 	bl	8006ecc <VL53L0X_WriteMulti>
 8006164:	4603      	mov	r3, r0
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e001      	b.n	800616e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800616a:	23fc      	movs	r3, #252	@ 0xfc
 800616c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	4413      	add	r3, r2
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <VL53L0X_load_tuning_settings+0x1b8>
 800617a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f43f af2e 	beq.w	8005fe0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006184:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3720      	adds	r7, #32
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800619c:	2300      	movs	r3, #0
 800619e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80061a6:	f107 0313 	add.w	r3, r7, #19
 80061aa:	4619      	mov	r1, r3
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7fc fd31 	bl	8002c14 <VL53L0X_GetXTalkCompensationEnable>
 80061b2:	4603      	mov	r3, r0
 80061b4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80061b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d111      	bne.n	80061e2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80061be:	7cfb      	ldrb	r3, [r7, #19]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	8a9b      	ldrh	r3, [r3, #20]
 80061ce:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	3380      	adds	r3, #128	@ 0x80
 80061dc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80061e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006206:	f107 0310 	add.w	r3, r7, #16
 800620a:	461a      	mov	r2, r3
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ffbe 	bl	8006190 <VL53L0X_get_total_xtalk_rate>
 8006214:	4603      	mov	r3, r0
 8006216:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d105      	bne.n	800622c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	441a      	add	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	601a      	str	r2, [r3, #0]

	return Status;
 800622c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b09a      	sub	sp, #104	@ 0x68
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006246:	2312      	movs	r3, #18
 8006248:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800624a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800624e:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006250:	2342      	movs	r3, #66	@ 0x42
 8006252:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006254:	2306      	movs	r3, #6
 8006256:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006258:	2307      	movs	r3, #7
 800625a:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 8006268:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006274:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006276:	fb02 f303 	mul.w	r3, r2, r3
 800627a:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800627c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800627e:	3380      	adds	r3, #128	@ 0x80
 8006280:	0a1b      	lsrs	r3, r3, #8
 8006282:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006288:	fb02 f303 	mul.w	r3, r2, r3
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01a      	beq.n	80062ce <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	029b      	lsls	r3, r3, #10
 800629c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80062a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a4:	4413      	add	r3, r2
 80062a6:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80062a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b0:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80062b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80062b4:	4613      	mov	r3, r2
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	4413      	add	r3, r2
 80062ba:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80062bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062be:	fb03 f303 	mul.w	r3, r3, r3
 80062c2:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80062c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80062d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062da:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	fb03 f303 	mul.w	r3, r3, r3
 80062e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80062ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062ec:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80062f0:	0c1b      	lsrs	r3, r3, #16
 80062f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80062f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f6:	085a      	lsrs	r2, r3, #1
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	441a      	add	r2, r3
 80062fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d302      	bcc.n	800631c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8006316:	4b54      	ldr	r3, [pc, #336]	@ (8006468 <VL53L0X_calc_dmax+0x230>)
 8006318:	663b      	str	r3, [r7, #96]	@ 0x60
 800631a:	e015      	b.n	8006348 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800631c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800631e:	085a      	lsrs	r2, r3, #1
 8006320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006322:	441a      	add	r2, r3
 8006324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006326:	fbb2 f3f3 	udiv	r3, r2, r3
 800632a:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800632c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800632e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006330:	fb02 f303 	mul.w	r3, r2, r3
 8006334:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006338:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006342:	fb03 f303 	mul.w	r3, r3, r3
 8006346:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	039b      	lsls	r3, r3, #14
 800634c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006350:	4a46      	ldr	r2, [pc, #280]	@ (800646c <VL53L0X_calc_dmax+0x234>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	fb03 f303 	mul.w	r3, r3, r3
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006364:	fb03 f303 	mul.w	r3, r3, r3
 8006368:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	3308      	adds	r3, #8
 800636e:	091b      	lsrs	r3, r3, #4
 8006370:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800637a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800638c:	0b9b      	lsrs	r3, r3, #14
 800638e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006390:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006394:	4413      	add	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4413      	add	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063aa:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	039b      	lsls	r3, r3, #14
 80063b0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	085b      	lsrs	r3, r3, #1
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	4413      	add	r3, r2
 80063ba:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80063ca:	fb02 f303 	mul.w	r3, r2, r3
 80063ce:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80063d6:	4a25      	ldr	r2, [pc, #148]	@ (800646c <VL53L0X_calc_dmax+0x234>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	099b      	lsrs	r3, r3, #6
 80063de:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80063ec:	4a1f      	ldr	r2, [pc, #124]	@ (800646c <VL53L0X_calc_dmax+0x234>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	099b      	lsrs	r3, r3, #6
 80063f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80063f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f8:	3380      	adds	r3, #128	@ 0x80
 80063fa:	0a1b      	lsrs	r3, r3, #8
 80063fc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d008      	beq.n	8006416 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	085a      	lsrs	r2, r3, #1
 8006408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640a:	441a      	add	r2, r3
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006414:	e001      	b.n	800641a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800641a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800641c:	f7fe f9be 	bl	800479c <VL53L0X_isqrt>
 8006420:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	085a      	lsrs	r2, r3, #1
 800642c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800642e:	441a      	add	r2, r3
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006438:	e001      	b.n	800643e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800643e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006440:	f7fe f9ac 	bl	800479c <VL53L0X_isqrt>
 8006444:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 8006446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006450:	429a      	cmp	r2, r3
 8006452:	d902      	bls.n	800645a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8006454:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006456:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006458:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800645a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800645e:	4618      	mov	r0, r3
 8006460:	3768      	adds	r7, #104	@ 0x68
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	fff00000 	.word	0xfff00000
 800646c:	10624dd3 	.word	0x10624dd3

08006470 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b0b4      	sub	sp, #208	@ 0xd0
 8006474:	af04      	add	r7, sp, #16
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800647e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8006482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8006486:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800648a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800648e:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 8006492:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8006496:	f241 235c 	movw	r3, #4700	@ 0x125c
 800649a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800649e:	4b9e      	ldr	r3, [pc, #632]	@ (8006718 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80064a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80064a4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80064a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80064aa:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80064b8:	4b98      	ldr	r3, [pc, #608]	@ (800671c <VL53L0X_calc_sigma_estimate+0x2ac>)
 80064ba:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80064bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c0:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80064c2:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 80064c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 80064c8:	f240 6377 	movw	r3, #1655	@ 0x677
 80064cc:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80064e6:	0c1b      	lsrs	r3, r3, #16
 80064e8:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	461a      	mov	r2, r3
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff fe78 	bl	80061ee <VL53L0X_get_total_signal_rate>
 80064fe:	4603      	mov	r3, r0
 8006500:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	461a      	mov	r2, r3
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7ff fe3f 	bl	8006190 <VL53L0X_get_total_xtalk_rate>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8006524:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006526:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006534:	fb02 f303 	mul.w	r3, r2, r3
 8006538:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800653c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006542:	429a      	cmp	r2, r3
 8006544:	d902      	bls.n	800654c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8006546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800654c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8006550:	2b00      	cmp	r3, #0
 8006552:	d168      	bne.n	8006626 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800655a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 8006564:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8006568:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800656c:	461a      	mov	r2, r3
 800656e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f7fe feb4 	bl	80052e0 <VL53L0X_calc_timeout_mclks>
 8006578:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800658a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800658e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006592:	461a      	mov	r2, r3
 8006594:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f7fe fea1 	bl	80052e0 <VL53L0X_calc_timeout_mclks>
 800659e:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 80065a6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d102      	bne.n	80065b4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80065ae:	2302      	movs	r3, #2
 80065b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80065b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065b8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80065ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	02db      	lsls	r3, r3, #11
 80065c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80065c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065cc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80065d0:	4a53      	ldr	r2, [pc, #332]	@ (8006720 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 80065dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80065e2:	fb02 f303 	mul.w	r3, r2, r3
 80065e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80065ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80065ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80065f2:	4a4b      	ldr	r2, [pc, #300]	@ (8006720 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3380      	adds	r3, #128	@ 0x80
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800660c:	fb02 f303 	mul.w	r3, r2, r3
 8006610:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8006614:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006618:	3380      	adds	r3, #128	@ 0x80
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006626:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800662e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8006632:	e15e      	b.n	80068f2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8006634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10c      	bne.n	8006654 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006640:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006648:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	e14c      	b.n	80068ee <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8006654:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800665c:	2301      	movs	r3, #1
 800665e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8006662:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8006668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800666a:	041a      	lsls	r2, r3, #16
 800666c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8006676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800667a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800667c:	429a      	cmp	r2, r3
 800667e:	d902      	bls.n	8006686 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8006680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006682:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8006686:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800668a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8006696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800669a:	4613      	mov	r3, r2
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe f87a 	bl	800479c <VL53L0X_isqrt>
 80066a8:	4603      	mov	r3, r0
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	891b      	ldrh	r3, [r3, #8]
 80066b2:	461a      	mov	r2, r3
 80066b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80066bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066be:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80066c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80066c4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80066c6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80066c8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80066cc:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80066ce:	fba2 2303 	umull	r2, r3, r2, r3
 80066d2:	099b      	lsrs	r3, r3, #6
 80066d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80066d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d8:	041b      	lsls	r3, r3, #16
 80066da:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80066de:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <VL53L0X_calc_sigma_estimate+0x2b0>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	099b      	lsrs	r3, r3, #6
 80066e6:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80066e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80066ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	bfb8      	it	lt
 80066fa:	425b      	neglt	r3, r3
 80066fc:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80066fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	7e1b      	ldrb	r3, [r3, #24]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00b      	beq.n	8006724 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800670c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006714:	e033      	b.n	800677e <VL53L0X_calc_sigma_estimate+0x30e>
 8006716:	bf00      	nop
 8006718:	028f87ae 	.word	0x028f87ae
 800671c:	0006999a 	.word	0x0006999a
 8006720:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8006724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006726:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8006732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006734:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8006738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800673c:	fb02 f303 	mul.w	r3, r2, r3
 8006740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8006744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006748:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800674a:	4413      	add	r3, r2
 800674c:	0c1b      	lsrs	r3, r3, #16
 800674e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8006752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006756:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800675a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800675e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8006768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800676c:	fb03 f303 	mul.w	r3, r3, r3
 8006770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8006774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006778:	0b9b      	lsrs	r3, r3, #14
 800677a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800677e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006782:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8006794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006796:	fb03 f303 	mul.w	r3, r3, r3
 800679a:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800679c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80067a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80067ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ae:	fb03 f303 	mul.w	r3, r3, r3
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80067b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b8:	4413      	add	r3, r2
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80067bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067be:	f7fd ffed 	bl	800479c <VL53L0X_isqrt>
 80067c2:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	3332      	adds	r3, #50	@ 0x32
 80067ce:	4a4b      	ldr	r2, [pc, #300]	@ (80068fc <VL53L0X_calc_sigma_estimate+0x48c>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	095a      	lsrs	r2, r3, #5
 80067d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80067e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067e4:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80067f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067f4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 80067f8:	3308      	adds	r3, #8
 80067fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 80067fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006802:	4a3f      	ldr	r2, [pc, #252]	@ (8006900 <VL53L0X_calc_sigma_estimate+0x490>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	0b5b      	lsrs	r3, r3, #13
 800680a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800680e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006814:	429a      	cmp	r2, r3
 8006816:	d902      	bls.n	800681e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8006818:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800681a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800681e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006826:	4413      	add	r3, r2
 8006828:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800682c:	4a35      	ldr	r2, [pc, #212]	@ (8006904 <VL53L0X_calc_sigma_estimate+0x494>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800683a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800683e:	441a      	add	r2, r3
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	fbb2 f3f3 	udiv	r3, r2, r3
 8006846:	4618      	mov	r0, r3
 8006848:	f7fd ffa8 	bl	800479c <VL53L0X_isqrt>
 800684c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800685a:	4a2a      	ldr	r2, [pc, #168]	@ (8006904 <VL53L0X_calc_sigma_estimate+0x494>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	099b      	lsrs	r3, r3, #6
 8006862:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8006864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006868:	fb03 f303 	mul.w	r3, r3, r3
 800686c:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	fb03 f303 	mul.w	r3, r3, r3
 8006874:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8006876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	4413      	add	r3, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd ff8d 	bl	800479c <VL53L0X_isqrt>
 8006882:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8006892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d009      	beq.n	80068ac <VL53L0X_calc_sigma_estimate+0x43c>
 8006898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <VL53L0X_calc_sigma_estimate+0x43c>
 80068a0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80068a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d903      	bls.n	80068b4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80068ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80068b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80068ba:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 80068c6:	6939      	ldr	r1, [r7, #16]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80068d0:	9302      	str	r3, [sp, #8]
 80068d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fca8 	bl	8006238 <VL53L0X_calc_dmax>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80068ee:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	37c0      	adds	r7, #192	@ 0xc0
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	51eb851f 	.word	0x51eb851f
 8006900:	d1b71759 	.word	0xd1b71759
 8006904:	10624dd3 	.word	0x10624dd3

08006908 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b090      	sub	sp, #64	@ 0x40
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	607a      	str	r2, [r7, #4]
 8006912:	461a      	mov	r2, r3
 8006914:	460b      	mov	r3, r1
 8006916:	72fb      	strb	r3, [r7, #11]
 8006918:	4613      	mov	r3, r2
 800691a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800695a:	7afb      	ldrb	r3, [r7, #11]
 800695c:	10db      	asrs	r3, r3, #3
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8006968:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d017      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
 8006970:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006974:	2b05      	cmp	r3, #5
 8006976:	d013      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8006978:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800697c:	2b07      	cmp	r3, #7
 800697e:	d00f      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8006980:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d00b      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8006988:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800698c:	2b0d      	cmp	r3, #13
 800698e:	d007      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8006990:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006994:	2b0e      	cmp	r3, #14
 8006996:	d003      	beq.n	80069a0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8006998:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800699c:	2b0f      	cmp	r3, #15
 800699e:	d103      	bne.n	80069a8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80069a6:	e002      	b.n	80069ae <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80069ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d109      	bne.n	80069ca <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80069b6:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80069ba:	461a      	mov	r2, r3
 80069bc:	2100      	movs	r1, #0
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f7fc f9fc 	bl	8002dbc <VL53L0X_GetLimitCheckEnable>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80069ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d02e      	beq.n	8006a30 <VL53L0X_get_pal_range_status+0x128>
 80069d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d12a      	bne.n	8006a30 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80069da:	f107 0310 	add.w	r3, r7, #16
 80069de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80069e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f7ff fd43 	bl	8006470 <VL53L0X_calc_sigma_estimate>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80069f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069fe:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8006a00:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d113      	bne.n	8006a30 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006a08:	f107 0320 	add.w	r3, r7, #32
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2100      	movs	r1, #0
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f7fc fa59 	bl	8002ec8 <VL53L0X_GetLimitCheckValue>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8006a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a24:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d902      	bls.n	8006a30 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006a30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006a38:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2102      	movs	r1, #2
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7fc f9bb 	bl	8002dbc <VL53L0X_GetLimitCheckEnable>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006a4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d044      	beq.n	8006ade <VL53L0X_get_pal_range_status+0x1d6>
 8006a54:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d140      	bne.n	8006ade <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006a5c:	f107 031c 	add.w	r3, r7, #28
 8006a60:	461a      	mov	r2, r3
 8006a62:	2102      	movs	r1, #2
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7fc fa2f 	bl	8002ec8 <VL53L0X_GetLimitCheckValue>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8006a70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a78:	2201      	movs	r2, #1
 8006a7a:	21ff      	movs	r1, #255	@ 0xff
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fa81 	bl	8006f84 <VL53L0X_WrByte>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8006a88:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8006a90:	f107 0316 	add.w	r3, r7, #22
 8006a94:	461a      	mov	r2, r3
 8006a96:	21b6      	movs	r1, #182	@ 0xb6
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fb51 	bl	8007140 <VL53L0X_RdWord>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8006aa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d107      	bne.n	8006abc <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006aac:	2200      	movs	r2, #0
 8006aae:	21ff      	movs	r1, #255	@ 0xff
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fa67 	bl	8006f84 <VL53L0X_WrByte>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8006abc:	8afb      	ldrh	r3, [r7, #22]
 8006abe:	025b      	lsls	r3, r3, #9
 8006ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8006ad0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8006ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d902      	bls.n	8006ade <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8006ade:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006aea:	461a      	mov	r2, r3
 8006aec:	2103      	movs	r1, #3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f7fc f964 	bl	8002dbc <VL53L0X_GetLimitCheckEnable>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006afa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d023      	beq.n	8006b4a <VL53L0X_get_pal_range_status+0x242>
 8006b02:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11f      	bne.n	8006b4a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006b0a:	893b      	ldrh	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b14:	e005      	b.n	8006b22 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	021a      	lsls	r2, r3, #8
 8006b1a:	893b      	ldrh	r3, [r7, #8]
 8006b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006b22:	f107 0318 	add.w	r3, r7, #24
 8006b26:	461a      	mov	r2, r3
 8006b28:	2103      	movs	r1, #3
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7fc f9cc 	bl	8002ec8 <VL53L0X_GetLimitCheckValue>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d006      	beq.n	8006b4a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006b3c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8006b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d202      	bcs.n	8006b4a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d14a      	bne.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8006b52:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d103      	bne.n	8006b62 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8006b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b5c:	22ff      	movs	r2, #255	@ 0xff
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e042      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8006b62:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d007      	beq.n	8006b7a <VL53L0X_get_pal_range_status+0x272>
 8006b6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d003      	beq.n	8006b7a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8006b72:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d103      	bne.n	8006b82 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8006b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b7c:	2205      	movs	r2, #5
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e032      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8006b82:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b86:	2b06      	cmp	r3, #6
 8006b88:	d003      	beq.n	8006b92 <VL53L0X_get_pal_range_status+0x28a>
 8006b8a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d103      	bne.n	8006b9a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8006b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b94:	2204      	movs	r2, #4
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	e026      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8006b9a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d007      	beq.n	8006bb2 <VL53L0X_get_pal_range_status+0x2aa>
 8006ba2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d003      	beq.n	8006bb2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8006baa:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d103      	bne.n	8006bba <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8006bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	e016      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8006bba:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d003      	beq.n	8006bca <VL53L0X_get_pal_range_status+0x2c2>
 8006bc2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d103      	bne.n	8006bd2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bcc:	2202      	movs	r2, #2
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	e00a      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8006bd2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d103      	bne.n	8006be2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	e002      	b.n	8006be8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8006be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8006be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8006bf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006bf6:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7fc f8dc 	bl	8002dbc <VL53L0X_GetLimitCheckEnable>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006c0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d14f      	bne.n	8006cb2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006c12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <VL53L0X_get_pal_range_status+0x31a>
 8006c1a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d103      	bne.n	8006c2a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006c28:	e002      	b.n	8006c30 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006c36:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006c3a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d003      	beq.n	8006c4a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006c42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006c50:	e002      	b.n	8006c58 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006c5e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006c62:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <VL53L0X_get_pal_range_status+0x36a>
 8006c6a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d103      	bne.n	8006c7a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006c78:	e002      	b.n	8006c80 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006c86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8006c8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <VL53L0X_get_pal_range_status+0x392>
 8006c92:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d103      	bne.n	8006ca2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8006ca0:	e002      	b.n	8006ca8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8006cae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3740      	adds	r7, #64	@ 0x40
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <cont_lidar_init>:
	  VL53L0X_SetRangeFractionEnable( Dev, 1);

}

void cont_lidar_init(uint8_t dir, uint32_t ts)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	6039      	str	r1, [r7, #0]
 8006cca:	71fb      	strb	r3, [r7, #7]
	  Dev->I2cHandle = &hi2c1;// i2c port to be used
 8006ccc:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3d      	ldr	r2, [pc, #244]	@ (8006dc8 <cont_lidar_init+0x108>)
 8006cd2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	  Dev->I2cDevAddr = dir;
 8006cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	79fa      	ldrb	r2, [r7, #7]
 8006cdc:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
      Dev->comms_type=1;
 8006ce0:	4b38      	ldr	r3, [pc, #224]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2174 	strb.w	r2, [r3, #372]	@ 0x174
      Dev->comms_speed_khz=100;//  i2c a 400khz prima era 400  variato a 100
 8006cea:	4b36      	ldr	r3, [pc, #216]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2264      	movs	r2, #100	@ 0x64
 8006cf0:	f8a3 2176 	strh.w	r2, [r3, #374]	@ 0x176

      VL53L0X_WaitDeviceBooted( Dev );
 8006cf4:	4b33      	ldr	r3, [pc, #204]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fb fc87 	bl	800260c <VL53L0X_WaitDeviceBooted>
	  VL53L0X_DataInit( Dev );
 8006cfe:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fb f99e 	bl	8002044 <VL53L0X_DataInit>
	  VL53L0X_StaticInit( Dev );
 8006d08:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fb fafd 	bl	800230c <VL53L0X_StaticInit>
	  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8006d12:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2d      	ldr	r2, [pc, #180]	@ (8006dcc <cont_lidar_init+0x10c>)
 8006d18:	492d      	ldr	r1, [pc, #180]	@ (8006dd0 <cont_lidar_init+0x110>)
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fc f9c8 	bl	80030b0 <VL53L0X_PerformRefCalibration>
	  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8006d20:	4b28      	ldr	r3, [pc, #160]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd4 <cont_lidar_init+0x114>)
 8006d26:	492c      	ldr	r1, [pc, #176]	@ (8006dd8 <cont_lidar_init+0x118>)
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fc fe43 	bl	80039b4 <VL53L0X_PerformRefSpadManagement>
	  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8006d2e:	4b25      	ldr	r3, [pc, #148]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2103      	movs	r1, #3
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fb fd07 	bl	8002748 <VL53L0X_SetDeviceMode>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8006d3a:	4b22      	ldr	r3, [pc, #136]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fb ffae 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
	  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8006d48:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2101      	movs	r1, #1
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fb ffa7 	bl	8002ca4 <VL53L0X_SetLimitCheckEnable>
	  //VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536)); //long range timing
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.25*65536)); //high accuracy
 8006d56:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006d5e:	2101      	movs	r1, #1
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fc f84f 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(18*65536));
 8006d66:	4b17      	ldr	r3, [pc, #92]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fc f847 	bl	8002e04 <VL53L0X_SetLimitCheckValue>
	  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 200000);
 8006d76:	4b13      	ldr	r3, [pc, #76]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4918      	ldr	r1, [pc, #96]	@ (8006ddc <cont_lidar_init+0x11c>)
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fb fd41 	bl	8002804 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8006d82:	4b10      	ldr	r3, [pc, #64]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2212      	movs	r2, #18
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fb fd60 	bl	8002850 <VL53L0X_SetVcselPulsePeriod>
	  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8006d90:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	220e      	movs	r2, #14
 8006d96:	2101      	movs	r1, #1
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fb fd59 	bl	8002850 <VL53L0X_SetVcselPulsePeriod>
	 // VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, 250);
	  VL53L0X_SetInterMeasurementPeriodMilliSeconds ( Dev, ts);
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fb fecd 	bl	8002b44 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	  VL53L0X_SetGpioConfig(Dev,LidarTrigger_Pin, VL53L0X_HISTOGRAMMODE_DISABLED,VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,VL53L0X_INTERRUPTPOLARITY_HIGH);
 8006daa:	4b06      	ldr	r3, [pc, #24]	@ (8006dc4 <cont_lidar_init+0x104>)
 8006dac:	6818      	ldr	r0, [r3, #0]
 8006dae:	2301      	movs	r3, #1
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2304      	movs	r3, #4
 8006db4:	2200      	movs	r2, #0
 8006db6:	2101      	movs	r1, #1
 8006db8:	f7fc fc44 	bl	8003644 <VL53L0X_SetGpioConfig>
	 // VL53L0X_SetRangeFractionEnable( Dev, 1);

}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200002c0 	.word	0x200002c0
 8006dc8:	20000c98 	.word	0x20000c98
 8006dcc:	20000fd6 	.word	0x20000fd6
 8006dd0:	20000fd5 	.word	0x20000fd5
 8006dd4:	20000fd4 	.word	0x20000fd4
 8006dd8:	20000fd0 	.word	0x20000fd0
 8006ddc:	00030d40 	.word	0x00030d40

08006de0 <startMeasurement>:
{
	VL53L0X_ClearInterruptMask(DIR_S,1);
}

void startMeasurement()
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
	 VL53L0X_StartMeasurement( Dev);
 8006de4:	4b03      	ldr	r3, [pc, #12]	@ (8006df4 <startMeasurement+0x14>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fc f9dd 	bl	80031a8 <VL53L0X_StartMeasurement>


}
 8006dee:	bf00      	nop
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200002c0 	.word	0x200002c0

08006df8 <getRangeData>:
	 VL53L0X_StopMeasurement ( Dev);

}


uint16_t getRangeData(){
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0

	uint16_t lidarmill=0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	80fb      	strh	r3, [r7, #6]


		Dev->I2cDevAddr = DIR_S;
 8006e02:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <getRangeData+0x48>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2252      	movs	r2, #82	@ 0x52
 8006e08:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
		VL53L0X_GetRangingMeasurementData(Dev, &RangingData);
 8006e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <getRangeData+0x48>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	490c      	ldr	r1, [pc, #48]	@ (8006e44 <getRangeData+0x4c>)
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fc faca 	bl	80033ac <VL53L0X_GetRangingMeasurementData>
	    lidarmill=RangingData.RangeMilliMeter;
 8006e18:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <getRangeData+0x4c>)
 8006e1a:	891b      	ldrh	r3, [r3, #8]
 8006e1c:	80fb      	strh	r3, [r7, #6]
	   if (lidarmill>lidar_max_mm) lidarmill=lidar_max_mm;
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e22:	d901      	bls.n	8006e28 <getRangeData+0x30>
 8006e24:	23c8      	movs	r3, #200	@ 0xc8
 8006e26:	80fb      	strh	r3, [r7, #6]
	    VL53L0X_ClearInterruptMask(Dev, 0);
 8006e28:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <getRangeData+0x48>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fc fd5e 	bl	80038f0 <VL53L0X_ClearInterruptMask>

	 	return(lidarmill);
 8006e34:	88fb      	ldrh	r3, [r7, #6]


}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200002c0 	.word	0x200002c0
 8006e44:	20000e24 	.word	0x20000e24

08006e48 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	330a      	adds	r3, #10
 8006e58:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006e66:	4619      	mov	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4613      	mov	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	f000 fe88 	bl	8007b88 <HAL_I2C_Master_Transmit>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006e7c:	693b      	ldr	r3, [r7, #16]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b088      	sub	sp, #32
 8006e8a:	af02      	add	r7, sp, #8
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	330a      	adds	r3, #10
 8006e96:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	4619      	mov	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	f000 ff64 	bl	8007d84 <HAL_I2C_Master_Receive>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006ec0:	693b      	ldr	r3, [r7, #16]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ee4:	d902      	bls.n	8006eec <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8006ee6:	f06f 0303 	mvn.w	r3, #3
 8006eea:	e016      	b.n	8006f1a <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8006eec:	4a0d      	ldr	r2, [pc, #52]	@ (8006f24 <VL53L0X_WriteMulti+0x58>)
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	480c      	ldr	r0, [pc, #48]	@ (8006f28 <VL53L0X_WriteMulti+0x5c>)
 8006ef8:	f004 fb15 	bl	800b526 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	461a      	mov	r2, r3
 8006f02:	4908      	ldr	r1, [pc, #32]	@ (8006f24 <VL53L0X_WriteMulti+0x58>)
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f7ff ff9f 	bl	8006e48 <_I2CWrite>
 8006f0a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f12:	23ec      	movs	r3, #236	@ 0xec
 8006f14:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20000fd8 	.word	0x20000fd8
 8006f28:	20000fd9 	.word	0x20000fd9

08006f2c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006f40:	f107 030b 	add.w	r3, r7, #11
 8006f44:	2201      	movs	r2, #1
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff ff7d 	bl	8006e48 <_I2CWrite>
 8006f4e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f56:	23ec      	movs	r3, #236	@ 0xec
 8006f58:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006f5a:	e00c      	b.n	8006f76 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff ff90 	bl	8006e86 <_I2CRead>
 8006f66:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006f6e:	23ec      	movs	r3, #236	@ 0xec
 8006f70:	75fb      	strb	r3, [r7, #23]
 8006f72:	e000      	b.n	8006f76 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006f74:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006f76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
 8006f90:	4613      	mov	r3, r2
 8006f92:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006f98:	4a0b      	ldr	r2, [pc, #44]	@ (8006fc8 <VL53L0X_WrByte+0x44>)
 8006f9a:	78fb      	ldrb	r3, [r7, #3]
 8006f9c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006fc8 <VL53L0X_WrByte+0x44>)
 8006fa0:	78bb      	ldrb	r3, [r7, #2]
 8006fa2:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	4908      	ldr	r1, [pc, #32]	@ (8006fc8 <VL53L0X_WrByte+0x44>)
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff ff4d 	bl	8006e48 <_I2CWrite>
 8006fae:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006fb6:	23ec      	movs	r3, #236	@ 0xec
 8006fb8:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8006fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	20000fd8 	.word	0x20000fd8

08006fcc <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800701c <VL53L0X_WrWord+0x50>)
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8006fe6:	883b      	ldrh	r3, [r7, #0]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b0b      	ldr	r3, [pc, #44]	@ (800701c <VL53L0X_WrWord+0x50>)
 8006ff0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006ff2:	883b      	ldrh	r3, [r7, #0]
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	4b09      	ldr	r3, [pc, #36]	@ (800701c <VL53L0X_WrWord+0x50>)
 8006ff8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	4907      	ldr	r1, [pc, #28]	@ (800701c <VL53L0X_WrWord+0x50>)
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff ff22 	bl	8006e48 <_I2CWrite>
 8007004:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800700c:	23ec      	movs	r3, #236	@ 0xec
 800700e:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	20000fd8 	.word	0x20000fd8

08007020 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	460b      	mov	r3, r1
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800702e:	2300      	movs	r3, #0
 8007030:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8007032:	4a13      	ldr	r2, [pc, #76]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 8007034:	7afb      	ldrb	r3, [r7, #11]
 8007036:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	0e1b      	lsrs	r3, r3, #24
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b10      	ldr	r3, [pc, #64]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 8007040:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	b2da      	uxtb	r2, r3
 8007048:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 800704a:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b2da      	uxtb	r2, r3
 8007052:	4b0b      	ldr	r3, [pc, #44]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 8007054:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	b2da      	uxtb	r2, r3
 800705a:	4b09      	ldr	r3, [pc, #36]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 800705c:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 800705e:	2205      	movs	r2, #5
 8007060:	4907      	ldr	r1, [pc, #28]	@ (8007080 <VL53L0X_WrDWord+0x60>)
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff fef0 	bl	8006e48 <_I2CWrite>
 8007068:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007070:	23ec      	movs	r3, #236	@ 0xec
 8007072:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000fd8 	.word	0x20000fd8

08007084 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	4608      	mov	r0, r1
 800708e:	4611      	mov	r1, r2
 8007090:	461a      	mov	r2, r3
 8007092:	4603      	mov	r3, r0
 8007094:	70fb      	strb	r3, [r7, #3]
 8007096:	460b      	mov	r3, r1
 8007098:	70bb      	strb	r3, [r7, #2]
 800709a:	4613      	mov	r3, r2
 800709c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80070a2:	f107 020e 	add.w	r2, r7, #14
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f81e 	bl	80070ec <VL53L0X_RdByte>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80070b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d110      	bne.n	80070de <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80070bc:	7bba      	ldrb	r2, [r7, #14]
 80070be:	78bb      	ldrb	r3, [r7, #2]
 80070c0:	4013      	ands	r3, r2
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	787b      	ldrb	r3, [r7, #1]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80070cc:	7bba      	ldrb	r2, [r7, #14]
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	4619      	mov	r1, r3
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff ff56 	bl	8006f84 <VL53L0X_WrByte>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	e000      	b.n	80070e0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80070de:	bf00      	nop
done:
    return Status;
 80070e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	460b      	mov	r3, r1
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80070fe:	f107 030b 	add.w	r3, r7, #11
 8007102:	2201      	movs	r2, #1
 8007104:	4619      	mov	r1, r3
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff fe9e 	bl	8006e48 <_I2CWrite>
 800710c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007114:	23ec      	movs	r3, #236	@ 0xec
 8007116:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007118:	e00c      	b.n	8007134 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800711a:	2201      	movs	r2, #1
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff feb1 	bl	8006e86 <_I2CRead>
 8007124:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800712c:	23ec      	movs	r3, #236	@ 0xec
 800712e:	75fb      	strb	r3, [r7, #23]
 8007130:	e000      	b.n	8007134 <VL53L0X_RdByte+0x48>
    }
done:
 8007132:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	460b      	mov	r3, r1
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007152:	f107 030b 	add.w	r3, r7, #11
 8007156:	2201      	movs	r2, #1
 8007158:	4619      	mov	r1, r3
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff fe74 	bl	8006e48 <_I2CWrite>
 8007160:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007168:	23ec      	movs	r3, #236	@ 0xec
 800716a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800716c:	e015      	b.n	800719a <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800716e:	2202      	movs	r2, #2
 8007170:	490d      	ldr	r1, [pc, #52]	@ (80071a8 <VL53L0X_RdWord+0x68>)
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff fe87 	bl	8006e86 <_I2CRead>
 8007178:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007180:	23ec      	movs	r3, #236	@ 0xec
 8007182:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007184:	e009      	b.n	800719a <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007186:	4b08      	ldr	r3, [pc, #32]	@ (80071a8 <VL53L0X_RdWord+0x68>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	b29b      	uxth	r3, r3
 800718e:	4a06      	ldr	r2, [pc, #24]	@ (80071a8 <VL53L0X_RdWord+0x68>)
 8007190:	7852      	ldrb	r2, [r2, #1]
 8007192:	4413      	add	r3, r2
 8007194:	b29a      	uxth	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800719a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20000fd8 	.word	0x20000fd8

080071ac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	460b      	mov	r3, r1
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80071be:	f107 030b 	add.w	r3, r7, #11
 80071c2:	2201      	movs	r2, #1
 80071c4:	4619      	mov	r1, r3
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff fe3e 	bl	8006e48 <_I2CWrite>
 80071cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80071d4:	23ec      	movs	r3, #236	@ 0xec
 80071d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80071d8:	e01b      	b.n	8007212 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80071da:	2204      	movs	r2, #4
 80071dc:	4910      	ldr	r1, [pc, #64]	@ (8007220 <VL53L0X_RdDWord+0x74>)
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff fe51 	bl	8006e86 <_I2CRead>
 80071e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80071ec:	23ec      	movs	r3, #236	@ 0xec
 80071ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80071f0:	e00f      	b.n	8007212 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80071f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007220 <VL53L0X_RdDWord+0x74>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	061a      	lsls	r2, r3, #24
 80071f8:	4b09      	ldr	r3, [pc, #36]	@ (8007220 <VL53L0X_RdDWord+0x74>)
 80071fa:	785b      	ldrb	r3, [r3, #1]
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	441a      	add	r2, r3
 8007200:	4b07      	ldr	r3, [pc, #28]	@ (8007220 <VL53L0X_RdDWord+0x74>)
 8007202:	789b      	ldrb	r3, [r3, #2]
 8007204:	021b      	lsls	r3, r3, #8
 8007206:	4413      	add	r3, r2
 8007208:	4a05      	ldr	r2, [pc, #20]	@ (8007220 <VL53L0X_RdDWord+0x74>)
 800720a:	78d2      	ldrb	r2, [r2, #3]
 800720c:	441a      	add	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8007212:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000fd8 	.word	0x20000fd8

08007224 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800722c:	2300      	movs	r3, #0
 800722e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8007230:	2002      	movs	r0, #2
 8007232:	f000 f879 	bl	8007328 <HAL_Delay>
    return status;
 8007236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007248:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <HAL_Init+0x40>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a0d      	ldr	r2, [pc, #52]	@ (8007284 <HAL_Init+0x40>)
 800724e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007254:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <HAL_Init+0x40>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a0a      	ldr	r2, [pc, #40]	@ (8007284 <HAL_Init+0x40>)
 800725a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800725e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007260:	4b08      	ldr	r3, [pc, #32]	@ (8007284 <HAL_Init+0x40>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a07      	ldr	r2, [pc, #28]	@ (8007284 <HAL_Init+0x40>)
 8007266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800726a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800726c:	2003      	movs	r0, #3
 800726e:	f000 f94f 	bl	8007510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007272:	2000      	movs	r0, #0
 8007274:	f000 f808 	bl	8007288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007278:	f7fa fc2c 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40023c00 	.word	0x40023c00

08007288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007290:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <HAL_InitTick+0x54>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <HAL_InitTick+0x58>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4619      	mov	r1, r3
 800729a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800729e:	fbb3 f3f1 	udiv	r3, r3, r1
 80072a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f967 	bl	800757a <HAL_SYSTICK_Config>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e00e      	b.n	80072d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b0f      	cmp	r3, #15
 80072ba:	d80a      	bhi.n	80072d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80072bc:	2200      	movs	r2, #0
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	f04f 30ff 	mov.w	r0, #4294967295
 80072c4:	f000 f92f 	bl	8007526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80072c8:	4a06      	ldr	r2, [pc, #24]	@ (80072e4 <HAL_InitTick+0x5c>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	e000      	b.n	80072d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	20000000 	.word	0x20000000
 80072e0:	200002c8 	.word	0x200002c8
 80072e4:	200002c4 	.word	0x200002c4

080072e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072ec:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <HAL_IncTick+0x20>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	4b06      	ldr	r3, [pc, #24]	@ (800730c <HAL_IncTick+0x24>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4413      	add	r3, r2
 80072f8:	4a04      	ldr	r2, [pc, #16]	@ (800730c <HAL_IncTick+0x24>)
 80072fa:	6013      	str	r3, [r2, #0]
}
 80072fc:	bf00      	nop
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	200002c8 	.word	0x200002c8
 800730c:	20001018 	.word	0x20001018

08007310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  return uwTick;
 8007314:	4b03      	ldr	r3, [pc, #12]	@ (8007324 <HAL_GetTick+0x14>)
 8007316:	681b      	ldr	r3, [r3, #0]
}
 8007318:	4618      	mov	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20001018 	.word	0x20001018

08007328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007330:	f7ff ffee 	bl	8007310 <HAL_GetTick>
 8007334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007340:	d005      	beq.n	800734e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007342:	4b0a      	ldr	r3, [pc, #40]	@ (800736c <HAL_Delay+0x44>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800734e:	bf00      	nop
 8007350:	f7ff ffde 	bl	8007310 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	429a      	cmp	r2, r3
 800735e:	d8f7      	bhi.n	8007350 <HAL_Delay+0x28>
  {
  }
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200002c8 	.word	0x200002c8

08007370 <__NVIC_SetPriorityGrouping>:
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007380:	4b0c      	ldr	r3, [pc, #48]	@ (80073b4 <__NVIC_SetPriorityGrouping+0x44>)
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800738c:	4013      	ands	r3, r2
 800738e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800739c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073a2:	4a04      	ldr	r2, [pc, #16]	@ (80073b4 <__NVIC_SetPriorityGrouping+0x44>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	60d3      	str	r3, [r2, #12]
}
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	e000ed00 	.word	0xe000ed00

080073b8 <__NVIC_GetPriorityGrouping>:
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073bc:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <__NVIC_GetPriorityGrouping+0x18>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	0a1b      	lsrs	r3, r3, #8
 80073c2:	f003 0307 	and.w	r3, r3, #7
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	e000ed00 	.word	0xe000ed00

080073d4 <__NVIC_EnableIRQ>:
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	db0b      	blt.n	80073fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	f003 021f 	and.w	r2, r3, #31
 80073ec:	4907      	ldr	r1, [pc, #28]	@ (800740c <__NVIC_EnableIRQ+0x38>)
 80073ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	2001      	movs	r0, #1
 80073f6:	fa00 f202 	lsl.w	r2, r0, r2
 80073fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	e000e100 	.word	0xe000e100

08007410 <__NVIC_SetPriority>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	6039      	str	r1, [r7, #0]
 800741a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800741c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007420:	2b00      	cmp	r3, #0
 8007422:	db0a      	blt.n	800743a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	b2da      	uxtb	r2, r3
 8007428:	490c      	ldr	r1, [pc, #48]	@ (800745c <__NVIC_SetPriority+0x4c>)
 800742a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800742e:	0112      	lsls	r2, r2, #4
 8007430:	b2d2      	uxtb	r2, r2
 8007432:	440b      	add	r3, r1
 8007434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007438:	e00a      	b.n	8007450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	b2da      	uxtb	r2, r3
 800743e:	4908      	ldr	r1, [pc, #32]	@ (8007460 <__NVIC_SetPriority+0x50>)
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	3b04      	subs	r3, #4
 8007448:	0112      	lsls	r2, r2, #4
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	440b      	add	r3, r1
 800744e:	761a      	strb	r2, [r3, #24]
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	e000e100 	.word	0xe000e100
 8007460:	e000ed00 	.word	0xe000ed00

08007464 <NVIC_EncodePriority>:
{
 8007464:	b480      	push	{r7}
 8007466:	b089      	sub	sp, #36	@ 0x24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 0307 	and.w	r3, r3, #7
 8007476:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	f1c3 0307 	rsb	r3, r3, #7
 800747e:	2b04      	cmp	r3, #4
 8007480:	bf28      	it	cs
 8007482:	2304      	movcs	r3, #4
 8007484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3304      	adds	r3, #4
 800748a:	2b06      	cmp	r3, #6
 800748c:	d902      	bls.n	8007494 <NVIC_EncodePriority+0x30>
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	3b03      	subs	r3, #3
 8007492:	e000      	b.n	8007496 <NVIC_EncodePriority+0x32>
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007498:	f04f 32ff 	mov.w	r2, #4294967295
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	fa02 f303 	lsl.w	r3, r2, r3
 80074a2:	43da      	mvns	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	401a      	ands	r2, r3
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074ac:	f04f 31ff 	mov.w	r1, #4294967295
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	43d9      	mvns	r1, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074bc:	4313      	orrs	r3, r2
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3724      	adds	r7, #36	@ 0x24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <SysTick_Config>:
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074dc:	d301      	bcc.n	80074e2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80074de:	2301      	movs	r3, #1
 80074e0:	e00f      	b.n	8007502 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074e2:	4a0a      	ldr	r2, [pc, #40]	@ (800750c <SysTick_Config+0x40>)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3b01      	subs	r3, #1
 80074e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074ea:	210f      	movs	r1, #15
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	f7ff ff8e 	bl	8007410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074f4:	4b05      	ldr	r3, [pc, #20]	@ (800750c <SysTick_Config+0x40>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074fa:	4b04      	ldr	r3, [pc, #16]	@ (800750c <SysTick_Config+0x40>)
 80074fc:	2207      	movs	r2, #7
 80074fe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	e000e010 	.word	0xe000e010

08007510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ff29 	bl	8007370 <__NVIC_SetPriorityGrouping>
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	4603      	mov	r3, r0
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007538:	f7ff ff3e 	bl	80073b8 <__NVIC_GetPriorityGrouping>
 800753c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f7ff ff8e 	bl	8007464 <NVIC_EncodePriority>
 8007548:	4602      	mov	r2, r0
 800754a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff ff5d 	bl	8007410 <__NVIC_SetPriority>
}
 8007556:	bf00      	nop
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	4603      	mov	r3, r0
 8007566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff ff31 	bl	80073d4 <__NVIC_EnableIRQ>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff ffa2 	bl	80074cc <SysTick_Config>
 8007588:	4603      	mov	r3, r0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007594:	b480      	push	{r7}
 8007596:	b089      	sub	sp, #36	@ 0x24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075aa:	2300      	movs	r3, #0
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	e159      	b.n	8007864 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075b0:	2201      	movs	r2, #1
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	fa02 f303 	lsl.w	r3, r2, r3
 80075b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4013      	ands	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	f040 8148 	bne.w	800785e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d005      	beq.n	80075e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d130      	bne.n	8007648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	2203      	movs	r2, #3
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	43db      	mvns	r3, r3
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	4013      	ands	r3, r2
 80075fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68da      	ldr	r2, [r3, #12]
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	4313      	orrs	r3, r2
 800760e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800761c:	2201      	movs	r2, #1
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	43db      	mvns	r3, r3
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	f003 0201 	and.w	r2, r3, #1
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	4313      	orrs	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	2b03      	cmp	r3, #3
 8007652:	d017      	beq.n	8007684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	2203      	movs	r2, #3
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	43db      	mvns	r3, r3
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	4013      	ands	r3, r2
 800766a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	4313      	orrs	r3, r2
 800767c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f003 0303 	and.w	r3, r3, #3
 800768c:	2b02      	cmp	r3, #2
 800768e:	d123      	bne.n	80076d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	08da      	lsrs	r2, r3, #3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3208      	adds	r2, #8
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	220f      	movs	r2, #15
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	43db      	mvns	r3, r3
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4013      	ands	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	fa02 f303 	lsl.w	r3, r2, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	08da      	lsrs	r2, r3, #3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3208      	adds	r2, #8
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	2203      	movs	r2, #3
 80076e4:	fa02 f303 	lsl.w	r3, r2, r3
 80076e8:	43db      	mvns	r3, r3
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	4013      	ands	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f003 0203 	and.w	r2, r3, #3
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4313      	orrs	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69ba      	ldr	r2, [r7, #24]
 800770a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80a2 	beq.w	800785e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b57      	ldr	r3, [pc, #348]	@ (800787c <HAL_GPIO_Init+0x2e8>)
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	4a56      	ldr	r2, [pc, #344]	@ (800787c <HAL_GPIO_Init+0x2e8>)
 8007724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007728:	6453      	str	r3, [r2, #68]	@ 0x44
 800772a:	4b54      	ldr	r3, [pc, #336]	@ (800787c <HAL_GPIO_Init+0x2e8>)
 800772c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007736:	4a52      	ldr	r2, [pc, #328]	@ (8007880 <HAL_GPIO_Init+0x2ec>)
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	089b      	lsrs	r3, r3, #2
 800773c:	3302      	adds	r3, #2
 800773e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	220f      	movs	r2, #15
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a49      	ldr	r2, [pc, #292]	@ (8007884 <HAL_GPIO_Init+0x2f0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d019      	beq.n	8007796 <HAL_GPIO_Init+0x202>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a48      	ldr	r2, [pc, #288]	@ (8007888 <HAL_GPIO_Init+0x2f4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d013      	beq.n	8007792 <HAL_GPIO_Init+0x1fe>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a47      	ldr	r2, [pc, #284]	@ (800788c <HAL_GPIO_Init+0x2f8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00d      	beq.n	800778e <HAL_GPIO_Init+0x1fa>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a46      	ldr	r2, [pc, #280]	@ (8007890 <HAL_GPIO_Init+0x2fc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <HAL_GPIO_Init+0x1f6>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a45      	ldr	r2, [pc, #276]	@ (8007894 <HAL_GPIO_Init+0x300>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d101      	bne.n	8007786 <HAL_GPIO_Init+0x1f2>
 8007782:	2304      	movs	r3, #4
 8007784:	e008      	b.n	8007798 <HAL_GPIO_Init+0x204>
 8007786:	2307      	movs	r3, #7
 8007788:	e006      	b.n	8007798 <HAL_GPIO_Init+0x204>
 800778a:	2303      	movs	r3, #3
 800778c:	e004      	b.n	8007798 <HAL_GPIO_Init+0x204>
 800778e:	2302      	movs	r3, #2
 8007790:	e002      	b.n	8007798 <HAL_GPIO_Init+0x204>
 8007792:	2301      	movs	r3, #1
 8007794:	e000      	b.n	8007798 <HAL_GPIO_Init+0x204>
 8007796:	2300      	movs	r3, #0
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	f002 0203 	and.w	r2, r2, #3
 800779e:	0092      	lsls	r2, r2, #2
 80077a0:	4093      	lsls	r3, r2
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077a8:	4935      	ldr	r1, [pc, #212]	@ (8007880 <HAL_GPIO_Init+0x2ec>)
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	3302      	adds	r3, #2
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077b6:	4b38      	ldr	r3, [pc, #224]	@ (8007898 <HAL_GPIO_Init+0x304>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077da:	4a2f      	ldr	r2, [pc, #188]	@ (8007898 <HAL_GPIO_Init+0x304>)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077e0:	4b2d      	ldr	r3, [pc, #180]	@ (8007898 <HAL_GPIO_Init+0x304>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	43db      	mvns	r3, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4013      	ands	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4313      	orrs	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007804:	4a24      	ldr	r2, [pc, #144]	@ (8007898 <HAL_GPIO_Init+0x304>)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800780a:	4b23      	ldr	r3, [pc, #140]	@ (8007898 <HAL_GPIO_Init+0x304>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	43db      	mvns	r3, r3
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	4013      	ands	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	4313      	orrs	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800782e:	4a1a      	ldr	r2, [pc, #104]	@ (8007898 <HAL_GPIO_Init+0x304>)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007834:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <HAL_GPIO_Init+0x304>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	43db      	mvns	r3, r3
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	4013      	ands	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4313      	orrs	r3, r2
 8007856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007858:	4a0f      	ldr	r2, [pc, #60]	@ (8007898 <HAL_GPIO_Init+0x304>)
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	3301      	adds	r3, #1
 8007862:	61fb      	str	r3, [r7, #28]
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b0f      	cmp	r3, #15
 8007868:	f67f aea2 	bls.w	80075b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	3724      	adds	r7, #36	@ 0x24
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40023800 	.word	0x40023800
 8007880:	40013800 	.word	0x40013800
 8007884:	40020000 	.word	0x40020000
 8007888:	40020400 	.word	0x40020400
 800788c:	40020800 	.word	0x40020800
 8007890:	40020c00 	.word	0x40020c00
 8007894:	40021000 	.word	0x40021000
 8007898:	40013c00 	.word	0x40013c00

0800789c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	807b      	strh	r3, [r7, #2]
 80078a8:	4613      	mov	r3, r2
 80078aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078ac:	787b      	ldrb	r3, [r7, #1]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078b8:	e003      	b.n	80078c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078ba:	887b      	ldrh	r3, [r7, #2]
 80078bc:	041a      	lsls	r2, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	619a      	str	r2, [r3, #24]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80078da:	4b08      	ldr	r3, [pc, #32]	@ (80078fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078dc:	695a      	ldr	r2, [r3, #20]
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d006      	beq.n	80078f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078e6:	4a05      	ldr	r2, [pc, #20]	@ (80078fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f9 fb80 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40013c00 	.word	0x40013c00

08007900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e12b      	b.n	8007b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fa f8fc 	bl	8001b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2224      	movs	r2, #36	@ 0x24
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f022 0201 	bic.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007964:	f001 fc36 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 8007968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4a81      	ldr	r2, [pc, #516]	@ (8007b74 <HAL_I2C_Init+0x274>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d807      	bhi.n	8007984 <HAL_I2C_Init+0x84>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4a80      	ldr	r2, [pc, #512]	@ (8007b78 <HAL_I2C_Init+0x278>)
 8007978:	4293      	cmp	r3, r2
 800797a:	bf94      	ite	ls
 800797c:	2301      	movls	r3, #1
 800797e:	2300      	movhi	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	e006      	b.n	8007992 <HAL_I2C_Init+0x92>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a7d      	ldr	r2, [pc, #500]	@ (8007b7c <HAL_I2C_Init+0x27c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	bf94      	ite	ls
 800798c:	2301      	movls	r3, #1
 800798e:	2300      	movhi	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e0e7      	b.n	8007b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a78      	ldr	r2, [pc, #480]	@ (8007b80 <HAL_I2C_Init+0x280>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	0c9b      	lsrs	r3, r3, #18
 80079a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	4a6a      	ldr	r2, [pc, #424]	@ (8007b74 <HAL_I2C_Init+0x274>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d802      	bhi.n	80079d4 <HAL_I2C_Init+0xd4>
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	3301      	adds	r3, #1
 80079d2:	e009      	b.n	80079e8 <HAL_I2C_Init+0xe8>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	4a69      	ldr	r2, [pc, #420]	@ (8007b84 <HAL_I2C_Init+0x284>)
 80079e0:	fba2 2303 	umull	r2, r3, r2, r3
 80079e4:	099b      	lsrs	r3, r3, #6
 80079e6:	3301      	adds	r3, #1
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	430b      	orrs	r3, r1
 80079ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80079fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	495c      	ldr	r1, [pc, #368]	@ (8007b74 <HAL_I2C_Init+0x274>)
 8007a04:	428b      	cmp	r3, r1
 8007a06:	d819      	bhi.n	8007a3c <HAL_I2C_Init+0x13c>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1e59      	subs	r1, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a16:	1c59      	adds	r1, r3, #1
 8007a18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007a1c:	400b      	ands	r3, r1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <HAL_I2C_Init+0x138>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	1e59      	subs	r1, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a30:	3301      	adds	r3, #1
 8007a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a36:	e051      	b.n	8007adc <HAL_I2C_Init+0x1dc>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	e04f      	b.n	8007adc <HAL_I2C_Init+0x1dc>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d111      	bne.n	8007a68 <HAL_I2C_Init+0x168>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	1e58      	subs	r0, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6859      	ldr	r1, [r3, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	440b      	add	r3, r1
 8007a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a56:	3301      	adds	r3, #1
 8007a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf0c      	ite	eq
 8007a60:	2301      	moveq	r3, #1
 8007a62:	2300      	movne	r3, #0
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	e012      	b.n	8007a8e <HAL_I2C_Init+0x18e>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	1e58      	subs	r0, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6859      	ldr	r1, [r3, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	0099      	lsls	r1, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a7e:	3301      	adds	r3, #1
 8007a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_I2C_Init+0x196>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e022      	b.n	8007adc <HAL_I2C_Init+0x1dc>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10e      	bne.n	8007abc <HAL_I2C_Init+0x1bc>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1e58      	subs	r0, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6859      	ldr	r1, [r3, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	440b      	add	r3, r1
 8007aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aba:	e00f      	b.n	8007adc <HAL_I2C_Init+0x1dc>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1e58      	subs	r0, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	0099      	lsls	r1, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	6809      	ldr	r1, [r1, #0]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69da      	ldr	r2, [r3, #28]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	6911      	ldr	r1, [r2, #16]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	68d2      	ldr	r2, [r2, #12]
 8007b16:	4311      	orrs	r1, r2
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695a      	ldr	r2, [r3, #20]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	000186a0 	.word	0x000186a0
 8007b78:	001e847f 	.word	0x001e847f
 8007b7c:	003d08ff 	.word	0x003d08ff
 8007b80:	431bde83 	.word	0x431bde83
 8007b84:	10624dd3 	.word	0x10624dd3

08007b88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	607a      	str	r2, [r7, #4]
 8007b92:	461a      	mov	r2, r3
 8007b94:	460b      	mov	r3, r1
 8007b96:	817b      	strh	r3, [r7, #10]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b9c:	f7ff fbb8 	bl	8007310 <HAL_GetTick>
 8007ba0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b20      	cmp	r3, #32
 8007bac:	f040 80e0 	bne.w	8007d70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2319      	movs	r3, #25
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	4970      	ldr	r1, [pc, #448]	@ (8007d7c <HAL_I2C_Master_Transmit+0x1f4>)
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fc64 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e0d3      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d101      	bne.n	8007bd8 <HAL_I2C_Master_Transmit+0x50>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	e0cc      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d007      	beq.n	8007bfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007c0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2221      	movs	r2, #33	@ 0x21
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2210      	movs	r2, #16
 8007c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	893a      	ldrh	r2, [r7, #8]
 8007c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a50      	ldr	r2, [pc, #320]	@ (8007d80 <HAL_I2C_Master_Transmit+0x1f8>)
 8007c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007c40:	8979      	ldrh	r1, [r7, #10]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	6a3a      	ldr	r2, [r7, #32]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 face 	bl	80081e8 <I2C_MasterRequestWrite>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e08d      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	613b      	str	r3, [r7, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	613b      	str	r3, [r7, #16]
 8007c6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007c6c:	e066      	b.n	8007d3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	6a39      	ldr	r1, [r7, #32]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fd22 	bl	80086bc <I2C_WaitOnTXEFlagUntilTimeout>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00d      	beq.n	8007c9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c82:	2b04      	cmp	r3, #4
 8007c84:	d107      	bne.n	8007c96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e06b      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d11b      	bne.n	8007d10 <HAL_I2C_Master_Transmit+0x188>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d017      	beq.n	8007d10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce4:	781a      	ldrb	r2, [r3, #0]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	6a39      	ldr	r1, [r7, #32]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fd19 	bl	800874c <I2C_WaitOnBTFFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00d      	beq.n	8007d3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d107      	bne.n	8007d38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e01a      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d194      	bne.n	8007c6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e000      	b.n	8007d72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	00100002 	.word	0x00100002
 8007d80:	ffff0000 	.word	0xffff0000

08007d84 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08c      	sub	sp, #48	@ 0x30
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	607a      	str	r2, [r7, #4]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	460b      	mov	r3, r1
 8007d92:	817b      	strh	r3, [r7, #10]
 8007d94:	4613      	mov	r3, r2
 8007d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d98:	f7ff faba 	bl	8007310 <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	f040 8217 	bne.w	80081da <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2319      	movs	r3, #25
 8007db2:	2201      	movs	r2, #1
 8007db4:	497c      	ldr	r1, [pc, #496]	@ (8007fa8 <HAL_I2C_Master_Receive+0x224>)
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fb66 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e20a      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_I2C_Master_Receive+0x50>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e203      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d007      	beq.n	8007dfa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2222      	movs	r2, #34	@ 0x22
 8007e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2210      	movs	r2, #16
 8007e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	893a      	ldrh	r2, [r7, #8]
 8007e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4a5c      	ldr	r2, [pc, #368]	@ (8007fac <HAL_I2C_Master_Receive+0x228>)
 8007e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e3c:	8979      	ldrh	r1, [r7, #10]
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fa52 	bl	80082ec <I2C_MasterRequestRead>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1c4      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d113      	bne.n	8007e82 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	623b      	str	r3, [r7, #32]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	623b      	str	r3, [r7, #32]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	623b      	str	r3, [r7, #32]
 8007e6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e198      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d11b      	bne.n	8007ec2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ebe:	601a      	str	r2, [r3, #0]
 8007ec0:	e178      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d11b      	bne.n	8007f02 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ed8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ee8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eea:	2300      	movs	r3, #0
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	e158      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007f28:	e144      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f200 80f1 	bhi.w	8008116 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d123      	bne.n	8007f84 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 fc4b 	bl	80087dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e145      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007f82:	e117      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d14e      	bne.n	800802a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f92:	2200      	movs	r2, #0
 8007f94:	4906      	ldr	r1, [pc, #24]	@ (8007fb0 <HAL_I2C_Master_Receive+0x22c>)
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 fa76 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e11a      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
 8007fa6:	bf00      	nop
 8007fa8:	00100002 	.word	0x00100002
 8007fac:	ffff0000 	.word	0xffff0000
 8007fb0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	691a      	ldr	r2, [r3, #16]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008012:	3b01      	subs	r3, #1
 8008014:	b29a      	uxth	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008028:	e0c4      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	2200      	movs	r2, #0
 8008032:	496c      	ldr	r1, [pc, #432]	@ (80081e4 <HAL_I2C_Master_Receive+0x460>)
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 fa27 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0cb      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008070:	3b01      	subs	r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800808c:	2200      	movs	r2, #0
 800808e:	4955      	ldr	r1, [pc, #340]	@ (80081e4 <HAL_I2C_Master_Receive+0x460>)
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f9f9 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e09d      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	b2d2      	uxtb	r2, r2
 80080ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	3b01      	subs	r3, #1
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008114:	e04e      	b.n	80081b4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008118:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fb5e 	bl	80087dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e058      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b04      	cmp	r3, #4
 8008168:	d124      	bne.n	80081b4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800816e:	2b03      	cmp	r3, #3
 8008170:	d107      	bne.n	8008182 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008180:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f aeb6 	bne.w	8007f2a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e000      	b.n	80081dc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80081da:	2302      	movs	r3, #2
  }
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	@ 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	00010004 	.word	0x00010004

080081e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	607a      	str	r2, [r7, #4]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	460b      	mov	r3, r1
 80081f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d006      	beq.n	8008212 <I2C_MasterRequestWrite+0x2a>
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d003      	beq.n	8008212 <I2C_MasterRequestWrite+0x2a>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008210:	d108      	bne.n	8008224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e00b      	b.n	800823c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	2b12      	cmp	r3, #18
 800822a:	d107      	bne.n	800823c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800823a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f91d 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00d      	beq.n	8008270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008262:	d103      	bne.n	800826c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800826a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e035      	b.n	80082dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008278:	d108      	bne.n	800828c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800827a:	897b      	ldrh	r3, [r7, #10]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	461a      	mov	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008288:	611a      	str	r2, [r3, #16]
 800828a:	e01b      	b.n	80082c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800828c:	897b      	ldrh	r3, [r7, #10]
 800828e:	11db      	asrs	r3, r3, #7
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0306 	and.w	r3, r3, #6
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f063 030f 	orn	r3, r3, #15
 800829c:	b2da      	uxtb	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	490e      	ldr	r1, [pc, #56]	@ (80082e4 <I2C_MasterRequestWrite+0xfc>)
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f966 	bl	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e010      	b.n	80082dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082ba:	897b      	ldrh	r3, [r7, #10]
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4907      	ldr	r1, [pc, #28]	@ (80082e8 <I2C_MasterRequestWrite+0x100>)
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f956 	bl	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	00010008 	.word	0x00010008
 80082e8:	00010002 	.word	0x00010002

080082ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	607a      	str	r2, [r7, #4]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	460b      	mov	r3, r1
 80082fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008310:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d006      	beq.n	8008326 <I2C_MasterRequestRead+0x3a>
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d003      	beq.n	8008326 <I2C_MasterRequestRead+0x3a>
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008324:	d108      	bne.n	8008338 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e00b      	b.n	8008350 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	2b11      	cmp	r3, #17
 800833e:	d107      	bne.n	8008350 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800834e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 f893 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00d      	beq.n	8008384 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008376:	d103      	bne.n	8008380 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800837e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e079      	b.n	8008478 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800838c:	d108      	bne.n	80083a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800838e:	897b      	ldrh	r3, [r7, #10]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	b2da      	uxtb	r2, r3
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	611a      	str	r2, [r3, #16]
 800839e:	e05f      	b.n	8008460 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083a0:	897b      	ldrh	r3, [r7, #10]
 80083a2:	11db      	asrs	r3, r3, #7
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	f003 0306 	and.w	r3, r3, #6
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f063 030f 	orn	r3, r3, #15
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4930      	ldr	r1, [pc, #192]	@ (8008480 <I2C_MasterRequestRead+0x194>)
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 f8dc 	bl	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e054      	b.n	8008478 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80083ce:	897b      	ldrh	r3, [r7, #10]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4929      	ldr	r1, [pc, #164]	@ (8008484 <I2C_MasterRequestRead+0x198>)
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f8cc 	bl	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e044      	b.n	8008478 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008412:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f831 	bl	8008488 <I2C_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843a:	d103      	bne.n	8008444 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008442:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e017      	b.n	8008478 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008448:	897b      	ldrh	r3, [r7, #10]
 800844a:	11db      	asrs	r3, r3, #7
 800844c:	b2db      	uxtb	r3, r3
 800844e:	f003 0306 	and.w	r3, r3, #6
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f063 030e 	orn	r3, r3, #14
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4907      	ldr	r1, [pc, #28]	@ (8008484 <I2C_MasterRequestRead+0x198>)
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f888 	bl	800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	00010008 	.word	0x00010008
 8008484:	00010002 	.word	0x00010002

08008488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	603b      	str	r3, [r7, #0]
 8008494:	4613      	mov	r3, r2
 8008496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008498:	e048      	b.n	800852c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d044      	beq.n	800852c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084a2:	f7fe ff35 	bl	8007310 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d302      	bcc.n	80084b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d139      	bne.n	800852c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d10d      	bne.n	80084de <I2C_WaitOnFlagUntilTimeout+0x56>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	43da      	mvns	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4013      	ands	r3, r2
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	461a      	mov	r2, r3
 80084dc:	e00c      	b.n	80084f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	43da      	mvns	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4013      	ands	r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bf0c      	ite	eq
 80084f0:	2301      	moveq	r3, #1
 80084f2:	2300      	movne	r3, #0
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d116      	bne.n	800852c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008518:	f043 0220 	orr.w	r2, r3, #32
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e023      	b.n	8008574 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	0c1b      	lsrs	r3, r3, #16
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b01      	cmp	r3, #1
 8008534:	d10d      	bne.n	8008552 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	43da      	mvns	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4013      	ands	r3, r2
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf0c      	ite	eq
 8008548:	2301      	moveq	r3, #1
 800854a:	2300      	movne	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	e00c      	b.n	800856c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	43da      	mvns	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf0c      	ite	eq
 8008564:	2301      	moveq	r3, #1
 8008566:	2300      	movne	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	461a      	mov	r2, r3
 800856c:	79fb      	ldrb	r3, [r7, #7]
 800856e:	429a      	cmp	r2, r3
 8008570:	d093      	beq.n	800849a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800858a:	e071      	b.n	8008670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800859a:	d123      	bne.n	80085e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80085aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80085b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2200      	movs	r2, #0
 80085ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2220      	movs	r2, #32
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d0:	f043 0204 	orr.w	r2, r3, #4
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e067      	b.n	80086b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d041      	beq.n	8008670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ec:	f7fe fe90 	bl	8007310 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d302      	bcc.n	8008602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d136      	bne.n	8008670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d10c      	bne.n	8008626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	43da      	mvns	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4013      	ands	r3, r2
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	bf14      	ite	ne
 800861e:	2301      	movne	r3, #1
 8008620:	2300      	moveq	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	e00b      	b.n	800863e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	43da      	mvns	r2, r3
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	4013      	ands	r3, r2
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d016      	beq.n	8008670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e021      	b.n	80086b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10c      	bne.n	8008694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	43da      	mvns	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	4013      	ands	r3, r2
 8008686:	b29b      	uxth	r3, r3
 8008688:	2b00      	cmp	r3, #0
 800868a:	bf14      	ite	ne
 800868c:	2301      	movne	r3, #1
 800868e:	2300      	moveq	r3, #0
 8008690:	b2db      	uxtb	r3, r3
 8008692:	e00b      	b.n	80086ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	43da      	mvns	r2, r3
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4013      	ands	r3, r2
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bf14      	ite	ne
 80086a6:	2301      	movne	r3, #1
 80086a8:	2300      	moveq	r3, #0
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f47f af6d 	bne.w	800858c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086c8:	e034      	b.n	8008734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 f8e3 	bl	8008896 <I2C_IsAcknowledgeFailed>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e034      	b.n	8008744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d028      	beq.n	8008734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e2:	f7fe fe15 	bl	8007310 <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d302      	bcc.n	80086f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11d      	bne.n	8008734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008702:	2b80      	cmp	r3, #128	@ 0x80
 8008704:	d016      	beq.n	8008734 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008720:	f043 0220 	orr.w	r2, r3, #32
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e007      	b.n	8008744 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873e:	2b80      	cmp	r3, #128	@ 0x80
 8008740:	d1c3      	bne.n	80086ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008758:	e034      	b.n	80087c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 f89b 	bl	8008896 <I2C_IsAcknowledgeFailed>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e034      	b.n	80087d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d028      	beq.n	80087c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	f7fe fdcd 	bl	8007310 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d11d      	bne.n	80087c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b04      	cmp	r3, #4
 8008794:	d016      	beq.n	80087c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b0:	f043 0220 	orr.w	r2, r3, #32
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e007      	b.n	80087d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d1c3      	bne.n	800875a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087e8:	e049      	b.n	800887e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d119      	bne.n	800882c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0210 	mvn.w	r2, #16
 8008800:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2220      	movs	r2, #32
 800880c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e030      	b.n	800888e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
     if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882c:	f7fe fd70 	bl	8007310 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	429a      	cmp	r2, r3
 800883a:	d302      	bcc.n	8008842 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11d      	bne.n	800887e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800884c:	2b40      	cmp	r3, #64	@ 0x40
 800884e:	d016      	beq.n	800887e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	f043 0220 	orr.w	r2, r3, #32
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e007      	b.n	800888e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008888:	2b40      	cmp	r3, #64	@ 0x40
 800888a:	d1ae      	bne.n	80087ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088ac:	d11b      	bne.n	80088e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80088b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d2:	f043 0204 	orr.w	r2, r3, #4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e267      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d075      	beq.n	80089fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008912:	4b88      	ldr	r3, [pc, #544]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 030c 	and.w	r3, r3, #12
 800891a:	2b04      	cmp	r3, #4
 800891c:	d00c      	beq.n	8008938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800891e:	4b85      	ldr	r3, [pc, #532]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008926:	2b08      	cmp	r3, #8
 8008928:	d112      	bne.n	8008950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800892a:	4b82      	ldr	r3, [pc, #520]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008936:	d10b      	bne.n	8008950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008938:	4b7e      	ldr	r3, [pc, #504]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d05b      	beq.n	80089fc <HAL_RCC_OscConfig+0x108>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d157      	bne.n	80089fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e242      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008958:	d106      	bne.n	8008968 <HAL_RCC_OscConfig+0x74>
 800895a:	4b76      	ldr	r3, [pc, #472]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a75      	ldr	r2, [pc, #468]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e01d      	b.n	80089a4 <HAL_RCC_OscConfig+0xb0>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008970:	d10c      	bne.n	800898c <HAL_RCC_OscConfig+0x98>
 8008972:	4b70      	ldr	r3, [pc, #448]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a6f      	ldr	r2, [pc, #444]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	4b6d      	ldr	r3, [pc, #436]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a6c      	ldr	r2, [pc, #432]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	e00b      	b.n	80089a4 <HAL_RCC_OscConfig+0xb0>
 800898c:	4b69      	ldr	r3, [pc, #420]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a68      	ldr	r2, [pc, #416]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	4b66      	ldr	r3, [pc, #408]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a65      	ldr	r2, [pc, #404]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 800899e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ac:	f7fe fcb0 	bl	8007310 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089b4:	f7fe fcac 	bl	8007310 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b64      	cmp	r3, #100	@ 0x64
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e207      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089c6:	4b5b      	ldr	r3, [pc, #364]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0xc0>
 80089d2:	e014      	b.n	80089fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089d4:	f7fe fc9c 	bl	8007310 <HAL_GetTick>
 80089d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089da:	e008      	b.n	80089ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089dc:	f7fe fc98 	bl	8007310 <HAL_GetTick>
 80089e0:	4602      	mov	r2, r0
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	2b64      	cmp	r3, #100	@ 0x64
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e1f3      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ee:	4b51      	ldr	r3, [pc, #324]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1f0      	bne.n	80089dc <HAL_RCC_OscConfig+0xe8>
 80089fa:	e000      	b.n	80089fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d063      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f003 030c 	and.w	r3, r3, #12
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a16:	4b47      	ldr	r3, [pc, #284]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d11c      	bne.n	8008a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a22:	4b44      	ldr	r3, [pc, #272]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d116      	bne.n	8008a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a2e:	4b41      	ldr	r3, [pc, #260]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <HAL_RCC_OscConfig+0x152>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d001      	beq.n	8008a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e1c7      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a46:	4b3b      	ldr	r3, [pc, #236]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4937      	ldr	r1, [pc, #220]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a5a:	e03a      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d020      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a64:	4b34      	ldr	r3, [pc, #208]	@ (8008b38 <HAL_RCC_OscConfig+0x244>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6a:	f7fe fc51 	bl	8007310 <HAL_GetTick>
 8008a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a70:	e008      	b.n	8008a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a72:	f7fe fc4d 	bl	8007310 <HAL_GetTick>
 8008a76:	4602      	mov	r2, r0
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e1a8      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a84:	4b2b      	ldr	r3, [pc, #172]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0f0      	beq.n	8008a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a90:	4b28      	ldr	r3, [pc, #160]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	4925      	ldr	r1, [pc, #148]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	600b      	str	r3, [r1, #0]
 8008aa4:	e015      	b.n	8008ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aa6:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <HAL_RCC_OscConfig+0x244>)
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7fe fc30 	bl	8007310 <HAL_GetTick>
 8008ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ab4:	f7fe fc2c 	bl	8007310 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e187      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1f0      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d036      	beq.n	8008b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ae6:	4b15      	ldr	r3, [pc, #84]	@ (8008b3c <HAL_RCC_OscConfig+0x248>)
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aec:	f7fe fc10 	bl	8007310 <HAL_GetTick>
 8008af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008af4:	f7fe fc0c 	bl	8007310 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e167      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b06:	4b0b      	ldr	r3, [pc, #44]	@ (8008b34 <HAL_RCC_OscConfig+0x240>)
 8008b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0x200>
 8008b12:	e01b      	b.n	8008b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b14:	4b09      	ldr	r3, [pc, #36]	@ (8008b3c <HAL_RCC_OscConfig+0x248>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b1a:	f7fe fbf9 	bl	8007310 <HAL_GetTick>
 8008b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b20:	e00e      	b.n	8008b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b22:	f7fe fbf5 	bl	8007310 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d907      	bls.n	8008b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e150      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
 8008b34:	40023800 	.word	0x40023800
 8008b38:	42470000 	.word	0x42470000
 8008b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b40:	4b88      	ldr	r3, [pc, #544]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ea      	bne.n	8008b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8097 	beq.w	8008c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b5e:	4b81      	ldr	r3, [pc, #516]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10f      	bne.n	8008b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	4a7c      	ldr	r2, [pc, #496]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b82:	60bb      	str	r3, [r7, #8]
 8008b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b8a:	4b77      	ldr	r3, [pc, #476]	@ (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d118      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b96:	4b74      	ldr	r3, [pc, #464]	@ (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a73      	ldr	r2, [pc, #460]	@ (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ba2:	f7fe fbb5 	bl	8007310 <HAL_GetTick>
 8008ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008baa:	f7fe fbb1 	bl	8007310 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e10c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bbc:	4b6a      	ldr	r3, [pc, #424]	@ (8008d68 <HAL_RCC_OscConfig+0x474>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0f0      	beq.n	8008baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d106      	bne.n	8008bde <HAL_RCC_OscConfig+0x2ea>
 8008bd0:	4b64      	ldr	r3, [pc, #400]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd4:	4a63      	ldr	r2, [pc, #396]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bdc:	e01c      	b.n	8008c18 <HAL_RCC_OscConfig+0x324>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	d10c      	bne.n	8008c00 <HAL_RCC_OscConfig+0x30c>
 8008be6:	4b5f      	ldr	r3, [pc, #380]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bea:	4a5e      	ldr	r2, [pc, #376]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bec:	f043 0304 	orr.w	r3, r3, #4
 8008bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf2:	4b5c      	ldr	r3, [pc, #368]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008bf8:	f043 0301 	orr.w	r3, r3, #1
 8008bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bfe:	e00b      	b.n	8008c18 <HAL_RCC_OscConfig+0x324>
 8008c00:	4b58      	ldr	r3, [pc, #352]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c04:	4a57      	ldr	r2, [pc, #348]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c06:	f023 0301 	bic.w	r3, r3, #1
 8008c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c0c:	4b55      	ldr	r3, [pc, #340]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c10:	4a54      	ldr	r2, [pc, #336]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c12:	f023 0304 	bic.w	r3, r3, #4
 8008c16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d015      	beq.n	8008c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c20:	f7fe fb76 	bl	8007310 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c26:	e00a      	b.n	8008c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c28:	f7fe fb72 	bl	8007310 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d901      	bls.n	8008c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e0cb      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c3e:	4b49      	ldr	r3, [pc, #292]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0ee      	beq.n	8008c28 <HAL_RCC_OscConfig+0x334>
 8008c4a:	e014      	b.n	8008c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c4c:	f7fe fb60 	bl	8007310 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c52:	e00a      	b.n	8008c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c54:	f7fe fb5c 	bl	8007310 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d901      	bls.n	8008c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e0b5      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c6a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1ee      	bne.n	8008c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d105      	bne.n	8008c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c7c:	4b39      	ldr	r3, [pc, #228]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c80:	4a38      	ldr	r2, [pc, #224]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 80a1 	beq.w	8008dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c92:	4b34      	ldr	r3, [pc, #208]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f003 030c 	and.w	r3, r3, #12
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d05c      	beq.n	8008d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d141      	bne.n	8008d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ca6:	4b31      	ldr	r3, [pc, #196]	@ (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cac:	f7fe fb30 	bl	8007310 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cb4:	f7fe fb2c 	bl	8007310 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e087      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cc6:	4b27      	ldr	r3, [pc, #156]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f0      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69da      	ldr	r2, [r3, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce0:	019b      	lsls	r3, r3, #6
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce8:	085b      	lsrs	r3, r3, #1
 8008cea:	3b01      	subs	r3, #1
 8008cec:	041b      	lsls	r3, r3, #16
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf4:	061b      	lsls	r3, r3, #24
 8008cf6:	491b      	ldr	r1, [pc, #108]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d02:	f7fe fb05 	bl	8007310 <HAL_GetTick>
 8008d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d0a:	f7fe fb01 	bl	8007310 <HAL_GetTick>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e05c      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d1c:	4b11      	ldr	r3, [pc, #68]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0f0      	beq.n	8008d0a <HAL_RCC_OscConfig+0x416>
 8008d28:	e054      	b.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d2a:	4b10      	ldr	r3, [pc, #64]	@ (8008d6c <HAL_RCC_OscConfig+0x478>)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d30:	f7fe faee 	bl	8007310 <HAL_GetTick>
 8008d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d36:	e008      	b.n	8008d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d38:	f7fe faea 	bl	8007310 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d901      	bls.n	8008d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d46:	2303      	movs	r3, #3
 8008d48:	e045      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4a:	4b06      	ldr	r3, [pc, #24]	@ (8008d64 <HAL_RCC_OscConfig+0x470>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1f0      	bne.n	8008d38 <HAL_RCC_OscConfig+0x444>
 8008d56:	e03d      	b.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e038      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
 8008d64:	40023800 	.word	0x40023800
 8008d68:	40007000 	.word	0x40007000
 8008d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d70:	4b1b      	ldr	r3, [pc, #108]	@ (8008de0 <HAL_RCC_OscConfig+0x4ec>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d028      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d121      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d11a      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008da0:	4013      	ands	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d111      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db6:	085b      	lsrs	r3, r3, #1
 8008db8:	3b01      	subs	r3, #1
 8008dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0cc      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008df8:	4b68      	ldr	r3, [pc, #416]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0307 	and.w	r3, r3, #7
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d90c      	bls.n	8008e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e06:	4b65      	ldr	r3, [pc, #404]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0e:	4b63      	ldr	r3, [pc, #396]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0307 	and.w	r3, r3, #7
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d001      	beq.n	8008e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0b8      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d020      	beq.n	8008e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e38:	4b59      	ldr	r3, [pc, #356]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	4a58      	ldr	r2, [pc, #352]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e50:	4b53      	ldr	r3, [pc, #332]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4a52      	ldr	r2, [pc, #328]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e5c:	4b50      	ldr	r3, [pc, #320]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	494d      	ldr	r1, [pc, #308]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d044      	beq.n	8008f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d107      	bne.n	8008e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e82:	4b47      	ldr	r3, [pc, #284]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d119      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e07f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d003      	beq.n	8008ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d107      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e06f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e067      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ec2:	4b37      	ldr	r3, [pc, #220]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f023 0203 	bic.w	r2, r3, #3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	4934      	ldr	r1, [pc, #208]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ed4:	f7fe fa1c 	bl	8007310 <HAL_GetTick>
 8008ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eda:	e00a      	b.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008edc:	f7fe fa18 	bl	8007310 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e04f      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 020c 	and.w	r2, r3, #12
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d1eb      	bne.n	8008edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f04:	4b25      	ldr	r3, [pc, #148]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d20c      	bcs.n	8008f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f12:	4b22      	ldr	r3, [pc, #136]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f1a:	4b20      	ldr	r3, [pc, #128]	@ (8008f9c <HAL_RCC_ClockConfig+0x1b8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d001      	beq.n	8008f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e032      	b.n	8008f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f38:	4b19      	ldr	r3, [pc, #100]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4916      	ldr	r1, [pc, #88]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0308 	and.w	r3, r3, #8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f56:	4b12      	ldr	r3, [pc, #72]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	490e      	ldr	r1, [pc, #56]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f6a:	f000 f821 	bl	8008fb0 <HAL_RCC_GetSysClockFreq>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b0b      	ldr	r3, [pc, #44]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	091b      	lsrs	r3, r3, #4
 8008f76:	f003 030f 	and.w	r3, r3, #15
 8008f7a:	490a      	ldr	r1, [pc, #40]	@ (8008fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8008f7c:	5ccb      	ldrb	r3, [r1, r3]
 8008f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f82:	4a09      	ldr	r2, [pc, #36]	@ (8008fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8008f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f86:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <HAL_RCC_ClockConfig+0x1c8>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe f97c 	bl	8007288 <HAL_InitTick>

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40023c00 	.word	0x40023c00
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	0800e98c 	.word	0x0800e98c
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	200002c4 	.word	0x200002c4

08008fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fb4:	b094      	sub	sp, #80	@ 0x50
 8008fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fc8:	4b79      	ldr	r3, [pc, #484]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	f003 030c 	and.w	r3, r3, #12
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d00d      	beq.n	8008ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	f200 80e1 	bhi.w	800919c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d003      	beq.n	8008fea <HAL_RCC_GetSysClockFreq+0x3a>
 8008fe2:	e0db      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fe4:	4b73      	ldr	r3, [pc, #460]	@ (80091b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008fe8:	e0db      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fea:	4b73      	ldr	r3, [pc, #460]	@ (80091b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008fee:	e0d8      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ff0:	4b6f      	ldr	r3, [pc, #444]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d063      	beq.n	80090ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009006:	4b6a      	ldr	r3, [pc, #424]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	099b      	lsrs	r3, r3, #6
 800900c:	2200      	movs	r2, #0
 800900e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009010:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009018:	633b      	str	r3, [r7, #48]	@ 0x30
 800901a:	2300      	movs	r3, #0
 800901c:	637b      	str	r3, [r7, #52]	@ 0x34
 800901e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009022:	4622      	mov	r2, r4
 8009024:	462b      	mov	r3, r5
 8009026:	f04f 0000 	mov.w	r0, #0
 800902a:	f04f 0100 	mov.w	r1, #0
 800902e:	0159      	lsls	r1, r3, #5
 8009030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009034:	0150      	lsls	r0, r2, #5
 8009036:	4602      	mov	r2, r0
 8009038:	460b      	mov	r3, r1
 800903a:	4621      	mov	r1, r4
 800903c:	1a51      	subs	r1, r2, r1
 800903e:	6139      	str	r1, [r7, #16]
 8009040:	4629      	mov	r1, r5
 8009042:	eb63 0301 	sbc.w	r3, r3, r1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009054:	4659      	mov	r1, fp
 8009056:	018b      	lsls	r3, r1, #6
 8009058:	4651      	mov	r1, sl
 800905a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800905e:	4651      	mov	r1, sl
 8009060:	018a      	lsls	r2, r1, #6
 8009062:	4651      	mov	r1, sl
 8009064:	ebb2 0801 	subs.w	r8, r2, r1
 8009068:	4659      	mov	r1, fp
 800906a:	eb63 0901 	sbc.w	r9, r3, r1
 800906e:	f04f 0200 	mov.w	r2, #0
 8009072:	f04f 0300 	mov.w	r3, #0
 8009076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800907a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800907e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009082:	4690      	mov	r8, r2
 8009084:	4699      	mov	r9, r3
 8009086:	4623      	mov	r3, r4
 8009088:	eb18 0303 	adds.w	r3, r8, r3
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	462b      	mov	r3, r5
 8009090:	eb49 0303 	adc.w	r3, r9, r3
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80090a2:	4629      	mov	r1, r5
 80090a4:	024b      	lsls	r3, r1, #9
 80090a6:	4621      	mov	r1, r4
 80090a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090ac:	4621      	mov	r1, r4
 80090ae:	024a      	lsls	r2, r1, #9
 80090b0:	4610      	mov	r0, r2
 80090b2:	4619      	mov	r1, r3
 80090b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090b6:	2200      	movs	r2, #0
 80090b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090c0:	f7f7 fdea 	bl	8000c98 <__aeabi_uldivmod>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	4613      	mov	r3, r2
 80090ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090cc:	e058      	b.n	8009180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090ce:	4b38      	ldr	r3, [pc, #224]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	099b      	lsrs	r3, r3, #6
 80090d4:	2200      	movs	r2, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	4611      	mov	r1, r2
 80090da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090de:	623b      	str	r3, [r7, #32]
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	f04f 0000 	mov.w	r0, #0
 80090f0:	f04f 0100 	mov.w	r1, #0
 80090f4:	0159      	lsls	r1, r3, #5
 80090f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090fa:	0150      	lsls	r0, r2, #5
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4641      	mov	r1, r8
 8009102:	ebb2 0a01 	subs.w	sl, r2, r1
 8009106:	4649      	mov	r1, r9
 8009108:	eb63 0b01 	sbc.w	fp, r3, r1
 800910c:	f04f 0200 	mov.w	r2, #0
 8009110:	f04f 0300 	mov.w	r3, #0
 8009114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800911c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009120:	ebb2 040a 	subs.w	r4, r2, sl
 8009124:	eb63 050b 	sbc.w	r5, r3, fp
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	00eb      	lsls	r3, r5, #3
 8009132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009136:	00e2      	lsls	r2, r4, #3
 8009138:	4614      	mov	r4, r2
 800913a:	461d      	mov	r5, r3
 800913c:	4643      	mov	r3, r8
 800913e:	18e3      	adds	r3, r4, r3
 8009140:	603b      	str	r3, [r7, #0]
 8009142:	464b      	mov	r3, r9
 8009144:	eb45 0303 	adc.w	r3, r5, r3
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	f04f 0300 	mov.w	r3, #0
 8009152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009156:	4629      	mov	r1, r5
 8009158:	028b      	lsls	r3, r1, #10
 800915a:	4621      	mov	r1, r4
 800915c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009160:	4621      	mov	r1, r4
 8009162:	028a      	lsls	r2, r1, #10
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916a:	2200      	movs	r2, #0
 800916c:	61bb      	str	r3, [r7, #24]
 800916e:	61fa      	str	r2, [r7, #28]
 8009170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009174:	f7f7 fd90 	bl	8000c98 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4613      	mov	r3, r2
 800917e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009180:	4b0b      	ldr	r3, [pc, #44]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	0c1b      	lsrs	r3, r3, #16
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	3301      	adds	r3, #1
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8009190:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009194:	fbb2 f3f3 	udiv	r3, r2, r3
 8009198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800919a:	e002      	b.n	80091a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800919c:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800919e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80091a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80091a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3750      	adds	r7, #80	@ 0x50
 80091a8:	46bd      	mov	sp, r7
 80091aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091ae:	bf00      	nop
 80091b0:	40023800 	.word	0x40023800
 80091b4:	00f42400 	.word	0x00f42400
 80091b8:	007a1200 	.word	0x007a1200

080091bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091c0:	4b03      	ldr	r3, [pc, #12]	@ (80091d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091c2:	681b      	ldr	r3, [r3, #0]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	20000000 	.word	0x20000000

080091d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091d8:	f7ff fff0 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 80091dc:	4602      	mov	r2, r0
 80091de:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	0a9b      	lsrs	r3, r3, #10
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	4903      	ldr	r1, [pc, #12]	@ (80091f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091ea:	5ccb      	ldrb	r3, [r1, r3]
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	40023800 	.word	0x40023800
 80091f8:	0800e99c 	.word	0x0800e99c

080091fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009200:	f7ff ffdc 	bl	80091bc <HAL_RCC_GetHCLKFreq>
 8009204:	4602      	mov	r2, r0
 8009206:	4b05      	ldr	r3, [pc, #20]	@ (800921c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	0b5b      	lsrs	r3, r3, #13
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	4903      	ldr	r1, [pc, #12]	@ (8009220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009212:	5ccb      	ldrb	r3, [r1, r3]
 8009214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009218:	4618      	mov	r0, r3
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40023800 	.word	0x40023800
 8009220:	0800e99c 	.word	0x0800e99c

08009224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e041      	b.n	80092ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d106      	bne.n	8009250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7f8 fd02 	bl	8001c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3304      	adds	r3, #4
 8009260:	4619      	mov	r1, r3
 8009262:	4610      	mov	r0, r2
 8009264:	f000 fb16 	bl	8009894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d001      	beq.n	80092dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e044      	b.n	8009366 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f042 0201 	orr.w	r2, r2, #1
 80092f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009374 <HAL_TIM_Base_Start_IT+0xb0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d018      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x6c>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009306:	d013      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x6c>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1a      	ldr	r2, [pc, #104]	@ (8009378 <HAL_TIM_Base_Start_IT+0xb4>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d00e      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x6c>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a19      	ldr	r2, [pc, #100]	@ (800937c <HAL_TIM_Base_Start_IT+0xb8>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d009      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x6c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a17      	ldr	r2, [pc, #92]	@ (8009380 <HAL_TIM_Base_Start_IT+0xbc>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d004      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x6c>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a16      	ldr	r2, [pc, #88]	@ (8009384 <HAL_TIM_Base_Start_IT+0xc0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d111      	bne.n	8009354 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b06      	cmp	r3, #6
 8009340:	d010      	beq.n	8009364 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f042 0201 	orr.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009352:	e007      	b.n	8009364 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40010000 	.word	0x40010000
 8009378:	40000400 	.word	0x40000400
 800937c:	40000800 	.word	0x40000800
 8009380:	40000c00 	.word	0x40000c00
 8009384:	40014000 	.word	0x40014000

08009388 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e097      	b.n	80094cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f8 fbff 	bl	8001bb4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2202      	movs	r2, #2
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6812      	ldr	r2, [r2, #0]
 80093c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f000 fa59 	bl	8009894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	4313      	orrs	r3, r2
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009428:	f023 030c 	bic.w	r3, r3, #12
 800942c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009434:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	021b      	lsls	r3, r3, #8
 8009444:	4313      	orrs	r3, r2
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	011a      	lsls	r2, r3, #4
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	031b      	lsls	r3, r3, #12
 8009458:	4313      	orrs	r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	4313      	orrs	r3, r2
 800945e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009466:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800946e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	011b      	lsls	r3, r3, #4
 800947a:	4313      	orrs	r3, r2
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d020      	beq.n	8009538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01b      	beq.n	8009538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f06f 0202 	mvn.w	r2, #2
 8009508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f999 	bl	8009856 <HAL_TIM_IC_CaptureCallback>
 8009524:	e005      	b.n	8009532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f98b 	bl	8009842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f99c 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d020      	beq.n	8009584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d01b      	beq.n	8009584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0204 	mvn.w	r2, #4
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2202      	movs	r2, #2
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f973 	bl	8009856 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f965 	bl	8009842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f976 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 0308 	and.w	r3, r3, #8
 800958a:	2b00      	cmp	r3, #0
 800958c:	d020      	beq.n	80095d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01b      	beq.n	80095d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f06f 0208 	mvn.w	r2, #8
 80095a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2204      	movs	r2, #4
 80095a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f94d 	bl	8009856 <HAL_TIM_IC_CaptureCallback>
 80095bc:	e005      	b.n	80095ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f93f 	bl	8009842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f950 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f003 0310 	and.w	r3, r3, #16
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d020      	beq.n	800961c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f003 0310 	and.w	r3, r3, #16
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01b      	beq.n	800961c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f06f 0210 	mvn.w	r2, #16
 80095ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2208      	movs	r2, #8
 80095f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f927 	bl	8009856 <HAL_TIM_IC_CaptureCallback>
 8009608:	e005      	b.n	8009616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f919 	bl	8009842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f92a 	bl	800986a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00c      	beq.n	8009640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f06f 0201 	mvn.w	r2, #1
 8009638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7f7 fcee 	bl	800101c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800965c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fab6 	bl	8009bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00c      	beq.n	8009688 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f8fb 	bl	800987e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00c      	beq.n	80096ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d007      	beq.n	80096ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f06f 0220 	mvn.w	r2, #32
 80096a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fa88 	bl	8009bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d101      	bne.n	80096d0 <HAL_TIM_ConfigClockSource+0x1c>
 80096cc:	2302      	movs	r3, #2
 80096ce:	e0b4      	b.n	800983a <HAL_TIM_ConfigClockSource+0x186>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80096ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009708:	d03e      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0xd4>
 800970a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800970e:	f200 8087 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009716:	f000 8086 	beq.w	8009826 <HAL_TIM_ConfigClockSource+0x172>
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800971e:	d87f      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009720:	2b70      	cmp	r3, #112	@ 0x70
 8009722:	d01a      	beq.n	800975a <HAL_TIM_ConfigClockSource+0xa6>
 8009724:	2b70      	cmp	r3, #112	@ 0x70
 8009726:	d87b      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009728:	2b60      	cmp	r3, #96	@ 0x60
 800972a:	d050      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x11a>
 800972c:	2b60      	cmp	r3, #96	@ 0x60
 800972e:	d877      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009730:	2b50      	cmp	r3, #80	@ 0x50
 8009732:	d03c      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0xfa>
 8009734:	2b50      	cmp	r3, #80	@ 0x50
 8009736:	d873      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009738:	2b40      	cmp	r3, #64	@ 0x40
 800973a:	d058      	beq.n	80097ee <HAL_TIM_ConfigClockSource+0x13a>
 800973c:	2b40      	cmp	r3, #64	@ 0x40
 800973e:	d86f      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009740:	2b30      	cmp	r3, #48	@ 0x30
 8009742:	d064      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x15a>
 8009744:	2b30      	cmp	r3, #48	@ 0x30
 8009746:	d86b      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009748:	2b20      	cmp	r3, #32
 800974a:	d060      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x15a>
 800974c:	2b20      	cmp	r3, #32
 800974e:	d867      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d05c      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x15a>
 8009754:	2b10      	cmp	r3, #16
 8009756:	d05a      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x15a>
 8009758:	e062      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800976a:	f000 f999 	bl	8009aa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800977c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	609a      	str	r2, [r3, #8]
      break;
 8009786:	e04f      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009798:	f000 f982 	bl	8009aa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097aa:	609a      	str	r2, [r3, #8]
      break;
 80097ac:	e03c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ba:	461a      	mov	r2, r3
 80097bc:	f000 f8f6 	bl	80099ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2150      	movs	r1, #80	@ 0x50
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f94f 	bl	8009a6a <TIM_ITRx_SetConfig>
      break;
 80097cc:	e02c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097da:	461a      	mov	r2, r3
 80097dc:	f000 f915 	bl	8009a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2160      	movs	r1, #96	@ 0x60
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 f93f 	bl	8009a6a <TIM_ITRx_SetConfig>
      break;
 80097ec:	e01c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fa:	461a      	mov	r2, r3
 80097fc:	f000 f8d6 	bl	80099ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2140      	movs	r1, #64	@ 0x40
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f92f 	bl	8009a6a <TIM_ITRx_SetConfig>
      break;
 800980c:	e00c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f000 f926 	bl	8009a6a <TIM_ITRx_SetConfig>
      break;
 800981e:	e003      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e000      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009842:	b480      	push	{r7}
 8009844:	b083      	sub	sp, #12
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800984a:	bf00      	nop
 800984c:	370c      	adds	r7, #12
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
	...

08009894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a3a      	ldr	r2, [pc, #232]	@ (8009990 <TIM_Base_SetConfig+0xfc>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d00f      	beq.n	80098cc <TIM_Base_SetConfig+0x38>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098b2:	d00b      	beq.n	80098cc <TIM_Base_SetConfig+0x38>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a37      	ldr	r2, [pc, #220]	@ (8009994 <TIM_Base_SetConfig+0x100>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d007      	beq.n	80098cc <TIM_Base_SetConfig+0x38>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4a36      	ldr	r2, [pc, #216]	@ (8009998 <TIM_Base_SetConfig+0x104>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d003      	beq.n	80098cc <TIM_Base_SetConfig+0x38>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a35      	ldr	r2, [pc, #212]	@ (800999c <TIM_Base_SetConfig+0x108>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d108      	bne.n	80098de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	4313      	orrs	r3, r2
 80098dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a2b      	ldr	r2, [pc, #172]	@ (8009990 <TIM_Base_SetConfig+0xfc>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d01b      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ec:	d017      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a28      	ldr	r2, [pc, #160]	@ (8009994 <TIM_Base_SetConfig+0x100>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d013      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a27      	ldr	r2, [pc, #156]	@ (8009998 <TIM_Base_SetConfig+0x104>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d00f      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a26      	ldr	r2, [pc, #152]	@ (800999c <TIM_Base_SetConfig+0x108>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00b      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a25      	ldr	r2, [pc, #148]	@ (80099a0 <TIM_Base_SetConfig+0x10c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d007      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a24      	ldr	r2, [pc, #144]	@ (80099a4 <TIM_Base_SetConfig+0x110>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d003      	beq.n	800991e <TIM_Base_SetConfig+0x8a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a23      	ldr	r2, [pc, #140]	@ (80099a8 <TIM_Base_SetConfig+0x114>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d108      	bne.n	8009930 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4313      	orrs	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a0e      	ldr	r2, [pc, #56]	@ (8009990 <TIM_Base_SetConfig+0xfc>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d103      	bne.n	8009964 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	691a      	ldr	r2, [r3, #16]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	2b01      	cmp	r3, #1
 8009974:	d105      	bne.n	8009982 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f023 0201 	bic.w	r2, r3, #1
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	611a      	str	r2, [r3, #16]
  }
}
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40010000 	.word	0x40010000
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40000c00 	.word	0x40000c00
 80099a0:	40014000 	.word	0x40014000
 80099a4:	40014400 	.word	0x40014400
 80099a8:	40014800 	.word	0x40014800

080099ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f023 0201 	bic.w	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f023 030a 	bic.w	r3, r3, #10
 80099e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	621a      	str	r2, [r3, #32]
}
 80099fe:	bf00      	nop
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b087      	sub	sp, #28
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	f023 0210 	bic.w	r2, r3, #16
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	031b      	lsls	r3, r3, #12
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	621a      	str	r2, [r3, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b085      	sub	sp, #20
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	f043 0307 	orr.w	r3, r3, #7
 8009a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
 8009aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	021a      	lsls	r2, r3, #8
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	609a      	str	r2, [r3, #8]
}
 8009ad4:	bf00      	nop
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d101      	bne.n	8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009af4:	2302      	movs	r3, #2
 8009af6:	e050      	b.n	8009b9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1c      	ldr	r2, [pc, #112]	@ (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d018      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b44:	d013      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a18      	ldr	r2, [pc, #96]	@ (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a16      	ldr	r2, [pc, #88]	@ (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	@ (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a13      	ldr	r2, [pc, #76]	@ (8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d10c      	bne.n	8009b88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40000800 	.word	0x40000800
 8009bb4:	40000c00 	.word	0x40000c00
 8009bb8:	40014000 	.word	0x40014000

08009bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b083      	sub	sp, #12
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e042      	b.n	8009c7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d106      	bne.n	8009c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7f8 f868 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2224      	movs	r2, #36	@ 0x24
 8009c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f82b 	bl	8009c84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691a      	ldr	r2, [r3, #16]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	695a      	ldr	r2, [r3, #20]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2220      	movs	r2, #32
 8009c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c88:	b0c0      	sub	sp, #256	@ 0x100
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca0:	68d9      	ldr	r1, [r3, #12]
 8009ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	ea40 0301 	orr.w	r3, r0, r1
 8009cac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc0:	695b      	ldr	r3, [r3, #20]
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009cdc:	f021 010c 	bic.w	r1, r1, #12
 8009ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cea:	430b      	orrs	r3, r1
 8009cec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfe:	6999      	ldr	r1, [r3, #24]
 8009d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	ea40 0301 	orr.w	r3, r0, r1
 8009d0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b8f      	ldr	r3, [pc, #572]	@ (8009f50 <UART_SetConfig+0x2cc>)
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d005      	beq.n	8009d24 <UART_SetConfig+0xa0>
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	4b8d      	ldr	r3, [pc, #564]	@ (8009f54 <UART_SetConfig+0x2d0>)
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d104      	bne.n	8009d2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7ff fa6a 	bl	80091fc <HAL_RCC_GetPCLK2Freq>
 8009d28:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009d2c:	e003      	b.n	8009d36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009d2e:	f7ff fa51 	bl	80091d4 <HAL_RCC_GetPCLK1Freq>
 8009d32:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d3a:	69db      	ldr	r3, [r3, #28]
 8009d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d40:	f040 810c 	bne.w	8009f5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009d4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009d52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	1891      	adds	r1, r2, r2
 8009d5c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d5e:	415b      	adcs	r3, r3
 8009d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009d66:	4621      	mov	r1, r4
 8009d68:	eb12 0801 	adds.w	r8, r2, r1
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	eb43 0901 	adc.w	r9, r3, r1
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	f04f 0300 	mov.w	r3, #0
 8009d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d86:	4690      	mov	r8, r2
 8009d88:	4699      	mov	r9, r3
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	eb18 0303 	adds.w	r3, r8, r3
 8009d90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d94:	462b      	mov	r3, r5
 8009d96:	eb49 0303 	adc.w	r3, r9, r3
 8009d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009daa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009dae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009db2:	460b      	mov	r3, r1
 8009db4:	18db      	adds	r3, r3, r3
 8009db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009db8:	4613      	mov	r3, r2
 8009dba:	eb42 0303 	adc.w	r3, r2, r3
 8009dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009dc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009dc8:	f7f6 ff66 	bl	8000c98 <__aeabi_uldivmod>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4b61      	ldr	r3, [pc, #388]	@ (8009f58 <UART_SetConfig+0x2d4>)
 8009dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8009dd6:	095b      	lsrs	r3, r3, #5
 8009dd8:	011c      	lsls	r4, r3, #4
 8009dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009de4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009de8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009dec:	4642      	mov	r2, r8
 8009dee:	464b      	mov	r3, r9
 8009df0:	1891      	adds	r1, r2, r2
 8009df2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009df4:	415b      	adcs	r3, r3
 8009df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009df8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009dfc:	4641      	mov	r1, r8
 8009dfe:	eb12 0a01 	adds.w	sl, r2, r1
 8009e02:	4649      	mov	r1, r9
 8009e04:	eb43 0b01 	adc.w	fp, r3, r1
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	f04f 0300 	mov.w	r3, #0
 8009e10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009e14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009e18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e1c:	4692      	mov	sl, r2
 8009e1e:	469b      	mov	fp, r3
 8009e20:	4643      	mov	r3, r8
 8009e22:	eb1a 0303 	adds.w	r3, sl, r3
 8009e26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	eb4b 0303 	adc.w	r3, fp, r3
 8009e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009e44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	18db      	adds	r3, r3, r3
 8009e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e4e:	4613      	mov	r3, r2
 8009e50:	eb42 0303 	adc.w	r3, r2, r3
 8009e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009e5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009e5e:	f7f6 ff1b 	bl	8000c98 <__aeabi_uldivmod>
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4611      	mov	r1, r2
 8009e68:	4b3b      	ldr	r3, [pc, #236]	@ (8009f58 <UART_SetConfig+0x2d4>)
 8009e6a:	fba3 2301 	umull	r2, r3, r3, r1
 8009e6e:	095b      	lsrs	r3, r3, #5
 8009e70:	2264      	movs	r2, #100	@ 0x64
 8009e72:	fb02 f303 	mul.w	r3, r2, r3
 8009e76:	1acb      	subs	r3, r1, r3
 8009e78:	00db      	lsls	r3, r3, #3
 8009e7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009e7e:	4b36      	ldr	r3, [pc, #216]	@ (8009f58 <UART_SetConfig+0x2d4>)
 8009e80:	fba3 2302 	umull	r2, r3, r3, r2
 8009e84:	095b      	lsrs	r3, r3, #5
 8009e86:	005b      	lsls	r3, r3, #1
 8009e88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009e8c:	441c      	add	r4, r3
 8009e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e92:	2200      	movs	r2, #0
 8009e94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009e9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	464b      	mov	r3, r9
 8009ea4:	1891      	adds	r1, r2, r2
 8009ea6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009ea8:	415b      	adcs	r3, r3
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	1851      	adds	r1, r2, r1
 8009eb4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	414b      	adcs	r3, r1
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebc:	f04f 0200 	mov.w	r2, #0
 8009ec0:	f04f 0300 	mov.w	r3, #0
 8009ec4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ec8:	4659      	mov	r1, fp
 8009eca:	00cb      	lsls	r3, r1, #3
 8009ecc:	4651      	mov	r1, sl
 8009ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ed2:	4651      	mov	r1, sl
 8009ed4:	00ca      	lsls	r2, r1, #3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	4642      	mov	r2, r8
 8009ede:	189b      	adds	r3, r3, r2
 8009ee0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	460a      	mov	r2, r1
 8009ee8:	eb42 0303 	adc.w	r3, r2, r3
 8009eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009efc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f04:	460b      	mov	r3, r1
 8009f06:	18db      	adds	r3, r3, r3
 8009f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	eb42 0303 	adc.w	r3, r2, r3
 8009f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009f16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009f1a:	f7f6 febd 	bl	8000c98 <__aeabi_uldivmod>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4b0d      	ldr	r3, [pc, #52]	@ (8009f58 <UART_SetConfig+0x2d4>)
 8009f24:	fba3 1302 	umull	r1, r3, r3, r2
 8009f28:	095b      	lsrs	r3, r3, #5
 8009f2a:	2164      	movs	r1, #100	@ 0x64
 8009f2c:	fb01 f303 	mul.w	r3, r1, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	3332      	adds	r3, #50	@ 0x32
 8009f36:	4a08      	ldr	r2, [pc, #32]	@ (8009f58 <UART_SetConfig+0x2d4>)
 8009f38:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3c:	095b      	lsrs	r3, r3, #5
 8009f3e:	f003 0207 	and.w	r2, r3, #7
 8009f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4422      	add	r2, r4
 8009f4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f4c:	e106      	b.n	800a15c <UART_SetConfig+0x4d8>
 8009f4e:	bf00      	nop
 8009f50:	40011000 	.word	0x40011000
 8009f54:	40011400 	.word	0x40011400
 8009f58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009f6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009f6e:	4642      	mov	r2, r8
 8009f70:	464b      	mov	r3, r9
 8009f72:	1891      	adds	r1, r2, r2
 8009f74:	6239      	str	r1, [r7, #32]
 8009f76:	415b      	adcs	r3, r3
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f7e:	4641      	mov	r1, r8
 8009f80:	1854      	adds	r4, r2, r1
 8009f82:	4649      	mov	r1, r9
 8009f84:	eb43 0501 	adc.w	r5, r3, r1
 8009f88:	f04f 0200 	mov.w	r2, #0
 8009f8c:	f04f 0300 	mov.w	r3, #0
 8009f90:	00eb      	lsls	r3, r5, #3
 8009f92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f96:	00e2      	lsls	r2, r4, #3
 8009f98:	4614      	mov	r4, r2
 8009f9a:	461d      	mov	r5, r3
 8009f9c:	4643      	mov	r3, r8
 8009f9e:	18e3      	adds	r3, r4, r3
 8009fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	eb45 0303 	adc.w	r3, r5, r3
 8009faa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009fbe:	f04f 0200 	mov.w	r2, #0
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009fca:	4629      	mov	r1, r5
 8009fcc:	008b      	lsls	r3, r1, #2
 8009fce:	4621      	mov	r1, r4
 8009fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	008a      	lsls	r2, r1, #2
 8009fd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009fdc:	f7f6 fe5c 	bl	8000c98 <__aeabi_uldivmod>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4b60      	ldr	r3, [pc, #384]	@ (800a168 <UART_SetConfig+0x4e4>)
 8009fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	011c      	lsls	r4, r3, #4
 8009fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ff8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ffc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a000:	4642      	mov	r2, r8
 800a002:	464b      	mov	r3, r9
 800a004:	1891      	adds	r1, r2, r2
 800a006:	61b9      	str	r1, [r7, #24]
 800a008:	415b      	adcs	r3, r3
 800a00a:	61fb      	str	r3, [r7, #28]
 800a00c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a010:	4641      	mov	r1, r8
 800a012:	1851      	adds	r1, r2, r1
 800a014:	6139      	str	r1, [r7, #16]
 800a016:	4649      	mov	r1, r9
 800a018:	414b      	adcs	r3, r1
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a028:	4659      	mov	r1, fp
 800a02a:	00cb      	lsls	r3, r1, #3
 800a02c:	4651      	mov	r1, sl
 800a02e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a032:	4651      	mov	r1, sl
 800a034:	00ca      	lsls	r2, r1, #3
 800a036:	4610      	mov	r0, r2
 800a038:	4619      	mov	r1, r3
 800a03a:	4603      	mov	r3, r0
 800a03c:	4642      	mov	r2, r8
 800a03e:	189b      	adds	r3, r3, r2
 800a040:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a044:	464b      	mov	r3, r9
 800a046:	460a      	mov	r2, r1
 800a048:	eb42 0303 	adc.w	r3, r2, r3
 800a04c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a05a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	f04f 0300 	mov.w	r3, #0
 800a064:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a068:	4649      	mov	r1, r9
 800a06a:	008b      	lsls	r3, r1, #2
 800a06c:	4641      	mov	r1, r8
 800a06e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a072:	4641      	mov	r1, r8
 800a074:	008a      	lsls	r2, r1, #2
 800a076:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a07a:	f7f6 fe0d 	bl	8000c98 <__aeabi_uldivmod>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	4611      	mov	r1, r2
 800a084:	4b38      	ldr	r3, [pc, #224]	@ (800a168 <UART_SetConfig+0x4e4>)
 800a086:	fba3 2301 	umull	r2, r3, r3, r1
 800a08a:	095b      	lsrs	r3, r3, #5
 800a08c:	2264      	movs	r2, #100	@ 0x64
 800a08e:	fb02 f303 	mul.w	r3, r2, r3
 800a092:	1acb      	subs	r3, r1, r3
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	3332      	adds	r3, #50	@ 0x32
 800a098:	4a33      	ldr	r2, [pc, #204]	@ (800a168 <UART_SetConfig+0x4e4>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0a4:	441c      	add	r4, r3
 800a0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0ae:	677a      	str	r2, [r7, #116]	@ 0x74
 800a0b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	1891      	adds	r1, r2, r2
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	415b      	adcs	r3, r3
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	1851      	adds	r1, r2, r1
 800a0c8:	6039      	str	r1, [r7, #0]
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	414b      	adcs	r3, r1
 800a0ce:	607b      	str	r3, [r7, #4]
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0dc:	4659      	mov	r1, fp
 800a0de:	00cb      	lsls	r3, r1, #3
 800a0e0:	4651      	mov	r1, sl
 800a0e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0e6:	4651      	mov	r1, sl
 800a0e8:	00ca      	lsls	r2, r1, #3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	189b      	adds	r3, r3, r2
 800a0f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	460a      	mov	r2, r1
 800a0fa:	eb42 0303 	adc.w	r3, r2, r3
 800a0fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	663b      	str	r3, [r7, #96]	@ 0x60
 800a10a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a118:	4649      	mov	r1, r9
 800a11a:	008b      	lsls	r3, r1, #2
 800a11c:	4641      	mov	r1, r8
 800a11e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a122:	4641      	mov	r1, r8
 800a124:	008a      	lsls	r2, r1, #2
 800a126:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a12a:	f7f6 fdb5 	bl	8000c98 <__aeabi_uldivmod>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <UART_SetConfig+0x4e4>)
 800a134:	fba3 1302 	umull	r1, r3, r3, r2
 800a138:	095b      	lsrs	r3, r3, #5
 800a13a:	2164      	movs	r1, #100	@ 0x64
 800a13c:	fb01 f303 	mul.w	r3, r1, r3
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	3332      	adds	r3, #50	@ 0x32
 800a146:	4a08      	ldr	r2, [pc, #32]	@ (800a168 <UART_SetConfig+0x4e4>)
 800a148:	fba2 2303 	umull	r2, r3, r2, r3
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	f003 020f 	and.w	r2, r3, #15
 800a152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4422      	add	r2, r4
 800a15a:	609a      	str	r2, [r3, #8]
}
 800a15c:	bf00      	nop
 800a15e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a162:	46bd      	mov	sp, r7
 800a164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a168:	51eb851f 	.word	0x51eb851f

0800a16c <__cvt>:
 800a16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a170:	ec57 6b10 	vmov	r6, r7, d0
 800a174:	2f00      	cmp	r7, #0
 800a176:	460c      	mov	r4, r1
 800a178:	4619      	mov	r1, r3
 800a17a:	463b      	mov	r3, r7
 800a17c:	bfbb      	ittet	lt
 800a17e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a182:	461f      	movlt	r7, r3
 800a184:	2300      	movge	r3, #0
 800a186:	232d      	movlt	r3, #45	@ 0x2d
 800a188:	700b      	strb	r3, [r1, #0]
 800a18a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a18c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a190:	4691      	mov	r9, r2
 800a192:	f023 0820 	bic.w	r8, r3, #32
 800a196:	bfbc      	itt	lt
 800a198:	4632      	movlt	r2, r6
 800a19a:	4616      	movlt	r6, r2
 800a19c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1a0:	d005      	beq.n	800a1ae <__cvt+0x42>
 800a1a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a1a6:	d100      	bne.n	800a1aa <__cvt+0x3e>
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	e000      	b.n	800a1b0 <__cvt+0x44>
 800a1ae:	2103      	movs	r1, #3
 800a1b0:	ab03      	add	r3, sp, #12
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	ab02      	add	r3, sp, #8
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	ec47 6b10 	vmov	d0, r6, r7
 800a1bc:	4653      	mov	r3, sl
 800a1be:	4622      	mov	r2, r4
 800a1c0:	f001 fa4e 	bl	800b660 <_dtoa_r>
 800a1c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a1c8:	4605      	mov	r5, r0
 800a1ca:	d119      	bne.n	800a200 <__cvt+0x94>
 800a1cc:	f019 0f01 	tst.w	r9, #1
 800a1d0:	d00e      	beq.n	800a1f0 <__cvt+0x84>
 800a1d2:	eb00 0904 	add.w	r9, r0, r4
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1e2:	b108      	cbz	r0, 800a1e8 <__cvt+0x7c>
 800a1e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a1e8:	2230      	movs	r2, #48	@ 0x30
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	454b      	cmp	r3, r9
 800a1ee:	d31e      	bcc.n	800a22e <__cvt+0xc2>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1f4:	1b5b      	subs	r3, r3, r5
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	b004      	add	sp, #16
 800a1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a200:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a204:	eb00 0904 	add.w	r9, r0, r4
 800a208:	d1e5      	bne.n	800a1d6 <__cvt+0x6a>
 800a20a:	7803      	ldrb	r3, [r0, #0]
 800a20c:	2b30      	cmp	r3, #48	@ 0x30
 800a20e:	d10a      	bne.n	800a226 <__cvt+0xba>
 800a210:	2200      	movs	r2, #0
 800a212:	2300      	movs	r3, #0
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 fc5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a21c:	b918      	cbnz	r0, 800a226 <__cvt+0xba>
 800a21e:	f1c4 0401 	rsb	r4, r4, #1
 800a222:	f8ca 4000 	str.w	r4, [sl]
 800a226:	f8da 3000 	ldr.w	r3, [sl]
 800a22a:	4499      	add	r9, r3
 800a22c:	e7d3      	b.n	800a1d6 <__cvt+0x6a>
 800a22e:	1c59      	adds	r1, r3, #1
 800a230:	9103      	str	r1, [sp, #12]
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	e7d9      	b.n	800a1ea <__cvt+0x7e>

0800a236 <__exponent>:
 800a236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a238:	2900      	cmp	r1, #0
 800a23a:	bfba      	itte	lt
 800a23c:	4249      	neglt	r1, r1
 800a23e:	232d      	movlt	r3, #45	@ 0x2d
 800a240:	232b      	movge	r3, #43	@ 0x2b
 800a242:	2909      	cmp	r1, #9
 800a244:	7002      	strb	r2, [r0, #0]
 800a246:	7043      	strb	r3, [r0, #1]
 800a248:	dd29      	ble.n	800a29e <__exponent+0x68>
 800a24a:	f10d 0307 	add.w	r3, sp, #7
 800a24e:	461d      	mov	r5, r3
 800a250:	270a      	movs	r7, #10
 800a252:	461a      	mov	r2, r3
 800a254:	fbb1 f6f7 	udiv	r6, r1, r7
 800a258:	fb07 1416 	mls	r4, r7, r6, r1
 800a25c:	3430      	adds	r4, #48	@ 0x30
 800a25e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a262:	460c      	mov	r4, r1
 800a264:	2c63      	cmp	r4, #99	@ 0x63
 800a266:	f103 33ff 	add.w	r3, r3, #4294967295
 800a26a:	4631      	mov	r1, r6
 800a26c:	dcf1      	bgt.n	800a252 <__exponent+0x1c>
 800a26e:	3130      	adds	r1, #48	@ 0x30
 800a270:	1e94      	subs	r4, r2, #2
 800a272:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a276:	1c41      	adds	r1, r0, #1
 800a278:	4623      	mov	r3, r4
 800a27a:	42ab      	cmp	r3, r5
 800a27c:	d30a      	bcc.n	800a294 <__exponent+0x5e>
 800a27e:	f10d 0309 	add.w	r3, sp, #9
 800a282:	1a9b      	subs	r3, r3, r2
 800a284:	42ac      	cmp	r4, r5
 800a286:	bf88      	it	hi
 800a288:	2300      	movhi	r3, #0
 800a28a:	3302      	adds	r3, #2
 800a28c:	4403      	add	r3, r0
 800a28e:	1a18      	subs	r0, r3, r0
 800a290:	b003      	add	sp, #12
 800a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a294:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a298:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a29c:	e7ed      	b.n	800a27a <__exponent+0x44>
 800a29e:	2330      	movs	r3, #48	@ 0x30
 800a2a0:	3130      	adds	r1, #48	@ 0x30
 800a2a2:	7083      	strb	r3, [r0, #2]
 800a2a4:	70c1      	strb	r1, [r0, #3]
 800a2a6:	1d03      	adds	r3, r0, #4
 800a2a8:	e7f1      	b.n	800a28e <__exponent+0x58>
	...

0800a2ac <_printf_float>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	b08d      	sub	sp, #52	@ 0x34
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	4605      	mov	r5, r0
 800a2be:	f001 f8b3 	bl	800b428 <_localeconv_r>
 800a2c2:	6803      	ldr	r3, [r0, #0]
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f5 ffda 	bl	8000280 <strlen>
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d4:	9005      	str	r0, [sp, #20]
 800a2d6:	3307      	adds	r3, #7
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
 800a2dc:	f103 0208 	add.w	r2, r3, #8
 800a2e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a2e4:	f8d4 b000 	ldr.w	fp, [r4]
 800a2e8:	f8c8 2000 	str.w	r2, [r8]
 800a2ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2f4:	9307      	str	r3, [sp, #28]
 800a2f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a302:	4b9c      	ldr	r3, [pc, #624]	@ (800a574 <_printf_float+0x2c8>)
 800a304:	f04f 32ff 	mov.w	r2, #4294967295
 800a308:	f7f6 fc18 	bl	8000b3c <__aeabi_dcmpun>
 800a30c:	bb70      	cbnz	r0, 800a36c <_printf_float+0xc0>
 800a30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a312:	4b98      	ldr	r3, [pc, #608]	@ (800a574 <_printf_float+0x2c8>)
 800a314:	f04f 32ff 	mov.w	r2, #4294967295
 800a318:	f7f6 fbf2 	bl	8000b00 <__aeabi_dcmple>
 800a31c:	bb30      	cbnz	r0, 800a36c <_printf_float+0xc0>
 800a31e:	2200      	movs	r2, #0
 800a320:	2300      	movs	r3, #0
 800a322:	4640      	mov	r0, r8
 800a324:	4649      	mov	r1, r9
 800a326:	f7f6 fbe1 	bl	8000aec <__aeabi_dcmplt>
 800a32a:	b110      	cbz	r0, 800a332 <_printf_float+0x86>
 800a32c:	232d      	movs	r3, #45	@ 0x2d
 800a32e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a332:	4a91      	ldr	r2, [pc, #580]	@ (800a578 <_printf_float+0x2cc>)
 800a334:	4b91      	ldr	r3, [pc, #580]	@ (800a57c <_printf_float+0x2d0>)
 800a336:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a33a:	bf94      	ite	ls
 800a33c:	4690      	movls	r8, r2
 800a33e:	4698      	movhi	r8, r3
 800a340:	2303      	movs	r3, #3
 800a342:	6123      	str	r3, [r4, #16]
 800a344:	f02b 0304 	bic.w	r3, fp, #4
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	f04f 0900 	mov.w	r9, #0
 800a34e:	9700      	str	r7, [sp, #0]
 800a350:	4633      	mov	r3, r6
 800a352:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 f9d2 	bl	800a700 <_printf_common>
 800a35c:	3001      	adds	r0, #1
 800a35e:	f040 808d 	bne.w	800a47c <_printf_float+0x1d0>
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	b00d      	add	sp, #52	@ 0x34
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	4642      	mov	r2, r8
 800a36e:	464b      	mov	r3, r9
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	f7f6 fbe2 	bl	8000b3c <__aeabi_dcmpun>
 800a378:	b140      	cbz	r0, 800a38c <_printf_float+0xe0>
 800a37a:	464b      	mov	r3, r9
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfbc      	itt	lt
 800a380:	232d      	movlt	r3, #45	@ 0x2d
 800a382:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a386:	4a7e      	ldr	r2, [pc, #504]	@ (800a580 <_printf_float+0x2d4>)
 800a388:	4b7e      	ldr	r3, [pc, #504]	@ (800a584 <_printf_float+0x2d8>)
 800a38a:	e7d4      	b.n	800a336 <_printf_float+0x8a>
 800a38c:	6863      	ldr	r3, [r4, #4]
 800a38e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a392:	9206      	str	r2, [sp, #24]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	d13b      	bne.n	800a410 <_printf_float+0x164>
 800a398:	2306      	movs	r3, #6
 800a39a:	6063      	str	r3, [r4, #4]
 800a39c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a3ac:	ab09      	add	r3, sp, #36	@ 0x24
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	6861      	ldr	r1, [r4, #4]
 800a3b2:	ec49 8b10 	vmov	d0, r8, r9
 800a3b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f7ff fed6 	bl	800a16c <__cvt>
 800a3c0:	9b06      	ldr	r3, [sp, #24]
 800a3c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3c4:	2b47      	cmp	r3, #71	@ 0x47
 800a3c6:	4680      	mov	r8, r0
 800a3c8:	d129      	bne.n	800a41e <_printf_float+0x172>
 800a3ca:	1cc8      	adds	r0, r1, #3
 800a3cc:	db02      	blt.n	800a3d4 <_printf_float+0x128>
 800a3ce:	6863      	ldr	r3, [r4, #4]
 800a3d0:	4299      	cmp	r1, r3
 800a3d2:	dd41      	ble.n	800a458 <_printf_float+0x1ac>
 800a3d4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3d8:	fa5f fa8a 	uxtb.w	sl, sl
 800a3dc:	3901      	subs	r1, #1
 800a3de:	4652      	mov	r2, sl
 800a3e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a3e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a3e6:	f7ff ff26 	bl	800a236 <__exponent>
 800a3ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3ec:	1813      	adds	r3, r2, r0
 800a3ee:	2a01      	cmp	r2, #1
 800a3f0:	4681      	mov	r9, r0
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	dc02      	bgt.n	800a3fc <_printf_float+0x150>
 800a3f6:	6822      	ldr	r2, [r4, #0]
 800a3f8:	07d2      	lsls	r2, r2, #31
 800a3fa:	d501      	bpl.n	800a400 <_printf_float+0x154>
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	6123      	str	r3, [r4, #16]
 800a400:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0a2      	beq.n	800a34e <_printf_float+0xa2>
 800a408:	232d      	movs	r3, #45	@ 0x2d
 800a40a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40e:	e79e      	b.n	800a34e <_printf_float+0xa2>
 800a410:	9a06      	ldr	r2, [sp, #24]
 800a412:	2a47      	cmp	r2, #71	@ 0x47
 800a414:	d1c2      	bne.n	800a39c <_printf_float+0xf0>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1c0      	bne.n	800a39c <_printf_float+0xf0>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7bd      	b.n	800a39a <_printf_float+0xee>
 800a41e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a422:	d9db      	bls.n	800a3dc <_printf_float+0x130>
 800a424:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a428:	d118      	bne.n	800a45c <_printf_float+0x1b0>
 800a42a:	2900      	cmp	r1, #0
 800a42c:	6863      	ldr	r3, [r4, #4]
 800a42e:	dd0b      	ble.n	800a448 <_printf_float+0x19c>
 800a430:	6121      	str	r1, [r4, #16]
 800a432:	b913      	cbnz	r3, 800a43a <_printf_float+0x18e>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	07d0      	lsls	r0, r2, #31
 800a438:	d502      	bpl.n	800a440 <_printf_float+0x194>
 800a43a:	3301      	adds	r3, #1
 800a43c:	440b      	add	r3, r1
 800a43e:	6123      	str	r3, [r4, #16]
 800a440:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a442:	f04f 0900 	mov.w	r9, #0
 800a446:	e7db      	b.n	800a400 <_printf_float+0x154>
 800a448:	b913      	cbnz	r3, 800a450 <_printf_float+0x1a4>
 800a44a:	6822      	ldr	r2, [r4, #0]
 800a44c:	07d2      	lsls	r2, r2, #31
 800a44e:	d501      	bpl.n	800a454 <_printf_float+0x1a8>
 800a450:	3302      	adds	r3, #2
 800a452:	e7f4      	b.n	800a43e <_printf_float+0x192>
 800a454:	2301      	movs	r3, #1
 800a456:	e7f2      	b.n	800a43e <_printf_float+0x192>
 800a458:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a45e:	4299      	cmp	r1, r3
 800a460:	db05      	blt.n	800a46e <_printf_float+0x1c2>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	6121      	str	r1, [r4, #16]
 800a466:	07d8      	lsls	r0, r3, #31
 800a468:	d5ea      	bpl.n	800a440 <_printf_float+0x194>
 800a46a:	1c4b      	adds	r3, r1, #1
 800a46c:	e7e7      	b.n	800a43e <_printf_float+0x192>
 800a46e:	2900      	cmp	r1, #0
 800a470:	bfd4      	ite	le
 800a472:	f1c1 0202 	rsble	r2, r1, #2
 800a476:	2201      	movgt	r2, #1
 800a478:	4413      	add	r3, r2
 800a47a:	e7e0      	b.n	800a43e <_printf_float+0x192>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	055a      	lsls	r2, r3, #21
 800a480:	d407      	bmi.n	800a492 <_printf_float+0x1e6>
 800a482:	6923      	ldr	r3, [r4, #16]
 800a484:	4642      	mov	r2, r8
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	d12b      	bne.n	800a4e8 <_printf_float+0x23c>
 800a490:	e767      	b.n	800a362 <_printf_float+0xb6>
 800a492:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a496:	f240 80dd 	bls.w	800a654 <_printf_float+0x3a8>
 800a49a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	f7f6 fb19 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d033      	beq.n	800a512 <_printf_float+0x266>
 800a4aa:	4a37      	ldr	r2, [pc, #220]	@ (800a588 <_printf_float+0x2dc>)
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	f43f af54 	beq.w	800a362 <_printf_float+0xb6>
 800a4ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a4be:	4543      	cmp	r3, r8
 800a4c0:	db02      	blt.n	800a4c8 <_printf_float+0x21c>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	07d8      	lsls	r0, r3, #31
 800a4c6:	d50f      	bpl.n	800a4e8 <_printf_float+0x23c>
 800a4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	f43f af45 	beq.w	800a362 <_printf_float+0xb6>
 800a4d8:	f04f 0900 	mov.w	r9, #0
 800a4dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800a4e0:	f104 0a1a 	add.w	sl, r4, #26
 800a4e4:	45c8      	cmp	r8, r9
 800a4e6:	dc09      	bgt.n	800a4fc <_printf_float+0x250>
 800a4e8:	6823      	ldr	r3, [r4, #0]
 800a4ea:	079b      	lsls	r3, r3, #30
 800a4ec:	f100 8103 	bmi.w	800a6f6 <_printf_float+0x44a>
 800a4f0:	68e0      	ldr	r0, [r4, #12]
 800a4f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f4:	4298      	cmp	r0, r3
 800a4f6:	bfb8      	it	lt
 800a4f8:	4618      	movlt	r0, r3
 800a4fa:	e734      	b.n	800a366 <_printf_float+0xba>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4652      	mov	r2, sl
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f af2b 	beq.w	800a362 <_printf_float+0xb6>
 800a50c:	f109 0901 	add.w	r9, r9, #1
 800a510:	e7e8      	b.n	800a4e4 <_printf_float+0x238>
 800a512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	dc39      	bgt.n	800a58c <_printf_float+0x2e0>
 800a518:	4a1b      	ldr	r2, [pc, #108]	@ (800a588 <_printf_float+0x2dc>)
 800a51a:	2301      	movs	r3, #1
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f af1d 	beq.w	800a362 <_printf_float+0xb6>
 800a528:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a52c:	ea59 0303 	orrs.w	r3, r9, r3
 800a530:	d102      	bne.n	800a538 <_printf_float+0x28c>
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	07d9      	lsls	r1, r3, #31
 800a536:	d5d7      	bpl.n	800a4e8 <_printf_float+0x23c>
 800a538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f af0d 	beq.w	800a362 <_printf_float+0xb6>
 800a548:	f04f 0a00 	mov.w	sl, #0
 800a54c:	f104 0b1a 	add.w	fp, r4, #26
 800a550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a552:	425b      	negs	r3, r3
 800a554:	4553      	cmp	r3, sl
 800a556:	dc01      	bgt.n	800a55c <_printf_float+0x2b0>
 800a558:	464b      	mov	r3, r9
 800a55a:	e793      	b.n	800a484 <_printf_float+0x1d8>
 800a55c:	2301      	movs	r3, #1
 800a55e:	465a      	mov	r2, fp
 800a560:	4631      	mov	r1, r6
 800a562:	4628      	mov	r0, r5
 800a564:	47b8      	blx	r7
 800a566:	3001      	adds	r0, #1
 800a568:	f43f aefb 	beq.w	800a362 <_printf_float+0xb6>
 800a56c:	f10a 0a01 	add.w	sl, sl, #1
 800a570:	e7ee      	b.n	800a550 <_printf_float+0x2a4>
 800a572:	bf00      	nop
 800a574:	7fefffff 	.word	0x7fefffff
 800a578:	0800e9a4 	.word	0x0800e9a4
 800a57c:	0800e9a8 	.word	0x0800e9a8
 800a580:	0800e9ac 	.word	0x0800e9ac
 800a584:	0800e9b0 	.word	0x0800e9b0
 800a588:	0800e9b4 	.word	0x0800e9b4
 800a58c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a58e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a592:	4553      	cmp	r3, sl
 800a594:	bfa8      	it	ge
 800a596:	4653      	movge	r3, sl
 800a598:	2b00      	cmp	r3, #0
 800a59a:	4699      	mov	r9, r3
 800a59c:	dc36      	bgt.n	800a60c <_printf_float+0x360>
 800a59e:	f04f 0b00 	mov.w	fp, #0
 800a5a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5a6:	f104 021a 	add.w	r2, r4, #26
 800a5aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5ac:	9306      	str	r3, [sp, #24]
 800a5ae:	eba3 0309 	sub.w	r3, r3, r9
 800a5b2:	455b      	cmp	r3, fp
 800a5b4:	dc31      	bgt.n	800a61a <_printf_float+0x36e>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	459a      	cmp	sl, r3
 800a5ba:	dc3a      	bgt.n	800a632 <_printf_float+0x386>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	07da      	lsls	r2, r3, #31
 800a5c0:	d437      	bmi.n	800a632 <_printf_float+0x386>
 800a5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c4:	ebaa 0903 	sub.w	r9, sl, r3
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ce:	4599      	cmp	r9, r3
 800a5d0:	bfa8      	it	ge
 800a5d2:	4699      	movge	r9, r3
 800a5d4:	f1b9 0f00 	cmp.w	r9, #0
 800a5d8:	dc33      	bgt.n	800a642 <_printf_float+0x396>
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5e2:	f104 0b1a 	add.w	fp, r4, #26
 800a5e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800a5ec:	eba3 0309 	sub.w	r3, r3, r9
 800a5f0:	4543      	cmp	r3, r8
 800a5f2:	f77f af79 	ble.w	800a4e8 <_printf_float+0x23c>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	465a      	mov	r2, fp
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f aeae 	beq.w	800a362 <_printf_float+0xb6>
 800a606:	f108 0801 	add.w	r8, r8, #1
 800a60a:	e7ec      	b.n	800a5e6 <_printf_float+0x33a>
 800a60c:	4642      	mov	r2, r8
 800a60e:	4631      	mov	r1, r6
 800a610:	4628      	mov	r0, r5
 800a612:	47b8      	blx	r7
 800a614:	3001      	adds	r0, #1
 800a616:	d1c2      	bne.n	800a59e <_printf_float+0x2f2>
 800a618:	e6a3      	b.n	800a362 <_printf_float+0xb6>
 800a61a:	2301      	movs	r3, #1
 800a61c:	4631      	mov	r1, r6
 800a61e:	4628      	mov	r0, r5
 800a620:	9206      	str	r2, [sp, #24]
 800a622:	47b8      	blx	r7
 800a624:	3001      	adds	r0, #1
 800a626:	f43f ae9c 	beq.w	800a362 <_printf_float+0xb6>
 800a62a:	9a06      	ldr	r2, [sp, #24]
 800a62c:	f10b 0b01 	add.w	fp, fp, #1
 800a630:	e7bb      	b.n	800a5aa <_printf_float+0x2fe>
 800a632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	d1c0      	bne.n	800a5c2 <_printf_float+0x316>
 800a640:	e68f      	b.n	800a362 <_printf_float+0xb6>
 800a642:	9a06      	ldr	r2, [sp, #24]
 800a644:	464b      	mov	r3, r9
 800a646:	4442      	add	r2, r8
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	d1c3      	bne.n	800a5da <_printf_float+0x32e>
 800a652:	e686      	b.n	800a362 <_printf_float+0xb6>
 800a654:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a658:	f1ba 0f01 	cmp.w	sl, #1
 800a65c:	dc01      	bgt.n	800a662 <_printf_float+0x3b6>
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d536      	bpl.n	800a6d0 <_printf_float+0x424>
 800a662:	2301      	movs	r3, #1
 800a664:	4642      	mov	r2, r8
 800a666:	4631      	mov	r1, r6
 800a668:	4628      	mov	r0, r5
 800a66a:	47b8      	blx	r7
 800a66c:	3001      	adds	r0, #1
 800a66e:	f43f ae78 	beq.w	800a362 <_printf_float+0xb6>
 800a672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a676:	4631      	mov	r1, r6
 800a678:	4628      	mov	r0, r5
 800a67a:	47b8      	blx	r7
 800a67c:	3001      	adds	r0, #1
 800a67e:	f43f ae70 	beq.w	800a362 <_printf_float+0xb6>
 800a682:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a686:	2200      	movs	r2, #0
 800a688:	2300      	movs	r3, #0
 800a68a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a68e:	f7f6 fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 800a692:	b9c0      	cbnz	r0, 800a6c6 <_printf_float+0x41a>
 800a694:	4653      	mov	r3, sl
 800a696:	f108 0201 	add.w	r2, r8, #1
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d10c      	bne.n	800a6be <_printf_float+0x412>
 800a6a4:	e65d      	b.n	800a362 <_printf_float+0xb6>
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	465a      	mov	r2, fp
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	47b8      	blx	r7
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	f43f ae56 	beq.w	800a362 <_printf_float+0xb6>
 800a6b6:	f108 0801 	add.w	r8, r8, #1
 800a6ba:	45d0      	cmp	r8, sl
 800a6bc:	dbf3      	blt.n	800a6a6 <_printf_float+0x3fa>
 800a6be:	464b      	mov	r3, r9
 800a6c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a6c4:	e6df      	b.n	800a486 <_printf_float+0x1da>
 800a6c6:	f04f 0800 	mov.w	r8, #0
 800a6ca:	f104 0b1a 	add.w	fp, r4, #26
 800a6ce:	e7f4      	b.n	800a6ba <_printf_float+0x40e>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	4642      	mov	r2, r8
 800a6d4:	e7e1      	b.n	800a69a <_printf_float+0x3ee>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	464a      	mov	r2, r9
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	f43f ae3e 	beq.w	800a362 <_printf_float+0xb6>
 800a6e6:	f108 0801 	add.w	r8, r8, #1
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6ee:	1a5b      	subs	r3, r3, r1
 800a6f0:	4543      	cmp	r3, r8
 800a6f2:	dcf0      	bgt.n	800a6d6 <_printf_float+0x42a>
 800a6f4:	e6fc      	b.n	800a4f0 <_printf_float+0x244>
 800a6f6:	f04f 0800 	mov.w	r8, #0
 800a6fa:	f104 0919 	add.w	r9, r4, #25
 800a6fe:	e7f4      	b.n	800a6ea <_printf_float+0x43e>

0800a700 <_printf_common>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	4616      	mov	r6, r2
 800a706:	4698      	mov	r8, r3
 800a708:	688a      	ldr	r2, [r1, #8]
 800a70a:	690b      	ldr	r3, [r1, #16]
 800a70c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a710:	4293      	cmp	r3, r2
 800a712:	bfb8      	it	lt
 800a714:	4613      	movlt	r3, r2
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a71c:	4607      	mov	r7, r0
 800a71e:	460c      	mov	r4, r1
 800a720:	b10a      	cbz	r2, 800a726 <_printf_common+0x26>
 800a722:	3301      	adds	r3, #1
 800a724:	6033      	str	r3, [r6, #0]
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	0699      	lsls	r1, r3, #26
 800a72a:	bf42      	ittt	mi
 800a72c:	6833      	ldrmi	r3, [r6, #0]
 800a72e:	3302      	addmi	r3, #2
 800a730:	6033      	strmi	r3, [r6, #0]
 800a732:	6825      	ldr	r5, [r4, #0]
 800a734:	f015 0506 	ands.w	r5, r5, #6
 800a738:	d106      	bne.n	800a748 <_printf_common+0x48>
 800a73a:	f104 0a19 	add.w	sl, r4, #25
 800a73e:	68e3      	ldr	r3, [r4, #12]
 800a740:	6832      	ldr	r2, [r6, #0]
 800a742:	1a9b      	subs	r3, r3, r2
 800a744:	42ab      	cmp	r3, r5
 800a746:	dc26      	bgt.n	800a796 <_printf_common+0x96>
 800a748:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a74c:	6822      	ldr	r2, [r4, #0]
 800a74e:	3b00      	subs	r3, #0
 800a750:	bf18      	it	ne
 800a752:	2301      	movne	r3, #1
 800a754:	0692      	lsls	r2, r2, #26
 800a756:	d42b      	bmi.n	800a7b0 <_printf_common+0xb0>
 800a758:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a75c:	4641      	mov	r1, r8
 800a75e:	4638      	mov	r0, r7
 800a760:	47c8      	blx	r9
 800a762:	3001      	adds	r0, #1
 800a764:	d01e      	beq.n	800a7a4 <_printf_common+0xa4>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	6922      	ldr	r2, [r4, #16]
 800a76a:	f003 0306 	and.w	r3, r3, #6
 800a76e:	2b04      	cmp	r3, #4
 800a770:	bf02      	ittt	eq
 800a772:	68e5      	ldreq	r5, [r4, #12]
 800a774:	6833      	ldreq	r3, [r6, #0]
 800a776:	1aed      	subeq	r5, r5, r3
 800a778:	68a3      	ldr	r3, [r4, #8]
 800a77a:	bf0c      	ite	eq
 800a77c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a780:	2500      	movne	r5, #0
 800a782:	4293      	cmp	r3, r2
 800a784:	bfc4      	itt	gt
 800a786:	1a9b      	subgt	r3, r3, r2
 800a788:	18ed      	addgt	r5, r5, r3
 800a78a:	2600      	movs	r6, #0
 800a78c:	341a      	adds	r4, #26
 800a78e:	42b5      	cmp	r5, r6
 800a790:	d11a      	bne.n	800a7c8 <_printf_common+0xc8>
 800a792:	2000      	movs	r0, #0
 800a794:	e008      	b.n	800a7a8 <_printf_common+0xa8>
 800a796:	2301      	movs	r3, #1
 800a798:	4652      	mov	r2, sl
 800a79a:	4641      	mov	r1, r8
 800a79c:	4638      	mov	r0, r7
 800a79e:	47c8      	blx	r9
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d103      	bne.n	800a7ac <_printf_common+0xac>
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	e7c6      	b.n	800a73e <_printf_common+0x3e>
 800a7b0:	18e1      	adds	r1, r4, r3
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	2030      	movs	r0, #48	@ 0x30
 800a7b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a7ba:	4422      	add	r2, r4
 800a7bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a7c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7c4:	3302      	adds	r3, #2
 800a7c6:	e7c7      	b.n	800a758 <_printf_common+0x58>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4622      	mov	r2, r4
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	47c8      	blx	r9
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	d0e6      	beq.n	800a7a4 <_printf_common+0xa4>
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	e7d9      	b.n	800a78e <_printf_common+0x8e>
	...

0800a7dc <_printf_i>:
 800a7dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	7e0f      	ldrb	r7, [r1, #24]
 800a7e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7e4:	2f78      	cmp	r7, #120	@ 0x78
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	4680      	mov	r8, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	469a      	mov	sl, r3
 800a7ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7f2:	d807      	bhi.n	800a804 <_printf_i+0x28>
 800a7f4:	2f62      	cmp	r7, #98	@ 0x62
 800a7f6:	d80a      	bhi.n	800a80e <_printf_i+0x32>
 800a7f8:	2f00      	cmp	r7, #0
 800a7fa:	f000 80d2 	beq.w	800a9a2 <_printf_i+0x1c6>
 800a7fe:	2f58      	cmp	r7, #88	@ 0x58
 800a800:	f000 80b9 	beq.w	800a976 <_printf_i+0x19a>
 800a804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a80c:	e03a      	b.n	800a884 <_printf_i+0xa8>
 800a80e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a812:	2b15      	cmp	r3, #21
 800a814:	d8f6      	bhi.n	800a804 <_printf_i+0x28>
 800a816:	a101      	add	r1, pc, #4	@ (adr r1, 800a81c <_printf_i+0x40>)
 800a818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a81c:	0800a875 	.word	0x0800a875
 800a820:	0800a889 	.word	0x0800a889
 800a824:	0800a805 	.word	0x0800a805
 800a828:	0800a805 	.word	0x0800a805
 800a82c:	0800a805 	.word	0x0800a805
 800a830:	0800a805 	.word	0x0800a805
 800a834:	0800a889 	.word	0x0800a889
 800a838:	0800a805 	.word	0x0800a805
 800a83c:	0800a805 	.word	0x0800a805
 800a840:	0800a805 	.word	0x0800a805
 800a844:	0800a805 	.word	0x0800a805
 800a848:	0800a989 	.word	0x0800a989
 800a84c:	0800a8b3 	.word	0x0800a8b3
 800a850:	0800a943 	.word	0x0800a943
 800a854:	0800a805 	.word	0x0800a805
 800a858:	0800a805 	.word	0x0800a805
 800a85c:	0800a9ab 	.word	0x0800a9ab
 800a860:	0800a805 	.word	0x0800a805
 800a864:	0800a8b3 	.word	0x0800a8b3
 800a868:	0800a805 	.word	0x0800a805
 800a86c:	0800a805 	.word	0x0800a805
 800a870:	0800a94b 	.word	0x0800a94b
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6032      	str	r2, [r6, #0]
 800a87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a884:	2301      	movs	r3, #1
 800a886:	e09d      	b.n	800a9c4 <_printf_i+0x1e8>
 800a888:	6833      	ldr	r3, [r6, #0]
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	1d19      	adds	r1, r3, #4
 800a88e:	6031      	str	r1, [r6, #0]
 800a890:	0606      	lsls	r6, r0, #24
 800a892:	d501      	bpl.n	800a898 <_printf_i+0xbc>
 800a894:	681d      	ldr	r5, [r3, #0]
 800a896:	e003      	b.n	800a8a0 <_printf_i+0xc4>
 800a898:	0645      	lsls	r5, r0, #25
 800a89a:	d5fb      	bpl.n	800a894 <_printf_i+0xb8>
 800a89c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	da03      	bge.n	800a8ac <_printf_i+0xd0>
 800a8a4:	232d      	movs	r3, #45	@ 0x2d
 800a8a6:	426d      	negs	r5, r5
 800a8a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ac:	4859      	ldr	r0, [pc, #356]	@ (800aa14 <_printf_i+0x238>)
 800a8ae:	230a      	movs	r3, #10
 800a8b0:	e011      	b.n	800a8d6 <_printf_i+0xfa>
 800a8b2:	6821      	ldr	r1, [r4, #0]
 800a8b4:	6833      	ldr	r3, [r6, #0]
 800a8b6:	0608      	lsls	r0, r1, #24
 800a8b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a8bc:	d402      	bmi.n	800a8c4 <_printf_i+0xe8>
 800a8be:	0649      	lsls	r1, r1, #25
 800a8c0:	bf48      	it	mi
 800a8c2:	b2ad      	uxthmi	r5, r5
 800a8c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8c6:	4853      	ldr	r0, [pc, #332]	@ (800aa14 <_printf_i+0x238>)
 800a8c8:	6033      	str	r3, [r6, #0]
 800a8ca:	bf14      	ite	ne
 800a8cc:	230a      	movne	r3, #10
 800a8ce:	2308      	moveq	r3, #8
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8d6:	6866      	ldr	r6, [r4, #4]
 800a8d8:	60a6      	str	r6, [r4, #8]
 800a8da:	2e00      	cmp	r6, #0
 800a8dc:	bfa2      	ittt	ge
 800a8de:	6821      	ldrge	r1, [r4, #0]
 800a8e0:	f021 0104 	bicge.w	r1, r1, #4
 800a8e4:	6021      	strge	r1, [r4, #0]
 800a8e6:	b90d      	cbnz	r5, 800a8ec <_printf_i+0x110>
 800a8e8:	2e00      	cmp	r6, #0
 800a8ea:	d04b      	beq.n	800a984 <_printf_i+0x1a8>
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8f2:	fb03 5711 	mls	r7, r3, r1, r5
 800a8f6:	5dc7      	ldrb	r7, [r0, r7]
 800a8f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8fc:	462f      	mov	r7, r5
 800a8fe:	42bb      	cmp	r3, r7
 800a900:	460d      	mov	r5, r1
 800a902:	d9f4      	bls.n	800a8ee <_printf_i+0x112>
 800a904:	2b08      	cmp	r3, #8
 800a906:	d10b      	bne.n	800a920 <_printf_i+0x144>
 800a908:	6823      	ldr	r3, [r4, #0]
 800a90a:	07df      	lsls	r7, r3, #31
 800a90c:	d508      	bpl.n	800a920 <_printf_i+0x144>
 800a90e:	6923      	ldr	r3, [r4, #16]
 800a910:	6861      	ldr	r1, [r4, #4]
 800a912:	4299      	cmp	r1, r3
 800a914:	bfde      	ittt	le
 800a916:	2330      	movle	r3, #48	@ 0x30
 800a918:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a91c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a920:	1b92      	subs	r2, r2, r6
 800a922:	6122      	str	r2, [r4, #16]
 800a924:	f8cd a000 	str.w	sl, [sp]
 800a928:	464b      	mov	r3, r9
 800a92a:	aa03      	add	r2, sp, #12
 800a92c:	4621      	mov	r1, r4
 800a92e:	4640      	mov	r0, r8
 800a930:	f7ff fee6 	bl	800a700 <_printf_common>
 800a934:	3001      	adds	r0, #1
 800a936:	d14a      	bne.n	800a9ce <_printf_i+0x1f2>
 800a938:	f04f 30ff 	mov.w	r0, #4294967295
 800a93c:	b004      	add	sp, #16
 800a93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	f043 0320 	orr.w	r3, r3, #32
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	4833      	ldr	r0, [pc, #204]	@ (800aa18 <_printf_i+0x23c>)
 800a94c:	2778      	movs	r7, #120	@ 0x78
 800a94e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	6831      	ldr	r1, [r6, #0]
 800a956:	061f      	lsls	r7, r3, #24
 800a958:	f851 5b04 	ldr.w	r5, [r1], #4
 800a95c:	d402      	bmi.n	800a964 <_printf_i+0x188>
 800a95e:	065f      	lsls	r7, r3, #25
 800a960:	bf48      	it	mi
 800a962:	b2ad      	uxthmi	r5, r5
 800a964:	6031      	str	r1, [r6, #0]
 800a966:	07d9      	lsls	r1, r3, #31
 800a968:	bf44      	itt	mi
 800a96a:	f043 0320 	orrmi.w	r3, r3, #32
 800a96e:	6023      	strmi	r3, [r4, #0]
 800a970:	b11d      	cbz	r5, 800a97a <_printf_i+0x19e>
 800a972:	2310      	movs	r3, #16
 800a974:	e7ac      	b.n	800a8d0 <_printf_i+0xf4>
 800a976:	4827      	ldr	r0, [pc, #156]	@ (800aa14 <_printf_i+0x238>)
 800a978:	e7e9      	b.n	800a94e <_printf_i+0x172>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	f023 0320 	bic.w	r3, r3, #32
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	e7f6      	b.n	800a972 <_printf_i+0x196>
 800a984:	4616      	mov	r6, r2
 800a986:	e7bd      	b.n	800a904 <_printf_i+0x128>
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6961      	ldr	r1, [r4, #20]
 800a98e:	1d18      	adds	r0, r3, #4
 800a990:	6030      	str	r0, [r6, #0]
 800a992:	062e      	lsls	r6, r5, #24
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	d501      	bpl.n	800a99c <_printf_i+0x1c0>
 800a998:	6019      	str	r1, [r3, #0]
 800a99a:	e002      	b.n	800a9a2 <_printf_i+0x1c6>
 800a99c:	0668      	lsls	r0, r5, #25
 800a99e:	d5fb      	bpl.n	800a998 <_printf_i+0x1bc>
 800a9a0:	8019      	strh	r1, [r3, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	6123      	str	r3, [r4, #16]
 800a9a6:	4616      	mov	r6, r2
 800a9a8:	e7bc      	b.n	800a924 <_printf_i+0x148>
 800a9aa:	6833      	ldr	r3, [r6, #0]
 800a9ac:	1d1a      	adds	r2, r3, #4
 800a9ae:	6032      	str	r2, [r6, #0]
 800a9b0:	681e      	ldr	r6, [r3, #0]
 800a9b2:	6862      	ldr	r2, [r4, #4]
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7f5 fc12 	bl	80001e0 <memchr>
 800a9bc:	b108      	cbz	r0, 800a9c2 <_printf_i+0x1e6>
 800a9be:	1b80      	subs	r0, r0, r6
 800a9c0:	6060      	str	r0, [r4, #4]
 800a9c2:	6863      	ldr	r3, [r4, #4]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9cc:	e7aa      	b.n	800a924 <_printf_i+0x148>
 800a9ce:	6923      	ldr	r3, [r4, #16]
 800a9d0:	4632      	mov	r2, r6
 800a9d2:	4649      	mov	r1, r9
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	47d0      	blx	sl
 800a9d8:	3001      	adds	r0, #1
 800a9da:	d0ad      	beq.n	800a938 <_printf_i+0x15c>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	079b      	lsls	r3, r3, #30
 800a9e0:	d413      	bmi.n	800aa0a <_printf_i+0x22e>
 800a9e2:	68e0      	ldr	r0, [r4, #12]
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	4298      	cmp	r0, r3
 800a9e8:	bfb8      	it	lt
 800a9ea:	4618      	movlt	r0, r3
 800a9ec:	e7a6      	b.n	800a93c <_printf_i+0x160>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	4632      	mov	r2, r6
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4640      	mov	r0, r8
 800a9f6:	47d0      	blx	sl
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d09d      	beq.n	800a938 <_printf_i+0x15c>
 800a9fc:	3501      	adds	r5, #1
 800a9fe:	68e3      	ldr	r3, [r4, #12]
 800aa00:	9903      	ldr	r1, [sp, #12]
 800aa02:	1a5b      	subs	r3, r3, r1
 800aa04:	42ab      	cmp	r3, r5
 800aa06:	dcf2      	bgt.n	800a9ee <_printf_i+0x212>
 800aa08:	e7eb      	b.n	800a9e2 <_printf_i+0x206>
 800aa0a:	2500      	movs	r5, #0
 800aa0c:	f104 0619 	add.w	r6, r4, #25
 800aa10:	e7f5      	b.n	800a9fe <_printf_i+0x222>
 800aa12:	bf00      	nop
 800aa14:	0800e9b6 	.word	0x0800e9b6
 800aa18:	0800e9c7 	.word	0x0800e9c7

0800aa1c <_scanf_float>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	b087      	sub	sp, #28
 800aa22:	4617      	mov	r7, r2
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	688b      	ldr	r3, [r1, #8]
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa2e:	bf81      	itttt	hi
 800aa30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa34:	eb03 0b05 	addhi.w	fp, r3, r5
 800aa38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa3c:	608b      	strhi	r3, [r1, #8]
 800aa3e:	680b      	ldr	r3, [r1, #0]
 800aa40:	460a      	mov	r2, r1
 800aa42:	f04f 0500 	mov.w	r5, #0
 800aa46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800aa4a:	f842 3b1c 	str.w	r3, [r2], #28
 800aa4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa52:	4680      	mov	r8, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	bf98      	it	ls
 800aa58:	f04f 0b00 	movls.w	fp, #0
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	4616      	mov	r6, r2
 800aa60:	46aa      	mov	sl, r5
 800aa62:	46a9      	mov	r9, r5
 800aa64:	9502      	str	r5, [sp, #8]
 800aa66:	68a2      	ldr	r2, [r4, #8]
 800aa68:	b152      	cbz	r2, 800aa80 <_scanf_float+0x64>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa70:	d864      	bhi.n	800ab3c <_scanf_float+0x120>
 800aa72:	2b40      	cmp	r3, #64	@ 0x40
 800aa74:	d83c      	bhi.n	800aaf0 <_scanf_float+0xd4>
 800aa76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa7a:	b2c8      	uxtb	r0, r1
 800aa7c:	280e      	cmp	r0, #14
 800aa7e:	d93a      	bls.n	800aaf6 <_scanf_float+0xda>
 800aa80:	f1b9 0f00 	cmp.w	r9, #0
 800aa84:	d003      	beq.n	800aa8e <_scanf_float+0x72>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa92:	f1ba 0f01 	cmp.w	sl, #1
 800aa96:	f200 8117 	bhi.w	800acc8 <_scanf_float+0x2ac>
 800aa9a:	9b01      	ldr	r3, [sp, #4]
 800aa9c:	429e      	cmp	r6, r3
 800aa9e:	f200 8108 	bhi.w	800acb2 <_scanf_float+0x296>
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	b007      	add	sp, #28
 800aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaaa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aaae:	2a0d      	cmp	r2, #13
 800aab0:	d8e6      	bhi.n	800aa80 <_scanf_float+0x64>
 800aab2:	a101      	add	r1, pc, #4	@ (adr r1, 800aab8 <_scanf_float+0x9c>)
 800aab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aab8:	0800abff 	.word	0x0800abff
 800aabc:	0800aa81 	.word	0x0800aa81
 800aac0:	0800aa81 	.word	0x0800aa81
 800aac4:	0800aa81 	.word	0x0800aa81
 800aac8:	0800ac5f 	.word	0x0800ac5f
 800aacc:	0800ac37 	.word	0x0800ac37
 800aad0:	0800aa81 	.word	0x0800aa81
 800aad4:	0800aa81 	.word	0x0800aa81
 800aad8:	0800ac0d 	.word	0x0800ac0d
 800aadc:	0800aa81 	.word	0x0800aa81
 800aae0:	0800aa81 	.word	0x0800aa81
 800aae4:	0800aa81 	.word	0x0800aa81
 800aae8:	0800aa81 	.word	0x0800aa81
 800aaec:	0800abc5 	.word	0x0800abc5
 800aaf0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aaf4:	e7db      	b.n	800aaae <_scanf_float+0x92>
 800aaf6:	290e      	cmp	r1, #14
 800aaf8:	d8c2      	bhi.n	800aa80 <_scanf_float+0x64>
 800aafa:	a001      	add	r0, pc, #4	@ (adr r0, 800ab00 <_scanf_float+0xe4>)
 800aafc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab00:	0800abb5 	.word	0x0800abb5
 800ab04:	0800aa81 	.word	0x0800aa81
 800ab08:	0800abb5 	.word	0x0800abb5
 800ab0c:	0800ac4b 	.word	0x0800ac4b
 800ab10:	0800aa81 	.word	0x0800aa81
 800ab14:	0800ab5d 	.word	0x0800ab5d
 800ab18:	0800ab9b 	.word	0x0800ab9b
 800ab1c:	0800ab9b 	.word	0x0800ab9b
 800ab20:	0800ab9b 	.word	0x0800ab9b
 800ab24:	0800ab9b 	.word	0x0800ab9b
 800ab28:	0800ab9b 	.word	0x0800ab9b
 800ab2c:	0800ab9b 	.word	0x0800ab9b
 800ab30:	0800ab9b 	.word	0x0800ab9b
 800ab34:	0800ab9b 	.word	0x0800ab9b
 800ab38:	0800ab9b 	.word	0x0800ab9b
 800ab3c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ab3e:	d809      	bhi.n	800ab54 <_scanf_float+0x138>
 800ab40:	2b60      	cmp	r3, #96	@ 0x60
 800ab42:	d8b2      	bhi.n	800aaaa <_scanf_float+0x8e>
 800ab44:	2b54      	cmp	r3, #84	@ 0x54
 800ab46:	d07b      	beq.n	800ac40 <_scanf_float+0x224>
 800ab48:	2b59      	cmp	r3, #89	@ 0x59
 800ab4a:	d199      	bne.n	800aa80 <_scanf_float+0x64>
 800ab4c:	2d07      	cmp	r5, #7
 800ab4e:	d197      	bne.n	800aa80 <_scanf_float+0x64>
 800ab50:	2508      	movs	r5, #8
 800ab52:	e02c      	b.n	800abae <_scanf_float+0x192>
 800ab54:	2b74      	cmp	r3, #116	@ 0x74
 800ab56:	d073      	beq.n	800ac40 <_scanf_float+0x224>
 800ab58:	2b79      	cmp	r3, #121	@ 0x79
 800ab5a:	e7f6      	b.n	800ab4a <_scanf_float+0x12e>
 800ab5c:	6821      	ldr	r1, [r4, #0]
 800ab5e:	05c8      	lsls	r0, r1, #23
 800ab60:	d51b      	bpl.n	800ab9a <_scanf_float+0x17e>
 800ab62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab66:	6021      	str	r1, [r4, #0]
 800ab68:	f109 0901 	add.w	r9, r9, #1
 800ab6c:	f1bb 0f00 	cmp.w	fp, #0
 800ab70:	d003      	beq.n	800ab7a <_scanf_float+0x15e>
 800ab72:	3201      	adds	r2, #1
 800ab74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab78:	60a2      	str	r2, [r4, #8]
 800ab7a:	68a3      	ldr	r3, [r4, #8]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	60a3      	str	r3, [r4, #8]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	3301      	adds	r3, #1
 800ab84:	6123      	str	r3, [r4, #16]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	607b      	str	r3, [r7, #4]
 800ab8e:	f340 8087 	ble.w	800aca0 <_scanf_float+0x284>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	3301      	adds	r3, #1
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	e765      	b.n	800aa66 <_scanf_float+0x4a>
 800ab9a:	eb1a 0105 	adds.w	r1, sl, r5
 800ab9e:	f47f af6f 	bne.w	800aa80 <_scanf_float+0x64>
 800aba2:	6822      	ldr	r2, [r4, #0]
 800aba4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800aba8:	6022      	str	r2, [r4, #0]
 800abaa:	460d      	mov	r5, r1
 800abac:	468a      	mov	sl, r1
 800abae:	f806 3b01 	strb.w	r3, [r6], #1
 800abb2:	e7e2      	b.n	800ab7a <_scanf_float+0x15e>
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	0610      	lsls	r0, r2, #24
 800abb8:	f57f af62 	bpl.w	800aa80 <_scanf_float+0x64>
 800abbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abc0:	6022      	str	r2, [r4, #0]
 800abc2:	e7f4      	b.n	800abae <_scanf_float+0x192>
 800abc4:	f1ba 0f00 	cmp.w	sl, #0
 800abc8:	d10e      	bne.n	800abe8 <_scanf_float+0x1cc>
 800abca:	f1b9 0f00 	cmp.w	r9, #0
 800abce:	d10e      	bne.n	800abee <_scanf_float+0x1d2>
 800abd0:	6822      	ldr	r2, [r4, #0]
 800abd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abda:	d108      	bne.n	800abee <_scanf_float+0x1d2>
 800abdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abe0:	6022      	str	r2, [r4, #0]
 800abe2:	f04f 0a01 	mov.w	sl, #1
 800abe6:	e7e2      	b.n	800abae <_scanf_float+0x192>
 800abe8:	f1ba 0f02 	cmp.w	sl, #2
 800abec:	d055      	beq.n	800ac9a <_scanf_float+0x27e>
 800abee:	2d01      	cmp	r5, #1
 800abf0:	d002      	beq.n	800abf8 <_scanf_float+0x1dc>
 800abf2:	2d04      	cmp	r5, #4
 800abf4:	f47f af44 	bne.w	800aa80 <_scanf_float+0x64>
 800abf8:	3501      	adds	r5, #1
 800abfa:	b2ed      	uxtb	r5, r5
 800abfc:	e7d7      	b.n	800abae <_scanf_float+0x192>
 800abfe:	f1ba 0f01 	cmp.w	sl, #1
 800ac02:	f47f af3d 	bne.w	800aa80 <_scanf_float+0x64>
 800ac06:	f04f 0a02 	mov.w	sl, #2
 800ac0a:	e7d0      	b.n	800abae <_scanf_float+0x192>
 800ac0c:	b97d      	cbnz	r5, 800ac2e <_scanf_float+0x212>
 800ac0e:	f1b9 0f00 	cmp.w	r9, #0
 800ac12:	f47f af38 	bne.w	800aa86 <_scanf_float+0x6a>
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ac1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ac20:	f040 8108 	bne.w	800ae34 <_scanf_float+0x418>
 800ac24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac28:	6022      	str	r2, [r4, #0]
 800ac2a:	2501      	movs	r5, #1
 800ac2c:	e7bf      	b.n	800abae <_scanf_float+0x192>
 800ac2e:	2d03      	cmp	r5, #3
 800ac30:	d0e2      	beq.n	800abf8 <_scanf_float+0x1dc>
 800ac32:	2d05      	cmp	r5, #5
 800ac34:	e7de      	b.n	800abf4 <_scanf_float+0x1d8>
 800ac36:	2d02      	cmp	r5, #2
 800ac38:	f47f af22 	bne.w	800aa80 <_scanf_float+0x64>
 800ac3c:	2503      	movs	r5, #3
 800ac3e:	e7b6      	b.n	800abae <_scanf_float+0x192>
 800ac40:	2d06      	cmp	r5, #6
 800ac42:	f47f af1d 	bne.w	800aa80 <_scanf_float+0x64>
 800ac46:	2507      	movs	r5, #7
 800ac48:	e7b1      	b.n	800abae <_scanf_float+0x192>
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	0591      	lsls	r1, r2, #22
 800ac4e:	f57f af17 	bpl.w	800aa80 <_scanf_float+0x64>
 800ac52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac5c:	e7a7      	b.n	800abae <_scanf_float+0x192>
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac68:	d006      	beq.n	800ac78 <_scanf_float+0x25c>
 800ac6a:	0550      	lsls	r0, r2, #21
 800ac6c:	f57f af08 	bpl.w	800aa80 <_scanf_float+0x64>
 800ac70:	f1b9 0f00 	cmp.w	r9, #0
 800ac74:	f000 80de 	beq.w	800ae34 <_scanf_float+0x418>
 800ac78:	0591      	lsls	r1, r2, #22
 800ac7a:	bf58      	it	pl
 800ac7c:	9902      	ldrpl	r1, [sp, #8]
 800ac7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac82:	bf58      	it	pl
 800ac84:	eba9 0101 	subpl.w	r1, r9, r1
 800ac88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac8c:	bf58      	it	pl
 800ac8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	f04f 0900 	mov.w	r9, #0
 800ac98:	e789      	b.n	800abae <_scanf_float+0x192>
 800ac9a:	f04f 0a03 	mov.w	sl, #3
 800ac9e:	e786      	b.n	800abae <_scanf_float+0x192>
 800aca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aca4:	4639      	mov	r1, r7
 800aca6:	4640      	mov	r0, r8
 800aca8:	4798      	blx	r3
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f aedb 	beq.w	800aa66 <_scanf_float+0x4a>
 800acb0:	e6e6      	b.n	800aa80 <_scanf_float+0x64>
 800acb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800acba:	463a      	mov	r2, r7
 800acbc:	4640      	mov	r0, r8
 800acbe:	4798      	blx	r3
 800acc0:	6923      	ldr	r3, [r4, #16]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	6123      	str	r3, [r4, #16]
 800acc6:	e6e8      	b.n	800aa9a <_scanf_float+0x7e>
 800acc8:	1e6b      	subs	r3, r5, #1
 800acca:	2b06      	cmp	r3, #6
 800accc:	d824      	bhi.n	800ad18 <_scanf_float+0x2fc>
 800acce:	2d02      	cmp	r5, #2
 800acd0:	d836      	bhi.n	800ad40 <_scanf_float+0x324>
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	429e      	cmp	r6, r3
 800acd6:	f67f aee4 	bls.w	800aaa2 <_scanf_float+0x86>
 800acda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace2:	463a      	mov	r2, r7
 800ace4:	4640      	mov	r0, r8
 800ace6:	4798      	blx	r3
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	3b01      	subs	r3, #1
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	e7f0      	b.n	800acd2 <_scanf_float+0x2b6>
 800acf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800acf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acf8:	463a      	mov	r2, r7
 800acfa:	4640      	mov	r0, r8
 800acfc:	4798      	blx	r3
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	6123      	str	r3, [r4, #16]
 800ad04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad08:	fa5f fa8a 	uxtb.w	sl, sl
 800ad0c:	f1ba 0f02 	cmp.w	sl, #2
 800ad10:	d1ee      	bne.n	800acf0 <_scanf_float+0x2d4>
 800ad12:	3d03      	subs	r5, #3
 800ad14:	b2ed      	uxtb	r5, r5
 800ad16:	1b76      	subs	r6, r6, r5
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	05da      	lsls	r2, r3, #23
 800ad1c:	d530      	bpl.n	800ad80 <_scanf_float+0x364>
 800ad1e:	055b      	lsls	r3, r3, #21
 800ad20:	d511      	bpl.n	800ad46 <_scanf_float+0x32a>
 800ad22:	9b01      	ldr	r3, [sp, #4]
 800ad24:	429e      	cmp	r6, r3
 800ad26:	f67f aebc 	bls.w	800aaa2 <_scanf_float+0x86>
 800ad2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad32:	463a      	mov	r2, r7
 800ad34:	4640      	mov	r0, r8
 800ad36:	4798      	blx	r3
 800ad38:	6923      	ldr	r3, [r4, #16]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	6123      	str	r3, [r4, #16]
 800ad3e:	e7f0      	b.n	800ad22 <_scanf_float+0x306>
 800ad40:	46aa      	mov	sl, r5
 800ad42:	46b3      	mov	fp, r6
 800ad44:	e7de      	b.n	800ad04 <_scanf_float+0x2e8>
 800ad46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ad4a:	6923      	ldr	r3, [r4, #16]
 800ad4c:	2965      	cmp	r1, #101	@ 0x65
 800ad4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad52:	f106 35ff 	add.w	r5, r6, #4294967295
 800ad56:	6123      	str	r3, [r4, #16]
 800ad58:	d00c      	beq.n	800ad74 <_scanf_float+0x358>
 800ad5a:	2945      	cmp	r1, #69	@ 0x45
 800ad5c:	d00a      	beq.n	800ad74 <_scanf_float+0x358>
 800ad5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad62:	463a      	mov	r2, r7
 800ad64:	4640      	mov	r0, r8
 800ad66:	4798      	blx	r3
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	1eb5      	subs	r5, r6, #2
 800ad72:	6123      	str	r3, [r4, #16]
 800ad74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad78:	463a      	mov	r2, r7
 800ad7a:	4640      	mov	r0, r8
 800ad7c:	4798      	blx	r3
 800ad7e:	462e      	mov	r6, r5
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	f012 0210 	ands.w	r2, r2, #16
 800ad86:	d001      	beq.n	800ad8c <_scanf_float+0x370>
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e68b      	b.n	800aaa4 <_scanf_float+0x88>
 800ad8c:	7032      	strb	r2, [r6, #0]
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad98:	d11c      	bne.n	800add4 <_scanf_float+0x3b8>
 800ad9a:	9b02      	ldr	r3, [sp, #8]
 800ad9c:	454b      	cmp	r3, r9
 800ad9e:	eba3 0209 	sub.w	r2, r3, r9
 800ada2:	d123      	bne.n	800adec <_scanf_float+0x3d0>
 800ada4:	9901      	ldr	r1, [sp, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	4640      	mov	r0, r8
 800adaa:	f002 fdd1 	bl	800d950 <_strtod_r>
 800adae:	9b03      	ldr	r3, [sp, #12]
 800adb0:	6821      	ldr	r1, [r4, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f011 0f02 	tst.w	r1, #2
 800adb8:	ec57 6b10 	vmov	r6, r7, d0
 800adbc:	f103 0204 	add.w	r2, r3, #4
 800adc0:	d01f      	beq.n	800ae02 <_scanf_float+0x3e6>
 800adc2:	9903      	ldr	r1, [sp, #12]
 800adc4:	600a      	str	r2, [r1, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	e9c3 6700 	strd	r6, r7, [r3]
 800adcc:	68e3      	ldr	r3, [r4, #12]
 800adce:	3301      	adds	r3, #1
 800add0:	60e3      	str	r3, [r4, #12]
 800add2:	e7d9      	b.n	800ad88 <_scanf_float+0x36c>
 800add4:	9b04      	ldr	r3, [sp, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0e4      	beq.n	800ada4 <_scanf_float+0x388>
 800adda:	9905      	ldr	r1, [sp, #20]
 800addc:	230a      	movs	r3, #10
 800adde:	3101      	adds	r1, #1
 800ade0:	4640      	mov	r0, r8
 800ade2:	f002 fe35 	bl	800da50 <_strtol_r>
 800ade6:	9b04      	ldr	r3, [sp, #16]
 800ade8:	9e05      	ldr	r6, [sp, #20]
 800adea:	1ac2      	subs	r2, r0, r3
 800adec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800adf0:	429e      	cmp	r6, r3
 800adf2:	bf28      	it	cs
 800adf4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adf8:	4910      	ldr	r1, [pc, #64]	@ (800ae3c <_scanf_float+0x420>)
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 fa14 	bl	800b228 <siprintf>
 800ae00:	e7d0      	b.n	800ada4 <_scanf_float+0x388>
 800ae02:	f011 0f04 	tst.w	r1, #4
 800ae06:	9903      	ldr	r1, [sp, #12]
 800ae08:	600a      	str	r2, [r1, #0]
 800ae0a:	d1dc      	bne.n	800adc6 <_scanf_float+0x3aa>
 800ae0c:	681d      	ldr	r5, [r3, #0]
 800ae0e:	4632      	mov	r2, r6
 800ae10:	463b      	mov	r3, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	4639      	mov	r1, r7
 800ae16:	f7f5 fe91 	bl	8000b3c <__aeabi_dcmpun>
 800ae1a:	b128      	cbz	r0, 800ae28 <_scanf_float+0x40c>
 800ae1c:	4808      	ldr	r0, [pc, #32]	@ (800ae40 <_scanf_float+0x424>)
 800ae1e:	f000 fb91 	bl	800b544 <nanf>
 800ae22:	ed85 0a00 	vstr	s0, [r5]
 800ae26:	e7d1      	b.n	800adcc <_scanf_float+0x3b0>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fee4 	bl	8000bf8 <__aeabi_d2f>
 800ae30:	6028      	str	r0, [r5, #0]
 800ae32:	e7cb      	b.n	800adcc <_scanf_float+0x3b0>
 800ae34:	f04f 0900 	mov.w	r9, #0
 800ae38:	e629      	b.n	800aa8e <_scanf_float+0x72>
 800ae3a:	bf00      	nop
 800ae3c:	0800e9d8 	.word	0x0800e9d8
 800ae40:	0800ed6d 	.word	0x0800ed6d

0800ae44 <__sflush_r>:
 800ae44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4c:	0716      	lsls	r6, r2, #28
 800ae4e:	4605      	mov	r5, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	d454      	bmi.n	800aefe <__sflush_r+0xba>
 800ae54:	684b      	ldr	r3, [r1, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dc02      	bgt.n	800ae60 <__sflush_r+0x1c>
 800ae5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd48      	ble.n	800aef2 <__sflush_r+0xae>
 800ae60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	d045      	beq.n	800aef2 <__sflush_r+0xae>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae6c:	682f      	ldr	r7, [r5, #0]
 800ae6e:	6a21      	ldr	r1, [r4, #32]
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	d030      	beq.n	800aed6 <__sflush_r+0x92>
 800ae74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	0759      	lsls	r1, r3, #29
 800ae7a:	d505      	bpl.n	800ae88 <__sflush_r+0x44>
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae82:	b10b      	cbz	r3, 800ae88 <__sflush_r+0x44>
 800ae84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	2300      	movs	r3, #0
 800ae8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae8c:	6a21      	ldr	r1, [r4, #32]
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b0      	blx	r6
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	d106      	bne.n	800aea6 <__sflush_r+0x62>
 800ae98:	6829      	ldr	r1, [r5, #0]
 800ae9a:	291d      	cmp	r1, #29
 800ae9c:	d82b      	bhi.n	800aef6 <__sflush_r+0xb2>
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <__sflush_r+0x104>)
 800aea0:	410a      	asrs	r2, r1
 800aea2:	07d6      	lsls	r6, r2, #31
 800aea4:	d427      	bmi.n	800aef6 <__sflush_r+0xb2>
 800aea6:	2200      	movs	r2, #0
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	04d9      	lsls	r1, r3, #19
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	6022      	str	r2, [r4, #0]
 800aeb0:	d504      	bpl.n	800aebc <__sflush_r+0x78>
 800aeb2:	1c42      	adds	r2, r0, #1
 800aeb4:	d101      	bne.n	800aeba <__sflush_r+0x76>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b903      	cbnz	r3, 800aebc <__sflush_r+0x78>
 800aeba:	6560      	str	r0, [r4, #84]	@ 0x54
 800aebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	b1b9      	cbz	r1, 800aef2 <__sflush_r+0xae>
 800aec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d002      	beq.n	800aed0 <__sflush_r+0x8c>
 800aeca:	4628      	mov	r0, r5
 800aecc:	f001 f98c 	bl	800c1e8 <_free_r>
 800aed0:	2300      	movs	r3, #0
 800aed2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aed4:	e00d      	b.n	800aef2 <__sflush_r+0xae>
 800aed6:	2301      	movs	r3, #1
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b0      	blx	r6
 800aedc:	4602      	mov	r2, r0
 800aede:	1c50      	adds	r0, r2, #1
 800aee0:	d1c9      	bne.n	800ae76 <__sflush_r+0x32>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0c6      	beq.n	800ae76 <__sflush_r+0x32>
 800aee8:	2b1d      	cmp	r3, #29
 800aeea:	d001      	beq.n	800aef0 <__sflush_r+0xac>
 800aeec:	2b16      	cmp	r3, #22
 800aeee:	d11e      	bne.n	800af2e <__sflush_r+0xea>
 800aef0:	602f      	str	r7, [r5, #0]
 800aef2:	2000      	movs	r0, #0
 800aef4:	e022      	b.n	800af3c <__sflush_r+0xf8>
 800aef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aefa:	b21b      	sxth	r3, r3
 800aefc:	e01b      	b.n	800af36 <__sflush_r+0xf2>
 800aefe:	690f      	ldr	r7, [r1, #16]
 800af00:	2f00      	cmp	r7, #0
 800af02:	d0f6      	beq.n	800aef2 <__sflush_r+0xae>
 800af04:	0793      	lsls	r3, r2, #30
 800af06:	680e      	ldr	r6, [r1, #0]
 800af08:	bf08      	it	eq
 800af0a:	694b      	ldreq	r3, [r1, #20]
 800af0c:	600f      	str	r7, [r1, #0]
 800af0e:	bf18      	it	ne
 800af10:	2300      	movne	r3, #0
 800af12:	eba6 0807 	sub.w	r8, r6, r7
 800af16:	608b      	str	r3, [r1, #8]
 800af18:	f1b8 0f00 	cmp.w	r8, #0
 800af1c:	dde9      	ble.n	800aef2 <__sflush_r+0xae>
 800af1e:	6a21      	ldr	r1, [r4, #32]
 800af20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af22:	4643      	mov	r3, r8
 800af24:	463a      	mov	r2, r7
 800af26:	4628      	mov	r0, r5
 800af28:	47b0      	blx	r6
 800af2a:	2800      	cmp	r0, #0
 800af2c:	dc08      	bgt.n	800af40 <__sflush_r+0xfc>
 800af2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	4407      	add	r7, r0
 800af42:	eba8 0800 	sub.w	r8, r8, r0
 800af46:	e7e7      	b.n	800af18 <__sflush_r+0xd4>
 800af48:	dfbffffe 	.word	0xdfbffffe

0800af4c <_fflush_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b913      	cbnz	r3, 800af5c <_fflush_r+0x10>
 800af56:	2500      	movs	r5, #0
 800af58:	4628      	mov	r0, r5
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	b118      	cbz	r0, 800af66 <_fflush_r+0x1a>
 800af5e:	6a03      	ldr	r3, [r0, #32]
 800af60:	b90b      	cbnz	r3, 800af66 <_fflush_r+0x1a>
 800af62:	f000 f8bb 	bl	800b0dc <__sinit>
 800af66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0f3      	beq.n	800af56 <_fflush_r+0xa>
 800af6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af70:	07d0      	lsls	r0, r2, #31
 800af72:	d404      	bmi.n	800af7e <_fflush_r+0x32>
 800af74:	0599      	lsls	r1, r3, #22
 800af76:	d402      	bmi.n	800af7e <_fflush_r+0x32>
 800af78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af7a:	f000 faca 	bl	800b512 <__retarget_lock_acquire_recursive>
 800af7e:	4628      	mov	r0, r5
 800af80:	4621      	mov	r1, r4
 800af82:	f7ff ff5f 	bl	800ae44 <__sflush_r>
 800af86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af88:	07da      	lsls	r2, r3, #31
 800af8a:	4605      	mov	r5, r0
 800af8c:	d4e4      	bmi.n	800af58 <_fflush_r+0xc>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	059b      	lsls	r3, r3, #22
 800af92:	d4e1      	bmi.n	800af58 <_fflush_r+0xc>
 800af94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af96:	f000 fabd 	bl	800b514 <__retarget_lock_release_recursive>
 800af9a:	e7dd      	b.n	800af58 <_fflush_r+0xc>

0800af9c <fflush>:
 800af9c:	4601      	mov	r1, r0
 800af9e:	b920      	cbnz	r0, 800afaa <fflush+0xe>
 800afa0:	4a04      	ldr	r2, [pc, #16]	@ (800afb4 <fflush+0x18>)
 800afa2:	4905      	ldr	r1, [pc, #20]	@ (800afb8 <fflush+0x1c>)
 800afa4:	4805      	ldr	r0, [pc, #20]	@ (800afbc <fflush+0x20>)
 800afa6:	f000 b8b1 	b.w	800b10c <_fwalk_sglue>
 800afaa:	4b05      	ldr	r3, [pc, #20]	@ (800afc0 <fflush+0x24>)
 800afac:	6818      	ldr	r0, [r3, #0]
 800afae:	f7ff bfcd 	b.w	800af4c <_fflush_r>
 800afb2:	bf00      	nop
 800afb4:	200002cc 	.word	0x200002cc
 800afb8:	0800af4d 	.word	0x0800af4d
 800afbc:	200002dc 	.word	0x200002dc
 800afc0:	200002d8 	.word	0x200002d8

0800afc4 <std>:
 800afc4:	2300      	movs	r3, #0
 800afc6:	b510      	push	{r4, lr}
 800afc8:	4604      	mov	r4, r0
 800afca:	e9c0 3300 	strd	r3, r3, [r0]
 800afce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afd2:	6083      	str	r3, [r0, #8]
 800afd4:	8181      	strh	r1, [r0, #12]
 800afd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800afd8:	81c2      	strh	r2, [r0, #14]
 800afda:	6183      	str	r3, [r0, #24]
 800afdc:	4619      	mov	r1, r3
 800afde:	2208      	movs	r2, #8
 800afe0:	305c      	adds	r0, #92	@ 0x5c
 800afe2:	f000 fa19 	bl	800b418 <memset>
 800afe6:	4b0d      	ldr	r3, [pc, #52]	@ (800b01c <std+0x58>)
 800afe8:	6263      	str	r3, [r4, #36]	@ 0x24
 800afea:	4b0d      	ldr	r3, [pc, #52]	@ (800b020 <std+0x5c>)
 800afec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afee:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <std+0x60>)
 800aff0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aff2:	4b0d      	ldr	r3, [pc, #52]	@ (800b028 <std+0x64>)
 800aff4:	6323      	str	r3, [r4, #48]	@ 0x30
 800aff6:	4b0d      	ldr	r3, [pc, #52]	@ (800b02c <std+0x68>)
 800aff8:	6224      	str	r4, [r4, #32]
 800affa:	429c      	cmp	r4, r3
 800affc:	d006      	beq.n	800b00c <std+0x48>
 800affe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b002:	4294      	cmp	r4, r2
 800b004:	d002      	beq.n	800b00c <std+0x48>
 800b006:	33d0      	adds	r3, #208	@ 0xd0
 800b008:	429c      	cmp	r4, r3
 800b00a:	d105      	bne.n	800b018 <std+0x54>
 800b00c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b014:	f000 ba7c 	b.w	800b510 <__retarget_lock_init_recursive>
 800b018:	bd10      	pop	{r4, pc}
 800b01a:	bf00      	nop
 800b01c:	0800b269 	.word	0x0800b269
 800b020:	0800b28b 	.word	0x0800b28b
 800b024:	0800b2c3 	.word	0x0800b2c3
 800b028:	0800b2e7 	.word	0x0800b2e7
 800b02c:	2000101c 	.word	0x2000101c

0800b030 <stdio_exit_handler>:
 800b030:	4a02      	ldr	r2, [pc, #8]	@ (800b03c <stdio_exit_handler+0xc>)
 800b032:	4903      	ldr	r1, [pc, #12]	@ (800b040 <stdio_exit_handler+0x10>)
 800b034:	4803      	ldr	r0, [pc, #12]	@ (800b044 <stdio_exit_handler+0x14>)
 800b036:	f000 b869 	b.w	800b10c <_fwalk_sglue>
 800b03a:	bf00      	nop
 800b03c:	200002cc 	.word	0x200002cc
 800b040:	0800af4d 	.word	0x0800af4d
 800b044:	200002dc 	.word	0x200002dc

0800b048 <cleanup_stdio>:
 800b048:	6841      	ldr	r1, [r0, #4]
 800b04a:	4b0c      	ldr	r3, [pc, #48]	@ (800b07c <cleanup_stdio+0x34>)
 800b04c:	4299      	cmp	r1, r3
 800b04e:	b510      	push	{r4, lr}
 800b050:	4604      	mov	r4, r0
 800b052:	d001      	beq.n	800b058 <cleanup_stdio+0x10>
 800b054:	f7ff ff7a 	bl	800af4c <_fflush_r>
 800b058:	68a1      	ldr	r1, [r4, #8]
 800b05a:	4b09      	ldr	r3, [pc, #36]	@ (800b080 <cleanup_stdio+0x38>)
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <cleanup_stdio+0x1e>
 800b060:	4620      	mov	r0, r4
 800b062:	f7ff ff73 	bl	800af4c <_fflush_r>
 800b066:	68e1      	ldr	r1, [r4, #12]
 800b068:	4b06      	ldr	r3, [pc, #24]	@ (800b084 <cleanup_stdio+0x3c>)
 800b06a:	4299      	cmp	r1, r3
 800b06c:	d004      	beq.n	800b078 <cleanup_stdio+0x30>
 800b06e:	4620      	mov	r0, r4
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b074:	f7ff bf6a 	b.w	800af4c <_fflush_r>
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	bf00      	nop
 800b07c:	2000101c 	.word	0x2000101c
 800b080:	20001084 	.word	0x20001084
 800b084:	200010ec 	.word	0x200010ec

0800b088 <global_stdio_init.part.0>:
 800b088:	b510      	push	{r4, lr}
 800b08a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b8 <global_stdio_init.part.0+0x30>)
 800b08c:	4c0b      	ldr	r4, [pc, #44]	@ (800b0bc <global_stdio_init.part.0+0x34>)
 800b08e:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c0 <global_stdio_init.part.0+0x38>)
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	4620      	mov	r0, r4
 800b094:	2200      	movs	r2, #0
 800b096:	2104      	movs	r1, #4
 800b098:	f7ff ff94 	bl	800afc4 <std>
 800b09c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	2109      	movs	r1, #9
 800b0a4:	f7ff ff8e 	bl	800afc4 <std>
 800b0a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b2:	2112      	movs	r1, #18
 800b0b4:	f7ff bf86 	b.w	800afc4 <std>
 800b0b8:	20001154 	.word	0x20001154
 800b0bc:	2000101c 	.word	0x2000101c
 800b0c0:	0800b031 	.word	0x0800b031

0800b0c4 <__sfp_lock_acquire>:
 800b0c4:	4801      	ldr	r0, [pc, #4]	@ (800b0cc <__sfp_lock_acquire+0x8>)
 800b0c6:	f000 ba24 	b.w	800b512 <__retarget_lock_acquire_recursive>
 800b0ca:	bf00      	nop
 800b0cc:	2000115d 	.word	0x2000115d

0800b0d0 <__sfp_lock_release>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	@ (800b0d8 <__sfp_lock_release+0x8>)
 800b0d2:	f000 ba1f 	b.w	800b514 <__retarget_lock_release_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	2000115d 	.word	0x2000115d

0800b0dc <__sinit>:
 800b0dc:	b510      	push	{r4, lr}
 800b0de:	4604      	mov	r4, r0
 800b0e0:	f7ff fff0 	bl	800b0c4 <__sfp_lock_acquire>
 800b0e4:	6a23      	ldr	r3, [r4, #32]
 800b0e6:	b11b      	cbz	r3, 800b0f0 <__sinit+0x14>
 800b0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ec:	f7ff bff0 	b.w	800b0d0 <__sfp_lock_release>
 800b0f0:	4b04      	ldr	r3, [pc, #16]	@ (800b104 <__sinit+0x28>)
 800b0f2:	6223      	str	r3, [r4, #32]
 800b0f4:	4b04      	ldr	r3, [pc, #16]	@ (800b108 <__sinit+0x2c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f5      	bne.n	800b0e8 <__sinit+0xc>
 800b0fc:	f7ff ffc4 	bl	800b088 <global_stdio_init.part.0>
 800b100:	e7f2      	b.n	800b0e8 <__sinit+0xc>
 800b102:	bf00      	nop
 800b104:	0800b049 	.word	0x0800b049
 800b108:	20001154 	.word	0x20001154

0800b10c <_fwalk_sglue>:
 800b10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b110:	4607      	mov	r7, r0
 800b112:	4688      	mov	r8, r1
 800b114:	4614      	mov	r4, r2
 800b116:	2600      	movs	r6, #0
 800b118:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b11c:	f1b9 0901 	subs.w	r9, r9, #1
 800b120:	d505      	bpl.n	800b12e <_fwalk_sglue+0x22>
 800b122:	6824      	ldr	r4, [r4, #0]
 800b124:	2c00      	cmp	r4, #0
 800b126:	d1f7      	bne.n	800b118 <_fwalk_sglue+0xc>
 800b128:	4630      	mov	r0, r6
 800b12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12e:	89ab      	ldrh	r3, [r5, #12]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d907      	bls.n	800b144 <_fwalk_sglue+0x38>
 800b134:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b138:	3301      	adds	r3, #1
 800b13a:	d003      	beq.n	800b144 <_fwalk_sglue+0x38>
 800b13c:	4629      	mov	r1, r5
 800b13e:	4638      	mov	r0, r7
 800b140:	47c0      	blx	r8
 800b142:	4306      	orrs	r6, r0
 800b144:	3568      	adds	r5, #104	@ 0x68
 800b146:	e7e9      	b.n	800b11c <_fwalk_sglue+0x10>

0800b148 <iprintf>:
 800b148:	b40f      	push	{r0, r1, r2, r3}
 800b14a:	b507      	push	{r0, r1, r2, lr}
 800b14c:	4906      	ldr	r1, [pc, #24]	@ (800b168 <iprintf+0x20>)
 800b14e:	ab04      	add	r3, sp, #16
 800b150:	6808      	ldr	r0, [r1, #0]
 800b152:	f853 2b04 	ldr.w	r2, [r3], #4
 800b156:	6881      	ldr	r1, [r0, #8]
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	f002 fdfd 	bl	800dd58 <_vfiprintf_r>
 800b15e:	b003      	add	sp, #12
 800b160:	f85d eb04 	ldr.w	lr, [sp], #4
 800b164:	b004      	add	sp, #16
 800b166:	4770      	bx	lr
 800b168:	200002d8 	.word	0x200002d8

0800b16c <_puts_r>:
 800b16c:	6a03      	ldr	r3, [r0, #32]
 800b16e:	b570      	push	{r4, r5, r6, lr}
 800b170:	6884      	ldr	r4, [r0, #8]
 800b172:	4605      	mov	r5, r0
 800b174:	460e      	mov	r6, r1
 800b176:	b90b      	cbnz	r3, 800b17c <_puts_r+0x10>
 800b178:	f7ff ffb0 	bl	800b0dc <__sinit>
 800b17c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b17e:	07db      	lsls	r3, r3, #31
 800b180:	d405      	bmi.n	800b18e <_puts_r+0x22>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	0598      	lsls	r0, r3, #22
 800b186:	d402      	bmi.n	800b18e <_puts_r+0x22>
 800b188:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b18a:	f000 f9c2 	bl	800b512 <__retarget_lock_acquire_recursive>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	0719      	lsls	r1, r3, #28
 800b192:	d502      	bpl.n	800b19a <_puts_r+0x2e>
 800b194:	6923      	ldr	r3, [r4, #16]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d135      	bne.n	800b206 <_puts_r+0x9a>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4628      	mov	r0, r5
 800b19e:	f000 f8e5 	bl	800b36c <__swsetup_r>
 800b1a2:	b380      	cbz	r0, 800b206 <_puts_r+0x9a>
 800b1a4:	f04f 35ff 	mov.w	r5, #4294967295
 800b1a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1aa:	07da      	lsls	r2, r3, #31
 800b1ac:	d405      	bmi.n	800b1ba <_puts_r+0x4e>
 800b1ae:	89a3      	ldrh	r3, [r4, #12]
 800b1b0:	059b      	lsls	r3, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_puts_r+0x4e>
 800b1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1b6:	f000 f9ad 	bl	800b514 <__retarget_lock_release_recursive>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	da04      	bge.n	800b1cc <_puts_r+0x60>
 800b1c2:	69a2      	ldr	r2, [r4, #24]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	dc17      	bgt.n	800b1f8 <_puts_r+0x8c>
 800b1c8:	290a      	cmp	r1, #10
 800b1ca:	d015      	beq.n	800b1f8 <_puts_r+0x8c>
 800b1cc:	6823      	ldr	r3, [r4, #0]
 800b1ce:	1c5a      	adds	r2, r3, #1
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	7019      	strb	r1, [r3, #0]
 800b1d4:	68a3      	ldr	r3, [r4, #8]
 800b1d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	60a3      	str	r3, [r4, #8]
 800b1de:	2900      	cmp	r1, #0
 800b1e0:	d1ed      	bne.n	800b1be <_puts_r+0x52>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	da11      	bge.n	800b20a <_puts_r+0x9e>
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	210a      	movs	r1, #10
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f000 f87f 	bl	800b2ee <__swbuf_r>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d0d7      	beq.n	800b1a4 <_puts_r+0x38>
 800b1f4:	250a      	movs	r5, #10
 800b1f6:	e7d7      	b.n	800b1a8 <_puts_r+0x3c>
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 f877 	bl	800b2ee <__swbuf_r>
 800b200:	3001      	adds	r0, #1
 800b202:	d1e7      	bne.n	800b1d4 <_puts_r+0x68>
 800b204:	e7ce      	b.n	800b1a4 <_puts_r+0x38>
 800b206:	3e01      	subs	r6, #1
 800b208:	e7e4      	b.n	800b1d4 <_puts_r+0x68>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	6022      	str	r2, [r4, #0]
 800b210:	220a      	movs	r2, #10
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	e7ee      	b.n	800b1f4 <_puts_r+0x88>
	...

0800b218 <puts>:
 800b218:	4b02      	ldr	r3, [pc, #8]	@ (800b224 <puts+0xc>)
 800b21a:	4601      	mov	r1, r0
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	f7ff bfa5 	b.w	800b16c <_puts_r>
 800b222:	bf00      	nop
 800b224:	200002d8 	.word	0x200002d8

0800b228 <siprintf>:
 800b228:	b40e      	push	{r1, r2, r3}
 800b22a:	b500      	push	{lr}
 800b22c:	b09c      	sub	sp, #112	@ 0x70
 800b22e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b230:	9002      	str	r0, [sp, #8]
 800b232:	9006      	str	r0, [sp, #24]
 800b234:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b238:	4809      	ldr	r0, [pc, #36]	@ (800b260 <siprintf+0x38>)
 800b23a:	9107      	str	r1, [sp, #28]
 800b23c:	9104      	str	r1, [sp, #16]
 800b23e:	4909      	ldr	r1, [pc, #36]	@ (800b264 <siprintf+0x3c>)
 800b240:	f853 2b04 	ldr.w	r2, [r3], #4
 800b244:	9105      	str	r1, [sp, #20]
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	a902      	add	r1, sp, #8
 800b24c:	f002 fc5e 	bl	800db0c <_svfiprintf_r>
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	b01c      	add	sp, #112	@ 0x70
 800b258:	f85d eb04 	ldr.w	lr, [sp], #4
 800b25c:	b003      	add	sp, #12
 800b25e:	4770      	bx	lr
 800b260:	200002d8 	.word	0x200002d8
 800b264:	ffff0208 	.word	0xffff0208

0800b268 <__sread>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	460c      	mov	r4, r1
 800b26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b270:	f000 f900 	bl	800b474 <_read_r>
 800b274:	2800      	cmp	r0, #0
 800b276:	bfab      	itete	ge
 800b278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b27a:	89a3      	ldrhlt	r3, [r4, #12]
 800b27c:	181b      	addge	r3, r3, r0
 800b27e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b282:	bfac      	ite	ge
 800b284:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b286:	81a3      	strhlt	r3, [r4, #12]
 800b288:	bd10      	pop	{r4, pc}

0800b28a <__swrite>:
 800b28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b28e:	461f      	mov	r7, r3
 800b290:	898b      	ldrh	r3, [r1, #12]
 800b292:	05db      	lsls	r3, r3, #23
 800b294:	4605      	mov	r5, r0
 800b296:	460c      	mov	r4, r1
 800b298:	4616      	mov	r6, r2
 800b29a:	d505      	bpl.n	800b2a8 <__swrite+0x1e>
 800b29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f000 f8d4 	bl	800b450 <_lseek_r>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	4632      	mov	r2, r6
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2be:	f000 b8eb 	b.w	800b498 <_write_r>

0800b2c2 <__sseek>:
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	460c      	mov	r4, r1
 800b2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ca:	f000 f8c1 	bl	800b450 <_lseek_r>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	bf15      	itete	ne
 800b2d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2de:	81a3      	strheq	r3, [r4, #12]
 800b2e0:	bf18      	it	ne
 800b2e2:	81a3      	strhne	r3, [r4, #12]
 800b2e4:	bd10      	pop	{r4, pc}

0800b2e6 <__sclose>:
 800b2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ea:	f000 b8a1 	b.w	800b430 <_close_r>

0800b2ee <__swbuf_r>:
 800b2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f0:	460e      	mov	r6, r1
 800b2f2:	4614      	mov	r4, r2
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	b118      	cbz	r0, 800b300 <__swbuf_r+0x12>
 800b2f8:	6a03      	ldr	r3, [r0, #32]
 800b2fa:	b90b      	cbnz	r3, 800b300 <__swbuf_r+0x12>
 800b2fc:	f7ff feee 	bl	800b0dc <__sinit>
 800b300:	69a3      	ldr	r3, [r4, #24]
 800b302:	60a3      	str	r3, [r4, #8]
 800b304:	89a3      	ldrh	r3, [r4, #12]
 800b306:	071a      	lsls	r2, r3, #28
 800b308:	d501      	bpl.n	800b30e <__swbuf_r+0x20>
 800b30a:	6923      	ldr	r3, [r4, #16]
 800b30c:	b943      	cbnz	r3, 800b320 <__swbuf_r+0x32>
 800b30e:	4621      	mov	r1, r4
 800b310:	4628      	mov	r0, r5
 800b312:	f000 f82b 	bl	800b36c <__swsetup_r>
 800b316:	b118      	cbz	r0, 800b320 <__swbuf_r+0x32>
 800b318:	f04f 37ff 	mov.w	r7, #4294967295
 800b31c:	4638      	mov	r0, r7
 800b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	6922      	ldr	r2, [r4, #16]
 800b324:	1a98      	subs	r0, r3, r2
 800b326:	6963      	ldr	r3, [r4, #20]
 800b328:	b2f6      	uxtb	r6, r6
 800b32a:	4283      	cmp	r3, r0
 800b32c:	4637      	mov	r7, r6
 800b32e:	dc05      	bgt.n	800b33c <__swbuf_r+0x4e>
 800b330:	4621      	mov	r1, r4
 800b332:	4628      	mov	r0, r5
 800b334:	f7ff fe0a 	bl	800af4c <_fflush_r>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1ed      	bne.n	800b318 <__swbuf_r+0x2a>
 800b33c:	68a3      	ldr	r3, [r4, #8]
 800b33e:	3b01      	subs	r3, #1
 800b340:	60a3      	str	r3, [r4, #8]
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	6022      	str	r2, [r4, #0]
 800b348:	701e      	strb	r6, [r3, #0]
 800b34a:	6962      	ldr	r2, [r4, #20]
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	429a      	cmp	r2, r3
 800b350:	d004      	beq.n	800b35c <__swbuf_r+0x6e>
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	07db      	lsls	r3, r3, #31
 800b356:	d5e1      	bpl.n	800b31c <__swbuf_r+0x2e>
 800b358:	2e0a      	cmp	r6, #10
 800b35a:	d1df      	bne.n	800b31c <__swbuf_r+0x2e>
 800b35c:	4621      	mov	r1, r4
 800b35e:	4628      	mov	r0, r5
 800b360:	f7ff fdf4 	bl	800af4c <_fflush_r>
 800b364:	2800      	cmp	r0, #0
 800b366:	d0d9      	beq.n	800b31c <__swbuf_r+0x2e>
 800b368:	e7d6      	b.n	800b318 <__swbuf_r+0x2a>
	...

0800b36c <__swsetup_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4b29      	ldr	r3, [pc, #164]	@ (800b414 <__swsetup_r+0xa8>)
 800b370:	4605      	mov	r5, r0
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	460c      	mov	r4, r1
 800b376:	b118      	cbz	r0, 800b380 <__swsetup_r+0x14>
 800b378:	6a03      	ldr	r3, [r0, #32]
 800b37a:	b90b      	cbnz	r3, 800b380 <__swsetup_r+0x14>
 800b37c:	f7ff feae 	bl	800b0dc <__sinit>
 800b380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b384:	0719      	lsls	r1, r3, #28
 800b386:	d422      	bmi.n	800b3ce <__swsetup_r+0x62>
 800b388:	06da      	lsls	r2, r3, #27
 800b38a:	d407      	bmi.n	800b39c <__swsetup_r+0x30>
 800b38c:	2209      	movs	r2, #9
 800b38e:	602a      	str	r2, [r5, #0]
 800b390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b394:	81a3      	strh	r3, [r4, #12]
 800b396:	f04f 30ff 	mov.w	r0, #4294967295
 800b39a:	e033      	b.n	800b404 <__swsetup_r+0x98>
 800b39c:	0758      	lsls	r0, r3, #29
 800b39e:	d512      	bpl.n	800b3c6 <__swsetup_r+0x5a>
 800b3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3a2:	b141      	cbz	r1, 800b3b6 <__swsetup_r+0x4a>
 800b3a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3a8:	4299      	cmp	r1, r3
 800b3aa:	d002      	beq.n	800b3b2 <__swsetup_r+0x46>
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	f000 ff1b 	bl	800c1e8 <_free_r>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	6923      	ldr	r3, [r4, #16]
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f043 0308 	orr.w	r3, r3, #8
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	6923      	ldr	r3, [r4, #16]
 800b3d0:	b94b      	cbnz	r3, 800b3e6 <__swsetup_r+0x7a>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b3d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3dc:	d003      	beq.n	800b3e6 <__swsetup_r+0x7a>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f002 fdf7 	bl	800dfd4 <__smakebuf_r>
 800b3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ea:	f013 0201 	ands.w	r2, r3, #1
 800b3ee:	d00a      	beq.n	800b406 <__swsetup_r+0x9a>
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	60a2      	str	r2, [r4, #8]
 800b3f4:	6962      	ldr	r2, [r4, #20]
 800b3f6:	4252      	negs	r2, r2
 800b3f8:	61a2      	str	r2, [r4, #24]
 800b3fa:	6922      	ldr	r2, [r4, #16]
 800b3fc:	b942      	cbnz	r2, 800b410 <__swsetup_r+0xa4>
 800b3fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b402:	d1c5      	bne.n	800b390 <__swsetup_r+0x24>
 800b404:	bd38      	pop	{r3, r4, r5, pc}
 800b406:	0799      	lsls	r1, r3, #30
 800b408:	bf58      	it	pl
 800b40a:	6962      	ldrpl	r2, [r4, #20]
 800b40c:	60a2      	str	r2, [r4, #8]
 800b40e:	e7f4      	b.n	800b3fa <__swsetup_r+0x8e>
 800b410:	2000      	movs	r0, #0
 800b412:	e7f7      	b.n	800b404 <__swsetup_r+0x98>
 800b414:	200002d8 	.word	0x200002d8

0800b418 <memset>:
 800b418:	4402      	add	r2, r0
 800b41a:	4603      	mov	r3, r0
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d100      	bne.n	800b422 <memset+0xa>
 800b420:	4770      	bx	lr
 800b422:	f803 1b01 	strb.w	r1, [r3], #1
 800b426:	e7f9      	b.n	800b41c <memset+0x4>

0800b428 <_localeconv_r>:
 800b428:	4800      	ldr	r0, [pc, #0]	@ (800b42c <_localeconv_r+0x4>)
 800b42a:	4770      	bx	lr
 800b42c:	20000418 	.word	0x20000418

0800b430 <_close_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d06      	ldr	r5, [pc, #24]	@ (800b44c <_close_r+0x1c>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	602b      	str	r3, [r5, #0]
 800b43c:	f7f6 fd4a 	bl	8001ed4 <_close>
 800b440:	1c43      	adds	r3, r0, #1
 800b442:	d102      	bne.n	800b44a <_close_r+0x1a>
 800b444:	682b      	ldr	r3, [r5, #0]
 800b446:	b103      	cbz	r3, 800b44a <_close_r+0x1a>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	bd38      	pop	{r3, r4, r5, pc}
 800b44c:	20001158 	.word	0x20001158

0800b450 <_lseek_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d07      	ldr	r5, [pc, #28]	@ (800b470 <_lseek_r+0x20>)
 800b454:	4604      	mov	r4, r0
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	2200      	movs	r2, #0
 800b45c:	602a      	str	r2, [r5, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	f7f6 fd5f 	bl	8001f22 <_lseek>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_lseek_r+0x1e>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_lseek_r+0x1e>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20001158 	.word	0x20001158

0800b474 <_read_r>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4d07      	ldr	r5, [pc, #28]	@ (800b494 <_read_r+0x20>)
 800b478:	4604      	mov	r4, r0
 800b47a:	4608      	mov	r0, r1
 800b47c:	4611      	mov	r1, r2
 800b47e:	2200      	movs	r2, #0
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f7f6 fced 	bl	8001e62 <_read>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_read_r+0x1e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_read_r+0x1e>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20001158 	.word	0x20001158

0800b498 <_write_r>:
 800b498:	b538      	push	{r3, r4, r5, lr}
 800b49a:	4d07      	ldr	r5, [pc, #28]	@ (800b4b8 <_write_r+0x20>)
 800b49c:	4604      	mov	r4, r0
 800b49e:	4608      	mov	r0, r1
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	602a      	str	r2, [r5, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	f7f6 fcf8 	bl	8001e9c <_write>
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	d102      	bne.n	800b4b6 <_write_r+0x1e>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	b103      	cbz	r3, 800b4b6 <_write_r+0x1e>
 800b4b4:	6023      	str	r3, [r4, #0]
 800b4b6:	bd38      	pop	{r3, r4, r5, pc}
 800b4b8:	20001158 	.word	0x20001158

0800b4bc <__errno>:
 800b4bc:	4b01      	ldr	r3, [pc, #4]	@ (800b4c4 <__errno+0x8>)
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	200002d8 	.word	0x200002d8

0800b4c8 <__libc_init_array>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	4d0d      	ldr	r5, [pc, #52]	@ (800b500 <__libc_init_array+0x38>)
 800b4cc:	4c0d      	ldr	r4, [pc, #52]	@ (800b504 <__libc_init_array+0x3c>)
 800b4ce:	1b64      	subs	r4, r4, r5
 800b4d0:	10a4      	asrs	r4, r4, #2
 800b4d2:	2600      	movs	r6, #0
 800b4d4:	42a6      	cmp	r6, r4
 800b4d6:	d109      	bne.n	800b4ec <__libc_init_array+0x24>
 800b4d8:	4d0b      	ldr	r5, [pc, #44]	@ (800b508 <__libc_init_array+0x40>)
 800b4da:	4c0c      	ldr	r4, [pc, #48]	@ (800b50c <__libc_init_array+0x44>)
 800b4dc:	f003 fa3a 	bl	800e954 <_init>
 800b4e0:	1b64      	subs	r4, r4, r5
 800b4e2:	10a4      	asrs	r4, r4, #2
 800b4e4:	2600      	movs	r6, #0
 800b4e6:	42a6      	cmp	r6, r4
 800b4e8:	d105      	bne.n	800b4f6 <__libc_init_array+0x2e>
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
 800b4ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4f0:	4798      	blx	r3
 800b4f2:	3601      	adds	r6, #1
 800b4f4:	e7ee      	b.n	800b4d4 <__libc_init_array+0xc>
 800b4f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4fa:	4798      	blx	r3
 800b4fc:	3601      	adds	r6, #1
 800b4fe:	e7f2      	b.n	800b4e6 <__libc_init_array+0x1e>
 800b500:	0800edd8 	.word	0x0800edd8
 800b504:	0800edd8 	.word	0x0800edd8
 800b508:	0800edd8 	.word	0x0800edd8
 800b50c:	0800eddc 	.word	0x0800eddc

0800b510 <__retarget_lock_init_recursive>:
 800b510:	4770      	bx	lr

0800b512 <__retarget_lock_acquire_recursive>:
 800b512:	4770      	bx	lr

0800b514 <__retarget_lock_release_recursive>:
 800b514:	4770      	bx	lr

0800b516 <strcpy>:
 800b516:	4603      	mov	r3, r0
 800b518:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b51c:	f803 2b01 	strb.w	r2, [r3], #1
 800b520:	2a00      	cmp	r2, #0
 800b522:	d1f9      	bne.n	800b518 <strcpy+0x2>
 800b524:	4770      	bx	lr

0800b526 <memcpy>:
 800b526:	440a      	add	r2, r1
 800b528:	4291      	cmp	r1, r2
 800b52a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b52e:	d100      	bne.n	800b532 <memcpy+0xc>
 800b530:	4770      	bx	lr
 800b532:	b510      	push	{r4, lr}
 800b534:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b53c:	4291      	cmp	r1, r2
 800b53e:	d1f9      	bne.n	800b534 <memcpy+0xe>
 800b540:	bd10      	pop	{r4, pc}
	...

0800b544 <nanf>:
 800b544:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b54c <nanf+0x8>
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	7fc00000 	.word	0x7fc00000

0800b550 <quorem>:
 800b550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	6903      	ldr	r3, [r0, #16]
 800b556:	690c      	ldr	r4, [r1, #16]
 800b558:	42a3      	cmp	r3, r4
 800b55a:	4607      	mov	r7, r0
 800b55c:	db7e      	blt.n	800b65c <quorem+0x10c>
 800b55e:	3c01      	subs	r4, #1
 800b560:	f101 0814 	add.w	r8, r1, #20
 800b564:	00a3      	lsls	r3, r4, #2
 800b566:	f100 0514 	add.w	r5, r0, #20
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b576:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b57a:	3301      	adds	r3, #1
 800b57c:	429a      	cmp	r2, r3
 800b57e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b582:	fbb2 f6f3 	udiv	r6, r2, r3
 800b586:	d32e      	bcc.n	800b5e6 <quorem+0x96>
 800b588:	f04f 0a00 	mov.w	sl, #0
 800b58c:	46c4      	mov	ip, r8
 800b58e:	46ae      	mov	lr, r5
 800b590:	46d3      	mov	fp, sl
 800b592:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b596:	b298      	uxth	r0, r3
 800b598:	fb06 a000 	mla	r0, r6, r0, sl
 800b59c:	0c02      	lsrs	r2, r0, #16
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	fb06 2303 	mla	r3, r6, r3, r2
 800b5a4:	f8de 2000 	ldr.w	r2, [lr]
 800b5a8:	b280      	uxth	r0, r0
 800b5aa:	b292      	uxth	r2, r2
 800b5ac:	1a12      	subs	r2, r2, r0
 800b5ae:	445a      	add	r2, fp
 800b5b0:	f8de 0000 	ldr.w	r0, [lr]
 800b5b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5c2:	b292      	uxth	r2, r2
 800b5c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5c8:	45e1      	cmp	r9, ip
 800b5ca:	f84e 2b04 	str.w	r2, [lr], #4
 800b5ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5d2:	d2de      	bcs.n	800b592 <quorem+0x42>
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	58eb      	ldr	r3, [r5, r3]
 800b5d8:	b92b      	cbnz	r3, 800b5e6 <quorem+0x96>
 800b5da:	9b01      	ldr	r3, [sp, #4]
 800b5dc:	3b04      	subs	r3, #4
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	d32f      	bcc.n	800b644 <quorem+0xf4>
 800b5e4:	613c      	str	r4, [r7, #16]
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f001 f9c2 	bl	800c970 <__mcmp>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	db25      	blt.n	800b63c <quorem+0xec>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b5f8:	f8d1 c000 	ldr.w	ip, [r1]
 800b5fc:	fa1f fe82 	uxth.w	lr, r2
 800b600:	fa1f f38c 	uxth.w	r3, ip
 800b604:	eba3 030e 	sub.w	r3, r3, lr
 800b608:	4403      	add	r3, r0
 800b60a:	0c12      	lsrs	r2, r2, #16
 800b60c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b610:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b614:	b29b      	uxth	r3, r3
 800b616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b61a:	45c1      	cmp	r9, r8
 800b61c:	f841 3b04 	str.w	r3, [r1], #4
 800b620:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b624:	d2e6      	bcs.n	800b5f4 <quorem+0xa4>
 800b626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b62a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b62e:	b922      	cbnz	r2, 800b63a <quorem+0xea>
 800b630:	3b04      	subs	r3, #4
 800b632:	429d      	cmp	r5, r3
 800b634:	461a      	mov	r2, r3
 800b636:	d30b      	bcc.n	800b650 <quorem+0x100>
 800b638:	613c      	str	r4, [r7, #16]
 800b63a:	3601      	adds	r6, #1
 800b63c:	4630      	mov	r0, r6
 800b63e:	b003      	add	sp, #12
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	3b04      	subs	r3, #4
 800b648:	2a00      	cmp	r2, #0
 800b64a:	d1cb      	bne.n	800b5e4 <quorem+0x94>
 800b64c:	3c01      	subs	r4, #1
 800b64e:	e7c6      	b.n	800b5de <quorem+0x8e>
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	3b04      	subs	r3, #4
 800b654:	2a00      	cmp	r2, #0
 800b656:	d1ef      	bne.n	800b638 <quorem+0xe8>
 800b658:	3c01      	subs	r4, #1
 800b65a:	e7ea      	b.n	800b632 <quorem+0xe2>
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7ee      	b.n	800b63e <quorem+0xee>

0800b660 <_dtoa_r>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	69c7      	ldr	r7, [r0, #28]
 800b666:	b099      	sub	sp, #100	@ 0x64
 800b668:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b66c:	ec55 4b10 	vmov	r4, r5, d0
 800b670:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b672:	9109      	str	r1, [sp, #36]	@ 0x24
 800b674:	4683      	mov	fp, r0
 800b676:	920e      	str	r2, [sp, #56]	@ 0x38
 800b678:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b67a:	b97f      	cbnz	r7, 800b69c <_dtoa_r+0x3c>
 800b67c:	2010      	movs	r0, #16
 800b67e:	f000 fdfd 	bl	800c27c <malloc>
 800b682:	4602      	mov	r2, r0
 800b684:	f8cb 001c 	str.w	r0, [fp, #28]
 800b688:	b920      	cbnz	r0, 800b694 <_dtoa_r+0x34>
 800b68a:	4ba7      	ldr	r3, [pc, #668]	@ (800b928 <_dtoa_r+0x2c8>)
 800b68c:	21ef      	movs	r1, #239	@ 0xef
 800b68e:	48a7      	ldr	r0, [pc, #668]	@ (800b92c <_dtoa_r+0x2cc>)
 800b690:	f002 fd42 	bl	800e118 <__assert_func>
 800b694:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b698:	6007      	str	r7, [r0, #0]
 800b69a:	60c7      	str	r7, [r0, #12]
 800b69c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6a0:	6819      	ldr	r1, [r3, #0]
 800b6a2:	b159      	cbz	r1, 800b6bc <_dtoa_r+0x5c>
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	604a      	str	r2, [r1, #4]
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4093      	lsls	r3, r2
 800b6ac:	608b      	str	r3, [r1, #8]
 800b6ae:	4658      	mov	r0, fp
 800b6b0:	f000 feda 	bl	800c468 <_Bfree>
 800b6b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
 800b6bc:	1e2b      	subs	r3, r5, #0
 800b6be:	bfb9      	ittee	lt
 800b6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6c4:	9303      	strlt	r3, [sp, #12]
 800b6c6:	2300      	movge	r3, #0
 800b6c8:	6033      	strge	r3, [r6, #0]
 800b6ca:	9f03      	ldr	r7, [sp, #12]
 800b6cc:	4b98      	ldr	r3, [pc, #608]	@ (800b930 <_dtoa_r+0x2d0>)
 800b6ce:	bfbc      	itt	lt
 800b6d0:	2201      	movlt	r2, #1
 800b6d2:	6032      	strlt	r2, [r6, #0]
 800b6d4:	43bb      	bics	r3, r7
 800b6d6:	d112      	bne.n	800b6fe <_dtoa_r+0x9e>
 800b6d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b6da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6e4:	4323      	orrs	r3, r4
 800b6e6:	f000 854d 	beq.w	800c184 <_dtoa_r+0xb24>
 800b6ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b944 <_dtoa_r+0x2e4>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 854f 	beq.w	800c194 <_dtoa_r+0xb34>
 800b6f6:	f10a 0303 	add.w	r3, sl, #3
 800b6fa:	f000 bd49 	b.w	800c190 <_dtoa_r+0xb30>
 800b6fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b702:	2200      	movs	r2, #0
 800b704:	ec51 0b17 	vmov	r0, r1, d7
 800b708:	2300      	movs	r3, #0
 800b70a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b70e:	f7f5 f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b712:	4680      	mov	r8, r0
 800b714:	b158      	cbz	r0, 800b72e <_dtoa_r+0xce>
 800b716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b718:	2301      	movs	r3, #1
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b71e:	b113      	cbz	r3, 800b726 <_dtoa_r+0xc6>
 800b720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b722:	4b84      	ldr	r3, [pc, #528]	@ (800b934 <_dtoa_r+0x2d4>)
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b948 <_dtoa_r+0x2e8>
 800b72a:	f000 bd33 	b.w	800c194 <_dtoa_r+0xb34>
 800b72e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b732:	aa16      	add	r2, sp, #88	@ 0x58
 800b734:	a917      	add	r1, sp, #92	@ 0x5c
 800b736:	4658      	mov	r0, fp
 800b738:	f001 fa3a 	bl	800cbb0 <__d2b>
 800b73c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b740:	4681      	mov	r9, r0
 800b742:	2e00      	cmp	r6, #0
 800b744:	d077      	beq.n	800b836 <_dtoa_r+0x1d6>
 800b746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b748:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b754:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b758:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b75c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b760:	4619      	mov	r1, r3
 800b762:	2200      	movs	r2, #0
 800b764:	4b74      	ldr	r3, [pc, #464]	@ (800b938 <_dtoa_r+0x2d8>)
 800b766:	f7f4 fd97 	bl	8000298 <__aeabi_dsub>
 800b76a:	a369      	add	r3, pc, #420	@ (adr r3, 800b910 <_dtoa_r+0x2b0>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 ff4a 	bl	8000608 <__aeabi_dmul>
 800b774:	a368      	add	r3, pc, #416	@ (adr r3, 800b918 <_dtoa_r+0x2b8>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	f7f4 fd8f 	bl	800029c <__adddf3>
 800b77e:	4604      	mov	r4, r0
 800b780:	4630      	mov	r0, r6
 800b782:	460d      	mov	r5, r1
 800b784:	f7f4 fed6 	bl	8000534 <__aeabi_i2d>
 800b788:	a365      	add	r3, pc, #404	@ (adr r3, 800b920 <_dtoa_r+0x2c0>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 ff3b 	bl	8000608 <__aeabi_dmul>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fd7f 	bl	800029c <__adddf3>
 800b79e:	4604      	mov	r4, r0
 800b7a0:	460d      	mov	r5, r1
 800b7a2:	f7f5 f9e1 	bl	8000b68 <__aeabi_d2iz>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f5 f99c 	bl	8000aec <__aeabi_dcmplt>
 800b7b4:	b140      	cbz	r0, 800b7c8 <_dtoa_r+0x168>
 800b7b6:	4638      	mov	r0, r7
 800b7b8:	f7f4 febc 	bl	8000534 <__aeabi_i2d>
 800b7bc:	4622      	mov	r2, r4
 800b7be:	462b      	mov	r3, r5
 800b7c0:	f7f5 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7c4:	b900      	cbnz	r0, 800b7c8 <_dtoa_r+0x168>
 800b7c6:	3f01      	subs	r7, #1
 800b7c8:	2f16      	cmp	r7, #22
 800b7ca:	d851      	bhi.n	800b870 <_dtoa_r+0x210>
 800b7cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b93c <_dtoa_r+0x2dc>)
 800b7ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7da:	f7f5 f987 	bl	8000aec <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d048      	beq.n	800b874 <_dtoa_r+0x214>
 800b7e2:	3f01      	subs	r7, #1
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b7e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7ea:	1b9b      	subs	r3, r3, r6
 800b7ec:	1e5a      	subs	r2, r3, #1
 800b7ee:	bf44      	itt	mi
 800b7f0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b7f4:	2300      	movmi	r3, #0
 800b7f6:	9208      	str	r2, [sp, #32]
 800b7f8:	bf54      	ite	pl
 800b7fa:	f04f 0800 	movpl.w	r8, #0
 800b7fe:	9308      	strmi	r3, [sp, #32]
 800b800:	2f00      	cmp	r7, #0
 800b802:	db39      	blt.n	800b878 <_dtoa_r+0x218>
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b808:	443b      	add	r3, r7
 800b80a:	9308      	str	r3, [sp, #32]
 800b80c:	2300      	movs	r3, #0
 800b80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b812:	2b09      	cmp	r3, #9
 800b814:	d864      	bhi.n	800b8e0 <_dtoa_r+0x280>
 800b816:	2b05      	cmp	r3, #5
 800b818:	bfc4      	itt	gt
 800b81a:	3b04      	subgt	r3, #4
 800b81c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	f1a3 0302 	sub.w	r3, r3, #2
 800b824:	bfcc      	ite	gt
 800b826:	2400      	movgt	r4, #0
 800b828:	2401      	movle	r4, #1
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d863      	bhi.n	800b8f6 <_dtoa_r+0x296>
 800b82e:	e8df f003 	tbb	[pc, r3]
 800b832:	372a      	.short	0x372a
 800b834:	5535      	.short	0x5535
 800b836:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b83a:	441e      	add	r6, r3
 800b83c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b840:	2b20      	cmp	r3, #32
 800b842:	bfc1      	itttt	gt
 800b844:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b848:	409f      	lslgt	r7, r3
 800b84a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b84e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b852:	bfd6      	itet	le
 800b854:	f1c3 0320 	rsble	r3, r3, #32
 800b858:	ea47 0003 	orrgt.w	r0, r7, r3
 800b85c:	fa04 f003 	lslle.w	r0, r4, r3
 800b860:	f7f4 fe58 	bl	8000514 <__aeabi_ui2d>
 800b864:	2201      	movs	r2, #1
 800b866:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b86a:	3e01      	subs	r6, #1
 800b86c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b86e:	e777      	b.n	800b760 <_dtoa_r+0x100>
 800b870:	2301      	movs	r3, #1
 800b872:	e7b8      	b.n	800b7e6 <_dtoa_r+0x186>
 800b874:	9012      	str	r0, [sp, #72]	@ 0x48
 800b876:	e7b7      	b.n	800b7e8 <_dtoa_r+0x188>
 800b878:	427b      	negs	r3, r7
 800b87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b87c:	2300      	movs	r3, #0
 800b87e:	eba8 0807 	sub.w	r8, r8, r7
 800b882:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b884:	e7c4      	b.n	800b810 <_dtoa_r+0x1b0>
 800b886:	2300      	movs	r3, #0
 800b888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	dc35      	bgt.n	800b8fc <_dtoa_r+0x29c>
 800b890:	2301      	movs	r3, #1
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	9307      	str	r3, [sp, #28]
 800b896:	461a      	mov	r2, r3
 800b898:	920e      	str	r2, [sp, #56]	@ 0x38
 800b89a:	e00b      	b.n	800b8b4 <_dtoa_r+0x254>
 800b89c:	2301      	movs	r3, #1
 800b89e:	e7f3      	b.n	800b888 <_dtoa_r+0x228>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8a6:	18fb      	adds	r3, r7, r3
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	9307      	str	r3, [sp, #28]
 800b8b0:	bfb8      	it	lt
 800b8b2:	2301      	movlt	r3, #1
 800b8b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	f102 0514 	add.w	r5, r2, #20
 800b8c0:	429d      	cmp	r5, r3
 800b8c2:	d91f      	bls.n	800b904 <_dtoa_r+0x2a4>
 800b8c4:	6041      	str	r1, [r0, #4]
 800b8c6:	4658      	mov	r0, fp
 800b8c8:	f000 fd8e 	bl	800c3e8 <_Balloc>
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d13c      	bne.n	800b94c <_dtoa_r+0x2ec>
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b940 <_dtoa_r+0x2e0>)
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8da:	e6d8      	b.n	800b68e <_dtoa_r+0x2e>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e7e0      	b.n	800b8a2 <_dtoa_r+0x242>
 800b8e0:	2401      	movs	r4, #1
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	9307      	str	r3, [sp, #28]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2312      	movs	r3, #18
 800b8f4:	e7d0      	b.n	800b898 <_dtoa_r+0x238>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fa:	e7f5      	b.n	800b8e8 <_dtoa_r+0x288>
 800b8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	9307      	str	r3, [sp, #28]
 800b902:	e7d7      	b.n	800b8b4 <_dtoa_r+0x254>
 800b904:	3101      	adds	r1, #1
 800b906:	0052      	lsls	r2, r2, #1
 800b908:	e7d8      	b.n	800b8bc <_dtoa_r+0x25c>
 800b90a:	bf00      	nop
 800b90c:	f3af 8000 	nop.w
 800b910:	636f4361 	.word	0x636f4361
 800b914:	3fd287a7 	.word	0x3fd287a7
 800b918:	8b60c8b3 	.word	0x8b60c8b3
 800b91c:	3fc68a28 	.word	0x3fc68a28
 800b920:	509f79fb 	.word	0x509f79fb
 800b924:	3fd34413 	.word	0x3fd34413
 800b928:	0800e9ea 	.word	0x0800e9ea
 800b92c:	0800ea01 	.word	0x0800ea01
 800b930:	7ff00000 	.word	0x7ff00000
 800b934:	0800e9b5 	.word	0x0800e9b5
 800b938:	3ff80000 	.word	0x3ff80000
 800b93c:	0800eaf8 	.word	0x0800eaf8
 800b940:	0800ea59 	.word	0x0800ea59
 800b944:	0800e9e6 	.word	0x0800e9e6
 800b948:	0800e9b4 	.word	0x0800e9b4
 800b94c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b950:	6018      	str	r0, [r3, #0]
 800b952:	9b07      	ldr	r3, [sp, #28]
 800b954:	2b0e      	cmp	r3, #14
 800b956:	f200 80a4 	bhi.w	800baa2 <_dtoa_r+0x442>
 800b95a:	2c00      	cmp	r4, #0
 800b95c:	f000 80a1 	beq.w	800baa2 <_dtoa_r+0x442>
 800b960:	2f00      	cmp	r7, #0
 800b962:	dd33      	ble.n	800b9cc <_dtoa_r+0x36c>
 800b964:	4bad      	ldr	r3, [pc, #692]	@ (800bc1c <_dtoa_r+0x5bc>)
 800b966:	f007 020f 	and.w	r2, r7, #15
 800b96a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b96e:	ed93 7b00 	vldr	d7, [r3]
 800b972:	05f8      	lsls	r0, r7, #23
 800b974:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b978:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b97c:	d516      	bpl.n	800b9ac <_dtoa_r+0x34c>
 800b97e:	4ba8      	ldr	r3, [pc, #672]	@ (800bc20 <_dtoa_r+0x5c0>)
 800b980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b988:	f7f4 ff68 	bl	800085c <__aeabi_ddiv>
 800b98c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b990:	f004 040f 	and.w	r4, r4, #15
 800b994:	2603      	movs	r6, #3
 800b996:	4da2      	ldr	r5, [pc, #648]	@ (800bc20 <_dtoa_r+0x5c0>)
 800b998:	b954      	cbnz	r4, 800b9b0 <_dtoa_r+0x350>
 800b99a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b99e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9a2:	f7f4 ff5b 	bl	800085c <__aeabi_ddiv>
 800b9a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9aa:	e028      	b.n	800b9fe <_dtoa_r+0x39e>
 800b9ac:	2602      	movs	r6, #2
 800b9ae:	e7f2      	b.n	800b996 <_dtoa_r+0x336>
 800b9b0:	07e1      	lsls	r1, r4, #31
 800b9b2:	d508      	bpl.n	800b9c6 <_dtoa_r+0x366>
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	1064      	asrs	r4, r4, #1
 800b9c8:	3508      	adds	r5, #8
 800b9ca:	e7e5      	b.n	800b998 <_dtoa_r+0x338>
 800b9cc:	f000 80d2 	beq.w	800bb74 <_dtoa_r+0x514>
 800b9d0:	427c      	negs	r4, r7
 800b9d2:	4b92      	ldr	r3, [pc, #584]	@ (800bc1c <_dtoa_r+0x5bc>)
 800b9d4:	4d92      	ldr	r5, [pc, #584]	@ (800bc20 <_dtoa_r+0x5c0>)
 800b9d6:	f004 020f 	and.w	r2, r4, #15
 800b9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9e6:	f7f4 fe0f 	bl	8000608 <__aeabi_dmul>
 800b9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ee:	1124      	asrs	r4, r4, #4
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	2602      	movs	r6, #2
 800b9f4:	2c00      	cmp	r4, #0
 800b9f6:	f040 80b2 	bne.w	800bb5e <_dtoa_r+0x4fe>
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1d3      	bne.n	800b9a6 <_dtoa_r+0x346>
 800b9fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 80b7 	beq.w	800bb78 <_dtoa_r+0x518>
 800ba0a:	4b86      	ldr	r3, [pc, #536]	@ (800bc24 <_dtoa_r+0x5c4>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4620      	mov	r0, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	f7f5 f86b 	bl	8000aec <__aeabi_dcmplt>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f000 80ae 	beq.w	800bb78 <_dtoa_r+0x518>
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80aa 	beq.w	800bb78 <_dtoa_r+0x518>
 800ba24:	9b00      	ldr	r3, [sp, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	dd37      	ble.n	800ba9a <_dtoa_r+0x43a>
 800ba2a:	1e7b      	subs	r3, r7, #1
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4b7d      	ldr	r3, [pc, #500]	@ (800bc28 <_dtoa_r+0x5c8>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	4629      	mov	r1, r5
 800ba36:	f7f4 fde7 	bl	8000608 <__aeabi_dmul>
 800ba3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba3e:	9c00      	ldr	r4, [sp, #0]
 800ba40:	3601      	adds	r6, #1
 800ba42:	4630      	mov	r0, r6
 800ba44:	f7f4 fd76 	bl	8000534 <__aeabi_i2d>
 800ba48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba4c:	f7f4 fddc 	bl	8000608 <__aeabi_dmul>
 800ba50:	4b76      	ldr	r3, [pc, #472]	@ (800bc2c <_dtoa_r+0x5cc>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	f7f4 fc22 	bl	800029c <__adddf3>
 800ba58:	4605      	mov	r5, r0
 800ba5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba5e:	2c00      	cmp	r4, #0
 800ba60:	f040 808d 	bne.w	800bb7e <_dtoa_r+0x51e>
 800ba64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba68:	4b71      	ldr	r3, [pc, #452]	@ (800bc30 <_dtoa_r+0x5d0>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f7f4 fc14 	bl	8000298 <__aeabi_dsub>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4633      	mov	r3, r6
 800ba7c:	f7f5 f854 	bl	8000b28 <__aeabi_dcmpgt>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	f040 828b 	bne.w	800bf9c <_dtoa_r+0x93c>
 800ba86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba8a:	462a      	mov	r2, r5
 800ba8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ba90:	f7f5 f82c 	bl	8000aec <__aeabi_dcmplt>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f040 8128 	bne.w	800bcea <_dtoa_r+0x68a>
 800ba9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ba9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800baa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f2c0 815a 	blt.w	800bd5e <_dtoa_r+0x6fe>
 800baaa:	2f0e      	cmp	r7, #14
 800baac:	f300 8157 	bgt.w	800bd5e <_dtoa_r+0x6fe>
 800bab0:	4b5a      	ldr	r3, [pc, #360]	@ (800bc1c <_dtoa_r+0x5bc>)
 800bab2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bab6:	ed93 7b00 	vldr	d7, [r3]
 800baba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800babc:	2b00      	cmp	r3, #0
 800babe:	ed8d 7b00 	vstr	d7, [sp]
 800bac2:	da03      	bge.n	800bacc <_dtoa_r+0x46c>
 800bac4:	9b07      	ldr	r3, [sp, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f340 8101 	ble.w	800bcce <_dtoa_r+0x66e>
 800bacc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bad0:	4656      	mov	r6, sl
 800bad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bad6:	4620      	mov	r0, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	f7f4 febf 	bl	800085c <__aeabi_ddiv>
 800bade:	f7f5 f843 	bl	8000b68 <__aeabi_d2iz>
 800bae2:	4680      	mov	r8, r0
 800bae4:	f7f4 fd26 	bl	8000534 <__aeabi_i2d>
 800bae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baec:	f7f4 fd8c 	bl	8000608 <__aeabi_dmul>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bafc:	f7f4 fbcc 	bl	8000298 <__aeabi_dsub>
 800bb00:	f806 4b01 	strb.w	r4, [r6], #1
 800bb04:	9d07      	ldr	r5, [sp, #28]
 800bb06:	eba6 040a 	sub.w	r4, r6, sl
 800bb0a:	42a5      	cmp	r5, r4
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	f040 8117 	bne.w	800bd42 <_dtoa_r+0x6e2>
 800bb14:	f7f4 fbc2 	bl	800029c <__adddf3>
 800bb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	460d      	mov	r5, r1
 800bb20:	f7f5 f802 	bl	8000b28 <__aeabi_dcmpgt>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f040 80f9 	bne.w	800bd1c <_dtoa_r+0x6bc>
 800bb2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb36:	b118      	cbz	r0, 800bb40 <_dtoa_r+0x4e0>
 800bb38:	f018 0f01 	tst.w	r8, #1
 800bb3c:	f040 80ee 	bne.w	800bd1c <_dtoa_r+0x6bc>
 800bb40:	4649      	mov	r1, r9
 800bb42:	4658      	mov	r0, fp
 800bb44:	f000 fc90 	bl	800c468 <_Bfree>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	7033      	strb	r3, [r6, #0]
 800bb4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bb4e:	3701      	adds	r7, #1
 800bb50:	601f      	str	r7, [r3, #0]
 800bb52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 831d 	beq.w	800c194 <_dtoa_r+0xb34>
 800bb5a:	601e      	str	r6, [r3, #0]
 800bb5c:	e31a      	b.n	800c194 <_dtoa_r+0xb34>
 800bb5e:	07e2      	lsls	r2, r4, #31
 800bb60:	d505      	bpl.n	800bb6e <_dtoa_r+0x50e>
 800bb62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb66:	f7f4 fd4f 	bl	8000608 <__aeabi_dmul>
 800bb6a:	3601      	adds	r6, #1
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	1064      	asrs	r4, r4, #1
 800bb70:	3508      	adds	r5, #8
 800bb72:	e73f      	b.n	800b9f4 <_dtoa_r+0x394>
 800bb74:	2602      	movs	r6, #2
 800bb76:	e742      	b.n	800b9fe <_dtoa_r+0x39e>
 800bb78:	9c07      	ldr	r4, [sp, #28]
 800bb7a:	9704      	str	r7, [sp, #16]
 800bb7c:	e761      	b.n	800ba42 <_dtoa_r+0x3e2>
 800bb7e:	4b27      	ldr	r3, [pc, #156]	@ (800bc1c <_dtoa_r+0x5bc>)
 800bb80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb8a:	4454      	add	r4, sl
 800bb8c:	2900      	cmp	r1, #0
 800bb8e:	d053      	beq.n	800bc38 <_dtoa_r+0x5d8>
 800bb90:	4928      	ldr	r1, [pc, #160]	@ (800bc34 <_dtoa_r+0x5d4>)
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7f4 fe62 	bl	800085c <__aeabi_ddiv>
 800bb98:	4633      	mov	r3, r6
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	f7f4 fb7c 	bl	8000298 <__aeabi_dsub>
 800bba0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bba4:	4656      	mov	r6, sl
 800bba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbaa:	f7f4 ffdd 	bl	8000b68 <__aeabi_d2iz>
 800bbae:	4605      	mov	r5, r0
 800bbb0:	f7f4 fcc0 	bl	8000534 <__aeabi_i2d>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbbc:	f7f4 fb6c 	bl	8000298 <__aeabi_dsub>
 800bbc0:	3530      	adds	r5, #48	@ 0x30
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bbca:	f806 5b01 	strb.w	r5, [r6], #1
 800bbce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbd2:	f7f4 ff8b 	bl	8000aec <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d171      	bne.n	800bcbe <_dtoa_r+0x65e>
 800bbda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bbde:	4911      	ldr	r1, [pc, #68]	@ (800bc24 <_dtoa_r+0x5c4>)
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f7f4 fb59 	bl	8000298 <__aeabi_dsub>
 800bbe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bbea:	f7f4 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	f040 8095 	bne.w	800bd1e <_dtoa_r+0x6be>
 800bbf4:	42a6      	cmp	r6, r4
 800bbf6:	f43f af50 	beq.w	800ba9a <_dtoa_r+0x43a>
 800bbfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bbfe:	4b0a      	ldr	r3, [pc, #40]	@ (800bc28 <_dtoa_r+0x5c8>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	f7f4 fd01 	bl	8000608 <__aeabi_dmul>
 800bc06:	4b08      	ldr	r3, [pc, #32]	@ (800bc28 <_dtoa_r+0x5c8>)
 800bc08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc12:	f7f4 fcf9 	bl	8000608 <__aeabi_dmul>
 800bc16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc1a:	e7c4      	b.n	800bba6 <_dtoa_r+0x546>
 800bc1c:	0800eaf8 	.word	0x0800eaf8
 800bc20:	0800ead0 	.word	0x0800ead0
 800bc24:	3ff00000 	.word	0x3ff00000
 800bc28:	40240000 	.word	0x40240000
 800bc2c:	401c0000 	.word	0x401c0000
 800bc30:	40140000 	.word	0x40140000
 800bc34:	3fe00000 	.word	0x3fe00000
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f7f4 fce4 	bl	8000608 <__aeabi_dmul>
 800bc40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc44:	9415      	str	r4, [sp, #84]	@ 0x54
 800bc46:	4656      	mov	r6, sl
 800bc48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc4c:	f7f4 ff8c 	bl	8000b68 <__aeabi_d2iz>
 800bc50:	4605      	mov	r5, r0
 800bc52:	f7f4 fc6f 	bl	8000534 <__aeabi_i2d>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc5e:	f7f4 fb1b 	bl	8000298 <__aeabi_dsub>
 800bc62:	3530      	adds	r5, #48	@ 0x30
 800bc64:	f806 5b01 	strb.w	r5, [r6], #1
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	42a6      	cmp	r6, r4
 800bc6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc72:	f04f 0200 	mov.w	r2, #0
 800bc76:	d124      	bne.n	800bcc2 <_dtoa_r+0x662>
 800bc78:	4bac      	ldr	r3, [pc, #688]	@ (800bf2c <_dtoa_r+0x8cc>)
 800bc7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc7e:	f7f4 fb0d 	bl	800029c <__adddf3>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8a:	f7f4 ff4d 	bl	8000b28 <__aeabi_dcmpgt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d145      	bne.n	800bd1e <_dtoa_r+0x6be>
 800bc92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc96:	49a5      	ldr	r1, [pc, #660]	@ (800bf2c <_dtoa_r+0x8cc>)
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f7f4 fafd 	bl	8000298 <__aeabi_dsub>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca6:	f7f4 ff21 	bl	8000aec <__aeabi_dcmplt>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f43f aef5 	beq.w	800ba9a <_dtoa_r+0x43a>
 800bcb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bcb2:	1e73      	subs	r3, r6, #1
 800bcb4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bcb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bcba:	2b30      	cmp	r3, #48	@ 0x30
 800bcbc:	d0f8      	beq.n	800bcb0 <_dtoa_r+0x650>
 800bcbe:	9f04      	ldr	r7, [sp, #16]
 800bcc0:	e73e      	b.n	800bb40 <_dtoa_r+0x4e0>
 800bcc2:	4b9b      	ldr	r3, [pc, #620]	@ (800bf30 <_dtoa_r+0x8d0>)
 800bcc4:	f7f4 fca0 	bl	8000608 <__aeabi_dmul>
 800bcc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bccc:	e7bc      	b.n	800bc48 <_dtoa_r+0x5e8>
 800bcce:	d10c      	bne.n	800bcea <_dtoa_r+0x68a>
 800bcd0:	4b98      	ldr	r3, [pc, #608]	@ (800bf34 <_dtoa_r+0x8d4>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcd8:	f7f4 fc96 	bl	8000608 <__aeabi_dmul>
 800bcdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bce0:	f7f4 ff18 	bl	8000b14 <__aeabi_dcmpge>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f000 8157 	beq.w	800bf98 <_dtoa_r+0x938>
 800bcea:	2400      	movs	r4, #0
 800bcec:	4625      	mov	r5, r4
 800bcee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcf0:	43db      	mvns	r3, r3
 800bcf2:	9304      	str	r3, [sp, #16]
 800bcf4:	4656      	mov	r6, sl
 800bcf6:	2700      	movs	r7, #0
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	4658      	mov	r0, fp
 800bcfc:	f000 fbb4 	bl	800c468 <_Bfree>
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	d0dc      	beq.n	800bcbe <_dtoa_r+0x65e>
 800bd04:	b12f      	cbz	r7, 800bd12 <_dtoa_r+0x6b2>
 800bd06:	42af      	cmp	r7, r5
 800bd08:	d003      	beq.n	800bd12 <_dtoa_r+0x6b2>
 800bd0a:	4639      	mov	r1, r7
 800bd0c:	4658      	mov	r0, fp
 800bd0e:	f000 fbab 	bl	800c468 <_Bfree>
 800bd12:	4629      	mov	r1, r5
 800bd14:	4658      	mov	r0, fp
 800bd16:	f000 fba7 	bl	800c468 <_Bfree>
 800bd1a:	e7d0      	b.n	800bcbe <_dtoa_r+0x65e>
 800bd1c:	9704      	str	r7, [sp, #16]
 800bd1e:	4633      	mov	r3, r6
 800bd20:	461e      	mov	r6, r3
 800bd22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd26:	2a39      	cmp	r2, #57	@ 0x39
 800bd28:	d107      	bne.n	800bd3a <_dtoa_r+0x6da>
 800bd2a:	459a      	cmp	sl, r3
 800bd2c:	d1f8      	bne.n	800bd20 <_dtoa_r+0x6c0>
 800bd2e:	9a04      	ldr	r2, [sp, #16]
 800bd30:	3201      	adds	r2, #1
 800bd32:	9204      	str	r2, [sp, #16]
 800bd34:	2230      	movs	r2, #48	@ 0x30
 800bd36:	f88a 2000 	strb.w	r2, [sl]
 800bd3a:	781a      	ldrb	r2, [r3, #0]
 800bd3c:	3201      	adds	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]
 800bd40:	e7bd      	b.n	800bcbe <_dtoa_r+0x65e>
 800bd42:	4b7b      	ldr	r3, [pc, #492]	@ (800bf30 <_dtoa_r+0x8d0>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	f7f4 fc5f 	bl	8000608 <__aeabi_dmul>
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4604      	mov	r4, r0
 800bd50:	460d      	mov	r5, r1
 800bd52:	f7f4 fec1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f43f aebb 	beq.w	800bad2 <_dtoa_r+0x472>
 800bd5c:	e6f0      	b.n	800bb40 <_dtoa_r+0x4e0>
 800bd5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	f000 80db 	beq.w	800bf1c <_dtoa_r+0x8bc>
 800bd66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd68:	2a01      	cmp	r2, #1
 800bd6a:	f300 80bf 	bgt.w	800beec <_dtoa_r+0x88c>
 800bd6e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	f000 80b7 	beq.w	800bee4 <_dtoa_r+0x884>
 800bd76:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bd7c:	4646      	mov	r6, r8
 800bd7e:	9a08      	ldr	r2, [sp, #32]
 800bd80:	2101      	movs	r1, #1
 800bd82:	441a      	add	r2, r3
 800bd84:	4658      	mov	r0, fp
 800bd86:	4498      	add	r8, r3
 800bd88:	9208      	str	r2, [sp, #32]
 800bd8a:	f000 fc6b 	bl	800c664 <__i2b>
 800bd8e:	4605      	mov	r5, r0
 800bd90:	b15e      	cbz	r6, 800bdaa <_dtoa_r+0x74a>
 800bd92:	9b08      	ldr	r3, [sp, #32]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	dd08      	ble.n	800bdaa <_dtoa_r+0x74a>
 800bd98:	42b3      	cmp	r3, r6
 800bd9a:	9a08      	ldr	r2, [sp, #32]
 800bd9c:	bfa8      	it	ge
 800bd9e:	4633      	movge	r3, r6
 800bda0:	eba8 0803 	sub.w	r8, r8, r3
 800bda4:	1af6      	subs	r6, r6, r3
 800bda6:	1ad3      	subs	r3, r2, r3
 800bda8:	9308      	str	r3, [sp, #32]
 800bdaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdac:	b1f3      	cbz	r3, 800bdec <_dtoa_r+0x78c>
 800bdae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 80b7 	beq.w	800bf24 <_dtoa_r+0x8c4>
 800bdb6:	b18c      	cbz	r4, 800bddc <_dtoa_r+0x77c>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4622      	mov	r2, r4
 800bdbc:	4658      	mov	r0, fp
 800bdbe:	f000 fd11 	bl	800c7e4 <__pow5mult>
 800bdc2:	464a      	mov	r2, r9
 800bdc4:	4601      	mov	r1, r0
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	4658      	mov	r0, fp
 800bdca:	f000 fc61 	bl	800c690 <__multiply>
 800bdce:	4649      	mov	r1, r9
 800bdd0:	9004      	str	r0, [sp, #16]
 800bdd2:	4658      	mov	r0, fp
 800bdd4:	f000 fb48 	bl	800c468 <_Bfree>
 800bdd8:	9b04      	ldr	r3, [sp, #16]
 800bdda:	4699      	mov	r9, r3
 800bddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdde:	1b1a      	subs	r2, r3, r4
 800bde0:	d004      	beq.n	800bdec <_dtoa_r+0x78c>
 800bde2:	4649      	mov	r1, r9
 800bde4:	4658      	mov	r0, fp
 800bde6:	f000 fcfd 	bl	800c7e4 <__pow5mult>
 800bdea:	4681      	mov	r9, r0
 800bdec:	2101      	movs	r1, #1
 800bdee:	4658      	mov	r0, fp
 800bdf0:	f000 fc38 	bl	800c664 <__i2b>
 800bdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 81cf 	beq.w	800c19c <_dtoa_r+0xb3c>
 800bdfe:	461a      	mov	r2, r3
 800be00:	4601      	mov	r1, r0
 800be02:	4658      	mov	r0, fp
 800be04:	f000 fcee 	bl	800c7e4 <__pow5mult>
 800be08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	4604      	mov	r4, r0
 800be0e:	f300 8095 	bgt.w	800bf3c <_dtoa_r+0x8dc>
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 8087 	bne.w	800bf28 <_dtoa_r+0x8c8>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be20:	2b00      	cmp	r3, #0
 800be22:	f040 8089 	bne.w	800bf38 <_dtoa_r+0x8d8>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be2c:	0d1b      	lsrs	r3, r3, #20
 800be2e:	051b      	lsls	r3, r3, #20
 800be30:	b12b      	cbz	r3, 800be3e <_dtoa_r+0x7de>
 800be32:	9b08      	ldr	r3, [sp, #32]
 800be34:	3301      	adds	r3, #1
 800be36:	9308      	str	r3, [sp, #32]
 800be38:	f108 0801 	add.w	r8, r8, #1
 800be3c:	2301      	movs	r3, #1
 800be3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be42:	2b00      	cmp	r3, #0
 800be44:	f000 81b0 	beq.w	800c1a8 <_dtoa_r+0xb48>
 800be48:	6923      	ldr	r3, [r4, #16]
 800be4a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be4e:	6918      	ldr	r0, [r3, #16]
 800be50:	f000 fbbc 	bl	800c5cc <__hi0bits>
 800be54:	f1c0 0020 	rsb	r0, r0, #32
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	4418      	add	r0, r3
 800be5c:	f010 001f 	ands.w	r0, r0, #31
 800be60:	d077      	beq.n	800bf52 <_dtoa_r+0x8f2>
 800be62:	f1c0 0320 	rsb	r3, r0, #32
 800be66:	2b04      	cmp	r3, #4
 800be68:	dd6b      	ble.n	800bf42 <_dtoa_r+0x8e2>
 800be6a:	9b08      	ldr	r3, [sp, #32]
 800be6c:	f1c0 001c 	rsb	r0, r0, #28
 800be70:	4403      	add	r3, r0
 800be72:	4480      	add	r8, r0
 800be74:	4406      	add	r6, r0
 800be76:	9308      	str	r3, [sp, #32]
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	dd05      	ble.n	800be8a <_dtoa_r+0x82a>
 800be7e:	4649      	mov	r1, r9
 800be80:	4642      	mov	r2, r8
 800be82:	4658      	mov	r0, fp
 800be84:	f000 fd08 	bl	800c898 <__lshift>
 800be88:	4681      	mov	r9, r0
 800be8a:	9b08      	ldr	r3, [sp, #32]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd05      	ble.n	800be9c <_dtoa_r+0x83c>
 800be90:	4621      	mov	r1, r4
 800be92:	461a      	mov	r2, r3
 800be94:	4658      	mov	r0, fp
 800be96:	f000 fcff 	bl	800c898 <__lshift>
 800be9a:	4604      	mov	r4, r0
 800be9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d059      	beq.n	800bf56 <_dtoa_r+0x8f6>
 800bea2:	4621      	mov	r1, r4
 800bea4:	4648      	mov	r0, r9
 800bea6:	f000 fd63 	bl	800c970 <__mcmp>
 800beaa:	2800      	cmp	r0, #0
 800beac:	da53      	bge.n	800bf56 <_dtoa_r+0x8f6>
 800beae:	1e7b      	subs	r3, r7, #1
 800beb0:	9304      	str	r3, [sp, #16]
 800beb2:	4649      	mov	r1, r9
 800beb4:	2300      	movs	r3, #0
 800beb6:	220a      	movs	r2, #10
 800beb8:	4658      	mov	r0, fp
 800beba:	f000 faf7 	bl	800c4ac <__multadd>
 800bebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec0:	4681      	mov	r9, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8172 	beq.w	800c1ac <_dtoa_r+0xb4c>
 800bec8:	2300      	movs	r3, #0
 800beca:	4629      	mov	r1, r5
 800becc:	220a      	movs	r2, #10
 800bece:	4658      	mov	r0, fp
 800bed0:	f000 faec 	bl	800c4ac <__multadd>
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	4605      	mov	r5, r0
 800beda:	dc67      	bgt.n	800bfac <_dtoa_r+0x94c>
 800bedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bede:	2b02      	cmp	r3, #2
 800bee0:	dc41      	bgt.n	800bf66 <_dtoa_r+0x906>
 800bee2:	e063      	b.n	800bfac <_dtoa_r+0x94c>
 800bee4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bee6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800beea:	e746      	b.n	800bd7a <_dtoa_r+0x71a>
 800beec:	9b07      	ldr	r3, [sp, #28]
 800beee:	1e5c      	subs	r4, r3, #1
 800bef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	bfbf      	itttt	lt
 800bef6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bef8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800befa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800befc:	1ae3      	sublt	r3, r4, r3
 800befe:	bfb4      	ite	lt
 800bf00:	18d2      	addlt	r2, r2, r3
 800bf02:	1b1c      	subge	r4, r3, r4
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	bfbc      	itt	lt
 800bf08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bf0a:	2400      	movlt	r4, #0
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfb5      	itete	lt
 800bf10:	eba8 0603 	sublt.w	r6, r8, r3
 800bf14:	9b07      	ldrge	r3, [sp, #28]
 800bf16:	2300      	movlt	r3, #0
 800bf18:	4646      	movge	r6, r8
 800bf1a:	e730      	b.n	800bd7e <_dtoa_r+0x71e>
 800bf1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf20:	4646      	mov	r6, r8
 800bf22:	e735      	b.n	800bd90 <_dtoa_r+0x730>
 800bf24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf26:	e75c      	b.n	800bde2 <_dtoa_r+0x782>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	e788      	b.n	800be3e <_dtoa_r+0x7de>
 800bf2c:	3fe00000 	.word	0x3fe00000
 800bf30:	40240000 	.word	0x40240000
 800bf34:	40140000 	.word	0x40140000
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	e780      	b.n	800be3e <_dtoa_r+0x7de>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf40:	e782      	b.n	800be48 <_dtoa_r+0x7e8>
 800bf42:	d099      	beq.n	800be78 <_dtoa_r+0x818>
 800bf44:	9a08      	ldr	r2, [sp, #32]
 800bf46:	331c      	adds	r3, #28
 800bf48:	441a      	add	r2, r3
 800bf4a:	4498      	add	r8, r3
 800bf4c:	441e      	add	r6, r3
 800bf4e:	9208      	str	r2, [sp, #32]
 800bf50:	e792      	b.n	800be78 <_dtoa_r+0x818>
 800bf52:	4603      	mov	r3, r0
 800bf54:	e7f6      	b.n	800bf44 <_dtoa_r+0x8e4>
 800bf56:	9b07      	ldr	r3, [sp, #28]
 800bf58:	9704      	str	r7, [sp, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dc20      	bgt.n	800bfa0 <_dtoa_r+0x940>
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	dd1e      	ble.n	800bfa4 <_dtoa_r+0x944>
 800bf66:	9b00      	ldr	r3, [sp, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f47f aec0 	bne.w	800bcee <_dtoa_r+0x68e>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	2205      	movs	r2, #5
 800bf72:	4658      	mov	r0, fp
 800bf74:	f000 fa9a 	bl	800c4ac <__multadd>
 800bf78:	4601      	mov	r1, r0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4648      	mov	r0, r9
 800bf7e:	f000 fcf7 	bl	800c970 <__mcmp>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	f77f aeb3 	ble.w	800bcee <_dtoa_r+0x68e>
 800bf88:	4656      	mov	r6, sl
 800bf8a:	2331      	movs	r3, #49	@ 0x31
 800bf8c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf90:	9b04      	ldr	r3, [sp, #16]
 800bf92:	3301      	adds	r3, #1
 800bf94:	9304      	str	r3, [sp, #16]
 800bf96:	e6ae      	b.n	800bcf6 <_dtoa_r+0x696>
 800bf98:	9c07      	ldr	r4, [sp, #28]
 800bf9a:	9704      	str	r7, [sp, #16]
 800bf9c:	4625      	mov	r5, r4
 800bf9e:	e7f3      	b.n	800bf88 <_dtoa_r+0x928>
 800bfa0:	9b07      	ldr	r3, [sp, #28]
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 8104 	beq.w	800c1b4 <_dtoa_r+0xb54>
 800bfac:	2e00      	cmp	r6, #0
 800bfae:	dd05      	ble.n	800bfbc <_dtoa_r+0x95c>
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4632      	mov	r2, r6
 800bfb4:	4658      	mov	r0, fp
 800bfb6:	f000 fc6f 	bl	800c898 <__lshift>
 800bfba:	4605      	mov	r5, r0
 800bfbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d05a      	beq.n	800c078 <_dtoa_r+0xa18>
 800bfc2:	6869      	ldr	r1, [r5, #4]
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	f000 fa0f 	bl	800c3e8 <_Balloc>
 800bfca:	4606      	mov	r6, r0
 800bfcc:	b928      	cbnz	r0, 800bfda <_dtoa_r+0x97a>
 800bfce:	4b84      	ldr	r3, [pc, #528]	@ (800c1e0 <_dtoa_r+0xb80>)
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bfd6:	f7ff bb5a 	b.w	800b68e <_dtoa_r+0x2e>
 800bfda:	692a      	ldr	r2, [r5, #16]
 800bfdc:	3202      	adds	r2, #2
 800bfde:	0092      	lsls	r2, r2, #2
 800bfe0:	f105 010c 	add.w	r1, r5, #12
 800bfe4:	300c      	adds	r0, #12
 800bfe6:	f7ff fa9e 	bl	800b526 <memcpy>
 800bfea:	2201      	movs	r2, #1
 800bfec:	4631      	mov	r1, r6
 800bfee:	4658      	mov	r0, fp
 800bff0:	f000 fc52 	bl	800c898 <__lshift>
 800bff4:	f10a 0301 	add.w	r3, sl, #1
 800bff8:	9307      	str	r3, [sp, #28]
 800bffa:	9b00      	ldr	r3, [sp, #0]
 800bffc:	4453      	add	r3, sl
 800bffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c000:	9b02      	ldr	r3, [sp, #8]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	462f      	mov	r7, r5
 800c008:	930a      	str	r3, [sp, #40]	@ 0x28
 800c00a:	4605      	mov	r5, r0
 800c00c:	9b07      	ldr	r3, [sp, #28]
 800c00e:	4621      	mov	r1, r4
 800c010:	3b01      	subs	r3, #1
 800c012:	4648      	mov	r0, r9
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	f7ff fa9b 	bl	800b550 <quorem>
 800c01a:	4639      	mov	r1, r7
 800c01c:	9002      	str	r0, [sp, #8]
 800c01e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c022:	4648      	mov	r0, r9
 800c024:	f000 fca4 	bl	800c970 <__mcmp>
 800c028:	462a      	mov	r2, r5
 800c02a:	9008      	str	r0, [sp, #32]
 800c02c:	4621      	mov	r1, r4
 800c02e:	4658      	mov	r0, fp
 800c030:	f000 fcba 	bl	800c9a8 <__mdiff>
 800c034:	68c2      	ldr	r2, [r0, #12]
 800c036:	4606      	mov	r6, r0
 800c038:	bb02      	cbnz	r2, 800c07c <_dtoa_r+0xa1c>
 800c03a:	4601      	mov	r1, r0
 800c03c:	4648      	mov	r0, r9
 800c03e:	f000 fc97 	bl	800c970 <__mcmp>
 800c042:	4602      	mov	r2, r0
 800c044:	4631      	mov	r1, r6
 800c046:	4658      	mov	r0, fp
 800c048:	920e      	str	r2, [sp, #56]	@ 0x38
 800c04a:	f000 fa0d 	bl	800c468 <_Bfree>
 800c04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c052:	9e07      	ldr	r6, [sp, #28]
 800c054:	ea43 0102 	orr.w	r1, r3, r2
 800c058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c05a:	4319      	orrs	r1, r3
 800c05c:	d110      	bne.n	800c080 <_dtoa_r+0xa20>
 800c05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c062:	d029      	beq.n	800c0b8 <_dtoa_r+0xa58>
 800c064:	9b08      	ldr	r3, [sp, #32]
 800c066:	2b00      	cmp	r3, #0
 800c068:	dd02      	ble.n	800c070 <_dtoa_r+0xa10>
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	f883 8000 	strb.w	r8, [r3]
 800c076:	e63f      	b.n	800bcf8 <_dtoa_r+0x698>
 800c078:	4628      	mov	r0, r5
 800c07a:	e7bb      	b.n	800bff4 <_dtoa_r+0x994>
 800c07c:	2201      	movs	r2, #1
 800c07e:	e7e1      	b.n	800c044 <_dtoa_r+0x9e4>
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	2b00      	cmp	r3, #0
 800c084:	db04      	blt.n	800c090 <_dtoa_r+0xa30>
 800c086:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c088:	430b      	orrs	r3, r1
 800c08a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c08c:	430b      	orrs	r3, r1
 800c08e:	d120      	bne.n	800c0d2 <_dtoa_r+0xa72>
 800c090:	2a00      	cmp	r2, #0
 800c092:	dded      	ble.n	800c070 <_dtoa_r+0xa10>
 800c094:	4649      	mov	r1, r9
 800c096:	2201      	movs	r2, #1
 800c098:	4658      	mov	r0, fp
 800c09a:	f000 fbfd 	bl	800c898 <__lshift>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4681      	mov	r9, r0
 800c0a2:	f000 fc65 	bl	800c970 <__mcmp>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	dc03      	bgt.n	800c0b2 <_dtoa_r+0xa52>
 800c0aa:	d1e1      	bne.n	800c070 <_dtoa_r+0xa10>
 800c0ac:	f018 0f01 	tst.w	r8, #1
 800c0b0:	d0de      	beq.n	800c070 <_dtoa_r+0xa10>
 800c0b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0b6:	d1d8      	bne.n	800c06a <_dtoa_r+0xa0a>
 800c0b8:	9a00      	ldr	r2, [sp, #0]
 800c0ba:	2339      	movs	r3, #57	@ 0x39
 800c0bc:	7013      	strb	r3, [r2, #0]
 800c0be:	4633      	mov	r3, r6
 800c0c0:	461e      	mov	r6, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0c8:	2a39      	cmp	r2, #57	@ 0x39
 800c0ca:	d052      	beq.n	800c172 <_dtoa_r+0xb12>
 800c0cc:	3201      	adds	r2, #1
 800c0ce:	701a      	strb	r2, [r3, #0]
 800c0d0:	e612      	b.n	800bcf8 <_dtoa_r+0x698>
 800c0d2:	2a00      	cmp	r2, #0
 800c0d4:	dd07      	ble.n	800c0e6 <_dtoa_r+0xa86>
 800c0d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0da:	d0ed      	beq.n	800c0b8 <_dtoa_r+0xa58>
 800c0dc:	9a00      	ldr	r2, [sp, #0]
 800c0de:	f108 0301 	add.w	r3, r8, #1
 800c0e2:	7013      	strb	r3, [r2, #0]
 800c0e4:	e608      	b.n	800bcf8 <_dtoa_r+0x698>
 800c0e6:	9b07      	ldr	r3, [sp, #28]
 800c0e8:	9a07      	ldr	r2, [sp, #28]
 800c0ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d028      	beq.n	800c146 <_dtoa_r+0xae6>
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	4658      	mov	r0, fp
 800c0fc:	f000 f9d6 	bl	800c4ac <__multadd>
 800c100:	42af      	cmp	r7, r5
 800c102:	4681      	mov	r9, r0
 800c104:	f04f 0300 	mov.w	r3, #0
 800c108:	f04f 020a 	mov.w	r2, #10
 800c10c:	4639      	mov	r1, r7
 800c10e:	4658      	mov	r0, fp
 800c110:	d107      	bne.n	800c122 <_dtoa_r+0xac2>
 800c112:	f000 f9cb 	bl	800c4ac <__multadd>
 800c116:	4607      	mov	r7, r0
 800c118:	4605      	mov	r5, r0
 800c11a:	9b07      	ldr	r3, [sp, #28]
 800c11c:	3301      	adds	r3, #1
 800c11e:	9307      	str	r3, [sp, #28]
 800c120:	e774      	b.n	800c00c <_dtoa_r+0x9ac>
 800c122:	f000 f9c3 	bl	800c4ac <__multadd>
 800c126:	4629      	mov	r1, r5
 800c128:	4607      	mov	r7, r0
 800c12a:	2300      	movs	r3, #0
 800c12c:	220a      	movs	r2, #10
 800c12e:	4658      	mov	r0, fp
 800c130:	f000 f9bc 	bl	800c4ac <__multadd>
 800c134:	4605      	mov	r5, r0
 800c136:	e7f0      	b.n	800c11a <_dtoa_r+0xaba>
 800c138:	9b00      	ldr	r3, [sp, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	bfcc      	ite	gt
 800c13e:	461e      	movgt	r6, r3
 800c140:	2601      	movle	r6, #1
 800c142:	4456      	add	r6, sl
 800c144:	2700      	movs	r7, #0
 800c146:	4649      	mov	r1, r9
 800c148:	2201      	movs	r2, #1
 800c14a:	4658      	mov	r0, fp
 800c14c:	f000 fba4 	bl	800c898 <__lshift>
 800c150:	4621      	mov	r1, r4
 800c152:	4681      	mov	r9, r0
 800c154:	f000 fc0c 	bl	800c970 <__mcmp>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dcb0      	bgt.n	800c0be <_dtoa_r+0xa5e>
 800c15c:	d102      	bne.n	800c164 <_dtoa_r+0xb04>
 800c15e:	f018 0f01 	tst.w	r8, #1
 800c162:	d1ac      	bne.n	800c0be <_dtoa_r+0xa5e>
 800c164:	4633      	mov	r3, r6
 800c166:	461e      	mov	r6, r3
 800c168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c16c:	2a30      	cmp	r2, #48	@ 0x30
 800c16e:	d0fa      	beq.n	800c166 <_dtoa_r+0xb06>
 800c170:	e5c2      	b.n	800bcf8 <_dtoa_r+0x698>
 800c172:	459a      	cmp	sl, r3
 800c174:	d1a4      	bne.n	800c0c0 <_dtoa_r+0xa60>
 800c176:	9b04      	ldr	r3, [sp, #16]
 800c178:	3301      	adds	r3, #1
 800c17a:	9304      	str	r3, [sp, #16]
 800c17c:	2331      	movs	r3, #49	@ 0x31
 800c17e:	f88a 3000 	strb.w	r3, [sl]
 800c182:	e5b9      	b.n	800bcf8 <_dtoa_r+0x698>
 800c184:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c186:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c1e4 <_dtoa_r+0xb84>
 800c18a:	b11b      	cbz	r3, 800c194 <_dtoa_r+0xb34>
 800c18c:	f10a 0308 	add.w	r3, sl, #8
 800c190:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	4650      	mov	r0, sl
 800c196:	b019      	add	sp, #100	@ 0x64
 800c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	f77f ae37 	ble.w	800be12 <_dtoa_r+0x7b2>
 800c1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1a8:	2001      	movs	r0, #1
 800c1aa:	e655      	b.n	800be58 <_dtoa_r+0x7f8>
 800c1ac:	9b00      	ldr	r3, [sp, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f77f aed6 	ble.w	800bf60 <_dtoa_r+0x900>
 800c1b4:	4656      	mov	r6, sl
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4648      	mov	r0, r9
 800c1ba:	f7ff f9c9 	bl	800b550 <quorem>
 800c1be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c1c2:	f806 8b01 	strb.w	r8, [r6], #1
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	eba6 020a 	sub.w	r2, r6, sl
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	ddb3      	ble.n	800c138 <_dtoa_r+0xad8>
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	220a      	movs	r2, #10
 800c1d6:	4658      	mov	r0, fp
 800c1d8:	f000 f968 	bl	800c4ac <__multadd>
 800c1dc:	4681      	mov	r9, r0
 800c1de:	e7ea      	b.n	800c1b6 <_dtoa_r+0xb56>
 800c1e0:	0800ea59 	.word	0x0800ea59
 800c1e4:	0800e9dd 	.word	0x0800e9dd

0800c1e8 <_free_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	d041      	beq.n	800c274 <_free_r+0x8c>
 800c1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1f4:	1f0c      	subs	r4, r1, #4
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	bfb8      	it	lt
 800c1fa:	18e4      	addlt	r4, r4, r3
 800c1fc:	f000 f8e8 	bl	800c3d0 <__malloc_lock>
 800c200:	4a1d      	ldr	r2, [pc, #116]	@ (800c278 <_free_r+0x90>)
 800c202:	6813      	ldr	r3, [r2, #0]
 800c204:	b933      	cbnz	r3, 800c214 <_free_r+0x2c>
 800c206:	6063      	str	r3, [r4, #4]
 800c208:	6014      	str	r4, [r2, #0]
 800c20a:	4628      	mov	r0, r5
 800c20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c210:	f000 b8e4 	b.w	800c3dc <__malloc_unlock>
 800c214:	42a3      	cmp	r3, r4
 800c216:	d908      	bls.n	800c22a <_free_r+0x42>
 800c218:	6820      	ldr	r0, [r4, #0]
 800c21a:	1821      	adds	r1, r4, r0
 800c21c:	428b      	cmp	r3, r1
 800c21e:	bf01      	itttt	eq
 800c220:	6819      	ldreq	r1, [r3, #0]
 800c222:	685b      	ldreq	r3, [r3, #4]
 800c224:	1809      	addeq	r1, r1, r0
 800c226:	6021      	streq	r1, [r4, #0]
 800c228:	e7ed      	b.n	800c206 <_free_r+0x1e>
 800c22a:	461a      	mov	r2, r3
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	b10b      	cbz	r3, 800c234 <_free_r+0x4c>
 800c230:	42a3      	cmp	r3, r4
 800c232:	d9fa      	bls.n	800c22a <_free_r+0x42>
 800c234:	6811      	ldr	r1, [r2, #0]
 800c236:	1850      	adds	r0, r2, r1
 800c238:	42a0      	cmp	r0, r4
 800c23a:	d10b      	bne.n	800c254 <_free_r+0x6c>
 800c23c:	6820      	ldr	r0, [r4, #0]
 800c23e:	4401      	add	r1, r0
 800c240:	1850      	adds	r0, r2, r1
 800c242:	4283      	cmp	r3, r0
 800c244:	6011      	str	r1, [r2, #0]
 800c246:	d1e0      	bne.n	800c20a <_free_r+0x22>
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	6053      	str	r3, [r2, #4]
 800c24e:	4408      	add	r0, r1
 800c250:	6010      	str	r0, [r2, #0]
 800c252:	e7da      	b.n	800c20a <_free_r+0x22>
 800c254:	d902      	bls.n	800c25c <_free_r+0x74>
 800c256:	230c      	movs	r3, #12
 800c258:	602b      	str	r3, [r5, #0]
 800c25a:	e7d6      	b.n	800c20a <_free_r+0x22>
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	1821      	adds	r1, r4, r0
 800c260:	428b      	cmp	r3, r1
 800c262:	bf04      	itt	eq
 800c264:	6819      	ldreq	r1, [r3, #0]
 800c266:	685b      	ldreq	r3, [r3, #4]
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	bf04      	itt	eq
 800c26c:	1809      	addeq	r1, r1, r0
 800c26e:	6021      	streq	r1, [r4, #0]
 800c270:	6054      	str	r4, [r2, #4]
 800c272:	e7ca      	b.n	800c20a <_free_r+0x22>
 800c274:	bd38      	pop	{r3, r4, r5, pc}
 800c276:	bf00      	nop
 800c278:	20001164 	.word	0x20001164

0800c27c <malloc>:
 800c27c:	4b02      	ldr	r3, [pc, #8]	@ (800c288 <malloc+0xc>)
 800c27e:	4601      	mov	r1, r0
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	f000 b825 	b.w	800c2d0 <_malloc_r>
 800c286:	bf00      	nop
 800c288:	200002d8 	.word	0x200002d8

0800c28c <sbrk_aligned>:
 800c28c:	b570      	push	{r4, r5, r6, lr}
 800c28e:	4e0f      	ldr	r6, [pc, #60]	@ (800c2cc <sbrk_aligned+0x40>)
 800c290:	460c      	mov	r4, r1
 800c292:	6831      	ldr	r1, [r6, #0]
 800c294:	4605      	mov	r5, r0
 800c296:	b911      	cbnz	r1, 800c29e <sbrk_aligned+0x12>
 800c298:	f001 ff26 	bl	800e0e8 <_sbrk_r>
 800c29c:	6030      	str	r0, [r6, #0]
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f001 ff21 	bl	800e0e8 <_sbrk_r>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d103      	bne.n	800c2b2 <sbrk_aligned+0x26>
 800c2aa:	f04f 34ff 	mov.w	r4, #4294967295
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	bd70      	pop	{r4, r5, r6, pc}
 800c2b2:	1cc4      	adds	r4, r0, #3
 800c2b4:	f024 0403 	bic.w	r4, r4, #3
 800c2b8:	42a0      	cmp	r0, r4
 800c2ba:	d0f8      	beq.n	800c2ae <sbrk_aligned+0x22>
 800c2bc:	1a21      	subs	r1, r4, r0
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f001 ff12 	bl	800e0e8 <_sbrk_r>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d1f2      	bne.n	800c2ae <sbrk_aligned+0x22>
 800c2c8:	e7ef      	b.n	800c2aa <sbrk_aligned+0x1e>
 800c2ca:	bf00      	nop
 800c2cc:	20001160 	.word	0x20001160

0800c2d0 <_malloc_r>:
 800c2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	1ccd      	adds	r5, r1, #3
 800c2d6:	f025 0503 	bic.w	r5, r5, #3
 800c2da:	3508      	adds	r5, #8
 800c2dc:	2d0c      	cmp	r5, #12
 800c2de:	bf38      	it	cc
 800c2e0:	250c      	movcc	r5, #12
 800c2e2:	2d00      	cmp	r5, #0
 800c2e4:	4606      	mov	r6, r0
 800c2e6:	db01      	blt.n	800c2ec <_malloc_r+0x1c>
 800c2e8:	42a9      	cmp	r1, r5
 800c2ea:	d904      	bls.n	800c2f6 <_malloc_r+0x26>
 800c2ec:	230c      	movs	r3, #12
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3cc <_malloc_r+0xfc>
 800c2fa:	f000 f869 	bl	800c3d0 <__malloc_lock>
 800c2fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c302:	461c      	mov	r4, r3
 800c304:	bb44      	cbnz	r4, 800c358 <_malloc_r+0x88>
 800c306:	4629      	mov	r1, r5
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff ffbf 	bl	800c28c <sbrk_aligned>
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	4604      	mov	r4, r0
 800c312:	d158      	bne.n	800c3c6 <_malloc_r+0xf6>
 800c314:	f8d8 4000 	ldr.w	r4, [r8]
 800c318:	4627      	mov	r7, r4
 800c31a:	2f00      	cmp	r7, #0
 800c31c:	d143      	bne.n	800c3a6 <_malloc_r+0xd6>
 800c31e:	2c00      	cmp	r4, #0
 800c320:	d04b      	beq.n	800c3ba <_malloc_r+0xea>
 800c322:	6823      	ldr	r3, [r4, #0]
 800c324:	4639      	mov	r1, r7
 800c326:	4630      	mov	r0, r6
 800c328:	eb04 0903 	add.w	r9, r4, r3
 800c32c:	f001 fedc 	bl	800e0e8 <_sbrk_r>
 800c330:	4581      	cmp	r9, r0
 800c332:	d142      	bne.n	800c3ba <_malloc_r+0xea>
 800c334:	6821      	ldr	r1, [r4, #0]
 800c336:	1a6d      	subs	r5, r5, r1
 800c338:	4629      	mov	r1, r5
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff ffa6 	bl	800c28c <sbrk_aligned>
 800c340:	3001      	adds	r0, #1
 800c342:	d03a      	beq.n	800c3ba <_malloc_r+0xea>
 800c344:	6823      	ldr	r3, [r4, #0]
 800c346:	442b      	add	r3, r5
 800c348:	6023      	str	r3, [r4, #0]
 800c34a:	f8d8 3000 	ldr.w	r3, [r8]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	bb62      	cbnz	r2, 800c3ac <_malloc_r+0xdc>
 800c352:	f8c8 7000 	str.w	r7, [r8]
 800c356:	e00f      	b.n	800c378 <_malloc_r+0xa8>
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	1b52      	subs	r2, r2, r5
 800c35c:	d420      	bmi.n	800c3a0 <_malloc_r+0xd0>
 800c35e:	2a0b      	cmp	r2, #11
 800c360:	d917      	bls.n	800c392 <_malloc_r+0xc2>
 800c362:	1961      	adds	r1, r4, r5
 800c364:	42a3      	cmp	r3, r4
 800c366:	6025      	str	r5, [r4, #0]
 800c368:	bf18      	it	ne
 800c36a:	6059      	strne	r1, [r3, #4]
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	bf08      	it	eq
 800c370:	f8c8 1000 	streq.w	r1, [r8]
 800c374:	5162      	str	r2, [r4, r5]
 800c376:	604b      	str	r3, [r1, #4]
 800c378:	4630      	mov	r0, r6
 800c37a:	f000 f82f 	bl	800c3dc <__malloc_unlock>
 800c37e:	f104 000b 	add.w	r0, r4, #11
 800c382:	1d23      	adds	r3, r4, #4
 800c384:	f020 0007 	bic.w	r0, r0, #7
 800c388:	1ac2      	subs	r2, r0, r3
 800c38a:	bf1c      	itt	ne
 800c38c:	1a1b      	subne	r3, r3, r0
 800c38e:	50a3      	strne	r3, [r4, r2]
 800c390:	e7af      	b.n	800c2f2 <_malloc_r+0x22>
 800c392:	6862      	ldr	r2, [r4, #4]
 800c394:	42a3      	cmp	r3, r4
 800c396:	bf0c      	ite	eq
 800c398:	f8c8 2000 	streq.w	r2, [r8]
 800c39c:	605a      	strne	r2, [r3, #4]
 800c39e:	e7eb      	b.n	800c378 <_malloc_r+0xa8>
 800c3a0:	4623      	mov	r3, r4
 800c3a2:	6864      	ldr	r4, [r4, #4]
 800c3a4:	e7ae      	b.n	800c304 <_malloc_r+0x34>
 800c3a6:	463c      	mov	r4, r7
 800c3a8:	687f      	ldr	r7, [r7, #4]
 800c3aa:	e7b6      	b.n	800c31a <_malloc_r+0x4a>
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	42a3      	cmp	r3, r4
 800c3b2:	d1fb      	bne.n	800c3ac <_malloc_r+0xdc>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6053      	str	r3, [r2, #4]
 800c3b8:	e7de      	b.n	800c378 <_malloc_r+0xa8>
 800c3ba:	230c      	movs	r3, #12
 800c3bc:	6033      	str	r3, [r6, #0]
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f000 f80c 	bl	800c3dc <__malloc_unlock>
 800c3c4:	e794      	b.n	800c2f0 <_malloc_r+0x20>
 800c3c6:	6005      	str	r5, [r0, #0]
 800c3c8:	e7d6      	b.n	800c378 <_malloc_r+0xa8>
 800c3ca:	bf00      	nop
 800c3cc:	20001164 	.word	0x20001164

0800c3d0 <__malloc_lock>:
 800c3d0:	4801      	ldr	r0, [pc, #4]	@ (800c3d8 <__malloc_lock+0x8>)
 800c3d2:	f7ff b89e 	b.w	800b512 <__retarget_lock_acquire_recursive>
 800c3d6:	bf00      	nop
 800c3d8:	2000115c 	.word	0x2000115c

0800c3dc <__malloc_unlock>:
 800c3dc:	4801      	ldr	r0, [pc, #4]	@ (800c3e4 <__malloc_unlock+0x8>)
 800c3de:	f7ff b899 	b.w	800b514 <__retarget_lock_release_recursive>
 800c3e2:	bf00      	nop
 800c3e4:	2000115c 	.word	0x2000115c

0800c3e8 <_Balloc>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	69c6      	ldr	r6, [r0, #28]
 800c3ec:	4604      	mov	r4, r0
 800c3ee:	460d      	mov	r5, r1
 800c3f0:	b976      	cbnz	r6, 800c410 <_Balloc+0x28>
 800c3f2:	2010      	movs	r0, #16
 800c3f4:	f7ff ff42 	bl	800c27c <malloc>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	61e0      	str	r0, [r4, #28]
 800c3fc:	b920      	cbnz	r0, 800c408 <_Balloc+0x20>
 800c3fe:	4b18      	ldr	r3, [pc, #96]	@ (800c460 <_Balloc+0x78>)
 800c400:	4818      	ldr	r0, [pc, #96]	@ (800c464 <_Balloc+0x7c>)
 800c402:	216b      	movs	r1, #107	@ 0x6b
 800c404:	f001 fe88 	bl	800e118 <__assert_func>
 800c408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c40c:	6006      	str	r6, [r0, #0]
 800c40e:	60c6      	str	r6, [r0, #12]
 800c410:	69e6      	ldr	r6, [r4, #28]
 800c412:	68f3      	ldr	r3, [r6, #12]
 800c414:	b183      	cbz	r3, 800c438 <_Balloc+0x50>
 800c416:	69e3      	ldr	r3, [r4, #28]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c41e:	b9b8      	cbnz	r0, 800c450 <_Balloc+0x68>
 800c420:	2101      	movs	r1, #1
 800c422:	fa01 f605 	lsl.w	r6, r1, r5
 800c426:	1d72      	adds	r2, r6, #5
 800c428:	0092      	lsls	r2, r2, #2
 800c42a:	4620      	mov	r0, r4
 800c42c:	f001 fe92 	bl	800e154 <_calloc_r>
 800c430:	b160      	cbz	r0, 800c44c <_Balloc+0x64>
 800c432:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c436:	e00e      	b.n	800c456 <_Balloc+0x6e>
 800c438:	2221      	movs	r2, #33	@ 0x21
 800c43a:	2104      	movs	r1, #4
 800c43c:	4620      	mov	r0, r4
 800c43e:	f001 fe89 	bl	800e154 <_calloc_r>
 800c442:	69e3      	ldr	r3, [r4, #28]
 800c444:	60f0      	str	r0, [r6, #12]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e4      	bne.n	800c416 <_Balloc+0x2e>
 800c44c:	2000      	movs	r0, #0
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	6802      	ldr	r2, [r0, #0]
 800c452:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c456:	2300      	movs	r3, #0
 800c458:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c45c:	e7f7      	b.n	800c44e <_Balloc+0x66>
 800c45e:	bf00      	nop
 800c460:	0800e9ea 	.word	0x0800e9ea
 800c464:	0800ea6a 	.word	0x0800ea6a

0800c468 <_Bfree>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	69c6      	ldr	r6, [r0, #28]
 800c46c:	4605      	mov	r5, r0
 800c46e:	460c      	mov	r4, r1
 800c470:	b976      	cbnz	r6, 800c490 <_Bfree+0x28>
 800c472:	2010      	movs	r0, #16
 800c474:	f7ff ff02 	bl	800c27c <malloc>
 800c478:	4602      	mov	r2, r0
 800c47a:	61e8      	str	r0, [r5, #28]
 800c47c:	b920      	cbnz	r0, 800c488 <_Bfree+0x20>
 800c47e:	4b09      	ldr	r3, [pc, #36]	@ (800c4a4 <_Bfree+0x3c>)
 800c480:	4809      	ldr	r0, [pc, #36]	@ (800c4a8 <_Bfree+0x40>)
 800c482:	218f      	movs	r1, #143	@ 0x8f
 800c484:	f001 fe48 	bl	800e118 <__assert_func>
 800c488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c48c:	6006      	str	r6, [r0, #0]
 800c48e:	60c6      	str	r6, [r0, #12]
 800c490:	b13c      	cbz	r4, 800c4a2 <_Bfree+0x3a>
 800c492:	69eb      	ldr	r3, [r5, #28]
 800c494:	6862      	ldr	r2, [r4, #4]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c49c:	6021      	str	r1, [r4, #0]
 800c49e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4a2:	bd70      	pop	{r4, r5, r6, pc}
 800c4a4:	0800e9ea 	.word	0x0800e9ea
 800c4a8:	0800ea6a 	.word	0x0800ea6a

0800c4ac <__multadd>:
 800c4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b0:	690d      	ldr	r5, [r1, #16]
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	461e      	mov	r6, r3
 800c4b8:	f101 0c14 	add.w	ip, r1, #20
 800c4bc:	2000      	movs	r0, #0
 800c4be:	f8dc 3000 	ldr.w	r3, [ip]
 800c4c2:	b299      	uxth	r1, r3
 800c4c4:	fb02 6101 	mla	r1, r2, r1, r6
 800c4c8:	0c1e      	lsrs	r6, r3, #16
 800c4ca:	0c0b      	lsrs	r3, r1, #16
 800c4cc:	fb02 3306 	mla	r3, r2, r6, r3
 800c4d0:	b289      	uxth	r1, r1
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4d8:	4285      	cmp	r5, r0
 800c4da:	f84c 1b04 	str.w	r1, [ip], #4
 800c4de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4e2:	dcec      	bgt.n	800c4be <__multadd+0x12>
 800c4e4:	b30e      	cbz	r6, 800c52a <__multadd+0x7e>
 800c4e6:	68a3      	ldr	r3, [r4, #8]
 800c4e8:	42ab      	cmp	r3, r5
 800c4ea:	dc19      	bgt.n	800c520 <__multadd+0x74>
 800c4ec:	6861      	ldr	r1, [r4, #4]
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	3101      	adds	r1, #1
 800c4f2:	f7ff ff79 	bl	800c3e8 <_Balloc>
 800c4f6:	4680      	mov	r8, r0
 800c4f8:	b928      	cbnz	r0, 800c506 <__multadd+0x5a>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c530 <__multadd+0x84>)
 800c4fe:	480d      	ldr	r0, [pc, #52]	@ (800c534 <__multadd+0x88>)
 800c500:	21ba      	movs	r1, #186	@ 0xba
 800c502:	f001 fe09 	bl	800e118 <__assert_func>
 800c506:	6922      	ldr	r2, [r4, #16]
 800c508:	3202      	adds	r2, #2
 800c50a:	f104 010c 	add.w	r1, r4, #12
 800c50e:	0092      	lsls	r2, r2, #2
 800c510:	300c      	adds	r0, #12
 800c512:	f7ff f808 	bl	800b526 <memcpy>
 800c516:	4621      	mov	r1, r4
 800c518:	4638      	mov	r0, r7
 800c51a:	f7ff ffa5 	bl	800c468 <_Bfree>
 800c51e:	4644      	mov	r4, r8
 800c520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c524:	3501      	adds	r5, #1
 800c526:	615e      	str	r6, [r3, #20]
 800c528:	6125      	str	r5, [r4, #16]
 800c52a:	4620      	mov	r0, r4
 800c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c530:	0800ea59 	.word	0x0800ea59
 800c534:	0800ea6a 	.word	0x0800ea6a

0800c538 <__s2b>:
 800c538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c53c:	460c      	mov	r4, r1
 800c53e:	4615      	mov	r5, r2
 800c540:	461f      	mov	r7, r3
 800c542:	2209      	movs	r2, #9
 800c544:	3308      	adds	r3, #8
 800c546:	4606      	mov	r6, r0
 800c548:	fb93 f3f2 	sdiv	r3, r3, r2
 800c54c:	2100      	movs	r1, #0
 800c54e:	2201      	movs	r2, #1
 800c550:	429a      	cmp	r2, r3
 800c552:	db09      	blt.n	800c568 <__s2b+0x30>
 800c554:	4630      	mov	r0, r6
 800c556:	f7ff ff47 	bl	800c3e8 <_Balloc>
 800c55a:	b940      	cbnz	r0, 800c56e <__s2b+0x36>
 800c55c:	4602      	mov	r2, r0
 800c55e:	4b19      	ldr	r3, [pc, #100]	@ (800c5c4 <__s2b+0x8c>)
 800c560:	4819      	ldr	r0, [pc, #100]	@ (800c5c8 <__s2b+0x90>)
 800c562:	21d3      	movs	r1, #211	@ 0xd3
 800c564:	f001 fdd8 	bl	800e118 <__assert_func>
 800c568:	0052      	lsls	r2, r2, #1
 800c56a:	3101      	adds	r1, #1
 800c56c:	e7f0      	b.n	800c550 <__s2b+0x18>
 800c56e:	9b08      	ldr	r3, [sp, #32]
 800c570:	6143      	str	r3, [r0, #20]
 800c572:	2d09      	cmp	r5, #9
 800c574:	f04f 0301 	mov.w	r3, #1
 800c578:	6103      	str	r3, [r0, #16]
 800c57a:	dd16      	ble.n	800c5aa <__s2b+0x72>
 800c57c:	f104 0909 	add.w	r9, r4, #9
 800c580:	46c8      	mov	r8, r9
 800c582:	442c      	add	r4, r5
 800c584:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c588:	4601      	mov	r1, r0
 800c58a:	3b30      	subs	r3, #48	@ 0x30
 800c58c:	220a      	movs	r2, #10
 800c58e:	4630      	mov	r0, r6
 800c590:	f7ff ff8c 	bl	800c4ac <__multadd>
 800c594:	45a0      	cmp	r8, r4
 800c596:	d1f5      	bne.n	800c584 <__s2b+0x4c>
 800c598:	f1a5 0408 	sub.w	r4, r5, #8
 800c59c:	444c      	add	r4, r9
 800c59e:	1b2d      	subs	r5, r5, r4
 800c5a0:	1963      	adds	r3, r4, r5
 800c5a2:	42bb      	cmp	r3, r7
 800c5a4:	db04      	blt.n	800c5b0 <__s2b+0x78>
 800c5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5aa:	340a      	adds	r4, #10
 800c5ac:	2509      	movs	r5, #9
 800c5ae:	e7f6      	b.n	800c59e <__s2b+0x66>
 800c5b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	3b30      	subs	r3, #48	@ 0x30
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	f7ff ff76 	bl	800c4ac <__multadd>
 800c5c0:	e7ee      	b.n	800c5a0 <__s2b+0x68>
 800c5c2:	bf00      	nop
 800c5c4:	0800ea59 	.word	0x0800ea59
 800c5c8:	0800ea6a 	.word	0x0800ea6a

0800c5cc <__hi0bits>:
 800c5cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	bf36      	itet	cc
 800c5d4:	0403      	lslcc	r3, r0, #16
 800c5d6:	2000      	movcs	r0, #0
 800c5d8:	2010      	movcc	r0, #16
 800c5da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5de:	bf3c      	itt	cc
 800c5e0:	021b      	lslcc	r3, r3, #8
 800c5e2:	3008      	addcc	r0, #8
 800c5e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5e8:	bf3c      	itt	cc
 800c5ea:	011b      	lslcc	r3, r3, #4
 800c5ec:	3004      	addcc	r0, #4
 800c5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5f2:	bf3c      	itt	cc
 800c5f4:	009b      	lslcc	r3, r3, #2
 800c5f6:	3002      	addcc	r0, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	db05      	blt.n	800c608 <__hi0bits+0x3c>
 800c5fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c600:	f100 0001 	add.w	r0, r0, #1
 800c604:	bf08      	it	eq
 800c606:	2020      	moveq	r0, #32
 800c608:	4770      	bx	lr

0800c60a <__lo0bits>:
 800c60a:	6803      	ldr	r3, [r0, #0]
 800c60c:	4602      	mov	r2, r0
 800c60e:	f013 0007 	ands.w	r0, r3, #7
 800c612:	d00b      	beq.n	800c62c <__lo0bits+0x22>
 800c614:	07d9      	lsls	r1, r3, #31
 800c616:	d421      	bmi.n	800c65c <__lo0bits+0x52>
 800c618:	0798      	lsls	r0, r3, #30
 800c61a:	bf49      	itett	mi
 800c61c:	085b      	lsrmi	r3, r3, #1
 800c61e:	089b      	lsrpl	r3, r3, #2
 800c620:	2001      	movmi	r0, #1
 800c622:	6013      	strmi	r3, [r2, #0]
 800c624:	bf5c      	itt	pl
 800c626:	6013      	strpl	r3, [r2, #0]
 800c628:	2002      	movpl	r0, #2
 800c62a:	4770      	bx	lr
 800c62c:	b299      	uxth	r1, r3
 800c62e:	b909      	cbnz	r1, 800c634 <__lo0bits+0x2a>
 800c630:	0c1b      	lsrs	r3, r3, #16
 800c632:	2010      	movs	r0, #16
 800c634:	b2d9      	uxtb	r1, r3
 800c636:	b909      	cbnz	r1, 800c63c <__lo0bits+0x32>
 800c638:	3008      	adds	r0, #8
 800c63a:	0a1b      	lsrs	r3, r3, #8
 800c63c:	0719      	lsls	r1, r3, #28
 800c63e:	bf04      	itt	eq
 800c640:	091b      	lsreq	r3, r3, #4
 800c642:	3004      	addeq	r0, #4
 800c644:	0799      	lsls	r1, r3, #30
 800c646:	bf04      	itt	eq
 800c648:	089b      	lsreq	r3, r3, #2
 800c64a:	3002      	addeq	r0, #2
 800c64c:	07d9      	lsls	r1, r3, #31
 800c64e:	d403      	bmi.n	800c658 <__lo0bits+0x4e>
 800c650:	085b      	lsrs	r3, r3, #1
 800c652:	f100 0001 	add.w	r0, r0, #1
 800c656:	d003      	beq.n	800c660 <__lo0bits+0x56>
 800c658:	6013      	str	r3, [r2, #0]
 800c65a:	4770      	bx	lr
 800c65c:	2000      	movs	r0, #0
 800c65e:	4770      	bx	lr
 800c660:	2020      	movs	r0, #32
 800c662:	4770      	bx	lr

0800c664 <__i2b>:
 800c664:	b510      	push	{r4, lr}
 800c666:	460c      	mov	r4, r1
 800c668:	2101      	movs	r1, #1
 800c66a:	f7ff febd 	bl	800c3e8 <_Balloc>
 800c66e:	4602      	mov	r2, r0
 800c670:	b928      	cbnz	r0, 800c67e <__i2b+0x1a>
 800c672:	4b05      	ldr	r3, [pc, #20]	@ (800c688 <__i2b+0x24>)
 800c674:	4805      	ldr	r0, [pc, #20]	@ (800c68c <__i2b+0x28>)
 800c676:	f240 1145 	movw	r1, #325	@ 0x145
 800c67a:	f001 fd4d 	bl	800e118 <__assert_func>
 800c67e:	2301      	movs	r3, #1
 800c680:	6144      	str	r4, [r0, #20]
 800c682:	6103      	str	r3, [r0, #16]
 800c684:	bd10      	pop	{r4, pc}
 800c686:	bf00      	nop
 800c688:	0800ea59 	.word	0x0800ea59
 800c68c:	0800ea6a 	.word	0x0800ea6a

0800c690 <__multiply>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	4614      	mov	r4, r2
 800c696:	690a      	ldr	r2, [r1, #16]
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	bfa8      	it	ge
 800c69e:	4623      	movge	r3, r4
 800c6a0:	460f      	mov	r7, r1
 800c6a2:	bfa4      	itt	ge
 800c6a4:	460c      	movge	r4, r1
 800c6a6:	461f      	movge	r7, r3
 800c6a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c6ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c6b0:	68a3      	ldr	r3, [r4, #8]
 800c6b2:	6861      	ldr	r1, [r4, #4]
 800c6b4:	eb0a 0609 	add.w	r6, sl, r9
 800c6b8:	42b3      	cmp	r3, r6
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	bfb8      	it	lt
 800c6be:	3101      	addlt	r1, #1
 800c6c0:	f7ff fe92 	bl	800c3e8 <_Balloc>
 800c6c4:	b930      	cbnz	r0, 800c6d4 <__multiply+0x44>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	4b44      	ldr	r3, [pc, #272]	@ (800c7dc <__multiply+0x14c>)
 800c6ca:	4845      	ldr	r0, [pc, #276]	@ (800c7e0 <__multiply+0x150>)
 800c6cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6d0:	f001 fd22 	bl	800e118 <__assert_func>
 800c6d4:	f100 0514 	add.w	r5, r0, #20
 800c6d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6dc:	462b      	mov	r3, r5
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4543      	cmp	r3, r8
 800c6e2:	d321      	bcc.n	800c728 <__multiply+0x98>
 800c6e4:	f107 0114 	add.w	r1, r7, #20
 800c6e8:	f104 0214 	add.w	r2, r4, #20
 800c6ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	1b13      	subs	r3, r2, r4
 800c6f8:	3b15      	subs	r3, #21
 800c6fa:	f023 0303 	bic.w	r3, r3, #3
 800c6fe:	3304      	adds	r3, #4
 800c700:	f104 0715 	add.w	r7, r4, #21
 800c704:	42ba      	cmp	r2, r7
 800c706:	bf38      	it	cc
 800c708:	2304      	movcc	r3, #4
 800c70a:	9301      	str	r3, [sp, #4]
 800c70c:	9b02      	ldr	r3, [sp, #8]
 800c70e:	9103      	str	r1, [sp, #12]
 800c710:	428b      	cmp	r3, r1
 800c712:	d80c      	bhi.n	800c72e <__multiply+0x9e>
 800c714:	2e00      	cmp	r6, #0
 800c716:	dd03      	ble.n	800c720 <__multiply+0x90>
 800c718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d05b      	beq.n	800c7d8 <__multiply+0x148>
 800c720:	6106      	str	r6, [r0, #16]
 800c722:	b005      	add	sp, #20
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	f843 2b04 	str.w	r2, [r3], #4
 800c72c:	e7d8      	b.n	800c6e0 <__multiply+0x50>
 800c72e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c732:	f1ba 0f00 	cmp.w	sl, #0
 800c736:	d024      	beq.n	800c782 <__multiply+0xf2>
 800c738:	f104 0e14 	add.w	lr, r4, #20
 800c73c:	46a9      	mov	r9, r5
 800c73e:	f04f 0c00 	mov.w	ip, #0
 800c742:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c746:	f8d9 3000 	ldr.w	r3, [r9]
 800c74a:	fa1f fb87 	uxth.w	fp, r7
 800c74e:	b29b      	uxth	r3, r3
 800c750:	fb0a 330b 	mla	r3, sl, fp, r3
 800c754:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c758:	f8d9 7000 	ldr.w	r7, [r9]
 800c75c:	4463      	add	r3, ip
 800c75e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c762:	fb0a c70b 	mla	r7, sl, fp, ip
 800c766:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c770:	4572      	cmp	r2, lr
 800c772:	f849 3b04 	str.w	r3, [r9], #4
 800c776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c77a:	d8e2      	bhi.n	800c742 <__multiply+0xb2>
 800c77c:	9b01      	ldr	r3, [sp, #4]
 800c77e:	f845 c003 	str.w	ip, [r5, r3]
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c788:	3104      	adds	r1, #4
 800c78a:	f1b9 0f00 	cmp.w	r9, #0
 800c78e:	d021      	beq.n	800c7d4 <__multiply+0x144>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	f104 0c14 	add.w	ip, r4, #20
 800c796:	46ae      	mov	lr, r5
 800c798:	f04f 0a00 	mov.w	sl, #0
 800c79c:	f8bc b000 	ldrh.w	fp, [ip]
 800c7a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c7a4:	fb09 770b 	mla	r7, r9, fp, r7
 800c7a8:	4457      	add	r7, sl
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c7b0:	f84e 3b04 	str.w	r3, [lr], #4
 800c7b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7bc:	f8be 3000 	ldrh.w	r3, [lr]
 800c7c0:	fb09 330a 	mla	r3, r9, sl, r3
 800c7c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c7c8:	4562      	cmp	r2, ip
 800c7ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7ce:	d8e5      	bhi.n	800c79c <__multiply+0x10c>
 800c7d0:	9f01      	ldr	r7, [sp, #4]
 800c7d2:	51eb      	str	r3, [r5, r7]
 800c7d4:	3504      	adds	r5, #4
 800c7d6:	e799      	b.n	800c70c <__multiply+0x7c>
 800c7d8:	3e01      	subs	r6, #1
 800c7da:	e79b      	b.n	800c714 <__multiply+0x84>
 800c7dc:	0800ea59 	.word	0x0800ea59
 800c7e0:	0800ea6a 	.word	0x0800ea6a

0800c7e4 <__pow5mult>:
 800c7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e8:	4615      	mov	r5, r2
 800c7ea:	f012 0203 	ands.w	r2, r2, #3
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	460e      	mov	r6, r1
 800c7f2:	d007      	beq.n	800c804 <__pow5mult+0x20>
 800c7f4:	4c25      	ldr	r4, [pc, #148]	@ (800c88c <__pow5mult+0xa8>)
 800c7f6:	3a01      	subs	r2, #1
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7fe:	f7ff fe55 	bl	800c4ac <__multadd>
 800c802:	4606      	mov	r6, r0
 800c804:	10ad      	asrs	r5, r5, #2
 800c806:	d03d      	beq.n	800c884 <__pow5mult+0xa0>
 800c808:	69fc      	ldr	r4, [r7, #28]
 800c80a:	b97c      	cbnz	r4, 800c82c <__pow5mult+0x48>
 800c80c:	2010      	movs	r0, #16
 800c80e:	f7ff fd35 	bl	800c27c <malloc>
 800c812:	4602      	mov	r2, r0
 800c814:	61f8      	str	r0, [r7, #28]
 800c816:	b928      	cbnz	r0, 800c824 <__pow5mult+0x40>
 800c818:	4b1d      	ldr	r3, [pc, #116]	@ (800c890 <__pow5mult+0xac>)
 800c81a:	481e      	ldr	r0, [pc, #120]	@ (800c894 <__pow5mult+0xb0>)
 800c81c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c820:	f001 fc7a 	bl	800e118 <__assert_func>
 800c824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c828:	6004      	str	r4, [r0, #0]
 800c82a:	60c4      	str	r4, [r0, #12]
 800c82c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c834:	b94c      	cbnz	r4, 800c84a <__pow5mult+0x66>
 800c836:	f240 2171 	movw	r1, #625	@ 0x271
 800c83a:	4638      	mov	r0, r7
 800c83c:	f7ff ff12 	bl	800c664 <__i2b>
 800c840:	2300      	movs	r3, #0
 800c842:	f8c8 0008 	str.w	r0, [r8, #8]
 800c846:	4604      	mov	r4, r0
 800c848:	6003      	str	r3, [r0, #0]
 800c84a:	f04f 0900 	mov.w	r9, #0
 800c84e:	07eb      	lsls	r3, r5, #31
 800c850:	d50a      	bpl.n	800c868 <__pow5mult+0x84>
 800c852:	4631      	mov	r1, r6
 800c854:	4622      	mov	r2, r4
 800c856:	4638      	mov	r0, r7
 800c858:	f7ff ff1a 	bl	800c690 <__multiply>
 800c85c:	4631      	mov	r1, r6
 800c85e:	4680      	mov	r8, r0
 800c860:	4638      	mov	r0, r7
 800c862:	f7ff fe01 	bl	800c468 <_Bfree>
 800c866:	4646      	mov	r6, r8
 800c868:	106d      	asrs	r5, r5, #1
 800c86a:	d00b      	beq.n	800c884 <__pow5mult+0xa0>
 800c86c:	6820      	ldr	r0, [r4, #0]
 800c86e:	b938      	cbnz	r0, 800c880 <__pow5mult+0x9c>
 800c870:	4622      	mov	r2, r4
 800c872:	4621      	mov	r1, r4
 800c874:	4638      	mov	r0, r7
 800c876:	f7ff ff0b 	bl	800c690 <__multiply>
 800c87a:	6020      	str	r0, [r4, #0]
 800c87c:	f8c0 9000 	str.w	r9, [r0]
 800c880:	4604      	mov	r4, r0
 800c882:	e7e4      	b.n	800c84e <__pow5mult+0x6a>
 800c884:	4630      	mov	r0, r6
 800c886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88a:	bf00      	nop
 800c88c:	0800eac4 	.word	0x0800eac4
 800c890:	0800e9ea 	.word	0x0800e9ea
 800c894:	0800ea6a 	.word	0x0800ea6a

0800c898 <__lshift>:
 800c898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c89c:	460c      	mov	r4, r1
 800c89e:	6849      	ldr	r1, [r1, #4]
 800c8a0:	6923      	ldr	r3, [r4, #16]
 800c8a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8a6:	68a3      	ldr	r3, [r4, #8]
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	4691      	mov	r9, r2
 800c8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8b0:	f108 0601 	add.w	r6, r8, #1
 800c8b4:	42b3      	cmp	r3, r6
 800c8b6:	db0b      	blt.n	800c8d0 <__lshift+0x38>
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7ff fd95 	bl	800c3e8 <_Balloc>
 800c8be:	4605      	mov	r5, r0
 800c8c0:	b948      	cbnz	r0, 800c8d6 <__lshift+0x3e>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4b28      	ldr	r3, [pc, #160]	@ (800c968 <__lshift+0xd0>)
 800c8c6:	4829      	ldr	r0, [pc, #164]	@ (800c96c <__lshift+0xd4>)
 800c8c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c8cc:	f001 fc24 	bl	800e118 <__assert_func>
 800c8d0:	3101      	adds	r1, #1
 800c8d2:	005b      	lsls	r3, r3, #1
 800c8d4:	e7ee      	b.n	800c8b4 <__lshift+0x1c>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f100 0114 	add.w	r1, r0, #20
 800c8dc:	f100 0210 	add.w	r2, r0, #16
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	4553      	cmp	r3, sl
 800c8e4:	db33      	blt.n	800c94e <__lshift+0xb6>
 800c8e6:	6920      	ldr	r0, [r4, #16]
 800c8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8ec:	f104 0314 	add.w	r3, r4, #20
 800c8f0:	f019 091f 	ands.w	r9, r9, #31
 800c8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8fc:	d02b      	beq.n	800c956 <__lshift+0xbe>
 800c8fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c902:	468a      	mov	sl, r1
 800c904:	2200      	movs	r2, #0
 800c906:	6818      	ldr	r0, [r3, #0]
 800c908:	fa00 f009 	lsl.w	r0, r0, r9
 800c90c:	4310      	orrs	r0, r2
 800c90e:	f84a 0b04 	str.w	r0, [sl], #4
 800c912:	f853 2b04 	ldr.w	r2, [r3], #4
 800c916:	459c      	cmp	ip, r3
 800c918:	fa22 f20e 	lsr.w	r2, r2, lr
 800c91c:	d8f3      	bhi.n	800c906 <__lshift+0x6e>
 800c91e:	ebac 0304 	sub.w	r3, ip, r4
 800c922:	3b15      	subs	r3, #21
 800c924:	f023 0303 	bic.w	r3, r3, #3
 800c928:	3304      	adds	r3, #4
 800c92a:	f104 0015 	add.w	r0, r4, #21
 800c92e:	4584      	cmp	ip, r0
 800c930:	bf38      	it	cc
 800c932:	2304      	movcc	r3, #4
 800c934:	50ca      	str	r2, [r1, r3]
 800c936:	b10a      	cbz	r2, 800c93c <__lshift+0xa4>
 800c938:	f108 0602 	add.w	r6, r8, #2
 800c93c:	3e01      	subs	r6, #1
 800c93e:	4638      	mov	r0, r7
 800c940:	612e      	str	r6, [r5, #16]
 800c942:	4621      	mov	r1, r4
 800c944:	f7ff fd90 	bl	800c468 <_Bfree>
 800c948:	4628      	mov	r0, r5
 800c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c94e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c952:	3301      	adds	r3, #1
 800c954:	e7c5      	b.n	800c8e2 <__lshift+0x4a>
 800c956:	3904      	subs	r1, #4
 800c958:	f853 2b04 	ldr.w	r2, [r3], #4
 800c95c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c960:	459c      	cmp	ip, r3
 800c962:	d8f9      	bhi.n	800c958 <__lshift+0xc0>
 800c964:	e7ea      	b.n	800c93c <__lshift+0xa4>
 800c966:	bf00      	nop
 800c968:	0800ea59 	.word	0x0800ea59
 800c96c:	0800ea6a 	.word	0x0800ea6a

0800c970 <__mcmp>:
 800c970:	690a      	ldr	r2, [r1, #16]
 800c972:	4603      	mov	r3, r0
 800c974:	6900      	ldr	r0, [r0, #16]
 800c976:	1a80      	subs	r0, r0, r2
 800c978:	b530      	push	{r4, r5, lr}
 800c97a:	d10e      	bne.n	800c99a <__mcmp+0x2a>
 800c97c:	3314      	adds	r3, #20
 800c97e:	3114      	adds	r1, #20
 800c980:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c984:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c988:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c98c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c990:	4295      	cmp	r5, r2
 800c992:	d003      	beq.n	800c99c <__mcmp+0x2c>
 800c994:	d205      	bcs.n	800c9a2 <__mcmp+0x32>
 800c996:	f04f 30ff 	mov.w	r0, #4294967295
 800c99a:	bd30      	pop	{r4, r5, pc}
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	d3f3      	bcc.n	800c988 <__mcmp+0x18>
 800c9a0:	e7fb      	b.n	800c99a <__mcmp+0x2a>
 800c9a2:	2001      	movs	r0, #1
 800c9a4:	e7f9      	b.n	800c99a <__mcmp+0x2a>
	...

0800c9a8 <__mdiff>:
 800c9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	4689      	mov	r9, r1
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4648      	mov	r0, r9
 800c9b4:	4614      	mov	r4, r2
 800c9b6:	f7ff ffdb 	bl	800c970 <__mcmp>
 800c9ba:	1e05      	subs	r5, r0, #0
 800c9bc:	d112      	bne.n	800c9e4 <__mdiff+0x3c>
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff fd11 	bl	800c3e8 <_Balloc>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	b928      	cbnz	r0, 800c9d6 <__mdiff+0x2e>
 800c9ca:	4b3f      	ldr	r3, [pc, #252]	@ (800cac8 <__mdiff+0x120>)
 800c9cc:	f240 2137 	movw	r1, #567	@ 0x237
 800c9d0:	483e      	ldr	r0, [pc, #248]	@ (800cacc <__mdiff+0x124>)
 800c9d2:	f001 fba1 	bl	800e118 <__assert_func>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9dc:	4610      	mov	r0, r2
 800c9de:	b003      	add	sp, #12
 800c9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e4:	bfbc      	itt	lt
 800c9e6:	464b      	movlt	r3, r9
 800c9e8:	46a1      	movlt	r9, r4
 800c9ea:	4630      	mov	r0, r6
 800c9ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9f0:	bfba      	itte	lt
 800c9f2:	461c      	movlt	r4, r3
 800c9f4:	2501      	movlt	r5, #1
 800c9f6:	2500      	movge	r5, #0
 800c9f8:	f7ff fcf6 	bl	800c3e8 <_Balloc>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	b918      	cbnz	r0, 800ca08 <__mdiff+0x60>
 800ca00:	4b31      	ldr	r3, [pc, #196]	@ (800cac8 <__mdiff+0x120>)
 800ca02:	f240 2145 	movw	r1, #581	@ 0x245
 800ca06:	e7e3      	b.n	800c9d0 <__mdiff+0x28>
 800ca08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ca0c:	6926      	ldr	r6, [r4, #16]
 800ca0e:	60c5      	str	r5, [r0, #12]
 800ca10:	f109 0310 	add.w	r3, r9, #16
 800ca14:	f109 0514 	add.w	r5, r9, #20
 800ca18:	f104 0e14 	add.w	lr, r4, #20
 800ca1c:	f100 0b14 	add.w	fp, r0, #20
 800ca20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ca24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	46d9      	mov	r9, fp
 800ca2c:	f04f 0c00 	mov.w	ip, #0
 800ca30:	9b01      	ldr	r3, [sp, #4]
 800ca32:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca36:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca3a:	9301      	str	r3, [sp, #4]
 800ca3c:	fa1f f38a 	uxth.w	r3, sl
 800ca40:	4619      	mov	r1, r3
 800ca42:	b283      	uxth	r3, r0
 800ca44:	1acb      	subs	r3, r1, r3
 800ca46:	0c00      	lsrs	r0, r0, #16
 800ca48:	4463      	add	r3, ip
 800ca4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca58:	4576      	cmp	r6, lr
 800ca5a:	f849 3b04 	str.w	r3, [r9], #4
 800ca5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca62:	d8e5      	bhi.n	800ca30 <__mdiff+0x88>
 800ca64:	1b33      	subs	r3, r6, r4
 800ca66:	3b15      	subs	r3, #21
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	3415      	adds	r4, #21
 800ca6e:	3304      	adds	r3, #4
 800ca70:	42a6      	cmp	r6, r4
 800ca72:	bf38      	it	cc
 800ca74:	2304      	movcc	r3, #4
 800ca76:	441d      	add	r5, r3
 800ca78:	445b      	add	r3, fp
 800ca7a:	461e      	mov	r6, r3
 800ca7c:	462c      	mov	r4, r5
 800ca7e:	4544      	cmp	r4, r8
 800ca80:	d30e      	bcc.n	800caa0 <__mdiff+0xf8>
 800ca82:	f108 0103 	add.w	r1, r8, #3
 800ca86:	1b49      	subs	r1, r1, r5
 800ca88:	f021 0103 	bic.w	r1, r1, #3
 800ca8c:	3d03      	subs	r5, #3
 800ca8e:	45a8      	cmp	r8, r5
 800ca90:	bf38      	it	cc
 800ca92:	2100      	movcc	r1, #0
 800ca94:	440b      	add	r3, r1
 800ca96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca9a:	b191      	cbz	r1, 800cac2 <__mdiff+0x11a>
 800ca9c:	6117      	str	r7, [r2, #16]
 800ca9e:	e79d      	b.n	800c9dc <__mdiff+0x34>
 800caa0:	f854 1b04 	ldr.w	r1, [r4], #4
 800caa4:	46e6      	mov	lr, ip
 800caa6:	0c08      	lsrs	r0, r1, #16
 800caa8:	fa1c fc81 	uxtah	ip, ip, r1
 800caac:	4471      	add	r1, lr
 800caae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cab2:	b289      	uxth	r1, r1
 800cab4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cab8:	f846 1b04 	str.w	r1, [r6], #4
 800cabc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cac0:	e7dd      	b.n	800ca7e <__mdiff+0xd6>
 800cac2:	3f01      	subs	r7, #1
 800cac4:	e7e7      	b.n	800ca96 <__mdiff+0xee>
 800cac6:	bf00      	nop
 800cac8:	0800ea59 	.word	0x0800ea59
 800cacc:	0800ea6a 	.word	0x0800ea6a

0800cad0 <__ulp>:
 800cad0:	b082      	sub	sp, #8
 800cad2:	ed8d 0b00 	vstr	d0, [sp]
 800cad6:	9a01      	ldr	r2, [sp, #4]
 800cad8:	4b0f      	ldr	r3, [pc, #60]	@ (800cb18 <__ulp+0x48>)
 800cada:	4013      	ands	r3, r2
 800cadc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	dc08      	bgt.n	800caf6 <__ulp+0x26>
 800cae4:	425b      	negs	r3, r3
 800cae6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800caea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800caee:	da04      	bge.n	800cafa <__ulp+0x2a>
 800caf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800caf4:	4113      	asrs	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	e008      	b.n	800cb0c <__ulp+0x3c>
 800cafa:	f1a2 0314 	sub.w	r3, r2, #20
 800cafe:	2b1e      	cmp	r3, #30
 800cb00:	bfda      	itte	le
 800cb02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cb06:	40da      	lsrle	r2, r3
 800cb08:	2201      	movgt	r2, #1
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	ec41 0b10 	vmov	d0, r0, r1
 800cb14:	b002      	add	sp, #8
 800cb16:	4770      	bx	lr
 800cb18:	7ff00000 	.word	0x7ff00000

0800cb1c <__b2d>:
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	6906      	ldr	r6, [r0, #16]
 800cb22:	f100 0814 	add.w	r8, r0, #20
 800cb26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cb2a:	1f37      	subs	r7, r6, #4
 800cb2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb30:	4610      	mov	r0, r2
 800cb32:	f7ff fd4b 	bl	800c5cc <__hi0bits>
 800cb36:	f1c0 0320 	rsb	r3, r0, #32
 800cb3a:	280a      	cmp	r0, #10
 800cb3c:	600b      	str	r3, [r1, #0]
 800cb3e:	491b      	ldr	r1, [pc, #108]	@ (800cbac <__b2d+0x90>)
 800cb40:	dc15      	bgt.n	800cb6e <__b2d+0x52>
 800cb42:	f1c0 0c0b 	rsb	ip, r0, #11
 800cb46:	fa22 f30c 	lsr.w	r3, r2, ip
 800cb4a:	45b8      	cmp	r8, r7
 800cb4c:	ea43 0501 	orr.w	r5, r3, r1
 800cb50:	bf34      	ite	cc
 800cb52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb56:	2300      	movcs	r3, #0
 800cb58:	3015      	adds	r0, #21
 800cb5a:	fa02 f000 	lsl.w	r0, r2, r0
 800cb5e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cb62:	4303      	orrs	r3, r0
 800cb64:	461c      	mov	r4, r3
 800cb66:	ec45 4b10 	vmov	d0, r4, r5
 800cb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb6e:	45b8      	cmp	r8, r7
 800cb70:	bf3a      	itte	cc
 800cb72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cb76:	f1a6 0708 	subcc.w	r7, r6, #8
 800cb7a:	2300      	movcs	r3, #0
 800cb7c:	380b      	subs	r0, #11
 800cb7e:	d012      	beq.n	800cba6 <__b2d+0x8a>
 800cb80:	f1c0 0120 	rsb	r1, r0, #32
 800cb84:	fa23 f401 	lsr.w	r4, r3, r1
 800cb88:	4082      	lsls	r2, r0
 800cb8a:	4322      	orrs	r2, r4
 800cb8c:	4547      	cmp	r7, r8
 800cb8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cb92:	bf8c      	ite	hi
 800cb94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cb98:	2200      	movls	r2, #0
 800cb9a:	4083      	lsls	r3, r0
 800cb9c:	40ca      	lsrs	r2, r1
 800cb9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cba2:	4313      	orrs	r3, r2
 800cba4:	e7de      	b.n	800cb64 <__b2d+0x48>
 800cba6:	ea42 0501 	orr.w	r5, r2, r1
 800cbaa:	e7db      	b.n	800cb64 <__b2d+0x48>
 800cbac:	3ff00000 	.word	0x3ff00000

0800cbb0 <__d2b>:
 800cbb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	ec59 8b10 	vmov	r8, r9, d0
 800cbbc:	4616      	mov	r6, r2
 800cbbe:	f7ff fc13 	bl	800c3e8 <_Balloc>
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	b930      	cbnz	r0, 800cbd4 <__d2b+0x24>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b23      	ldr	r3, [pc, #140]	@ (800cc58 <__d2b+0xa8>)
 800cbca:	4824      	ldr	r0, [pc, #144]	@ (800cc5c <__d2b+0xac>)
 800cbcc:	f240 310f 	movw	r1, #783	@ 0x30f
 800cbd0:	f001 faa2 	bl	800e118 <__assert_func>
 800cbd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbdc:	b10d      	cbz	r5, 800cbe2 <__d2b+0x32>
 800cbde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	f1b8 0300 	subs.w	r3, r8, #0
 800cbe8:	d023      	beq.n	800cc32 <__d2b+0x82>
 800cbea:	4668      	mov	r0, sp
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	f7ff fd0c 	bl	800c60a <__lo0bits>
 800cbf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbf6:	b1d0      	cbz	r0, 800cc2e <__d2b+0x7e>
 800cbf8:	f1c0 0320 	rsb	r3, r0, #32
 800cbfc:	fa02 f303 	lsl.w	r3, r2, r3
 800cc00:	430b      	orrs	r3, r1
 800cc02:	40c2      	lsrs	r2, r0
 800cc04:	6163      	str	r3, [r4, #20]
 800cc06:	9201      	str	r2, [sp, #4]
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	61a3      	str	r3, [r4, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf0c      	ite	eq
 800cc10:	2201      	moveq	r2, #1
 800cc12:	2202      	movne	r2, #2
 800cc14:	6122      	str	r2, [r4, #16]
 800cc16:	b1a5      	cbz	r5, 800cc42 <__d2b+0x92>
 800cc18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cc1c:	4405      	add	r5, r0
 800cc1e:	603d      	str	r5, [r7, #0]
 800cc20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cc24:	6030      	str	r0, [r6, #0]
 800cc26:	4620      	mov	r0, r4
 800cc28:	b003      	add	sp, #12
 800cc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc2e:	6161      	str	r1, [r4, #20]
 800cc30:	e7ea      	b.n	800cc08 <__d2b+0x58>
 800cc32:	a801      	add	r0, sp, #4
 800cc34:	f7ff fce9 	bl	800c60a <__lo0bits>
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	6163      	str	r3, [r4, #20]
 800cc3c:	3020      	adds	r0, #32
 800cc3e:	2201      	movs	r2, #1
 800cc40:	e7e8      	b.n	800cc14 <__d2b+0x64>
 800cc42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cc4a:	6038      	str	r0, [r7, #0]
 800cc4c:	6918      	ldr	r0, [r3, #16]
 800cc4e:	f7ff fcbd 	bl	800c5cc <__hi0bits>
 800cc52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc56:	e7e5      	b.n	800cc24 <__d2b+0x74>
 800cc58:	0800ea59 	.word	0x0800ea59
 800cc5c:	0800ea6a 	.word	0x0800ea6a

0800cc60 <__ratio>:
 800cc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc64:	b085      	sub	sp, #20
 800cc66:	e9cd 1000 	strd	r1, r0, [sp]
 800cc6a:	a902      	add	r1, sp, #8
 800cc6c:	f7ff ff56 	bl	800cb1c <__b2d>
 800cc70:	9800      	ldr	r0, [sp, #0]
 800cc72:	a903      	add	r1, sp, #12
 800cc74:	ec55 4b10 	vmov	r4, r5, d0
 800cc78:	f7ff ff50 	bl	800cb1c <__b2d>
 800cc7c:	9b01      	ldr	r3, [sp, #4]
 800cc7e:	6919      	ldr	r1, [r3, #16]
 800cc80:	9b00      	ldr	r3, [sp, #0]
 800cc82:	691b      	ldr	r3, [r3, #16]
 800cc84:	1ac9      	subs	r1, r1, r3
 800cc86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	ec5b ab10 	vmov	sl, fp, d0
 800cc90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bfce      	itee	gt
 800cc98:	462a      	movgt	r2, r5
 800cc9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cc9e:	465a      	movle	r2, fp
 800cca0:	462f      	mov	r7, r5
 800cca2:	46d9      	mov	r9, fp
 800cca4:	bfcc      	ite	gt
 800cca6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ccaa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ccae:	464b      	mov	r3, r9
 800ccb0:	4652      	mov	r2, sl
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4639      	mov	r1, r7
 800ccb6:	f7f3 fdd1 	bl	800085c <__aeabi_ddiv>
 800ccba:	ec41 0b10 	vmov	d0, r0, r1
 800ccbe:	b005      	add	sp, #20
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccc4 <__copybits>:
 800ccc4:	3901      	subs	r1, #1
 800ccc6:	b570      	push	{r4, r5, r6, lr}
 800ccc8:	1149      	asrs	r1, r1, #5
 800ccca:	6914      	ldr	r4, [r2, #16]
 800cccc:	3101      	adds	r1, #1
 800ccce:	f102 0314 	add.w	r3, r2, #20
 800ccd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ccd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ccda:	1f05      	subs	r5, r0, #4
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d30c      	bcc.n	800ccfa <__copybits+0x36>
 800cce0:	1aa3      	subs	r3, r4, r2
 800cce2:	3b11      	subs	r3, #17
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	3211      	adds	r2, #17
 800ccea:	42a2      	cmp	r2, r4
 800ccec:	bf88      	it	hi
 800ccee:	2300      	movhi	r3, #0
 800ccf0:	4418      	add	r0, r3
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	4288      	cmp	r0, r1
 800ccf6:	d305      	bcc.n	800cd04 <__copybits+0x40>
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
 800ccfa:	f853 6b04 	ldr.w	r6, [r3], #4
 800ccfe:	f845 6f04 	str.w	r6, [r5, #4]!
 800cd02:	e7eb      	b.n	800ccdc <__copybits+0x18>
 800cd04:	f840 3b04 	str.w	r3, [r0], #4
 800cd08:	e7f4      	b.n	800ccf4 <__copybits+0x30>

0800cd0a <__any_on>:
 800cd0a:	f100 0214 	add.w	r2, r0, #20
 800cd0e:	6900      	ldr	r0, [r0, #16]
 800cd10:	114b      	asrs	r3, r1, #5
 800cd12:	4298      	cmp	r0, r3
 800cd14:	b510      	push	{r4, lr}
 800cd16:	db11      	blt.n	800cd3c <__any_on+0x32>
 800cd18:	dd0a      	ble.n	800cd30 <__any_on+0x26>
 800cd1a:	f011 011f 	ands.w	r1, r1, #31
 800cd1e:	d007      	beq.n	800cd30 <__any_on+0x26>
 800cd20:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cd24:	fa24 f001 	lsr.w	r0, r4, r1
 800cd28:	fa00 f101 	lsl.w	r1, r0, r1
 800cd2c:	428c      	cmp	r4, r1
 800cd2e:	d10b      	bne.n	800cd48 <__any_on+0x3e>
 800cd30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d803      	bhi.n	800cd40 <__any_on+0x36>
 800cd38:	2000      	movs	r0, #0
 800cd3a:	bd10      	pop	{r4, pc}
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	e7f7      	b.n	800cd30 <__any_on+0x26>
 800cd40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd44:	2900      	cmp	r1, #0
 800cd46:	d0f5      	beq.n	800cd34 <__any_on+0x2a>
 800cd48:	2001      	movs	r0, #1
 800cd4a:	e7f6      	b.n	800cd3a <__any_on+0x30>

0800cd4c <sulp>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	4604      	mov	r4, r0
 800cd50:	460d      	mov	r5, r1
 800cd52:	ec45 4b10 	vmov	d0, r4, r5
 800cd56:	4616      	mov	r6, r2
 800cd58:	f7ff feba 	bl	800cad0 <__ulp>
 800cd5c:	ec51 0b10 	vmov	r0, r1, d0
 800cd60:	b17e      	cbz	r6, 800cd82 <sulp+0x36>
 800cd62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cd66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dd09      	ble.n	800cd82 <sulp+0x36>
 800cd6e:	051b      	lsls	r3, r3, #20
 800cd70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cd74:	2400      	movs	r4, #0
 800cd76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	462b      	mov	r3, r5
 800cd7e:	f7f3 fc43 	bl	8000608 <__aeabi_dmul>
 800cd82:	ec41 0b10 	vmov	d0, r0, r1
 800cd86:	bd70      	pop	{r4, r5, r6, pc}

0800cd88 <_strtod_l>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	b09f      	sub	sp, #124	@ 0x7c
 800cd8e:	460c      	mov	r4, r1
 800cd90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cd92:	2200      	movs	r2, #0
 800cd94:	921a      	str	r2, [sp, #104]	@ 0x68
 800cd96:	9005      	str	r0, [sp, #20]
 800cd98:	f04f 0a00 	mov.w	sl, #0
 800cd9c:	f04f 0b00 	mov.w	fp, #0
 800cda0:	460a      	mov	r2, r1
 800cda2:	9219      	str	r2, [sp, #100]	@ 0x64
 800cda4:	7811      	ldrb	r1, [r2, #0]
 800cda6:	292b      	cmp	r1, #43	@ 0x2b
 800cda8:	d04a      	beq.n	800ce40 <_strtod_l+0xb8>
 800cdaa:	d838      	bhi.n	800ce1e <_strtod_l+0x96>
 800cdac:	290d      	cmp	r1, #13
 800cdae:	d832      	bhi.n	800ce16 <_strtod_l+0x8e>
 800cdb0:	2908      	cmp	r1, #8
 800cdb2:	d832      	bhi.n	800ce1a <_strtod_l+0x92>
 800cdb4:	2900      	cmp	r1, #0
 800cdb6:	d03b      	beq.n	800ce30 <_strtod_l+0xa8>
 800cdb8:	2200      	movs	r2, #0
 800cdba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cdbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cdbe:	782a      	ldrb	r2, [r5, #0]
 800cdc0:	2a30      	cmp	r2, #48	@ 0x30
 800cdc2:	f040 80b3 	bne.w	800cf2c <_strtod_l+0x1a4>
 800cdc6:	786a      	ldrb	r2, [r5, #1]
 800cdc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cdcc:	2a58      	cmp	r2, #88	@ 0x58
 800cdce:	d16e      	bne.n	800ceae <_strtod_l+0x126>
 800cdd0:	9302      	str	r3, [sp, #8]
 800cdd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	ab1a      	add	r3, sp, #104	@ 0x68
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	4a8e      	ldr	r2, [pc, #568]	@ (800d014 <_strtod_l+0x28c>)
 800cddc:	9805      	ldr	r0, [sp, #20]
 800cdde:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cde0:	a919      	add	r1, sp, #100	@ 0x64
 800cde2:	f001 fa33 	bl	800e24c <__gethex>
 800cde6:	f010 060f 	ands.w	r6, r0, #15
 800cdea:	4604      	mov	r4, r0
 800cdec:	d005      	beq.n	800cdfa <_strtod_l+0x72>
 800cdee:	2e06      	cmp	r6, #6
 800cdf0:	d128      	bne.n	800ce44 <_strtod_l+0xbc>
 800cdf2:	3501      	adds	r5, #1
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	9519      	str	r5, [sp, #100]	@ 0x64
 800cdf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 858e 	bne.w	800d91e <_strtod_l+0xb96>
 800ce02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce04:	b1cb      	cbz	r3, 800ce3a <_strtod_l+0xb2>
 800ce06:	4652      	mov	r2, sl
 800ce08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ce0c:	ec43 2b10 	vmov	d0, r2, r3
 800ce10:	b01f      	add	sp, #124	@ 0x7c
 800ce12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce16:	2920      	cmp	r1, #32
 800ce18:	d1ce      	bne.n	800cdb8 <_strtod_l+0x30>
 800ce1a:	3201      	adds	r2, #1
 800ce1c:	e7c1      	b.n	800cda2 <_strtod_l+0x1a>
 800ce1e:	292d      	cmp	r1, #45	@ 0x2d
 800ce20:	d1ca      	bne.n	800cdb8 <_strtod_l+0x30>
 800ce22:	2101      	movs	r1, #1
 800ce24:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ce26:	1c51      	adds	r1, r2, #1
 800ce28:	9119      	str	r1, [sp, #100]	@ 0x64
 800ce2a:	7852      	ldrb	r2, [r2, #1]
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	d1c5      	bne.n	800cdbc <_strtod_l+0x34>
 800ce30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ce32:	9419      	str	r4, [sp, #100]	@ 0x64
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f040 8570 	bne.w	800d91a <_strtod_l+0xb92>
 800ce3a:	4652      	mov	r2, sl
 800ce3c:	465b      	mov	r3, fp
 800ce3e:	e7e5      	b.n	800ce0c <_strtod_l+0x84>
 800ce40:	2100      	movs	r1, #0
 800ce42:	e7ef      	b.n	800ce24 <_strtod_l+0x9c>
 800ce44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ce46:	b13a      	cbz	r2, 800ce58 <_strtod_l+0xd0>
 800ce48:	2135      	movs	r1, #53	@ 0x35
 800ce4a:	a81c      	add	r0, sp, #112	@ 0x70
 800ce4c:	f7ff ff3a 	bl	800ccc4 <__copybits>
 800ce50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce52:	9805      	ldr	r0, [sp, #20]
 800ce54:	f7ff fb08 	bl	800c468 <_Bfree>
 800ce58:	3e01      	subs	r6, #1
 800ce5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ce5c:	2e04      	cmp	r6, #4
 800ce5e:	d806      	bhi.n	800ce6e <_strtod_l+0xe6>
 800ce60:	e8df f006 	tbb	[pc, r6]
 800ce64:	201d0314 	.word	0x201d0314
 800ce68:	14          	.byte	0x14
 800ce69:	00          	.byte	0x00
 800ce6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ce6e:	05e1      	lsls	r1, r4, #23
 800ce70:	bf48      	it	mi
 800ce72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ce76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce7a:	0d1b      	lsrs	r3, r3, #20
 800ce7c:	051b      	lsls	r3, r3, #20
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1bb      	bne.n	800cdfa <_strtod_l+0x72>
 800ce82:	f7fe fb1b 	bl	800b4bc <__errno>
 800ce86:	2322      	movs	r3, #34	@ 0x22
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	e7b6      	b.n	800cdfa <_strtod_l+0x72>
 800ce8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ce90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ce94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ce98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce9c:	e7e7      	b.n	800ce6e <_strtod_l+0xe6>
 800ce9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d01c <_strtod_l+0x294>
 800cea2:	e7e4      	b.n	800ce6e <_strtod_l+0xe6>
 800cea4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cea8:	f04f 3aff 	mov.w	sl, #4294967295
 800ceac:	e7df      	b.n	800ce6e <_strtod_l+0xe6>
 800ceae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ceb4:	785b      	ldrb	r3, [r3, #1]
 800ceb6:	2b30      	cmp	r3, #48	@ 0x30
 800ceb8:	d0f9      	beq.n	800ceae <_strtod_l+0x126>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d09d      	beq.n	800cdfa <_strtod_l+0x72>
 800cebe:	2301      	movs	r3, #1
 800cec0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cec4:	930c      	str	r3, [sp, #48]	@ 0x30
 800cec6:	2300      	movs	r3, #0
 800cec8:	9308      	str	r3, [sp, #32]
 800ceca:	930a      	str	r3, [sp, #40]	@ 0x28
 800cecc:	461f      	mov	r7, r3
 800cece:	220a      	movs	r2, #10
 800ced0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ced2:	7805      	ldrb	r5, [r0, #0]
 800ced4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ced8:	b2d9      	uxtb	r1, r3
 800ceda:	2909      	cmp	r1, #9
 800cedc:	d928      	bls.n	800cf30 <_strtod_l+0x1a8>
 800cede:	494e      	ldr	r1, [pc, #312]	@ (800d018 <_strtod_l+0x290>)
 800cee0:	2201      	movs	r2, #1
 800cee2:	f001 f8cd 	bl	800e080 <strncmp>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d032      	beq.n	800cf50 <_strtod_l+0x1c8>
 800ceea:	2000      	movs	r0, #0
 800ceec:	462a      	mov	r2, r5
 800ceee:	4681      	mov	r9, r0
 800cef0:	463d      	mov	r5, r7
 800cef2:	4603      	mov	r3, r0
 800cef4:	2a65      	cmp	r2, #101	@ 0x65
 800cef6:	d001      	beq.n	800cefc <_strtod_l+0x174>
 800cef8:	2a45      	cmp	r2, #69	@ 0x45
 800cefa:	d114      	bne.n	800cf26 <_strtod_l+0x19e>
 800cefc:	b91d      	cbnz	r5, 800cf06 <_strtod_l+0x17e>
 800cefe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf00:	4302      	orrs	r2, r0
 800cf02:	d095      	beq.n	800ce30 <_strtod_l+0xa8>
 800cf04:	2500      	movs	r5, #0
 800cf06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cf08:	1c62      	adds	r2, r4, #1
 800cf0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf0c:	7862      	ldrb	r2, [r4, #1]
 800cf0e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cf10:	d077      	beq.n	800d002 <_strtod_l+0x27a>
 800cf12:	2a2d      	cmp	r2, #45	@ 0x2d
 800cf14:	d07b      	beq.n	800d00e <_strtod_l+0x286>
 800cf16:	f04f 0c00 	mov.w	ip, #0
 800cf1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cf1e:	2909      	cmp	r1, #9
 800cf20:	f240 8082 	bls.w	800d028 <_strtod_l+0x2a0>
 800cf24:	9419      	str	r4, [sp, #100]	@ 0x64
 800cf26:	f04f 0800 	mov.w	r8, #0
 800cf2a:	e0a2      	b.n	800d072 <_strtod_l+0x2ea>
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	e7c7      	b.n	800cec0 <_strtod_l+0x138>
 800cf30:	2f08      	cmp	r7, #8
 800cf32:	bfd5      	itete	le
 800cf34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cf36:	9908      	ldrgt	r1, [sp, #32]
 800cf38:	fb02 3301 	mlale	r3, r2, r1, r3
 800cf3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cf40:	f100 0001 	add.w	r0, r0, #1
 800cf44:	bfd4      	ite	le
 800cf46:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cf48:	9308      	strgt	r3, [sp, #32]
 800cf4a:	3701      	adds	r7, #1
 800cf4c:	9019      	str	r0, [sp, #100]	@ 0x64
 800cf4e:	e7bf      	b.n	800ced0 <_strtod_l+0x148>
 800cf50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf56:	785a      	ldrb	r2, [r3, #1]
 800cf58:	b37f      	cbz	r7, 800cfba <_strtod_l+0x232>
 800cf5a:	4681      	mov	r9, r0
 800cf5c:	463d      	mov	r5, r7
 800cf5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	d912      	bls.n	800cf8c <_strtod_l+0x204>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e7c4      	b.n	800cef4 <_strtod_l+0x16c>
 800cf6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf6c:	1c5a      	adds	r2, r3, #1
 800cf6e:	9219      	str	r2, [sp, #100]	@ 0x64
 800cf70:	785a      	ldrb	r2, [r3, #1]
 800cf72:	3001      	adds	r0, #1
 800cf74:	2a30      	cmp	r2, #48	@ 0x30
 800cf76:	d0f8      	beq.n	800cf6a <_strtod_l+0x1e2>
 800cf78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cf7c:	2b08      	cmp	r3, #8
 800cf7e:	f200 84d3 	bhi.w	800d928 <_strtod_l+0xba0>
 800cf82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf84:	930c      	str	r3, [sp, #48]	@ 0x30
 800cf86:	4681      	mov	r9, r0
 800cf88:	2000      	movs	r0, #0
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	3a30      	subs	r2, #48	@ 0x30
 800cf8e:	f100 0301 	add.w	r3, r0, #1
 800cf92:	d02a      	beq.n	800cfea <_strtod_l+0x262>
 800cf94:	4499      	add	r9, r3
 800cf96:	eb00 0c05 	add.w	ip, r0, r5
 800cf9a:	462b      	mov	r3, r5
 800cf9c:	210a      	movs	r1, #10
 800cf9e:	4563      	cmp	r3, ip
 800cfa0:	d10d      	bne.n	800cfbe <_strtod_l+0x236>
 800cfa2:	1c69      	adds	r1, r5, #1
 800cfa4:	4401      	add	r1, r0
 800cfa6:	4428      	add	r0, r5
 800cfa8:	2808      	cmp	r0, #8
 800cfaa:	dc16      	bgt.n	800cfda <_strtod_l+0x252>
 800cfac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cfae:	230a      	movs	r3, #10
 800cfb0:	fb03 2300 	mla	r3, r3, r0, r2
 800cfb4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e018      	b.n	800cfec <_strtod_l+0x264>
 800cfba:	4638      	mov	r0, r7
 800cfbc:	e7da      	b.n	800cf74 <_strtod_l+0x1ec>
 800cfbe:	2b08      	cmp	r3, #8
 800cfc0:	f103 0301 	add.w	r3, r3, #1
 800cfc4:	dc03      	bgt.n	800cfce <_strtod_l+0x246>
 800cfc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cfc8:	434e      	muls	r6, r1
 800cfca:	960a      	str	r6, [sp, #40]	@ 0x28
 800cfcc:	e7e7      	b.n	800cf9e <_strtod_l+0x216>
 800cfce:	2b10      	cmp	r3, #16
 800cfd0:	bfde      	ittt	le
 800cfd2:	9e08      	ldrle	r6, [sp, #32]
 800cfd4:	434e      	mulle	r6, r1
 800cfd6:	9608      	strle	r6, [sp, #32]
 800cfd8:	e7e1      	b.n	800cf9e <_strtod_l+0x216>
 800cfda:	280f      	cmp	r0, #15
 800cfdc:	dceb      	bgt.n	800cfb6 <_strtod_l+0x22e>
 800cfde:	9808      	ldr	r0, [sp, #32]
 800cfe0:	230a      	movs	r3, #10
 800cfe2:	fb03 2300 	mla	r3, r3, r0, r2
 800cfe6:	9308      	str	r3, [sp, #32]
 800cfe8:	e7e5      	b.n	800cfb6 <_strtod_l+0x22e>
 800cfea:	4629      	mov	r1, r5
 800cfec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cfee:	1c50      	adds	r0, r2, #1
 800cff0:	9019      	str	r0, [sp, #100]	@ 0x64
 800cff2:	7852      	ldrb	r2, [r2, #1]
 800cff4:	4618      	mov	r0, r3
 800cff6:	460d      	mov	r5, r1
 800cff8:	e7b1      	b.n	800cf5e <_strtod_l+0x1d6>
 800cffa:	f04f 0900 	mov.w	r9, #0
 800cffe:	2301      	movs	r3, #1
 800d000:	e77d      	b.n	800cefe <_strtod_l+0x176>
 800d002:	f04f 0c00 	mov.w	ip, #0
 800d006:	1ca2      	adds	r2, r4, #2
 800d008:	9219      	str	r2, [sp, #100]	@ 0x64
 800d00a:	78a2      	ldrb	r2, [r4, #2]
 800d00c:	e785      	b.n	800cf1a <_strtod_l+0x192>
 800d00e:	f04f 0c01 	mov.w	ip, #1
 800d012:	e7f8      	b.n	800d006 <_strtod_l+0x27e>
 800d014:	0800ebd8 	.word	0x0800ebd8
 800d018:	0800ebc0 	.word	0x0800ebc0
 800d01c:	7ff00000 	.word	0x7ff00000
 800d020:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d022:	1c51      	adds	r1, r2, #1
 800d024:	9119      	str	r1, [sp, #100]	@ 0x64
 800d026:	7852      	ldrb	r2, [r2, #1]
 800d028:	2a30      	cmp	r2, #48	@ 0x30
 800d02a:	d0f9      	beq.n	800d020 <_strtod_l+0x298>
 800d02c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d030:	2908      	cmp	r1, #8
 800d032:	f63f af78 	bhi.w	800cf26 <_strtod_l+0x19e>
 800d036:	3a30      	subs	r2, #48	@ 0x30
 800d038:	920e      	str	r2, [sp, #56]	@ 0x38
 800d03a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d03c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d03e:	f04f 080a 	mov.w	r8, #10
 800d042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d044:	1c56      	adds	r6, r2, #1
 800d046:	9619      	str	r6, [sp, #100]	@ 0x64
 800d048:	7852      	ldrb	r2, [r2, #1]
 800d04a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d04e:	f1be 0f09 	cmp.w	lr, #9
 800d052:	d939      	bls.n	800d0c8 <_strtod_l+0x340>
 800d054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d056:	1a76      	subs	r6, r6, r1
 800d058:	2e08      	cmp	r6, #8
 800d05a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d05e:	dc03      	bgt.n	800d068 <_strtod_l+0x2e0>
 800d060:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d062:	4588      	cmp	r8, r1
 800d064:	bfa8      	it	ge
 800d066:	4688      	movge	r8, r1
 800d068:	f1bc 0f00 	cmp.w	ip, #0
 800d06c:	d001      	beq.n	800d072 <_strtod_l+0x2ea>
 800d06e:	f1c8 0800 	rsb	r8, r8, #0
 800d072:	2d00      	cmp	r5, #0
 800d074:	d14e      	bne.n	800d114 <_strtod_l+0x38c>
 800d076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d078:	4308      	orrs	r0, r1
 800d07a:	f47f aebe 	bne.w	800cdfa <_strtod_l+0x72>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f47f aed6 	bne.w	800ce30 <_strtod_l+0xa8>
 800d084:	2a69      	cmp	r2, #105	@ 0x69
 800d086:	d028      	beq.n	800d0da <_strtod_l+0x352>
 800d088:	dc25      	bgt.n	800d0d6 <_strtod_l+0x34e>
 800d08a:	2a49      	cmp	r2, #73	@ 0x49
 800d08c:	d025      	beq.n	800d0da <_strtod_l+0x352>
 800d08e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d090:	f47f aece 	bne.w	800ce30 <_strtod_l+0xa8>
 800d094:	499b      	ldr	r1, [pc, #620]	@ (800d304 <_strtod_l+0x57c>)
 800d096:	a819      	add	r0, sp, #100	@ 0x64
 800d098:	f001 fafa 	bl	800e690 <__match>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	f43f aec7 	beq.w	800ce30 <_strtod_l+0xa8>
 800d0a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	2b28      	cmp	r3, #40	@ 0x28
 800d0a8:	d12e      	bne.n	800d108 <_strtod_l+0x380>
 800d0aa:	4997      	ldr	r1, [pc, #604]	@ (800d308 <_strtod_l+0x580>)
 800d0ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800d0ae:	a819      	add	r0, sp, #100	@ 0x64
 800d0b0:	f001 fb02 	bl	800e6b8 <__hexnan>
 800d0b4:	2805      	cmp	r0, #5
 800d0b6:	d127      	bne.n	800d108 <_strtod_l+0x380>
 800d0b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d0ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d0be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d0c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d0c6:	e698      	b.n	800cdfa <_strtod_l+0x72>
 800d0c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d0ca:	fb08 2101 	mla	r1, r8, r1, r2
 800d0ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d0d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d0d4:	e7b5      	b.n	800d042 <_strtod_l+0x2ba>
 800d0d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800d0d8:	e7da      	b.n	800d090 <_strtod_l+0x308>
 800d0da:	498c      	ldr	r1, [pc, #560]	@ (800d30c <_strtod_l+0x584>)
 800d0dc:	a819      	add	r0, sp, #100	@ 0x64
 800d0de:	f001 fad7 	bl	800e690 <__match>
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	f43f aea4 	beq.w	800ce30 <_strtod_l+0xa8>
 800d0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0ea:	4989      	ldr	r1, [pc, #548]	@ (800d310 <_strtod_l+0x588>)
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	a819      	add	r0, sp, #100	@ 0x64
 800d0f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0f2:	f001 facd 	bl	800e690 <__match>
 800d0f6:	b910      	cbnz	r0, 800d0fe <_strtod_l+0x376>
 800d0f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d320 <_strtod_l+0x598>
 800d102:	f04f 0a00 	mov.w	sl, #0
 800d106:	e678      	b.n	800cdfa <_strtod_l+0x72>
 800d108:	4882      	ldr	r0, [pc, #520]	@ (800d314 <_strtod_l+0x58c>)
 800d10a:	f000 fffd 	bl	800e108 <nan>
 800d10e:	ec5b ab10 	vmov	sl, fp, d0
 800d112:	e672      	b.n	800cdfa <_strtod_l+0x72>
 800d114:	eba8 0309 	sub.w	r3, r8, r9
 800d118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	2f00      	cmp	r7, #0
 800d11e:	bf08      	it	eq
 800d120:	462f      	moveq	r7, r5
 800d122:	2d10      	cmp	r5, #16
 800d124:	462c      	mov	r4, r5
 800d126:	bfa8      	it	ge
 800d128:	2410      	movge	r4, #16
 800d12a:	f7f3 f9f3 	bl	8000514 <__aeabi_ui2d>
 800d12e:	2d09      	cmp	r5, #9
 800d130:	4682      	mov	sl, r0
 800d132:	468b      	mov	fp, r1
 800d134:	dc13      	bgt.n	800d15e <_strtod_l+0x3d6>
 800d136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f43f ae5e 	beq.w	800cdfa <_strtod_l+0x72>
 800d13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d140:	dd78      	ble.n	800d234 <_strtod_l+0x4ac>
 800d142:	2b16      	cmp	r3, #22
 800d144:	dc5f      	bgt.n	800d206 <_strtod_l+0x47e>
 800d146:	4974      	ldr	r1, [pc, #464]	@ (800d318 <_strtod_l+0x590>)
 800d148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d150:	4652      	mov	r2, sl
 800d152:	465b      	mov	r3, fp
 800d154:	f7f3 fa58 	bl	8000608 <__aeabi_dmul>
 800d158:	4682      	mov	sl, r0
 800d15a:	468b      	mov	fp, r1
 800d15c:	e64d      	b.n	800cdfa <_strtod_l+0x72>
 800d15e:	4b6e      	ldr	r3, [pc, #440]	@ (800d318 <_strtod_l+0x590>)
 800d160:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d164:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d168:	f7f3 fa4e 	bl	8000608 <__aeabi_dmul>
 800d16c:	4682      	mov	sl, r0
 800d16e:	9808      	ldr	r0, [sp, #32]
 800d170:	468b      	mov	fp, r1
 800d172:	f7f3 f9cf 	bl	8000514 <__aeabi_ui2d>
 800d176:	4602      	mov	r2, r0
 800d178:	460b      	mov	r3, r1
 800d17a:	4650      	mov	r0, sl
 800d17c:	4659      	mov	r1, fp
 800d17e:	f7f3 f88d 	bl	800029c <__adddf3>
 800d182:	2d0f      	cmp	r5, #15
 800d184:	4682      	mov	sl, r0
 800d186:	468b      	mov	fp, r1
 800d188:	ddd5      	ble.n	800d136 <_strtod_l+0x3ae>
 800d18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18c:	1b2c      	subs	r4, r5, r4
 800d18e:	441c      	add	r4, r3
 800d190:	2c00      	cmp	r4, #0
 800d192:	f340 8096 	ble.w	800d2c2 <_strtod_l+0x53a>
 800d196:	f014 030f 	ands.w	r3, r4, #15
 800d19a:	d00a      	beq.n	800d1b2 <_strtod_l+0x42a>
 800d19c:	495e      	ldr	r1, [pc, #376]	@ (800d318 <_strtod_l+0x590>)
 800d19e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	465b      	mov	r3, fp
 800d1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1aa:	f7f3 fa2d 	bl	8000608 <__aeabi_dmul>
 800d1ae:	4682      	mov	sl, r0
 800d1b0:	468b      	mov	fp, r1
 800d1b2:	f034 040f 	bics.w	r4, r4, #15
 800d1b6:	d073      	beq.n	800d2a0 <_strtod_l+0x518>
 800d1b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d1bc:	dd48      	ble.n	800d250 <_strtod_l+0x4c8>
 800d1be:	2400      	movs	r4, #0
 800d1c0:	46a0      	mov	r8, r4
 800d1c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800d1c4:	46a1      	mov	r9, r4
 800d1c6:	9a05      	ldr	r2, [sp, #20]
 800d1c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d320 <_strtod_l+0x598>
 800d1cc:	2322      	movs	r3, #34	@ 0x22
 800d1ce:	6013      	str	r3, [r2, #0]
 800d1d0:	f04f 0a00 	mov.w	sl, #0
 800d1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f43f ae0f 	beq.w	800cdfa <_strtod_l+0x72>
 800d1dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1de:	9805      	ldr	r0, [sp, #20]
 800d1e0:	f7ff f942 	bl	800c468 <_Bfree>
 800d1e4:	9805      	ldr	r0, [sp, #20]
 800d1e6:	4649      	mov	r1, r9
 800d1e8:	f7ff f93e 	bl	800c468 <_Bfree>
 800d1ec:	9805      	ldr	r0, [sp, #20]
 800d1ee:	4641      	mov	r1, r8
 800d1f0:	f7ff f93a 	bl	800c468 <_Bfree>
 800d1f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d1f6:	9805      	ldr	r0, [sp, #20]
 800d1f8:	f7ff f936 	bl	800c468 <_Bfree>
 800d1fc:	9805      	ldr	r0, [sp, #20]
 800d1fe:	4621      	mov	r1, r4
 800d200:	f7ff f932 	bl	800c468 <_Bfree>
 800d204:	e5f9      	b.n	800cdfa <_strtod_l+0x72>
 800d206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d208:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d20c:	4293      	cmp	r3, r2
 800d20e:	dbbc      	blt.n	800d18a <_strtod_l+0x402>
 800d210:	4c41      	ldr	r4, [pc, #260]	@ (800d318 <_strtod_l+0x590>)
 800d212:	f1c5 050f 	rsb	r5, r5, #15
 800d216:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d21a:	4652      	mov	r2, sl
 800d21c:	465b      	mov	r3, fp
 800d21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d222:	f7f3 f9f1 	bl	8000608 <__aeabi_dmul>
 800d226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d228:	1b5d      	subs	r5, r3, r5
 800d22a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d22e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d232:	e78f      	b.n	800d154 <_strtod_l+0x3cc>
 800d234:	3316      	adds	r3, #22
 800d236:	dba8      	blt.n	800d18a <_strtod_l+0x402>
 800d238:	4b37      	ldr	r3, [pc, #220]	@ (800d318 <_strtod_l+0x590>)
 800d23a:	eba9 0808 	sub.w	r8, r9, r8
 800d23e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d242:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d246:	4650      	mov	r0, sl
 800d248:	4659      	mov	r1, fp
 800d24a:	f7f3 fb07 	bl	800085c <__aeabi_ddiv>
 800d24e:	e783      	b.n	800d158 <_strtod_l+0x3d0>
 800d250:	4b32      	ldr	r3, [pc, #200]	@ (800d31c <_strtod_l+0x594>)
 800d252:	9308      	str	r3, [sp, #32]
 800d254:	2300      	movs	r3, #0
 800d256:	1124      	asrs	r4, r4, #4
 800d258:	4650      	mov	r0, sl
 800d25a:	4659      	mov	r1, fp
 800d25c:	461e      	mov	r6, r3
 800d25e:	2c01      	cmp	r4, #1
 800d260:	dc21      	bgt.n	800d2a6 <_strtod_l+0x51e>
 800d262:	b10b      	cbz	r3, 800d268 <_strtod_l+0x4e0>
 800d264:	4682      	mov	sl, r0
 800d266:	468b      	mov	fp, r1
 800d268:	492c      	ldr	r1, [pc, #176]	@ (800d31c <_strtod_l+0x594>)
 800d26a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d26e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d272:	4652      	mov	r2, sl
 800d274:	465b      	mov	r3, fp
 800d276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d27a:	f7f3 f9c5 	bl	8000608 <__aeabi_dmul>
 800d27e:	4b28      	ldr	r3, [pc, #160]	@ (800d320 <_strtod_l+0x598>)
 800d280:	460a      	mov	r2, r1
 800d282:	400b      	ands	r3, r1
 800d284:	4927      	ldr	r1, [pc, #156]	@ (800d324 <_strtod_l+0x59c>)
 800d286:	428b      	cmp	r3, r1
 800d288:	4682      	mov	sl, r0
 800d28a:	d898      	bhi.n	800d1be <_strtod_l+0x436>
 800d28c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d290:	428b      	cmp	r3, r1
 800d292:	bf86      	itte	hi
 800d294:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d328 <_strtod_l+0x5a0>
 800d298:	f04f 3aff 	movhi.w	sl, #4294967295
 800d29c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	9308      	str	r3, [sp, #32]
 800d2a4:	e07a      	b.n	800d39c <_strtod_l+0x614>
 800d2a6:	07e2      	lsls	r2, r4, #31
 800d2a8:	d505      	bpl.n	800d2b6 <_strtod_l+0x52e>
 800d2aa:	9b08      	ldr	r3, [sp, #32]
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f7f3 f9aa 	bl	8000608 <__aeabi_dmul>
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	9a08      	ldr	r2, [sp, #32]
 800d2b8:	3208      	adds	r2, #8
 800d2ba:	3601      	adds	r6, #1
 800d2bc:	1064      	asrs	r4, r4, #1
 800d2be:	9208      	str	r2, [sp, #32]
 800d2c0:	e7cd      	b.n	800d25e <_strtod_l+0x4d6>
 800d2c2:	d0ed      	beq.n	800d2a0 <_strtod_l+0x518>
 800d2c4:	4264      	negs	r4, r4
 800d2c6:	f014 020f 	ands.w	r2, r4, #15
 800d2ca:	d00a      	beq.n	800d2e2 <_strtod_l+0x55a>
 800d2cc:	4b12      	ldr	r3, [pc, #72]	@ (800d318 <_strtod_l+0x590>)
 800d2ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f3 fabf 	bl	800085c <__aeabi_ddiv>
 800d2de:	4682      	mov	sl, r0
 800d2e0:	468b      	mov	fp, r1
 800d2e2:	1124      	asrs	r4, r4, #4
 800d2e4:	d0dc      	beq.n	800d2a0 <_strtod_l+0x518>
 800d2e6:	2c1f      	cmp	r4, #31
 800d2e8:	dd20      	ble.n	800d32c <_strtod_l+0x5a4>
 800d2ea:	2400      	movs	r4, #0
 800d2ec:	46a0      	mov	r8, r4
 800d2ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800d2f0:	46a1      	mov	r9, r4
 800d2f2:	9a05      	ldr	r2, [sp, #20]
 800d2f4:	2322      	movs	r3, #34	@ 0x22
 800d2f6:	f04f 0a00 	mov.w	sl, #0
 800d2fa:	f04f 0b00 	mov.w	fp, #0
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	e768      	b.n	800d1d4 <_strtod_l+0x44c>
 800d302:	bf00      	nop
 800d304:	0800e9b1 	.word	0x0800e9b1
 800d308:	0800ebc4 	.word	0x0800ebc4
 800d30c:	0800e9a9 	.word	0x0800e9a9
 800d310:	0800e9e0 	.word	0x0800e9e0
 800d314:	0800ed6d 	.word	0x0800ed6d
 800d318:	0800eaf8 	.word	0x0800eaf8
 800d31c:	0800ead0 	.word	0x0800ead0
 800d320:	7ff00000 	.word	0x7ff00000
 800d324:	7ca00000 	.word	0x7ca00000
 800d328:	7fefffff 	.word	0x7fefffff
 800d32c:	f014 0310 	ands.w	r3, r4, #16
 800d330:	bf18      	it	ne
 800d332:	236a      	movne	r3, #106	@ 0x6a
 800d334:	4ea9      	ldr	r6, [pc, #676]	@ (800d5dc <_strtod_l+0x854>)
 800d336:	9308      	str	r3, [sp, #32]
 800d338:	4650      	mov	r0, sl
 800d33a:	4659      	mov	r1, fp
 800d33c:	2300      	movs	r3, #0
 800d33e:	07e2      	lsls	r2, r4, #31
 800d340:	d504      	bpl.n	800d34c <_strtod_l+0x5c4>
 800d342:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d346:	f7f3 f95f 	bl	8000608 <__aeabi_dmul>
 800d34a:	2301      	movs	r3, #1
 800d34c:	1064      	asrs	r4, r4, #1
 800d34e:	f106 0608 	add.w	r6, r6, #8
 800d352:	d1f4      	bne.n	800d33e <_strtod_l+0x5b6>
 800d354:	b10b      	cbz	r3, 800d35a <_strtod_l+0x5d2>
 800d356:	4682      	mov	sl, r0
 800d358:	468b      	mov	fp, r1
 800d35a:	9b08      	ldr	r3, [sp, #32]
 800d35c:	b1b3      	cbz	r3, 800d38c <_strtod_l+0x604>
 800d35e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d362:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d366:	2b00      	cmp	r3, #0
 800d368:	4659      	mov	r1, fp
 800d36a:	dd0f      	ble.n	800d38c <_strtod_l+0x604>
 800d36c:	2b1f      	cmp	r3, #31
 800d36e:	dd55      	ble.n	800d41c <_strtod_l+0x694>
 800d370:	2b34      	cmp	r3, #52	@ 0x34
 800d372:	bfde      	ittt	le
 800d374:	f04f 33ff 	movle.w	r3, #4294967295
 800d378:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d37c:	4093      	lslle	r3, r2
 800d37e:	f04f 0a00 	mov.w	sl, #0
 800d382:	bfcc      	ite	gt
 800d384:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d388:	ea03 0b01 	andle.w	fp, r3, r1
 800d38c:	2200      	movs	r2, #0
 800d38e:	2300      	movs	r3, #0
 800d390:	4650      	mov	r0, sl
 800d392:	4659      	mov	r1, fp
 800d394:	f7f3 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d1a6      	bne.n	800d2ea <_strtod_l+0x562>
 800d39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d3a2:	9805      	ldr	r0, [sp, #20]
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	463a      	mov	r2, r7
 800d3a8:	f7ff f8c6 	bl	800c538 <__s2b>
 800d3ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	f43f af05 	beq.w	800d1be <_strtod_l+0x436>
 800d3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	eba9 0308 	sub.w	r3, r9, r8
 800d3bc:	bfa8      	it	ge
 800d3be:	2300      	movge	r3, #0
 800d3c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3c2:	2400      	movs	r4, #0
 800d3c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d3c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800d3ca:	46a0      	mov	r8, r4
 800d3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ce:	9805      	ldr	r0, [sp, #20]
 800d3d0:	6859      	ldr	r1, [r3, #4]
 800d3d2:	f7ff f809 	bl	800c3e8 <_Balloc>
 800d3d6:	4681      	mov	r9, r0
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	f43f aef4 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d3de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3e0:	691a      	ldr	r2, [r3, #16]
 800d3e2:	3202      	adds	r2, #2
 800d3e4:	f103 010c 	add.w	r1, r3, #12
 800d3e8:	0092      	lsls	r2, r2, #2
 800d3ea:	300c      	adds	r0, #12
 800d3ec:	f7fe f89b 	bl	800b526 <memcpy>
 800d3f0:	ec4b ab10 	vmov	d0, sl, fp
 800d3f4:	9805      	ldr	r0, [sp, #20]
 800d3f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d3f8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d3fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d3fe:	f7ff fbd7 	bl	800cbb0 <__d2b>
 800d402:	901a      	str	r0, [sp, #104]	@ 0x68
 800d404:	2800      	cmp	r0, #0
 800d406:	f43f aede 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	2101      	movs	r1, #1
 800d40e:	f7ff f929 	bl	800c664 <__i2b>
 800d412:	4680      	mov	r8, r0
 800d414:	b948      	cbnz	r0, 800d42a <_strtod_l+0x6a2>
 800d416:	f04f 0800 	mov.w	r8, #0
 800d41a:	e6d4      	b.n	800d1c6 <_strtod_l+0x43e>
 800d41c:	f04f 32ff 	mov.w	r2, #4294967295
 800d420:	fa02 f303 	lsl.w	r3, r2, r3
 800d424:	ea03 0a0a 	and.w	sl, r3, sl
 800d428:	e7b0      	b.n	800d38c <_strtod_l+0x604>
 800d42a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d42c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d42e:	2d00      	cmp	r5, #0
 800d430:	bfab      	itete	ge
 800d432:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d434:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d436:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d438:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d43a:	bfac      	ite	ge
 800d43c:	18ef      	addge	r7, r5, r3
 800d43e:	1b5e      	sublt	r6, r3, r5
 800d440:	9b08      	ldr	r3, [sp, #32]
 800d442:	1aed      	subs	r5, r5, r3
 800d444:	4415      	add	r5, r2
 800d446:	4b66      	ldr	r3, [pc, #408]	@ (800d5e0 <_strtod_l+0x858>)
 800d448:	3d01      	subs	r5, #1
 800d44a:	429d      	cmp	r5, r3
 800d44c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d450:	da50      	bge.n	800d4f4 <_strtod_l+0x76c>
 800d452:	1b5b      	subs	r3, r3, r5
 800d454:	2b1f      	cmp	r3, #31
 800d456:	eba2 0203 	sub.w	r2, r2, r3
 800d45a:	f04f 0101 	mov.w	r1, #1
 800d45e:	dc3d      	bgt.n	800d4dc <_strtod_l+0x754>
 800d460:	fa01 f303 	lsl.w	r3, r1, r3
 800d464:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d466:	2300      	movs	r3, #0
 800d468:	9310      	str	r3, [sp, #64]	@ 0x40
 800d46a:	18bd      	adds	r5, r7, r2
 800d46c:	9b08      	ldr	r3, [sp, #32]
 800d46e:	42af      	cmp	r7, r5
 800d470:	4416      	add	r6, r2
 800d472:	441e      	add	r6, r3
 800d474:	463b      	mov	r3, r7
 800d476:	bfa8      	it	ge
 800d478:	462b      	movge	r3, r5
 800d47a:	42b3      	cmp	r3, r6
 800d47c:	bfa8      	it	ge
 800d47e:	4633      	movge	r3, r6
 800d480:	2b00      	cmp	r3, #0
 800d482:	bfc2      	ittt	gt
 800d484:	1aed      	subgt	r5, r5, r3
 800d486:	1af6      	subgt	r6, r6, r3
 800d488:	1aff      	subgt	r7, r7, r3
 800d48a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	dd16      	ble.n	800d4be <_strtod_l+0x736>
 800d490:	4641      	mov	r1, r8
 800d492:	9805      	ldr	r0, [sp, #20]
 800d494:	461a      	mov	r2, r3
 800d496:	f7ff f9a5 	bl	800c7e4 <__pow5mult>
 800d49a:	4680      	mov	r8, r0
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d0ba      	beq.n	800d416 <_strtod_l+0x68e>
 800d4a0:	4601      	mov	r1, r0
 800d4a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d4a4:	9805      	ldr	r0, [sp, #20]
 800d4a6:	f7ff f8f3 	bl	800c690 <__multiply>
 800d4aa:	900e      	str	r0, [sp, #56]	@ 0x38
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	f43f ae8a 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d4b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4b4:	9805      	ldr	r0, [sp, #20]
 800d4b6:	f7fe ffd7 	bl	800c468 <_Bfree>
 800d4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4be:	2d00      	cmp	r5, #0
 800d4c0:	dc1d      	bgt.n	800d4fe <_strtod_l+0x776>
 800d4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	dd23      	ble.n	800d510 <_strtod_l+0x788>
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d4cc:	9805      	ldr	r0, [sp, #20]
 800d4ce:	f7ff f989 	bl	800c7e4 <__pow5mult>
 800d4d2:	4681      	mov	r9, r0
 800d4d4:	b9e0      	cbnz	r0, 800d510 <_strtod_l+0x788>
 800d4d6:	f04f 0900 	mov.w	r9, #0
 800d4da:	e674      	b.n	800d1c6 <_strtod_l+0x43e>
 800d4dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d4e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d4e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d4e8:	35e2      	adds	r5, #226	@ 0xe2
 800d4ea:	fa01 f305 	lsl.w	r3, r1, r5
 800d4ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d4f2:	e7ba      	b.n	800d46a <_strtod_l+0x6e2>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4fc:	e7b5      	b.n	800d46a <_strtod_l+0x6e2>
 800d4fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d500:	9805      	ldr	r0, [sp, #20]
 800d502:	462a      	mov	r2, r5
 800d504:	f7ff f9c8 	bl	800c898 <__lshift>
 800d508:	901a      	str	r0, [sp, #104]	@ 0x68
 800d50a:	2800      	cmp	r0, #0
 800d50c:	d1d9      	bne.n	800d4c2 <_strtod_l+0x73a>
 800d50e:	e65a      	b.n	800d1c6 <_strtod_l+0x43e>
 800d510:	2e00      	cmp	r6, #0
 800d512:	dd07      	ble.n	800d524 <_strtod_l+0x79c>
 800d514:	4649      	mov	r1, r9
 800d516:	9805      	ldr	r0, [sp, #20]
 800d518:	4632      	mov	r2, r6
 800d51a:	f7ff f9bd 	bl	800c898 <__lshift>
 800d51e:	4681      	mov	r9, r0
 800d520:	2800      	cmp	r0, #0
 800d522:	d0d8      	beq.n	800d4d6 <_strtod_l+0x74e>
 800d524:	2f00      	cmp	r7, #0
 800d526:	dd08      	ble.n	800d53a <_strtod_l+0x7b2>
 800d528:	4641      	mov	r1, r8
 800d52a:	9805      	ldr	r0, [sp, #20]
 800d52c:	463a      	mov	r2, r7
 800d52e:	f7ff f9b3 	bl	800c898 <__lshift>
 800d532:	4680      	mov	r8, r0
 800d534:	2800      	cmp	r0, #0
 800d536:	f43f ae46 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d53a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d53c:	9805      	ldr	r0, [sp, #20]
 800d53e:	464a      	mov	r2, r9
 800d540:	f7ff fa32 	bl	800c9a8 <__mdiff>
 800d544:	4604      	mov	r4, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	f43f ae3d 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d54c:	68c3      	ldr	r3, [r0, #12]
 800d54e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d550:	2300      	movs	r3, #0
 800d552:	60c3      	str	r3, [r0, #12]
 800d554:	4641      	mov	r1, r8
 800d556:	f7ff fa0b 	bl	800c970 <__mcmp>
 800d55a:	2800      	cmp	r0, #0
 800d55c:	da46      	bge.n	800d5ec <_strtod_l+0x864>
 800d55e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d560:	ea53 030a 	orrs.w	r3, r3, sl
 800d564:	d16c      	bne.n	800d640 <_strtod_l+0x8b8>
 800d566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d168      	bne.n	800d640 <_strtod_l+0x8b8>
 800d56e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d572:	0d1b      	lsrs	r3, r3, #20
 800d574:	051b      	lsls	r3, r3, #20
 800d576:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d57a:	d961      	bls.n	800d640 <_strtod_l+0x8b8>
 800d57c:	6963      	ldr	r3, [r4, #20]
 800d57e:	b913      	cbnz	r3, 800d586 <_strtod_l+0x7fe>
 800d580:	6923      	ldr	r3, [r4, #16]
 800d582:	2b01      	cmp	r3, #1
 800d584:	dd5c      	ble.n	800d640 <_strtod_l+0x8b8>
 800d586:	4621      	mov	r1, r4
 800d588:	2201      	movs	r2, #1
 800d58a:	9805      	ldr	r0, [sp, #20]
 800d58c:	f7ff f984 	bl	800c898 <__lshift>
 800d590:	4641      	mov	r1, r8
 800d592:	4604      	mov	r4, r0
 800d594:	f7ff f9ec 	bl	800c970 <__mcmp>
 800d598:	2800      	cmp	r0, #0
 800d59a:	dd51      	ble.n	800d640 <_strtod_l+0x8b8>
 800d59c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5a0:	9a08      	ldr	r2, [sp, #32]
 800d5a2:	0d1b      	lsrs	r3, r3, #20
 800d5a4:	051b      	lsls	r3, r3, #20
 800d5a6:	2a00      	cmp	r2, #0
 800d5a8:	d06b      	beq.n	800d682 <_strtod_l+0x8fa>
 800d5aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d5ae:	d868      	bhi.n	800d682 <_strtod_l+0x8fa>
 800d5b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d5b4:	f67f ae9d 	bls.w	800d2f2 <_strtod_l+0x56a>
 800d5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e4 <_strtod_l+0x85c>)
 800d5ba:	4650      	mov	r0, sl
 800d5bc:	4659      	mov	r1, fp
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f7f3 f822 	bl	8000608 <__aeabi_dmul>
 800d5c4:	4b08      	ldr	r3, [pc, #32]	@ (800d5e8 <_strtod_l+0x860>)
 800d5c6:	400b      	ands	r3, r1
 800d5c8:	4682      	mov	sl, r0
 800d5ca:	468b      	mov	fp, r1
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f47f ae05 	bne.w	800d1dc <_strtod_l+0x454>
 800d5d2:	9a05      	ldr	r2, [sp, #20]
 800d5d4:	2322      	movs	r3, #34	@ 0x22
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	e600      	b.n	800d1dc <_strtod_l+0x454>
 800d5da:	bf00      	nop
 800d5dc:	0800ebf0 	.word	0x0800ebf0
 800d5e0:	fffffc02 	.word	0xfffffc02
 800d5e4:	39500000 	.word	0x39500000
 800d5e8:	7ff00000 	.word	0x7ff00000
 800d5ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d5f0:	d165      	bne.n	800d6be <_strtod_l+0x936>
 800d5f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d5f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5f8:	b35a      	cbz	r2, 800d652 <_strtod_l+0x8ca>
 800d5fa:	4a9f      	ldr	r2, [pc, #636]	@ (800d878 <_strtod_l+0xaf0>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d12b      	bne.n	800d658 <_strtod_l+0x8d0>
 800d600:	9b08      	ldr	r3, [sp, #32]
 800d602:	4651      	mov	r1, sl
 800d604:	b303      	cbz	r3, 800d648 <_strtod_l+0x8c0>
 800d606:	4b9d      	ldr	r3, [pc, #628]	@ (800d87c <_strtod_l+0xaf4>)
 800d608:	465a      	mov	r2, fp
 800d60a:	4013      	ands	r3, r2
 800d60c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d610:	f04f 32ff 	mov.w	r2, #4294967295
 800d614:	d81b      	bhi.n	800d64e <_strtod_l+0x8c6>
 800d616:	0d1b      	lsrs	r3, r3, #20
 800d618:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d61c:	fa02 f303 	lsl.w	r3, r2, r3
 800d620:	4299      	cmp	r1, r3
 800d622:	d119      	bne.n	800d658 <_strtod_l+0x8d0>
 800d624:	4b96      	ldr	r3, [pc, #600]	@ (800d880 <_strtod_l+0xaf8>)
 800d626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d628:	429a      	cmp	r2, r3
 800d62a:	d102      	bne.n	800d632 <_strtod_l+0x8aa>
 800d62c:	3101      	adds	r1, #1
 800d62e:	f43f adca 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d632:	4b92      	ldr	r3, [pc, #584]	@ (800d87c <_strtod_l+0xaf4>)
 800d634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d636:	401a      	ands	r2, r3
 800d638:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d63c:	f04f 0a00 	mov.w	sl, #0
 800d640:	9b08      	ldr	r3, [sp, #32]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1b8      	bne.n	800d5b8 <_strtod_l+0x830>
 800d646:	e5c9      	b.n	800d1dc <_strtod_l+0x454>
 800d648:	f04f 33ff 	mov.w	r3, #4294967295
 800d64c:	e7e8      	b.n	800d620 <_strtod_l+0x898>
 800d64e:	4613      	mov	r3, r2
 800d650:	e7e6      	b.n	800d620 <_strtod_l+0x898>
 800d652:	ea53 030a 	orrs.w	r3, r3, sl
 800d656:	d0a1      	beq.n	800d59c <_strtod_l+0x814>
 800d658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d65a:	b1db      	cbz	r3, 800d694 <_strtod_l+0x90c>
 800d65c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d65e:	4213      	tst	r3, r2
 800d660:	d0ee      	beq.n	800d640 <_strtod_l+0x8b8>
 800d662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d664:	9a08      	ldr	r2, [sp, #32]
 800d666:	4650      	mov	r0, sl
 800d668:	4659      	mov	r1, fp
 800d66a:	b1bb      	cbz	r3, 800d69c <_strtod_l+0x914>
 800d66c:	f7ff fb6e 	bl	800cd4c <sulp>
 800d670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d674:	ec53 2b10 	vmov	r2, r3, d0
 800d678:	f7f2 fe10 	bl	800029c <__adddf3>
 800d67c:	4682      	mov	sl, r0
 800d67e:	468b      	mov	fp, r1
 800d680:	e7de      	b.n	800d640 <_strtod_l+0x8b8>
 800d682:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d686:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d68a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d68e:	f04f 3aff 	mov.w	sl, #4294967295
 800d692:	e7d5      	b.n	800d640 <_strtod_l+0x8b8>
 800d694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d696:	ea13 0f0a 	tst.w	r3, sl
 800d69a:	e7e1      	b.n	800d660 <_strtod_l+0x8d8>
 800d69c:	f7ff fb56 	bl	800cd4c <sulp>
 800d6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6a4:	ec53 2b10 	vmov	r2, r3, d0
 800d6a8:	f7f2 fdf6 	bl	8000298 <__aeabi_dsub>
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4682      	mov	sl, r0
 800d6b2:	468b      	mov	fp, r1
 800d6b4:	f7f3 fa10 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0c1      	beq.n	800d640 <_strtod_l+0x8b8>
 800d6bc:	e619      	b.n	800d2f2 <_strtod_l+0x56a>
 800d6be:	4641      	mov	r1, r8
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f7ff facd 	bl	800cc60 <__ratio>
 800d6c6:	ec57 6b10 	vmov	r6, r7, d0
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f3 fa14 	bl	8000b00 <__aeabi_dcmple>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d06f      	beq.n	800d7bc <_strtod_l+0xa34>
 800d6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d17a      	bne.n	800d7d8 <_strtod_l+0xa50>
 800d6e2:	f1ba 0f00 	cmp.w	sl, #0
 800d6e6:	d158      	bne.n	800d79a <_strtod_l+0xa12>
 800d6e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d15a      	bne.n	800d7a8 <_strtod_l+0xa20>
 800d6f2:	4b64      	ldr	r3, [pc, #400]	@ (800d884 <_strtod_l+0xafc>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	4639      	mov	r1, r7
 800d6fa:	f7f3 f9f7 	bl	8000aec <__aeabi_dcmplt>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d159      	bne.n	800d7b6 <_strtod_l+0xa2e>
 800d702:	4630      	mov	r0, r6
 800d704:	4639      	mov	r1, r7
 800d706:	4b60      	ldr	r3, [pc, #384]	@ (800d888 <_strtod_l+0xb00>)
 800d708:	2200      	movs	r2, #0
 800d70a:	f7f2 ff7d 	bl	8000608 <__aeabi_dmul>
 800d70e:	4606      	mov	r6, r0
 800d710:	460f      	mov	r7, r1
 800d712:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d716:	9606      	str	r6, [sp, #24]
 800d718:	9307      	str	r3, [sp, #28]
 800d71a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d71e:	4d57      	ldr	r5, [pc, #348]	@ (800d87c <_strtod_l+0xaf4>)
 800d720:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d726:	401d      	ands	r5, r3
 800d728:	4b58      	ldr	r3, [pc, #352]	@ (800d88c <_strtod_l+0xb04>)
 800d72a:	429d      	cmp	r5, r3
 800d72c:	f040 80b2 	bne.w	800d894 <_strtod_l+0xb0c>
 800d730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d732:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d736:	ec4b ab10 	vmov	d0, sl, fp
 800d73a:	f7ff f9c9 	bl	800cad0 <__ulp>
 800d73e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d742:	ec51 0b10 	vmov	r0, r1, d0
 800d746:	f7f2 ff5f 	bl	8000608 <__aeabi_dmul>
 800d74a:	4652      	mov	r2, sl
 800d74c:	465b      	mov	r3, fp
 800d74e:	f7f2 fda5 	bl	800029c <__adddf3>
 800d752:	460b      	mov	r3, r1
 800d754:	4949      	ldr	r1, [pc, #292]	@ (800d87c <_strtod_l+0xaf4>)
 800d756:	4a4e      	ldr	r2, [pc, #312]	@ (800d890 <_strtod_l+0xb08>)
 800d758:	4019      	ands	r1, r3
 800d75a:	4291      	cmp	r1, r2
 800d75c:	4682      	mov	sl, r0
 800d75e:	d942      	bls.n	800d7e6 <_strtod_l+0xa5e>
 800d760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d762:	4b47      	ldr	r3, [pc, #284]	@ (800d880 <_strtod_l+0xaf8>)
 800d764:	429a      	cmp	r2, r3
 800d766:	d103      	bne.n	800d770 <_strtod_l+0x9e8>
 800d768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d76a:	3301      	adds	r3, #1
 800d76c:	f43f ad2b 	beq.w	800d1c6 <_strtod_l+0x43e>
 800d770:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d880 <_strtod_l+0xaf8>
 800d774:	f04f 3aff 	mov.w	sl, #4294967295
 800d778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d77a:	9805      	ldr	r0, [sp, #20]
 800d77c:	f7fe fe74 	bl	800c468 <_Bfree>
 800d780:	9805      	ldr	r0, [sp, #20]
 800d782:	4649      	mov	r1, r9
 800d784:	f7fe fe70 	bl	800c468 <_Bfree>
 800d788:	9805      	ldr	r0, [sp, #20]
 800d78a:	4641      	mov	r1, r8
 800d78c:	f7fe fe6c 	bl	800c468 <_Bfree>
 800d790:	9805      	ldr	r0, [sp, #20]
 800d792:	4621      	mov	r1, r4
 800d794:	f7fe fe68 	bl	800c468 <_Bfree>
 800d798:	e618      	b.n	800d3cc <_strtod_l+0x644>
 800d79a:	f1ba 0f01 	cmp.w	sl, #1
 800d79e:	d103      	bne.n	800d7a8 <_strtod_l+0xa20>
 800d7a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f43f ada5 	beq.w	800d2f2 <_strtod_l+0x56a>
 800d7a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d858 <_strtod_l+0xad0>
 800d7ac:	4f35      	ldr	r7, [pc, #212]	@ (800d884 <_strtod_l+0xafc>)
 800d7ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7b2:	2600      	movs	r6, #0
 800d7b4:	e7b1      	b.n	800d71a <_strtod_l+0x992>
 800d7b6:	4f34      	ldr	r7, [pc, #208]	@ (800d888 <_strtod_l+0xb00>)
 800d7b8:	2600      	movs	r6, #0
 800d7ba:	e7aa      	b.n	800d712 <_strtod_l+0x98a>
 800d7bc:	4b32      	ldr	r3, [pc, #200]	@ (800d888 <_strtod_l+0xb00>)
 800d7be:	4630      	mov	r0, r6
 800d7c0:	4639      	mov	r1, r7
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f7f2 ff20 	bl	8000608 <__aeabi_dmul>
 800d7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d09f      	beq.n	800d712 <_strtod_l+0x98a>
 800d7d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d7d6:	e7a0      	b.n	800d71a <_strtod_l+0x992>
 800d7d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d860 <_strtod_l+0xad8>
 800d7dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d7e0:	ec57 6b17 	vmov	r6, r7, d7
 800d7e4:	e799      	b.n	800d71a <_strtod_l+0x992>
 800d7e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d7ea:	9b08      	ldr	r3, [sp, #32]
 800d7ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1c1      	bne.n	800d778 <_strtod_l+0x9f0>
 800d7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d7f8:	0d1b      	lsrs	r3, r3, #20
 800d7fa:	051b      	lsls	r3, r3, #20
 800d7fc:	429d      	cmp	r5, r3
 800d7fe:	d1bb      	bne.n	800d778 <_strtod_l+0x9f0>
 800d800:	4630      	mov	r0, r6
 800d802:	4639      	mov	r1, r7
 800d804:	f7f3 fa60 	bl	8000cc8 <__aeabi_d2lz>
 800d808:	f7f2 fed0 	bl	80005ac <__aeabi_l2d>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4630      	mov	r0, r6
 800d812:	4639      	mov	r1, r7
 800d814:	f7f2 fd40 	bl	8000298 <__aeabi_dsub>
 800d818:	460b      	mov	r3, r1
 800d81a:	4602      	mov	r2, r0
 800d81c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d820:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d826:	ea46 060a 	orr.w	r6, r6, sl
 800d82a:	431e      	orrs	r6, r3
 800d82c:	d06f      	beq.n	800d90e <_strtod_l+0xb86>
 800d82e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d868 <_strtod_l+0xae0>)
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	f7f3 f95a 	bl	8000aec <__aeabi_dcmplt>
 800d838:	2800      	cmp	r0, #0
 800d83a:	f47f accf 	bne.w	800d1dc <_strtod_l+0x454>
 800d83e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d870 <_strtod_l+0xae8>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d848:	f7f3 f96e 	bl	8000b28 <__aeabi_dcmpgt>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d093      	beq.n	800d778 <_strtod_l+0x9f0>
 800d850:	e4c4      	b.n	800d1dc <_strtod_l+0x454>
 800d852:	bf00      	nop
 800d854:	f3af 8000 	nop.w
 800d858:	00000000 	.word	0x00000000
 800d85c:	bff00000 	.word	0xbff00000
 800d860:	00000000 	.word	0x00000000
 800d864:	3ff00000 	.word	0x3ff00000
 800d868:	94a03595 	.word	0x94a03595
 800d86c:	3fdfffff 	.word	0x3fdfffff
 800d870:	35afe535 	.word	0x35afe535
 800d874:	3fe00000 	.word	0x3fe00000
 800d878:	000fffff 	.word	0x000fffff
 800d87c:	7ff00000 	.word	0x7ff00000
 800d880:	7fefffff 	.word	0x7fefffff
 800d884:	3ff00000 	.word	0x3ff00000
 800d888:	3fe00000 	.word	0x3fe00000
 800d88c:	7fe00000 	.word	0x7fe00000
 800d890:	7c9fffff 	.word	0x7c9fffff
 800d894:	9b08      	ldr	r3, [sp, #32]
 800d896:	b323      	cbz	r3, 800d8e2 <_strtod_l+0xb5a>
 800d898:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d89c:	d821      	bhi.n	800d8e2 <_strtod_l+0xb5a>
 800d89e:	a328      	add	r3, pc, #160	@ (adr r3, 800d940 <_strtod_l+0xbb8>)
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	f7f3 f92a 	bl	8000b00 <__aeabi_dcmple>
 800d8ac:	b1a0      	cbz	r0, 800d8d8 <_strtod_l+0xb50>
 800d8ae:	4639      	mov	r1, r7
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f7f3 f981 	bl	8000bb8 <__aeabi_d2uiz>
 800d8b6:	2801      	cmp	r0, #1
 800d8b8:	bf38      	it	cc
 800d8ba:	2001      	movcc	r0, #1
 800d8bc:	f7f2 fe2a 	bl	8000514 <__aeabi_ui2d>
 800d8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d8c2:	4606      	mov	r6, r0
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	b9fb      	cbnz	r3, 800d908 <_strtod_l+0xb80>
 800d8c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d8cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800d8ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d8d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d8d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d8da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d8de:	1b5b      	subs	r3, r3, r5
 800d8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d8e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d8ea:	f7ff f8f1 	bl	800cad0 <__ulp>
 800d8ee:	4650      	mov	r0, sl
 800d8f0:	ec53 2b10 	vmov	r2, r3, d0
 800d8f4:	4659      	mov	r1, fp
 800d8f6:	f7f2 fe87 	bl	8000608 <__aeabi_dmul>
 800d8fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d8fe:	f7f2 fccd 	bl	800029c <__adddf3>
 800d902:	4682      	mov	sl, r0
 800d904:	468b      	mov	fp, r1
 800d906:	e770      	b.n	800d7ea <_strtod_l+0xa62>
 800d908:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d90c:	e7e0      	b.n	800d8d0 <_strtod_l+0xb48>
 800d90e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d948 <_strtod_l+0xbc0>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	f7f3 f8ea 	bl	8000aec <__aeabi_dcmplt>
 800d918:	e798      	b.n	800d84c <_strtod_l+0xac4>
 800d91a:	2300      	movs	r3, #0
 800d91c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d91e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d922:	6013      	str	r3, [r2, #0]
 800d924:	f7ff ba6d 	b.w	800ce02 <_strtod_l+0x7a>
 800d928:	2a65      	cmp	r2, #101	@ 0x65
 800d92a:	f43f ab66 	beq.w	800cffa <_strtod_l+0x272>
 800d92e:	2a45      	cmp	r2, #69	@ 0x45
 800d930:	f43f ab63 	beq.w	800cffa <_strtod_l+0x272>
 800d934:	2301      	movs	r3, #1
 800d936:	f7ff bb9e 	b.w	800d076 <_strtod_l+0x2ee>
 800d93a:	bf00      	nop
 800d93c:	f3af 8000 	nop.w
 800d940:	ffc00000 	.word	0xffc00000
 800d944:	41dfffff 	.word	0x41dfffff
 800d948:	94a03595 	.word	0x94a03595
 800d94c:	3fcfffff 	.word	0x3fcfffff

0800d950 <_strtod_r>:
 800d950:	4b01      	ldr	r3, [pc, #4]	@ (800d958 <_strtod_r+0x8>)
 800d952:	f7ff ba19 	b.w	800cd88 <_strtod_l>
 800d956:	bf00      	nop
 800d958:	20000328 	.word	0x20000328

0800d95c <_strtol_l.constprop.0>:
 800d95c:	2b24      	cmp	r3, #36	@ 0x24
 800d95e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d962:	4686      	mov	lr, r0
 800d964:	4690      	mov	r8, r2
 800d966:	d801      	bhi.n	800d96c <_strtol_l.constprop.0+0x10>
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d106      	bne.n	800d97a <_strtol_l.constprop.0+0x1e>
 800d96c:	f7fd fda6 	bl	800b4bc <__errno>
 800d970:	2316      	movs	r3, #22
 800d972:	6003      	str	r3, [r0, #0]
 800d974:	2000      	movs	r0, #0
 800d976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97a:	4834      	ldr	r0, [pc, #208]	@ (800da4c <_strtol_l.constprop.0+0xf0>)
 800d97c:	460d      	mov	r5, r1
 800d97e:	462a      	mov	r2, r5
 800d980:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d984:	5d06      	ldrb	r6, [r0, r4]
 800d986:	f016 0608 	ands.w	r6, r6, #8
 800d98a:	d1f8      	bne.n	800d97e <_strtol_l.constprop.0+0x22>
 800d98c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d98e:	d12d      	bne.n	800d9ec <_strtol_l.constprop.0+0x90>
 800d990:	782c      	ldrb	r4, [r5, #0]
 800d992:	2601      	movs	r6, #1
 800d994:	1c95      	adds	r5, r2, #2
 800d996:	f033 0210 	bics.w	r2, r3, #16
 800d99a:	d109      	bne.n	800d9b0 <_strtol_l.constprop.0+0x54>
 800d99c:	2c30      	cmp	r4, #48	@ 0x30
 800d99e:	d12a      	bne.n	800d9f6 <_strtol_l.constprop.0+0x9a>
 800d9a0:	782a      	ldrb	r2, [r5, #0]
 800d9a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d9a6:	2a58      	cmp	r2, #88	@ 0x58
 800d9a8:	d125      	bne.n	800d9f6 <_strtol_l.constprop.0+0x9a>
 800d9aa:	786c      	ldrb	r4, [r5, #1]
 800d9ac:	2310      	movs	r3, #16
 800d9ae:	3502      	adds	r5, #2
 800d9b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d9b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	fbbc f9f3 	udiv	r9, ip, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d9c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d9c8:	2f09      	cmp	r7, #9
 800d9ca:	d81b      	bhi.n	800da04 <_strtol_l.constprop.0+0xa8>
 800d9cc:	463c      	mov	r4, r7
 800d9ce:	42a3      	cmp	r3, r4
 800d9d0:	dd27      	ble.n	800da22 <_strtol_l.constprop.0+0xc6>
 800d9d2:	1c57      	adds	r7, r2, #1
 800d9d4:	d007      	beq.n	800d9e6 <_strtol_l.constprop.0+0x8a>
 800d9d6:	4581      	cmp	r9, r0
 800d9d8:	d320      	bcc.n	800da1c <_strtol_l.constprop.0+0xc0>
 800d9da:	d101      	bne.n	800d9e0 <_strtol_l.constprop.0+0x84>
 800d9dc:	45a2      	cmp	sl, r4
 800d9de:	db1d      	blt.n	800da1c <_strtol_l.constprop.0+0xc0>
 800d9e0:	fb00 4003 	mla	r0, r0, r3, r4
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9ea:	e7eb      	b.n	800d9c4 <_strtol_l.constprop.0+0x68>
 800d9ec:	2c2b      	cmp	r4, #43	@ 0x2b
 800d9ee:	bf04      	itt	eq
 800d9f0:	782c      	ldrbeq	r4, [r5, #0]
 800d9f2:	1c95      	addeq	r5, r2, #2
 800d9f4:	e7cf      	b.n	800d996 <_strtol_l.constprop.0+0x3a>
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1da      	bne.n	800d9b0 <_strtol_l.constprop.0+0x54>
 800d9fa:	2c30      	cmp	r4, #48	@ 0x30
 800d9fc:	bf0c      	ite	eq
 800d9fe:	2308      	moveq	r3, #8
 800da00:	230a      	movne	r3, #10
 800da02:	e7d5      	b.n	800d9b0 <_strtol_l.constprop.0+0x54>
 800da04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800da08:	2f19      	cmp	r7, #25
 800da0a:	d801      	bhi.n	800da10 <_strtol_l.constprop.0+0xb4>
 800da0c:	3c37      	subs	r4, #55	@ 0x37
 800da0e:	e7de      	b.n	800d9ce <_strtol_l.constprop.0+0x72>
 800da10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800da14:	2f19      	cmp	r7, #25
 800da16:	d804      	bhi.n	800da22 <_strtol_l.constprop.0+0xc6>
 800da18:	3c57      	subs	r4, #87	@ 0x57
 800da1a:	e7d8      	b.n	800d9ce <_strtol_l.constprop.0+0x72>
 800da1c:	f04f 32ff 	mov.w	r2, #4294967295
 800da20:	e7e1      	b.n	800d9e6 <_strtol_l.constprop.0+0x8a>
 800da22:	1c53      	adds	r3, r2, #1
 800da24:	d108      	bne.n	800da38 <_strtol_l.constprop.0+0xdc>
 800da26:	2322      	movs	r3, #34	@ 0x22
 800da28:	f8ce 3000 	str.w	r3, [lr]
 800da2c:	4660      	mov	r0, ip
 800da2e:	f1b8 0f00 	cmp.w	r8, #0
 800da32:	d0a0      	beq.n	800d976 <_strtol_l.constprop.0+0x1a>
 800da34:	1e69      	subs	r1, r5, #1
 800da36:	e006      	b.n	800da46 <_strtol_l.constprop.0+0xea>
 800da38:	b106      	cbz	r6, 800da3c <_strtol_l.constprop.0+0xe0>
 800da3a:	4240      	negs	r0, r0
 800da3c:	f1b8 0f00 	cmp.w	r8, #0
 800da40:	d099      	beq.n	800d976 <_strtol_l.constprop.0+0x1a>
 800da42:	2a00      	cmp	r2, #0
 800da44:	d1f6      	bne.n	800da34 <_strtol_l.constprop.0+0xd8>
 800da46:	f8c8 1000 	str.w	r1, [r8]
 800da4a:	e794      	b.n	800d976 <_strtol_l.constprop.0+0x1a>
 800da4c:	0800ec19 	.word	0x0800ec19

0800da50 <_strtol_r>:
 800da50:	f7ff bf84 	b.w	800d95c <_strtol_l.constprop.0>

0800da54 <__ssputs_r>:
 800da54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da58:	688e      	ldr	r6, [r1, #8]
 800da5a:	461f      	mov	r7, r3
 800da5c:	42be      	cmp	r6, r7
 800da5e:	680b      	ldr	r3, [r1, #0]
 800da60:	4682      	mov	sl, r0
 800da62:	460c      	mov	r4, r1
 800da64:	4690      	mov	r8, r2
 800da66:	d82d      	bhi.n	800dac4 <__ssputs_r+0x70>
 800da68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da70:	d026      	beq.n	800dac0 <__ssputs_r+0x6c>
 800da72:	6965      	ldr	r5, [r4, #20]
 800da74:	6909      	ldr	r1, [r1, #16]
 800da76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da7a:	eba3 0901 	sub.w	r9, r3, r1
 800da7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da82:	1c7b      	adds	r3, r7, #1
 800da84:	444b      	add	r3, r9
 800da86:	106d      	asrs	r5, r5, #1
 800da88:	429d      	cmp	r5, r3
 800da8a:	bf38      	it	cc
 800da8c:	461d      	movcc	r5, r3
 800da8e:	0553      	lsls	r3, r2, #21
 800da90:	d527      	bpl.n	800dae2 <__ssputs_r+0x8e>
 800da92:	4629      	mov	r1, r5
 800da94:	f7fe fc1c 	bl	800c2d0 <_malloc_r>
 800da98:	4606      	mov	r6, r0
 800da9a:	b360      	cbz	r0, 800daf6 <__ssputs_r+0xa2>
 800da9c:	6921      	ldr	r1, [r4, #16]
 800da9e:	464a      	mov	r2, r9
 800daa0:	f7fd fd41 	bl	800b526 <memcpy>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800daaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	6126      	str	r6, [r4, #16]
 800dab2:	6165      	str	r5, [r4, #20]
 800dab4:	444e      	add	r6, r9
 800dab6:	eba5 0509 	sub.w	r5, r5, r9
 800daba:	6026      	str	r6, [r4, #0]
 800dabc:	60a5      	str	r5, [r4, #8]
 800dabe:	463e      	mov	r6, r7
 800dac0:	42be      	cmp	r6, r7
 800dac2:	d900      	bls.n	800dac6 <__ssputs_r+0x72>
 800dac4:	463e      	mov	r6, r7
 800dac6:	6820      	ldr	r0, [r4, #0]
 800dac8:	4632      	mov	r2, r6
 800daca:	4641      	mov	r1, r8
 800dacc:	f000 fabe 	bl	800e04c <memmove>
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	1b9b      	subs	r3, r3, r6
 800dad4:	60a3      	str	r3, [r4, #8]
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	4433      	add	r3, r6
 800dada:	6023      	str	r3, [r4, #0]
 800dadc:	2000      	movs	r0, #0
 800dade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dae2:	462a      	mov	r2, r5
 800dae4:	f000 fe95 	bl	800e812 <_realloc_r>
 800dae8:	4606      	mov	r6, r0
 800daea:	2800      	cmp	r0, #0
 800daec:	d1e0      	bne.n	800dab0 <__ssputs_r+0x5c>
 800daee:	6921      	ldr	r1, [r4, #16]
 800daf0:	4650      	mov	r0, sl
 800daf2:	f7fe fb79 	bl	800c1e8 <_free_r>
 800daf6:	230c      	movs	r3, #12
 800daf8:	f8ca 3000 	str.w	r3, [sl]
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db02:	81a3      	strh	r3, [r4, #12]
 800db04:	f04f 30ff 	mov.w	r0, #4294967295
 800db08:	e7e9      	b.n	800dade <__ssputs_r+0x8a>
	...

0800db0c <_svfiprintf_r>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	4698      	mov	r8, r3
 800db12:	898b      	ldrh	r3, [r1, #12]
 800db14:	061b      	lsls	r3, r3, #24
 800db16:	b09d      	sub	sp, #116	@ 0x74
 800db18:	4607      	mov	r7, r0
 800db1a:	460d      	mov	r5, r1
 800db1c:	4614      	mov	r4, r2
 800db1e:	d510      	bpl.n	800db42 <_svfiprintf_r+0x36>
 800db20:	690b      	ldr	r3, [r1, #16]
 800db22:	b973      	cbnz	r3, 800db42 <_svfiprintf_r+0x36>
 800db24:	2140      	movs	r1, #64	@ 0x40
 800db26:	f7fe fbd3 	bl	800c2d0 <_malloc_r>
 800db2a:	6028      	str	r0, [r5, #0]
 800db2c:	6128      	str	r0, [r5, #16]
 800db2e:	b930      	cbnz	r0, 800db3e <_svfiprintf_r+0x32>
 800db30:	230c      	movs	r3, #12
 800db32:	603b      	str	r3, [r7, #0]
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	b01d      	add	sp, #116	@ 0x74
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	2340      	movs	r3, #64	@ 0x40
 800db40:	616b      	str	r3, [r5, #20]
 800db42:	2300      	movs	r3, #0
 800db44:	9309      	str	r3, [sp, #36]	@ 0x24
 800db46:	2320      	movs	r3, #32
 800db48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db50:	2330      	movs	r3, #48	@ 0x30
 800db52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcf0 <_svfiprintf_r+0x1e4>
 800db56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db5a:	f04f 0901 	mov.w	r9, #1
 800db5e:	4623      	mov	r3, r4
 800db60:	469a      	mov	sl, r3
 800db62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db66:	b10a      	cbz	r2, 800db6c <_svfiprintf_r+0x60>
 800db68:	2a25      	cmp	r2, #37	@ 0x25
 800db6a:	d1f9      	bne.n	800db60 <_svfiprintf_r+0x54>
 800db6c:	ebba 0b04 	subs.w	fp, sl, r4
 800db70:	d00b      	beq.n	800db8a <_svfiprintf_r+0x7e>
 800db72:	465b      	mov	r3, fp
 800db74:	4622      	mov	r2, r4
 800db76:	4629      	mov	r1, r5
 800db78:	4638      	mov	r0, r7
 800db7a:	f7ff ff6b 	bl	800da54 <__ssputs_r>
 800db7e:	3001      	adds	r0, #1
 800db80:	f000 80a7 	beq.w	800dcd2 <_svfiprintf_r+0x1c6>
 800db84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db86:	445a      	add	r2, fp
 800db88:	9209      	str	r2, [sp, #36]	@ 0x24
 800db8a:	f89a 3000 	ldrb.w	r3, [sl]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 809f 	beq.w	800dcd2 <_svfiprintf_r+0x1c6>
 800db94:	2300      	movs	r3, #0
 800db96:	f04f 32ff 	mov.w	r2, #4294967295
 800db9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db9e:	f10a 0a01 	add.w	sl, sl, #1
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	9307      	str	r3, [sp, #28]
 800dba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbac:	4654      	mov	r4, sl
 800dbae:	2205      	movs	r2, #5
 800dbb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb4:	484e      	ldr	r0, [pc, #312]	@ (800dcf0 <_svfiprintf_r+0x1e4>)
 800dbb6:	f7f2 fb13 	bl	80001e0 <memchr>
 800dbba:	9a04      	ldr	r2, [sp, #16]
 800dbbc:	b9d8      	cbnz	r0, 800dbf6 <_svfiprintf_r+0xea>
 800dbbe:	06d0      	lsls	r0, r2, #27
 800dbc0:	bf44      	itt	mi
 800dbc2:	2320      	movmi	r3, #32
 800dbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbc8:	0711      	lsls	r1, r2, #28
 800dbca:	bf44      	itt	mi
 800dbcc:	232b      	movmi	r3, #43	@ 0x2b
 800dbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbd8:	d015      	beq.n	800dc06 <_svfiprintf_r+0xfa>
 800dbda:	9a07      	ldr	r2, [sp, #28]
 800dbdc:	4654      	mov	r4, sl
 800dbde:	2000      	movs	r0, #0
 800dbe0:	f04f 0c0a 	mov.w	ip, #10
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbea:	3b30      	subs	r3, #48	@ 0x30
 800dbec:	2b09      	cmp	r3, #9
 800dbee:	d94b      	bls.n	800dc88 <_svfiprintf_r+0x17c>
 800dbf0:	b1b0      	cbz	r0, 800dc20 <_svfiprintf_r+0x114>
 800dbf2:	9207      	str	r2, [sp, #28]
 800dbf4:	e014      	b.n	800dc20 <_svfiprintf_r+0x114>
 800dbf6:	eba0 0308 	sub.w	r3, r0, r8
 800dbfa:	fa09 f303 	lsl.w	r3, r9, r3
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	9304      	str	r3, [sp, #16]
 800dc02:	46a2      	mov	sl, r4
 800dc04:	e7d2      	b.n	800dbac <_svfiprintf_r+0xa0>
 800dc06:	9b03      	ldr	r3, [sp, #12]
 800dc08:	1d19      	adds	r1, r3, #4
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	9103      	str	r1, [sp, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	bfbb      	ittet	lt
 800dc12:	425b      	neglt	r3, r3
 800dc14:	f042 0202 	orrlt.w	r2, r2, #2
 800dc18:	9307      	strge	r3, [sp, #28]
 800dc1a:	9307      	strlt	r3, [sp, #28]
 800dc1c:	bfb8      	it	lt
 800dc1e:	9204      	strlt	r2, [sp, #16]
 800dc20:	7823      	ldrb	r3, [r4, #0]
 800dc22:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc24:	d10a      	bne.n	800dc3c <_svfiprintf_r+0x130>
 800dc26:	7863      	ldrb	r3, [r4, #1]
 800dc28:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc2a:	d132      	bne.n	800dc92 <_svfiprintf_r+0x186>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1d1a      	adds	r2, r3, #4
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	9203      	str	r2, [sp, #12]
 800dc34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc38:	3402      	adds	r4, #2
 800dc3a:	9305      	str	r3, [sp, #20]
 800dc3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dd00 <_svfiprintf_r+0x1f4>
 800dc40:	7821      	ldrb	r1, [r4, #0]
 800dc42:	2203      	movs	r2, #3
 800dc44:	4650      	mov	r0, sl
 800dc46:	f7f2 facb 	bl	80001e0 <memchr>
 800dc4a:	b138      	cbz	r0, 800dc5c <_svfiprintf_r+0x150>
 800dc4c:	9b04      	ldr	r3, [sp, #16]
 800dc4e:	eba0 000a 	sub.w	r0, r0, sl
 800dc52:	2240      	movs	r2, #64	@ 0x40
 800dc54:	4082      	lsls	r2, r0
 800dc56:	4313      	orrs	r3, r2
 800dc58:	3401      	adds	r4, #1
 800dc5a:	9304      	str	r3, [sp, #16]
 800dc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc60:	4824      	ldr	r0, [pc, #144]	@ (800dcf4 <_svfiprintf_r+0x1e8>)
 800dc62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc66:	2206      	movs	r2, #6
 800dc68:	f7f2 faba 	bl	80001e0 <memchr>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	d036      	beq.n	800dcde <_svfiprintf_r+0x1d2>
 800dc70:	4b21      	ldr	r3, [pc, #132]	@ (800dcf8 <_svfiprintf_r+0x1ec>)
 800dc72:	bb1b      	cbnz	r3, 800dcbc <_svfiprintf_r+0x1b0>
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	3307      	adds	r3, #7
 800dc78:	f023 0307 	bic.w	r3, r3, #7
 800dc7c:	3308      	adds	r3, #8
 800dc7e:	9303      	str	r3, [sp, #12]
 800dc80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc82:	4433      	add	r3, r6
 800dc84:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc86:	e76a      	b.n	800db5e <_svfiprintf_r+0x52>
 800dc88:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc8c:	460c      	mov	r4, r1
 800dc8e:	2001      	movs	r0, #1
 800dc90:	e7a8      	b.n	800dbe4 <_svfiprintf_r+0xd8>
 800dc92:	2300      	movs	r3, #0
 800dc94:	3401      	adds	r4, #1
 800dc96:	9305      	str	r3, [sp, #20]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	f04f 0c0a 	mov.w	ip, #10
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dca4:	3a30      	subs	r2, #48	@ 0x30
 800dca6:	2a09      	cmp	r2, #9
 800dca8:	d903      	bls.n	800dcb2 <_svfiprintf_r+0x1a6>
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d0c6      	beq.n	800dc3c <_svfiprintf_r+0x130>
 800dcae:	9105      	str	r1, [sp, #20]
 800dcb0:	e7c4      	b.n	800dc3c <_svfiprintf_r+0x130>
 800dcb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e7f0      	b.n	800dc9e <_svfiprintf_r+0x192>
 800dcbc:	ab03      	add	r3, sp, #12
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	462a      	mov	r2, r5
 800dcc2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <_svfiprintf_r+0x1f0>)
 800dcc4:	a904      	add	r1, sp, #16
 800dcc6:	4638      	mov	r0, r7
 800dcc8:	f7fc faf0 	bl	800a2ac <_printf_float>
 800dccc:	1c42      	adds	r2, r0, #1
 800dcce:	4606      	mov	r6, r0
 800dcd0:	d1d6      	bne.n	800dc80 <_svfiprintf_r+0x174>
 800dcd2:	89ab      	ldrh	r3, [r5, #12]
 800dcd4:	065b      	lsls	r3, r3, #25
 800dcd6:	f53f af2d 	bmi.w	800db34 <_svfiprintf_r+0x28>
 800dcda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcdc:	e72c      	b.n	800db38 <_svfiprintf_r+0x2c>
 800dcde:	ab03      	add	r3, sp, #12
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	462a      	mov	r2, r5
 800dce4:	4b05      	ldr	r3, [pc, #20]	@ (800dcfc <_svfiprintf_r+0x1f0>)
 800dce6:	a904      	add	r1, sp, #16
 800dce8:	4638      	mov	r0, r7
 800dcea:	f7fc fd77 	bl	800a7dc <_printf_i>
 800dcee:	e7ed      	b.n	800dccc <_svfiprintf_r+0x1c0>
 800dcf0:	0800ed19 	.word	0x0800ed19
 800dcf4:	0800ed23 	.word	0x0800ed23
 800dcf8:	0800a2ad 	.word	0x0800a2ad
 800dcfc:	0800da55 	.word	0x0800da55
 800dd00:	0800ed1f 	.word	0x0800ed1f

0800dd04 <__sfputc_r>:
 800dd04:	6893      	ldr	r3, [r2, #8]
 800dd06:	3b01      	subs	r3, #1
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	b410      	push	{r4}
 800dd0c:	6093      	str	r3, [r2, #8]
 800dd0e:	da08      	bge.n	800dd22 <__sfputc_r+0x1e>
 800dd10:	6994      	ldr	r4, [r2, #24]
 800dd12:	42a3      	cmp	r3, r4
 800dd14:	db01      	blt.n	800dd1a <__sfputc_r+0x16>
 800dd16:	290a      	cmp	r1, #10
 800dd18:	d103      	bne.n	800dd22 <__sfputc_r+0x1e>
 800dd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd1e:	f7fd bae6 	b.w	800b2ee <__swbuf_r>
 800dd22:	6813      	ldr	r3, [r2, #0]
 800dd24:	1c58      	adds	r0, r3, #1
 800dd26:	6010      	str	r0, [r2, #0]
 800dd28:	7019      	strb	r1, [r3, #0]
 800dd2a:	4608      	mov	r0, r1
 800dd2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <__sfputs_r>:
 800dd32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	4614      	mov	r4, r2
 800dd3a:	18d5      	adds	r5, r2, r3
 800dd3c:	42ac      	cmp	r4, r5
 800dd3e:	d101      	bne.n	800dd44 <__sfputs_r+0x12>
 800dd40:	2000      	movs	r0, #0
 800dd42:	e007      	b.n	800dd54 <__sfputs_r+0x22>
 800dd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd48:	463a      	mov	r2, r7
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f7ff ffda 	bl	800dd04 <__sfputc_r>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d1f3      	bne.n	800dd3c <__sfputs_r+0xa>
 800dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd58 <_vfiprintf_r>:
 800dd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	460d      	mov	r5, r1
 800dd5e:	b09d      	sub	sp, #116	@ 0x74
 800dd60:	4614      	mov	r4, r2
 800dd62:	4698      	mov	r8, r3
 800dd64:	4606      	mov	r6, r0
 800dd66:	b118      	cbz	r0, 800dd70 <_vfiprintf_r+0x18>
 800dd68:	6a03      	ldr	r3, [r0, #32]
 800dd6a:	b90b      	cbnz	r3, 800dd70 <_vfiprintf_r+0x18>
 800dd6c:	f7fd f9b6 	bl	800b0dc <__sinit>
 800dd70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd72:	07d9      	lsls	r1, r3, #31
 800dd74:	d405      	bmi.n	800dd82 <_vfiprintf_r+0x2a>
 800dd76:	89ab      	ldrh	r3, [r5, #12]
 800dd78:	059a      	lsls	r2, r3, #22
 800dd7a:	d402      	bmi.n	800dd82 <_vfiprintf_r+0x2a>
 800dd7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd7e:	f7fd fbc8 	bl	800b512 <__retarget_lock_acquire_recursive>
 800dd82:	89ab      	ldrh	r3, [r5, #12]
 800dd84:	071b      	lsls	r3, r3, #28
 800dd86:	d501      	bpl.n	800dd8c <_vfiprintf_r+0x34>
 800dd88:	692b      	ldr	r3, [r5, #16]
 800dd8a:	b99b      	cbnz	r3, 800ddb4 <_vfiprintf_r+0x5c>
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7fd faec 	bl	800b36c <__swsetup_r>
 800dd94:	b170      	cbz	r0, 800ddb4 <_vfiprintf_r+0x5c>
 800dd96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd98:	07dc      	lsls	r4, r3, #31
 800dd9a:	d504      	bpl.n	800dda6 <_vfiprintf_r+0x4e>
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dda0:	b01d      	add	sp, #116	@ 0x74
 800dda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda6:	89ab      	ldrh	r3, [r5, #12]
 800dda8:	0598      	lsls	r0, r3, #22
 800ddaa:	d4f7      	bmi.n	800dd9c <_vfiprintf_r+0x44>
 800ddac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddae:	f7fd fbb1 	bl	800b514 <__retarget_lock_release_recursive>
 800ddb2:	e7f3      	b.n	800dd9c <_vfiprintf_r+0x44>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb8:	2320      	movs	r3, #32
 800ddba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddc2:	2330      	movs	r3, #48	@ 0x30
 800ddc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df74 <_vfiprintf_r+0x21c>
 800ddc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddcc:	f04f 0901 	mov.w	r9, #1
 800ddd0:	4623      	mov	r3, r4
 800ddd2:	469a      	mov	sl, r3
 800ddd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddd8:	b10a      	cbz	r2, 800ddde <_vfiprintf_r+0x86>
 800ddda:	2a25      	cmp	r2, #37	@ 0x25
 800dddc:	d1f9      	bne.n	800ddd2 <_vfiprintf_r+0x7a>
 800ddde:	ebba 0b04 	subs.w	fp, sl, r4
 800dde2:	d00b      	beq.n	800ddfc <_vfiprintf_r+0xa4>
 800dde4:	465b      	mov	r3, fp
 800dde6:	4622      	mov	r2, r4
 800dde8:	4629      	mov	r1, r5
 800ddea:	4630      	mov	r0, r6
 800ddec:	f7ff ffa1 	bl	800dd32 <__sfputs_r>
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	f000 80a7 	beq.w	800df44 <_vfiprintf_r+0x1ec>
 800ddf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddf8:	445a      	add	r2, fp
 800ddfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddfc:	f89a 3000 	ldrb.w	r3, [sl]
 800de00:	2b00      	cmp	r3, #0
 800de02:	f000 809f 	beq.w	800df44 <_vfiprintf_r+0x1ec>
 800de06:	2300      	movs	r3, #0
 800de08:	f04f 32ff 	mov.w	r2, #4294967295
 800de0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de10:	f10a 0a01 	add.w	sl, sl, #1
 800de14:	9304      	str	r3, [sp, #16]
 800de16:	9307      	str	r3, [sp, #28]
 800de18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800de1e:	4654      	mov	r4, sl
 800de20:	2205      	movs	r2, #5
 800de22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de26:	4853      	ldr	r0, [pc, #332]	@ (800df74 <_vfiprintf_r+0x21c>)
 800de28:	f7f2 f9da 	bl	80001e0 <memchr>
 800de2c:	9a04      	ldr	r2, [sp, #16]
 800de2e:	b9d8      	cbnz	r0, 800de68 <_vfiprintf_r+0x110>
 800de30:	06d1      	lsls	r1, r2, #27
 800de32:	bf44      	itt	mi
 800de34:	2320      	movmi	r3, #32
 800de36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de3a:	0713      	lsls	r3, r2, #28
 800de3c:	bf44      	itt	mi
 800de3e:	232b      	movmi	r3, #43	@ 0x2b
 800de40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de44:	f89a 3000 	ldrb.w	r3, [sl]
 800de48:	2b2a      	cmp	r3, #42	@ 0x2a
 800de4a:	d015      	beq.n	800de78 <_vfiprintf_r+0x120>
 800de4c:	9a07      	ldr	r2, [sp, #28]
 800de4e:	4654      	mov	r4, sl
 800de50:	2000      	movs	r0, #0
 800de52:	f04f 0c0a 	mov.w	ip, #10
 800de56:	4621      	mov	r1, r4
 800de58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de5c:	3b30      	subs	r3, #48	@ 0x30
 800de5e:	2b09      	cmp	r3, #9
 800de60:	d94b      	bls.n	800defa <_vfiprintf_r+0x1a2>
 800de62:	b1b0      	cbz	r0, 800de92 <_vfiprintf_r+0x13a>
 800de64:	9207      	str	r2, [sp, #28]
 800de66:	e014      	b.n	800de92 <_vfiprintf_r+0x13a>
 800de68:	eba0 0308 	sub.w	r3, r0, r8
 800de6c:	fa09 f303 	lsl.w	r3, r9, r3
 800de70:	4313      	orrs	r3, r2
 800de72:	9304      	str	r3, [sp, #16]
 800de74:	46a2      	mov	sl, r4
 800de76:	e7d2      	b.n	800de1e <_vfiprintf_r+0xc6>
 800de78:	9b03      	ldr	r3, [sp, #12]
 800de7a:	1d19      	adds	r1, r3, #4
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	9103      	str	r1, [sp, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	bfbb      	ittet	lt
 800de84:	425b      	neglt	r3, r3
 800de86:	f042 0202 	orrlt.w	r2, r2, #2
 800de8a:	9307      	strge	r3, [sp, #28]
 800de8c:	9307      	strlt	r3, [sp, #28]
 800de8e:	bfb8      	it	lt
 800de90:	9204      	strlt	r2, [sp, #16]
 800de92:	7823      	ldrb	r3, [r4, #0]
 800de94:	2b2e      	cmp	r3, #46	@ 0x2e
 800de96:	d10a      	bne.n	800deae <_vfiprintf_r+0x156>
 800de98:	7863      	ldrb	r3, [r4, #1]
 800de9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800de9c:	d132      	bne.n	800df04 <_vfiprintf_r+0x1ac>
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	1d1a      	adds	r2, r3, #4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	9203      	str	r2, [sp, #12]
 800dea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800deaa:	3402      	adds	r4, #2
 800deac:	9305      	str	r3, [sp, #20]
 800deae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df84 <_vfiprintf_r+0x22c>
 800deb2:	7821      	ldrb	r1, [r4, #0]
 800deb4:	2203      	movs	r2, #3
 800deb6:	4650      	mov	r0, sl
 800deb8:	f7f2 f992 	bl	80001e0 <memchr>
 800debc:	b138      	cbz	r0, 800dece <_vfiprintf_r+0x176>
 800debe:	9b04      	ldr	r3, [sp, #16]
 800dec0:	eba0 000a 	sub.w	r0, r0, sl
 800dec4:	2240      	movs	r2, #64	@ 0x40
 800dec6:	4082      	lsls	r2, r0
 800dec8:	4313      	orrs	r3, r2
 800deca:	3401      	adds	r4, #1
 800decc:	9304      	str	r3, [sp, #16]
 800dece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded2:	4829      	ldr	r0, [pc, #164]	@ (800df78 <_vfiprintf_r+0x220>)
 800ded4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ded8:	2206      	movs	r2, #6
 800deda:	f7f2 f981 	bl	80001e0 <memchr>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d03f      	beq.n	800df62 <_vfiprintf_r+0x20a>
 800dee2:	4b26      	ldr	r3, [pc, #152]	@ (800df7c <_vfiprintf_r+0x224>)
 800dee4:	bb1b      	cbnz	r3, 800df2e <_vfiprintf_r+0x1d6>
 800dee6:	9b03      	ldr	r3, [sp, #12]
 800dee8:	3307      	adds	r3, #7
 800deea:	f023 0307 	bic.w	r3, r3, #7
 800deee:	3308      	adds	r3, #8
 800def0:	9303      	str	r3, [sp, #12]
 800def2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def4:	443b      	add	r3, r7
 800def6:	9309      	str	r3, [sp, #36]	@ 0x24
 800def8:	e76a      	b.n	800ddd0 <_vfiprintf_r+0x78>
 800defa:	fb0c 3202 	mla	r2, ip, r2, r3
 800defe:	460c      	mov	r4, r1
 800df00:	2001      	movs	r0, #1
 800df02:	e7a8      	b.n	800de56 <_vfiprintf_r+0xfe>
 800df04:	2300      	movs	r3, #0
 800df06:	3401      	adds	r4, #1
 800df08:	9305      	str	r3, [sp, #20]
 800df0a:	4619      	mov	r1, r3
 800df0c:	f04f 0c0a 	mov.w	ip, #10
 800df10:	4620      	mov	r0, r4
 800df12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df16:	3a30      	subs	r2, #48	@ 0x30
 800df18:	2a09      	cmp	r2, #9
 800df1a:	d903      	bls.n	800df24 <_vfiprintf_r+0x1cc>
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d0c6      	beq.n	800deae <_vfiprintf_r+0x156>
 800df20:	9105      	str	r1, [sp, #20]
 800df22:	e7c4      	b.n	800deae <_vfiprintf_r+0x156>
 800df24:	fb0c 2101 	mla	r1, ip, r1, r2
 800df28:	4604      	mov	r4, r0
 800df2a:	2301      	movs	r3, #1
 800df2c:	e7f0      	b.n	800df10 <_vfiprintf_r+0x1b8>
 800df2e:	ab03      	add	r3, sp, #12
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	462a      	mov	r2, r5
 800df34:	4b12      	ldr	r3, [pc, #72]	@ (800df80 <_vfiprintf_r+0x228>)
 800df36:	a904      	add	r1, sp, #16
 800df38:	4630      	mov	r0, r6
 800df3a:	f7fc f9b7 	bl	800a2ac <_printf_float>
 800df3e:	4607      	mov	r7, r0
 800df40:	1c78      	adds	r0, r7, #1
 800df42:	d1d6      	bne.n	800def2 <_vfiprintf_r+0x19a>
 800df44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df46:	07d9      	lsls	r1, r3, #31
 800df48:	d405      	bmi.n	800df56 <_vfiprintf_r+0x1fe>
 800df4a:	89ab      	ldrh	r3, [r5, #12]
 800df4c:	059a      	lsls	r2, r3, #22
 800df4e:	d402      	bmi.n	800df56 <_vfiprintf_r+0x1fe>
 800df50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df52:	f7fd fadf 	bl	800b514 <__retarget_lock_release_recursive>
 800df56:	89ab      	ldrh	r3, [r5, #12]
 800df58:	065b      	lsls	r3, r3, #25
 800df5a:	f53f af1f 	bmi.w	800dd9c <_vfiprintf_r+0x44>
 800df5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df60:	e71e      	b.n	800dda0 <_vfiprintf_r+0x48>
 800df62:	ab03      	add	r3, sp, #12
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	462a      	mov	r2, r5
 800df68:	4b05      	ldr	r3, [pc, #20]	@ (800df80 <_vfiprintf_r+0x228>)
 800df6a:	a904      	add	r1, sp, #16
 800df6c:	4630      	mov	r0, r6
 800df6e:	f7fc fc35 	bl	800a7dc <_printf_i>
 800df72:	e7e4      	b.n	800df3e <_vfiprintf_r+0x1e6>
 800df74:	0800ed19 	.word	0x0800ed19
 800df78:	0800ed23 	.word	0x0800ed23
 800df7c:	0800a2ad 	.word	0x0800a2ad
 800df80:	0800dd33 	.word	0x0800dd33
 800df84:	0800ed1f 	.word	0x0800ed1f

0800df88 <__swhatbuf_r>:
 800df88:	b570      	push	{r4, r5, r6, lr}
 800df8a:	460c      	mov	r4, r1
 800df8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df90:	2900      	cmp	r1, #0
 800df92:	b096      	sub	sp, #88	@ 0x58
 800df94:	4615      	mov	r5, r2
 800df96:	461e      	mov	r6, r3
 800df98:	da0d      	bge.n	800dfb6 <__swhatbuf_r+0x2e>
 800df9a:	89a3      	ldrh	r3, [r4, #12]
 800df9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dfa0:	f04f 0100 	mov.w	r1, #0
 800dfa4:	bf14      	ite	ne
 800dfa6:	2340      	movne	r3, #64	@ 0x40
 800dfa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dfac:	2000      	movs	r0, #0
 800dfae:	6031      	str	r1, [r6, #0]
 800dfb0:	602b      	str	r3, [r5, #0]
 800dfb2:	b016      	add	sp, #88	@ 0x58
 800dfb4:	bd70      	pop	{r4, r5, r6, pc}
 800dfb6:	466a      	mov	r2, sp
 800dfb8:	f000 f874 	bl	800e0a4 <_fstat_r>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	dbec      	blt.n	800df9a <__swhatbuf_r+0x12>
 800dfc0:	9901      	ldr	r1, [sp, #4]
 800dfc2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dfc6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dfca:	4259      	negs	r1, r3
 800dfcc:	4159      	adcs	r1, r3
 800dfce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dfd2:	e7eb      	b.n	800dfac <__swhatbuf_r+0x24>

0800dfd4 <__smakebuf_r>:
 800dfd4:	898b      	ldrh	r3, [r1, #12]
 800dfd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfd8:	079d      	lsls	r5, r3, #30
 800dfda:	4606      	mov	r6, r0
 800dfdc:	460c      	mov	r4, r1
 800dfde:	d507      	bpl.n	800dff0 <__smakebuf_r+0x1c>
 800dfe0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dfe4:	6023      	str	r3, [r4, #0]
 800dfe6:	6123      	str	r3, [r4, #16]
 800dfe8:	2301      	movs	r3, #1
 800dfea:	6163      	str	r3, [r4, #20]
 800dfec:	b003      	add	sp, #12
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff0:	ab01      	add	r3, sp, #4
 800dff2:	466a      	mov	r2, sp
 800dff4:	f7ff ffc8 	bl	800df88 <__swhatbuf_r>
 800dff8:	9f00      	ldr	r7, [sp, #0]
 800dffa:	4605      	mov	r5, r0
 800dffc:	4639      	mov	r1, r7
 800dffe:	4630      	mov	r0, r6
 800e000:	f7fe f966 	bl	800c2d0 <_malloc_r>
 800e004:	b948      	cbnz	r0, 800e01a <__smakebuf_r+0x46>
 800e006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e00a:	059a      	lsls	r2, r3, #22
 800e00c:	d4ee      	bmi.n	800dfec <__smakebuf_r+0x18>
 800e00e:	f023 0303 	bic.w	r3, r3, #3
 800e012:	f043 0302 	orr.w	r3, r3, #2
 800e016:	81a3      	strh	r3, [r4, #12]
 800e018:	e7e2      	b.n	800dfe0 <__smakebuf_r+0xc>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	6020      	str	r0, [r4, #0]
 800e01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e022:	81a3      	strh	r3, [r4, #12]
 800e024:	9b01      	ldr	r3, [sp, #4]
 800e026:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e02a:	b15b      	cbz	r3, 800e044 <__smakebuf_r+0x70>
 800e02c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e030:	4630      	mov	r0, r6
 800e032:	f000 f849 	bl	800e0c8 <_isatty_r>
 800e036:	b128      	cbz	r0, 800e044 <__smakebuf_r+0x70>
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	f023 0303 	bic.w	r3, r3, #3
 800e03e:	f043 0301 	orr.w	r3, r3, #1
 800e042:	81a3      	strh	r3, [r4, #12]
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	431d      	orrs	r5, r3
 800e048:	81a5      	strh	r5, [r4, #12]
 800e04a:	e7cf      	b.n	800dfec <__smakebuf_r+0x18>

0800e04c <memmove>:
 800e04c:	4288      	cmp	r0, r1
 800e04e:	b510      	push	{r4, lr}
 800e050:	eb01 0402 	add.w	r4, r1, r2
 800e054:	d902      	bls.n	800e05c <memmove+0x10>
 800e056:	4284      	cmp	r4, r0
 800e058:	4623      	mov	r3, r4
 800e05a:	d807      	bhi.n	800e06c <memmove+0x20>
 800e05c:	1e43      	subs	r3, r0, #1
 800e05e:	42a1      	cmp	r1, r4
 800e060:	d008      	beq.n	800e074 <memmove+0x28>
 800e062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e06a:	e7f8      	b.n	800e05e <memmove+0x12>
 800e06c:	4402      	add	r2, r0
 800e06e:	4601      	mov	r1, r0
 800e070:	428a      	cmp	r2, r1
 800e072:	d100      	bne.n	800e076 <memmove+0x2a>
 800e074:	bd10      	pop	{r4, pc}
 800e076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e07e:	e7f7      	b.n	800e070 <memmove+0x24>

0800e080 <strncmp>:
 800e080:	b510      	push	{r4, lr}
 800e082:	b16a      	cbz	r2, 800e0a0 <strncmp+0x20>
 800e084:	3901      	subs	r1, #1
 800e086:	1884      	adds	r4, r0, r2
 800e088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e08c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e090:	429a      	cmp	r2, r3
 800e092:	d103      	bne.n	800e09c <strncmp+0x1c>
 800e094:	42a0      	cmp	r0, r4
 800e096:	d001      	beq.n	800e09c <strncmp+0x1c>
 800e098:	2a00      	cmp	r2, #0
 800e09a:	d1f5      	bne.n	800e088 <strncmp+0x8>
 800e09c:	1ad0      	subs	r0, r2, r3
 800e09e:	bd10      	pop	{r4, pc}
 800e0a0:	4610      	mov	r0, r2
 800e0a2:	e7fc      	b.n	800e09e <strncmp+0x1e>

0800e0a4 <_fstat_r>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	4d07      	ldr	r5, [pc, #28]	@ (800e0c4 <_fstat_r+0x20>)
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	4604      	mov	r4, r0
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	602b      	str	r3, [r5, #0]
 800e0b2:	f7f3 ff1b 	bl	8001eec <_fstat>
 800e0b6:	1c43      	adds	r3, r0, #1
 800e0b8:	d102      	bne.n	800e0c0 <_fstat_r+0x1c>
 800e0ba:	682b      	ldr	r3, [r5, #0]
 800e0bc:	b103      	cbz	r3, 800e0c0 <_fstat_r+0x1c>
 800e0be:	6023      	str	r3, [r4, #0]
 800e0c0:	bd38      	pop	{r3, r4, r5, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20001158 	.word	0x20001158

0800e0c8 <_isatty_r>:
 800e0c8:	b538      	push	{r3, r4, r5, lr}
 800e0ca:	4d06      	ldr	r5, [pc, #24]	@ (800e0e4 <_isatty_r+0x1c>)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4608      	mov	r0, r1
 800e0d2:	602b      	str	r3, [r5, #0]
 800e0d4:	f7f3 ff1a 	bl	8001f0c <_isatty>
 800e0d8:	1c43      	adds	r3, r0, #1
 800e0da:	d102      	bne.n	800e0e2 <_isatty_r+0x1a>
 800e0dc:	682b      	ldr	r3, [r5, #0]
 800e0de:	b103      	cbz	r3, 800e0e2 <_isatty_r+0x1a>
 800e0e0:	6023      	str	r3, [r4, #0]
 800e0e2:	bd38      	pop	{r3, r4, r5, pc}
 800e0e4:	20001158 	.word	0x20001158

0800e0e8 <_sbrk_r>:
 800e0e8:	b538      	push	{r3, r4, r5, lr}
 800e0ea:	4d06      	ldr	r5, [pc, #24]	@ (800e104 <_sbrk_r+0x1c>)
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4608      	mov	r0, r1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	f7f3 ff22 	bl	8001f3c <_sbrk>
 800e0f8:	1c43      	adds	r3, r0, #1
 800e0fa:	d102      	bne.n	800e102 <_sbrk_r+0x1a>
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	b103      	cbz	r3, 800e102 <_sbrk_r+0x1a>
 800e100:	6023      	str	r3, [r4, #0]
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	20001158 	.word	0x20001158

0800e108 <nan>:
 800e108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e110 <nan+0x8>
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	00000000 	.word	0x00000000
 800e114:	7ff80000 	.word	0x7ff80000

0800e118 <__assert_func>:
 800e118:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e11a:	4614      	mov	r4, r2
 800e11c:	461a      	mov	r2, r3
 800e11e:	4b09      	ldr	r3, [pc, #36]	@ (800e144 <__assert_func+0x2c>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4605      	mov	r5, r0
 800e124:	68d8      	ldr	r0, [r3, #12]
 800e126:	b954      	cbnz	r4, 800e13e <__assert_func+0x26>
 800e128:	4b07      	ldr	r3, [pc, #28]	@ (800e148 <__assert_func+0x30>)
 800e12a:	461c      	mov	r4, r3
 800e12c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e130:	9100      	str	r1, [sp, #0]
 800e132:	462b      	mov	r3, r5
 800e134:	4905      	ldr	r1, [pc, #20]	@ (800e14c <__assert_func+0x34>)
 800e136:	f000 fba7 	bl	800e888 <fiprintf>
 800e13a:	f000 fbb7 	bl	800e8ac <abort>
 800e13e:	4b04      	ldr	r3, [pc, #16]	@ (800e150 <__assert_func+0x38>)
 800e140:	e7f4      	b.n	800e12c <__assert_func+0x14>
 800e142:	bf00      	nop
 800e144:	200002d8 	.word	0x200002d8
 800e148:	0800ed6d 	.word	0x0800ed6d
 800e14c:	0800ed3f 	.word	0x0800ed3f
 800e150:	0800ed32 	.word	0x0800ed32

0800e154 <_calloc_r>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	fba1 5402 	umull	r5, r4, r1, r2
 800e15a:	b93c      	cbnz	r4, 800e16c <_calloc_r+0x18>
 800e15c:	4629      	mov	r1, r5
 800e15e:	f7fe f8b7 	bl	800c2d0 <_malloc_r>
 800e162:	4606      	mov	r6, r0
 800e164:	b928      	cbnz	r0, 800e172 <_calloc_r+0x1e>
 800e166:	2600      	movs	r6, #0
 800e168:	4630      	mov	r0, r6
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	220c      	movs	r2, #12
 800e16e:	6002      	str	r2, [r0, #0]
 800e170:	e7f9      	b.n	800e166 <_calloc_r+0x12>
 800e172:	462a      	mov	r2, r5
 800e174:	4621      	mov	r1, r4
 800e176:	f7fd f94f 	bl	800b418 <memset>
 800e17a:	e7f5      	b.n	800e168 <_calloc_r+0x14>

0800e17c <rshift>:
 800e17c:	6903      	ldr	r3, [r0, #16]
 800e17e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e186:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e18a:	f100 0414 	add.w	r4, r0, #20
 800e18e:	dd45      	ble.n	800e21c <rshift+0xa0>
 800e190:	f011 011f 	ands.w	r1, r1, #31
 800e194:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e198:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e19c:	d10c      	bne.n	800e1b8 <rshift+0x3c>
 800e19e:	f100 0710 	add.w	r7, r0, #16
 800e1a2:	4629      	mov	r1, r5
 800e1a4:	42b1      	cmp	r1, r6
 800e1a6:	d334      	bcc.n	800e212 <rshift+0x96>
 800e1a8:	1a9b      	subs	r3, r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	1eea      	subs	r2, r5, #3
 800e1ae:	4296      	cmp	r6, r2
 800e1b0:	bf38      	it	cc
 800e1b2:	2300      	movcc	r3, #0
 800e1b4:	4423      	add	r3, r4
 800e1b6:	e015      	b.n	800e1e4 <rshift+0x68>
 800e1b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e1bc:	f1c1 0820 	rsb	r8, r1, #32
 800e1c0:	40cf      	lsrs	r7, r1
 800e1c2:	f105 0e04 	add.w	lr, r5, #4
 800e1c6:	46a1      	mov	r9, r4
 800e1c8:	4576      	cmp	r6, lr
 800e1ca:	46f4      	mov	ip, lr
 800e1cc:	d815      	bhi.n	800e1fa <rshift+0x7e>
 800e1ce:	1a9a      	subs	r2, r3, r2
 800e1d0:	0092      	lsls	r2, r2, #2
 800e1d2:	3a04      	subs	r2, #4
 800e1d4:	3501      	adds	r5, #1
 800e1d6:	42ae      	cmp	r6, r5
 800e1d8:	bf38      	it	cc
 800e1da:	2200      	movcc	r2, #0
 800e1dc:	18a3      	adds	r3, r4, r2
 800e1de:	50a7      	str	r7, [r4, r2]
 800e1e0:	b107      	cbz	r7, 800e1e4 <rshift+0x68>
 800e1e2:	3304      	adds	r3, #4
 800e1e4:	1b1a      	subs	r2, r3, r4
 800e1e6:	42a3      	cmp	r3, r4
 800e1e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e1ec:	bf08      	it	eq
 800e1ee:	2300      	moveq	r3, #0
 800e1f0:	6102      	str	r2, [r0, #16]
 800e1f2:	bf08      	it	eq
 800e1f4:	6143      	streq	r3, [r0, #20]
 800e1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1fa:	f8dc c000 	ldr.w	ip, [ip]
 800e1fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800e202:	ea4c 0707 	orr.w	r7, ip, r7
 800e206:	f849 7b04 	str.w	r7, [r9], #4
 800e20a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e20e:	40cf      	lsrs	r7, r1
 800e210:	e7da      	b.n	800e1c8 <rshift+0x4c>
 800e212:	f851 cb04 	ldr.w	ip, [r1], #4
 800e216:	f847 cf04 	str.w	ip, [r7, #4]!
 800e21a:	e7c3      	b.n	800e1a4 <rshift+0x28>
 800e21c:	4623      	mov	r3, r4
 800e21e:	e7e1      	b.n	800e1e4 <rshift+0x68>

0800e220 <__hexdig_fun>:
 800e220:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e224:	2b09      	cmp	r3, #9
 800e226:	d802      	bhi.n	800e22e <__hexdig_fun+0xe>
 800e228:	3820      	subs	r0, #32
 800e22a:	b2c0      	uxtb	r0, r0
 800e22c:	4770      	bx	lr
 800e22e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e232:	2b05      	cmp	r3, #5
 800e234:	d801      	bhi.n	800e23a <__hexdig_fun+0x1a>
 800e236:	3847      	subs	r0, #71	@ 0x47
 800e238:	e7f7      	b.n	800e22a <__hexdig_fun+0xa>
 800e23a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e23e:	2b05      	cmp	r3, #5
 800e240:	d801      	bhi.n	800e246 <__hexdig_fun+0x26>
 800e242:	3827      	subs	r0, #39	@ 0x27
 800e244:	e7f1      	b.n	800e22a <__hexdig_fun+0xa>
 800e246:	2000      	movs	r0, #0
 800e248:	4770      	bx	lr
	...

0800e24c <__gethex>:
 800e24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e250:	b085      	sub	sp, #20
 800e252:	468a      	mov	sl, r1
 800e254:	9302      	str	r3, [sp, #8]
 800e256:	680b      	ldr	r3, [r1, #0]
 800e258:	9001      	str	r0, [sp, #4]
 800e25a:	4690      	mov	r8, r2
 800e25c:	1c9c      	adds	r4, r3, #2
 800e25e:	46a1      	mov	r9, r4
 800e260:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e264:	2830      	cmp	r0, #48	@ 0x30
 800e266:	d0fa      	beq.n	800e25e <__gethex+0x12>
 800e268:	eba9 0303 	sub.w	r3, r9, r3
 800e26c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e270:	f7ff ffd6 	bl	800e220 <__hexdig_fun>
 800e274:	4605      	mov	r5, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d168      	bne.n	800e34c <__gethex+0x100>
 800e27a:	49a0      	ldr	r1, [pc, #640]	@ (800e4fc <__gethex+0x2b0>)
 800e27c:	2201      	movs	r2, #1
 800e27e:	4648      	mov	r0, r9
 800e280:	f7ff fefe 	bl	800e080 <strncmp>
 800e284:	4607      	mov	r7, r0
 800e286:	2800      	cmp	r0, #0
 800e288:	d167      	bne.n	800e35a <__gethex+0x10e>
 800e28a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e28e:	4626      	mov	r6, r4
 800e290:	f7ff ffc6 	bl	800e220 <__hexdig_fun>
 800e294:	2800      	cmp	r0, #0
 800e296:	d062      	beq.n	800e35e <__gethex+0x112>
 800e298:	4623      	mov	r3, r4
 800e29a:	7818      	ldrb	r0, [r3, #0]
 800e29c:	2830      	cmp	r0, #48	@ 0x30
 800e29e:	4699      	mov	r9, r3
 800e2a0:	f103 0301 	add.w	r3, r3, #1
 800e2a4:	d0f9      	beq.n	800e29a <__gethex+0x4e>
 800e2a6:	f7ff ffbb 	bl	800e220 <__hexdig_fun>
 800e2aa:	fab0 f580 	clz	r5, r0
 800e2ae:	096d      	lsrs	r5, r5, #5
 800e2b0:	f04f 0b01 	mov.w	fp, #1
 800e2b4:	464a      	mov	r2, r9
 800e2b6:	4616      	mov	r6, r2
 800e2b8:	3201      	adds	r2, #1
 800e2ba:	7830      	ldrb	r0, [r6, #0]
 800e2bc:	f7ff ffb0 	bl	800e220 <__hexdig_fun>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d1f8      	bne.n	800e2b6 <__gethex+0x6a>
 800e2c4:	498d      	ldr	r1, [pc, #564]	@ (800e4fc <__gethex+0x2b0>)
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	f7ff fed9 	bl	800e080 <strncmp>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d13f      	bne.n	800e352 <__gethex+0x106>
 800e2d2:	b944      	cbnz	r4, 800e2e6 <__gethex+0x9a>
 800e2d4:	1c74      	adds	r4, r6, #1
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	4616      	mov	r6, r2
 800e2da:	3201      	adds	r2, #1
 800e2dc:	7830      	ldrb	r0, [r6, #0]
 800e2de:	f7ff ff9f 	bl	800e220 <__hexdig_fun>
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	d1f8      	bne.n	800e2d8 <__gethex+0x8c>
 800e2e6:	1ba4      	subs	r4, r4, r6
 800e2e8:	00a7      	lsls	r7, r4, #2
 800e2ea:	7833      	ldrb	r3, [r6, #0]
 800e2ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e2f0:	2b50      	cmp	r3, #80	@ 0x50
 800e2f2:	d13e      	bne.n	800e372 <__gethex+0x126>
 800e2f4:	7873      	ldrb	r3, [r6, #1]
 800e2f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e2f8:	d033      	beq.n	800e362 <__gethex+0x116>
 800e2fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800e2fc:	d034      	beq.n	800e368 <__gethex+0x11c>
 800e2fe:	1c71      	adds	r1, r6, #1
 800e300:	2400      	movs	r4, #0
 800e302:	7808      	ldrb	r0, [r1, #0]
 800e304:	f7ff ff8c 	bl	800e220 <__hexdig_fun>
 800e308:	1e43      	subs	r3, r0, #1
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	2b18      	cmp	r3, #24
 800e30e:	d830      	bhi.n	800e372 <__gethex+0x126>
 800e310:	f1a0 0210 	sub.w	r2, r0, #16
 800e314:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e318:	f7ff ff82 	bl	800e220 <__hexdig_fun>
 800e31c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e320:	fa5f fc8c 	uxtb.w	ip, ip
 800e324:	f1bc 0f18 	cmp.w	ip, #24
 800e328:	f04f 030a 	mov.w	r3, #10
 800e32c:	d91e      	bls.n	800e36c <__gethex+0x120>
 800e32e:	b104      	cbz	r4, 800e332 <__gethex+0xe6>
 800e330:	4252      	negs	r2, r2
 800e332:	4417      	add	r7, r2
 800e334:	f8ca 1000 	str.w	r1, [sl]
 800e338:	b1ed      	cbz	r5, 800e376 <__gethex+0x12a>
 800e33a:	f1bb 0f00 	cmp.w	fp, #0
 800e33e:	bf0c      	ite	eq
 800e340:	2506      	moveq	r5, #6
 800e342:	2500      	movne	r5, #0
 800e344:	4628      	mov	r0, r5
 800e346:	b005      	add	sp, #20
 800e348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e34c:	2500      	movs	r5, #0
 800e34e:	462c      	mov	r4, r5
 800e350:	e7b0      	b.n	800e2b4 <__gethex+0x68>
 800e352:	2c00      	cmp	r4, #0
 800e354:	d1c7      	bne.n	800e2e6 <__gethex+0x9a>
 800e356:	4627      	mov	r7, r4
 800e358:	e7c7      	b.n	800e2ea <__gethex+0x9e>
 800e35a:	464e      	mov	r6, r9
 800e35c:	462f      	mov	r7, r5
 800e35e:	2501      	movs	r5, #1
 800e360:	e7c3      	b.n	800e2ea <__gethex+0x9e>
 800e362:	2400      	movs	r4, #0
 800e364:	1cb1      	adds	r1, r6, #2
 800e366:	e7cc      	b.n	800e302 <__gethex+0xb6>
 800e368:	2401      	movs	r4, #1
 800e36a:	e7fb      	b.n	800e364 <__gethex+0x118>
 800e36c:	fb03 0002 	mla	r0, r3, r2, r0
 800e370:	e7ce      	b.n	800e310 <__gethex+0xc4>
 800e372:	4631      	mov	r1, r6
 800e374:	e7de      	b.n	800e334 <__gethex+0xe8>
 800e376:	eba6 0309 	sub.w	r3, r6, r9
 800e37a:	3b01      	subs	r3, #1
 800e37c:	4629      	mov	r1, r5
 800e37e:	2b07      	cmp	r3, #7
 800e380:	dc0a      	bgt.n	800e398 <__gethex+0x14c>
 800e382:	9801      	ldr	r0, [sp, #4]
 800e384:	f7fe f830 	bl	800c3e8 <_Balloc>
 800e388:	4604      	mov	r4, r0
 800e38a:	b940      	cbnz	r0, 800e39e <__gethex+0x152>
 800e38c:	4b5c      	ldr	r3, [pc, #368]	@ (800e500 <__gethex+0x2b4>)
 800e38e:	4602      	mov	r2, r0
 800e390:	21e4      	movs	r1, #228	@ 0xe4
 800e392:	485c      	ldr	r0, [pc, #368]	@ (800e504 <__gethex+0x2b8>)
 800e394:	f7ff fec0 	bl	800e118 <__assert_func>
 800e398:	3101      	adds	r1, #1
 800e39a:	105b      	asrs	r3, r3, #1
 800e39c:	e7ef      	b.n	800e37e <__gethex+0x132>
 800e39e:	f100 0a14 	add.w	sl, r0, #20
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	4655      	mov	r5, sl
 800e3a6:	469b      	mov	fp, r3
 800e3a8:	45b1      	cmp	r9, r6
 800e3aa:	d337      	bcc.n	800e41c <__gethex+0x1d0>
 800e3ac:	f845 bb04 	str.w	fp, [r5], #4
 800e3b0:	eba5 050a 	sub.w	r5, r5, sl
 800e3b4:	10ad      	asrs	r5, r5, #2
 800e3b6:	6125      	str	r5, [r4, #16]
 800e3b8:	4658      	mov	r0, fp
 800e3ba:	f7fe f907 	bl	800c5cc <__hi0bits>
 800e3be:	016d      	lsls	r5, r5, #5
 800e3c0:	f8d8 6000 	ldr.w	r6, [r8]
 800e3c4:	1a2d      	subs	r5, r5, r0
 800e3c6:	42b5      	cmp	r5, r6
 800e3c8:	dd54      	ble.n	800e474 <__gethex+0x228>
 800e3ca:	1bad      	subs	r5, r5, r6
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	4620      	mov	r0, r4
 800e3d0:	f7fe fc9b 	bl	800cd0a <__any_on>
 800e3d4:	4681      	mov	r9, r0
 800e3d6:	b178      	cbz	r0, 800e3f8 <__gethex+0x1ac>
 800e3d8:	1e6b      	subs	r3, r5, #1
 800e3da:	1159      	asrs	r1, r3, #5
 800e3dc:	f003 021f 	and.w	r2, r3, #31
 800e3e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e3e4:	f04f 0901 	mov.w	r9, #1
 800e3e8:	fa09 f202 	lsl.w	r2, r9, r2
 800e3ec:	420a      	tst	r2, r1
 800e3ee:	d003      	beq.n	800e3f8 <__gethex+0x1ac>
 800e3f0:	454b      	cmp	r3, r9
 800e3f2:	dc36      	bgt.n	800e462 <__gethex+0x216>
 800e3f4:	f04f 0902 	mov.w	r9, #2
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7ff febe 	bl	800e17c <rshift>
 800e400:	442f      	add	r7, r5
 800e402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e406:	42bb      	cmp	r3, r7
 800e408:	da42      	bge.n	800e490 <__gethex+0x244>
 800e40a:	9801      	ldr	r0, [sp, #4]
 800e40c:	4621      	mov	r1, r4
 800e40e:	f7fe f82b 	bl	800c468 <_Bfree>
 800e412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e414:	2300      	movs	r3, #0
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	25a3      	movs	r5, #163	@ 0xa3
 800e41a:	e793      	b.n	800e344 <__gethex+0xf8>
 800e41c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e420:	2a2e      	cmp	r2, #46	@ 0x2e
 800e422:	d012      	beq.n	800e44a <__gethex+0x1fe>
 800e424:	2b20      	cmp	r3, #32
 800e426:	d104      	bne.n	800e432 <__gethex+0x1e6>
 800e428:	f845 bb04 	str.w	fp, [r5], #4
 800e42c:	f04f 0b00 	mov.w	fp, #0
 800e430:	465b      	mov	r3, fp
 800e432:	7830      	ldrb	r0, [r6, #0]
 800e434:	9303      	str	r3, [sp, #12]
 800e436:	f7ff fef3 	bl	800e220 <__hexdig_fun>
 800e43a:	9b03      	ldr	r3, [sp, #12]
 800e43c:	f000 000f 	and.w	r0, r0, #15
 800e440:	4098      	lsls	r0, r3
 800e442:	ea4b 0b00 	orr.w	fp, fp, r0
 800e446:	3304      	adds	r3, #4
 800e448:	e7ae      	b.n	800e3a8 <__gethex+0x15c>
 800e44a:	45b1      	cmp	r9, r6
 800e44c:	d8ea      	bhi.n	800e424 <__gethex+0x1d8>
 800e44e:	492b      	ldr	r1, [pc, #172]	@ (800e4fc <__gethex+0x2b0>)
 800e450:	9303      	str	r3, [sp, #12]
 800e452:	2201      	movs	r2, #1
 800e454:	4630      	mov	r0, r6
 800e456:	f7ff fe13 	bl	800e080 <strncmp>
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d1e1      	bne.n	800e424 <__gethex+0x1d8>
 800e460:	e7a2      	b.n	800e3a8 <__gethex+0x15c>
 800e462:	1ea9      	subs	r1, r5, #2
 800e464:	4620      	mov	r0, r4
 800e466:	f7fe fc50 	bl	800cd0a <__any_on>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d0c2      	beq.n	800e3f4 <__gethex+0x1a8>
 800e46e:	f04f 0903 	mov.w	r9, #3
 800e472:	e7c1      	b.n	800e3f8 <__gethex+0x1ac>
 800e474:	da09      	bge.n	800e48a <__gethex+0x23e>
 800e476:	1b75      	subs	r5, r6, r5
 800e478:	4621      	mov	r1, r4
 800e47a:	9801      	ldr	r0, [sp, #4]
 800e47c:	462a      	mov	r2, r5
 800e47e:	f7fe fa0b 	bl	800c898 <__lshift>
 800e482:	1b7f      	subs	r7, r7, r5
 800e484:	4604      	mov	r4, r0
 800e486:	f100 0a14 	add.w	sl, r0, #20
 800e48a:	f04f 0900 	mov.w	r9, #0
 800e48e:	e7b8      	b.n	800e402 <__gethex+0x1b6>
 800e490:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e494:	42bd      	cmp	r5, r7
 800e496:	dd6f      	ble.n	800e578 <__gethex+0x32c>
 800e498:	1bed      	subs	r5, r5, r7
 800e49a:	42ae      	cmp	r6, r5
 800e49c:	dc34      	bgt.n	800e508 <__gethex+0x2bc>
 800e49e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d022      	beq.n	800e4ec <__gethex+0x2a0>
 800e4a6:	2b03      	cmp	r3, #3
 800e4a8:	d024      	beq.n	800e4f4 <__gethex+0x2a8>
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d115      	bne.n	800e4da <__gethex+0x28e>
 800e4ae:	42ae      	cmp	r6, r5
 800e4b0:	d113      	bne.n	800e4da <__gethex+0x28e>
 800e4b2:	2e01      	cmp	r6, #1
 800e4b4:	d10b      	bne.n	800e4ce <__gethex+0x282>
 800e4b6:	9a02      	ldr	r2, [sp, #8]
 800e4b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4bc:	6013      	str	r3, [r2, #0]
 800e4be:	2301      	movs	r3, #1
 800e4c0:	6123      	str	r3, [r4, #16]
 800e4c2:	f8ca 3000 	str.w	r3, [sl]
 800e4c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4c8:	2562      	movs	r5, #98	@ 0x62
 800e4ca:	601c      	str	r4, [r3, #0]
 800e4cc:	e73a      	b.n	800e344 <__gethex+0xf8>
 800e4ce:	1e71      	subs	r1, r6, #1
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f7fe fc1a 	bl	800cd0a <__any_on>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d1ed      	bne.n	800e4b6 <__gethex+0x26a>
 800e4da:	9801      	ldr	r0, [sp, #4]
 800e4dc:	4621      	mov	r1, r4
 800e4de:	f7fd ffc3 	bl	800c468 <_Bfree>
 800e4e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	6013      	str	r3, [r2, #0]
 800e4e8:	2550      	movs	r5, #80	@ 0x50
 800e4ea:	e72b      	b.n	800e344 <__gethex+0xf8>
 800e4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1f3      	bne.n	800e4da <__gethex+0x28e>
 800e4f2:	e7e0      	b.n	800e4b6 <__gethex+0x26a>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1dd      	bne.n	800e4b6 <__gethex+0x26a>
 800e4fa:	e7ee      	b.n	800e4da <__gethex+0x28e>
 800e4fc:	0800ebc0 	.word	0x0800ebc0
 800e500:	0800ea59 	.word	0x0800ea59
 800e504:	0800ed6e 	.word	0x0800ed6e
 800e508:	1e6f      	subs	r7, r5, #1
 800e50a:	f1b9 0f00 	cmp.w	r9, #0
 800e50e:	d130      	bne.n	800e572 <__gethex+0x326>
 800e510:	b127      	cbz	r7, 800e51c <__gethex+0x2d0>
 800e512:	4639      	mov	r1, r7
 800e514:	4620      	mov	r0, r4
 800e516:	f7fe fbf8 	bl	800cd0a <__any_on>
 800e51a:	4681      	mov	r9, r0
 800e51c:	117a      	asrs	r2, r7, #5
 800e51e:	2301      	movs	r3, #1
 800e520:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e524:	f007 071f 	and.w	r7, r7, #31
 800e528:	40bb      	lsls	r3, r7
 800e52a:	4213      	tst	r3, r2
 800e52c:	4629      	mov	r1, r5
 800e52e:	4620      	mov	r0, r4
 800e530:	bf18      	it	ne
 800e532:	f049 0902 	orrne.w	r9, r9, #2
 800e536:	f7ff fe21 	bl	800e17c <rshift>
 800e53a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e53e:	1b76      	subs	r6, r6, r5
 800e540:	2502      	movs	r5, #2
 800e542:	f1b9 0f00 	cmp.w	r9, #0
 800e546:	d047      	beq.n	800e5d8 <__gethex+0x38c>
 800e548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e54c:	2b02      	cmp	r3, #2
 800e54e:	d015      	beq.n	800e57c <__gethex+0x330>
 800e550:	2b03      	cmp	r3, #3
 800e552:	d017      	beq.n	800e584 <__gethex+0x338>
 800e554:	2b01      	cmp	r3, #1
 800e556:	d109      	bne.n	800e56c <__gethex+0x320>
 800e558:	f019 0f02 	tst.w	r9, #2
 800e55c:	d006      	beq.n	800e56c <__gethex+0x320>
 800e55e:	f8da 3000 	ldr.w	r3, [sl]
 800e562:	ea49 0903 	orr.w	r9, r9, r3
 800e566:	f019 0f01 	tst.w	r9, #1
 800e56a:	d10e      	bne.n	800e58a <__gethex+0x33e>
 800e56c:	f045 0510 	orr.w	r5, r5, #16
 800e570:	e032      	b.n	800e5d8 <__gethex+0x38c>
 800e572:	f04f 0901 	mov.w	r9, #1
 800e576:	e7d1      	b.n	800e51c <__gethex+0x2d0>
 800e578:	2501      	movs	r5, #1
 800e57a:	e7e2      	b.n	800e542 <__gethex+0x2f6>
 800e57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e57e:	f1c3 0301 	rsb	r3, r3, #1
 800e582:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e586:	2b00      	cmp	r3, #0
 800e588:	d0f0      	beq.n	800e56c <__gethex+0x320>
 800e58a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e58e:	f104 0314 	add.w	r3, r4, #20
 800e592:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e596:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e59a:	f04f 0c00 	mov.w	ip, #0
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e5a8:	d01b      	beq.n	800e5e2 <__gethex+0x396>
 800e5aa:	3201      	adds	r2, #1
 800e5ac:	6002      	str	r2, [r0, #0]
 800e5ae:	2d02      	cmp	r5, #2
 800e5b0:	f104 0314 	add.w	r3, r4, #20
 800e5b4:	d13c      	bne.n	800e630 <__gethex+0x3e4>
 800e5b6:	f8d8 2000 	ldr.w	r2, [r8]
 800e5ba:	3a01      	subs	r2, #1
 800e5bc:	42b2      	cmp	r2, r6
 800e5be:	d109      	bne.n	800e5d4 <__gethex+0x388>
 800e5c0:	1171      	asrs	r1, r6, #5
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5c8:	f006 061f 	and.w	r6, r6, #31
 800e5cc:	fa02 f606 	lsl.w	r6, r2, r6
 800e5d0:	421e      	tst	r6, r3
 800e5d2:	d13a      	bne.n	800e64a <__gethex+0x3fe>
 800e5d4:	f045 0520 	orr.w	r5, r5, #32
 800e5d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5da:	601c      	str	r4, [r3, #0]
 800e5dc:	9b02      	ldr	r3, [sp, #8]
 800e5de:	601f      	str	r7, [r3, #0]
 800e5e0:	e6b0      	b.n	800e344 <__gethex+0xf8>
 800e5e2:	4299      	cmp	r1, r3
 800e5e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5e8:	d8d9      	bhi.n	800e59e <__gethex+0x352>
 800e5ea:	68a3      	ldr	r3, [r4, #8]
 800e5ec:	459b      	cmp	fp, r3
 800e5ee:	db17      	blt.n	800e620 <__gethex+0x3d4>
 800e5f0:	6861      	ldr	r1, [r4, #4]
 800e5f2:	9801      	ldr	r0, [sp, #4]
 800e5f4:	3101      	adds	r1, #1
 800e5f6:	f7fd fef7 	bl	800c3e8 <_Balloc>
 800e5fa:	4681      	mov	r9, r0
 800e5fc:	b918      	cbnz	r0, 800e606 <__gethex+0x3ba>
 800e5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800e668 <__gethex+0x41c>)
 800e600:	4602      	mov	r2, r0
 800e602:	2184      	movs	r1, #132	@ 0x84
 800e604:	e6c5      	b.n	800e392 <__gethex+0x146>
 800e606:	6922      	ldr	r2, [r4, #16]
 800e608:	3202      	adds	r2, #2
 800e60a:	f104 010c 	add.w	r1, r4, #12
 800e60e:	0092      	lsls	r2, r2, #2
 800e610:	300c      	adds	r0, #12
 800e612:	f7fc ff88 	bl	800b526 <memcpy>
 800e616:	4621      	mov	r1, r4
 800e618:	9801      	ldr	r0, [sp, #4]
 800e61a:	f7fd ff25 	bl	800c468 <_Bfree>
 800e61e:	464c      	mov	r4, r9
 800e620:	6923      	ldr	r3, [r4, #16]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e628:	6122      	str	r2, [r4, #16]
 800e62a:	2201      	movs	r2, #1
 800e62c:	615a      	str	r2, [r3, #20]
 800e62e:	e7be      	b.n	800e5ae <__gethex+0x362>
 800e630:	6922      	ldr	r2, [r4, #16]
 800e632:	455a      	cmp	r2, fp
 800e634:	dd0b      	ble.n	800e64e <__gethex+0x402>
 800e636:	2101      	movs	r1, #1
 800e638:	4620      	mov	r0, r4
 800e63a:	f7ff fd9f 	bl	800e17c <rshift>
 800e63e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e642:	3701      	adds	r7, #1
 800e644:	42bb      	cmp	r3, r7
 800e646:	f6ff aee0 	blt.w	800e40a <__gethex+0x1be>
 800e64a:	2501      	movs	r5, #1
 800e64c:	e7c2      	b.n	800e5d4 <__gethex+0x388>
 800e64e:	f016 061f 	ands.w	r6, r6, #31
 800e652:	d0fa      	beq.n	800e64a <__gethex+0x3fe>
 800e654:	4453      	add	r3, sl
 800e656:	f1c6 0620 	rsb	r6, r6, #32
 800e65a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e65e:	f7fd ffb5 	bl	800c5cc <__hi0bits>
 800e662:	42b0      	cmp	r0, r6
 800e664:	dbe7      	blt.n	800e636 <__gethex+0x3ea>
 800e666:	e7f0      	b.n	800e64a <__gethex+0x3fe>
 800e668:	0800ea59 	.word	0x0800ea59

0800e66c <L_shift>:
 800e66c:	f1c2 0208 	rsb	r2, r2, #8
 800e670:	0092      	lsls	r2, r2, #2
 800e672:	b570      	push	{r4, r5, r6, lr}
 800e674:	f1c2 0620 	rsb	r6, r2, #32
 800e678:	6843      	ldr	r3, [r0, #4]
 800e67a:	6804      	ldr	r4, [r0, #0]
 800e67c:	fa03 f506 	lsl.w	r5, r3, r6
 800e680:	432c      	orrs	r4, r5
 800e682:	40d3      	lsrs	r3, r2
 800e684:	6004      	str	r4, [r0, #0]
 800e686:	f840 3f04 	str.w	r3, [r0, #4]!
 800e68a:	4288      	cmp	r0, r1
 800e68c:	d3f4      	bcc.n	800e678 <L_shift+0xc>
 800e68e:	bd70      	pop	{r4, r5, r6, pc}

0800e690 <__match>:
 800e690:	b530      	push	{r4, r5, lr}
 800e692:	6803      	ldr	r3, [r0, #0]
 800e694:	3301      	adds	r3, #1
 800e696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e69a:	b914      	cbnz	r4, 800e6a2 <__match+0x12>
 800e69c:	6003      	str	r3, [r0, #0]
 800e69e:	2001      	movs	r0, #1
 800e6a0:	bd30      	pop	{r4, r5, pc}
 800e6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e6aa:	2d19      	cmp	r5, #25
 800e6ac:	bf98      	it	ls
 800e6ae:	3220      	addls	r2, #32
 800e6b0:	42a2      	cmp	r2, r4
 800e6b2:	d0f0      	beq.n	800e696 <__match+0x6>
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e7f3      	b.n	800e6a0 <__match+0x10>

0800e6b8 <__hexnan>:
 800e6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6bc:	680b      	ldr	r3, [r1, #0]
 800e6be:	6801      	ldr	r1, [r0, #0]
 800e6c0:	115e      	asrs	r6, r3, #5
 800e6c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6c6:	f013 031f 	ands.w	r3, r3, #31
 800e6ca:	b087      	sub	sp, #28
 800e6cc:	bf18      	it	ne
 800e6ce:	3604      	addne	r6, #4
 800e6d0:	2500      	movs	r5, #0
 800e6d2:	1f37      	subs	r7, r6, #4
 800e6d4:	4682      	mov	sl, r0
 800e6d6:	4690      	mov	r8, r2
 800e6d8:	9301      	str	r3, [sp, #4]
 800e6da:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6de:	46b9      	mov	r9, r7
 800e6e0:	463c      	mov	r4, r7
 800e6e2:	9502      	str	r5, [sp, #8]
 800e6e4:	46ab      	mov	fp, r5
 800e6e6:	784a      	ldrb	r2, [r1, #1]
 800e6e8:	1c4b      	adds	r3, r1, #1
 800e6ea:	9303      	str	r3, [sp, #12]
 800e6ec:	b342      	cbz	r2, 800e740 <__hexnan+0x88>
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	9105      	str	r1, [sp, #20]
 800e6f2:	9204      	str	r2, [sp, #16]
 800e6f4:	f7ff fd94 	bl	800e220 <__hexdig_fun>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d151      	bne.n	800e7a0 <__hexnan+0xe8>
 800e6fc:	9a04      	ldr	r2, [sp, #16]
 800e6fe:	9905      	ldr	r1, [sp, #20]
 800e700:	2a20      	cmp	r2, #32
 800e702:	d818      	bhi.n	800e736 <__hexnan+0x7e>
 800e704:	9b02      	ldr	r3, [sp, #8]
 800e706:	459b      	cmp	fp, r3
 800e708:	dd13      	ble.n	800e732 <__hexnan+0x7a>
 800e70a:	454c      	cmp	r4, r9
 800e70c:	d206      	bcs.n	800e71c <__hexnan+0x64>
 800e70e:	2d07      	cmp	r5, #7
 800e710:	dc04      	bgt.n	800e71c <__hexnan+0x64>
 800e712:	462a      	mov	r2, r5
 800e714:	4649      	mov	r1, r9
 800e716:	4620      	mov	r0, r4
 800e718:	f7ff ffa8 	bl	800e66c <L_shift>
 800e71c:	4544      	cmp	r4, r8
 800e71e:	d952      	bls.n	800e7c6 <__hexnan+0x10e>
 800e720:	2300      	movs	r3, #0
 800e722:	f1a4 0904 	sub.w	r9, r4, #4
 800e726:	f844 3c04 	str.w	r3, [r4, #-4]
 800e72a:	f8cd b008 	str.w	fp, [sp, #8]
 800e72e:	464c      	mov	r4, r9
 800e730:	461d      	mov	r5, r3
 800e732:	9903      	ldr	r1, [sp, #12]
 800e734:	e7d7      	b.n	800e6e6 <__hexnan+0x2e>
 800e736:	2a29      	cmp	r2, #41	@ 0x29
 800e738:	d157      	bne.n	800e7ea <__hexnan+0x132>
 800e73a:	3102      	adds	r1, #2
 800e73c:	f8ca 1000 	str.w	r1, [sl]
 800e740:	f1bb 0f00 	cmp.w	fp, #0
 800e744:	d051      	beq.n	800e7ea <__hexnan+0x132>
 800e746:	454c      	cmp	r4, r9
 800e748:	d206      	bcs.n	800e758 <__hexnan+0xa0>
 800e74a:	2d07      	cmp	r5, #7
 800e74c:	dc04      	bgt.n	800e758 <__hexnan+0xa0>
 800e74e:	462a      	mov	r2, r5
 800e750:	4649      	mov	r1, r9
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff ff8a 	bl	800e66c <L_shift>
 800e758:	4544      	cmp	r4, r8
 800e75a:	d936      	bls.n	800e7ca <__hexnan+0x112>
 800e75c:	f1a8 0204 	sub.w	r2, r8, #4
 800e760:	4623      	mov	r3, r4
 800e762:	f853 1b04 	ldr.w	r1, [r3], #4
 800e766:	f842 1f04 	str.w	r1, [r2, #4]!
 800e76a:	429f      	cmp	r7, r3
 800e76c:	d2f9      	bcs.n	800e762 <__hexnan+0xaa>
 800e76e:	1b3b      	subs	r3, r7, r4
 800e770:	f023 0303 	bic.w	r3, r3, #3
 800e774:	3304      	adds	r3, #4
 800e776:	3401      	adds	r4, #1
 800e778:	3e03      	subs	r6, #3
 800e77a:	42b4      	cmp	r4, r6
 800e77c:	bf88      	it	hi
 800e77e:	2304      	movhi	r3, #4
 800e780:	4443      	add	r3, r8
 800e782:	2200      	movs	r2, #0
 800e784:	f843 2b04 	str.w	r2, [r3], #4
 800e788:	429f      	cmp	r7, r3
 800e78a:	d2fb      	bcs.n	800e784 <__hexnan+0xcc>
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	b91b      	cbnz	r3, 800e798 <__hexnan+0xe0>
 800e790:	4547      	cmp	r7, r8
 800e792:	d128      	bne.n	800e7e6 <__hexnan+0x12e>
 800e794:	2301      	movs	r3, #1
 800e796:	603b      	str	r3, [r7, #0]
 800e798:	2005      	movs	r0, #5
 800e79a:	b007      	add	sp, #28
 800e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a0:	3501      	adds	r5, #1
 800e7a2:	2d08      	cmp	r5, #8
 800e7a4:	f10b 0b01 	add.w	fp, fp, #1
 800e7a8:	dd06      	ble.n	800e7b8 <__hexnan+0x100>
 800e7aa:	4544      	cmp	r4, r8
 800e7ac:	d9c1      	bls.n	800e732 <__hexnan+0x7a>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7b4:	2501      	movs	r5, #1
 800e7b6:	3c04      	subs	r4, #4
 800e7b8:	6822      	ldr	r2, [r4, #0]
 800e7ba:	f000 000f 	and.w	r0, r0, #15
 800e7be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e7c2:	6020      	str	r0, [r4, #0]
 800e7c4:	e7b5      	b.n	800e732 <__hexnan+0x7a>
 800e7c6:	2508      	movs	r5, #8
 800e7c8:	e7b3      	b.n	800e732 <__hexnan+0x7a>
 800e7ca:	9b01      	ldr	r3, [sp, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d0dd      	beq.n	800e78c <__hexnan+0xd4>
 800e7d0:	f1c3 0320 	rsb	r3, r3, #32
 800e7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d8:	40da      	lsrs	r2, r3
 800e7da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e7de:	4013      	ands	r3, r2
 800e7e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e7e4:	e7d2      	b.n	800e78c <__hexnan+0xd4>
 800e7e6:	3f04      	subs	r7, #4
 800e7e8:	e7d0      	b.n	800e78c <__hexnan+0xd4>
 800e7ea:	2004      	movs	r0, #4
 800e7ec:	e7d5      	b.n	800e79a <__hexnan+0xe2>

0800e7ee <__ascii_mbtowc>:
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	b901      	cbnz	r1, 800e7f4 <__ascii_mbtowc+0x6>
 800e7f2:	a901      	add	r1, sp, #4
 800e7f4:	b142      	cbz	r2, 800e808 <__ascii_mbtowc+0x1a>
 800e7f6:	b14b      	cbz	r3, 800e80c <__ascii_mbtowc+0x1e>
 800e7f8:	7813      	ldrb	r3, [r2, #0]
 800e7fa:	600b      	str	r3, [r1, #0]
 800e7fc:	7812      	ldrb	r2, [r2, #0]
 800e7fe:	1e10      	subs	r0, r2, #0
 800e800:	bf18      	it	ne
 800e802:	2001      	movne	r0, #1
 800e804:	b002      	add	sp, #8
 800e806:	4770      	bx	lr
 800e808:	4610      	mov	r0, r2
 800e80a:	e7fb      	b.n	800e804 <__ascii_mbtowc+0x16>
 800e80c:	f06f 0001 	mvn.w	r0, #1
 800e810:	e7f8      	b.n	800e804 <__ascii_mbtowc+0x16>

0800e812 <_realloc_r>:
 800e812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e816:	4680      	mov	r8, r0
 800e818:	4615      	mov	r5, r2
 800e81a:	460c      	mov	r4, r1
 800e81c:	b921      	cbnz	r1, 800e828 <_realloc_r+0x16>
 800e81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e822:	4611      	mov	r1, r2
 800e824:	f7fd bd54 	b.w	800c2d0 <_malloc_r>
 800e828:	b92a      	cbnz	r2, 800e836 <_realloc_r+0x24>
 800e82a:	f7fd fcdd 	bl	800c1e8 <_free_r>
 800e82e:	2400      	movs	r4, #0
 800e830:	4620      	mov	r0, r4
 800e832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e836:	f000 f840 	bl	800e8ba <_malloc_usable_size_r>
 800e83a:	4285      	cmp	r5, r0
 800e83c:	4606      	mov	r6, r0
 800e83e:	d802      	bhi.n	800e846 <_realloc_r+0x34>
 800e840:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e844:	d8f4      	bhi.n	800e830 <_realloc_r+0x1e>
 800e846:	4629      	mov	r1, r5
 800e848:	4640      	mov	r0, r8
 800e84a:	f7fd fd41 	bl	800c2d0 <_malloc_r>
 800e84e:	4607      	mov	r7, r0
 800e850:	2800      	cmp	r0, #0
 800e852:	d0ec      	beq.n	800e82e <_realloc_r+0x1c>
 800e854:	42b5      	cmp	r5, r6
 800e856:	462a      	mov	r2, r5
 800e858:	4621      	mov	r1, r4
 800e85a:	bf28      	it	cs
 800e85c:	4632      	movcs	r2, r6
 800e85e:	f7fc fe62 	bl	800b526 <memcpy>
 800e862:	4621      	mov	r1, r4
 800e864:	4640      	mov	r0, r8
 800e866:	f7fd fcbf 	bl	800c1e8 <_free_r>
 800e86a:	463c      	mov	r4, r7
 800e86c:	e7e0      	b.n	800e830 <_realloc_r+0x1e>

0800e86e <__ascii_wctomb>:
 800e86e:	4603      	mov	r3, r0
 800e870:	4608      	mov	r0, r1
 800e872:	b141      	cbz	r1, 800e886 <__ascii_wctomb+0x18>
 800e874:	2aff      	cmp	r2, #255	@ 0xff
 800e876:	d904      	bls.n	800e882 <__ascii_wctomb+0x14>
 800e878:	228a      	movs	r2, #138	@ 0x8a
 800e87a:	601a      	str	r2, [r3, #0]
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	4770      	bx	lr
 800e882:	700a      	strb	r2, [r1, #0]
 800e884:	2001      	movs	r0, #1
 800e886:	4770      	bx	lr

0800e888 <fiprintf>:
 800e888:	b40e      	push	{r1, r2, r3}
 800e88a:	b503      	push	{r0, r1, lr}
 800e88c:	4601      	mov	r1, r0
 800e88e:	ab03      	add	r3, sp, #12
 800e890:	4805      	ldr	r0, [pc, #20]	@ (800e8a8 <fiprintf+0x20>)
 800e892:	f853 2b04 	ldr.w	r2, [r3], #4
 800e896:	6800      	ldr	r0, [r0, #0]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	f7ff fa5d 	bl	800dd58 <_vfiprintf_r>
 800e89e:	b002      	add	sp, #8
 800e8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8a4:	b003      	add	sp, #12
 800e8a6:	4770      	bx	lr
 800e8a8:	200002d8 	.word	0x200002d8

0800e8ac <abort>:
 800e8ac:	b508      	push	{r3, lr}
 800e8ae:	2006      	movs	r0, #6
 800e8b0:	f000 f834 	bl	800e91c <raise>
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	f7f3 fac9 	bl	8001e4c <_exit>

0800e8ba <_malloc_usable_size_r>:
 800e8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8be:	1f18      	subs	r0, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	bfbc      	itt	lt
 800e8c4:	580b      	ldrlt	r3, [r1, r0]
 800e8c6:	18c0      	addlt	r0, r0, r3
 800e8c8:	4770      	bx	lr

0800e8ca <_raise_r>:
 800e8ca:	291f      	cmp	r1, #31
 800e8cc:	b538      	push	{r3, r4, r5, lr}
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	460c      	mov	r4, r1
 800e8d2:	d904      	bls.n	800e8de <_raise_r+0x14>
 800e8d4:	2316      	movs	r3, #22
 800e8d6:	6003      	str	r3, [r0, #0]
 800e8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8dc:	bd38      	pop	{r3, r4, r5, pc}
 800e8de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e8e0:	b112      	cbz	r2, 800e8e8 <_raise_r+0x1e>
 800e8e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8e6:	b94b      	cbnz	r3, 800e8fc <_raise_r+0x32>
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	f000 f831 	bl	800e950 <_getpid_r>
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8f8:	f000 b818 	b.w	800e92c <_kill_r>
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d00a      	beq.n	800e916 <_raise_r+0x4c>
 800e900:	1c59      	adds	r1, r3, #1
 800e902:	d103      	bne.n	800e90c <_raise_r+0x42>
 800e904:	2316      	movs	r3, #22
 800e906:	6003      	str	r3, [r0, #0]
 800e908:	2001      	movs	r0, #1
 800e90a:	e7e7      	b.n	800e8dc <_raise_r+0x12>
 800e90c:	2100      	movs	r1, #0
 800e90e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e912:	4620      	mov	r0, r4
 800e914:	4798      	blx	r3
 800e916:	2000      	movs	r0, #0
 800e918:	e7e0      	b.n	800e8dc <_raise_r+0x12>
	...

0800e91c <raise>:
 800e91c:	4b02      	ldr	r3, [pc, #8]	@ (800e928 <raise+0xc>)
 800e91e:	4601      	mov	r1, r0
 800e920:	6818      	ldr	r0, [r3, #0]
 800e922:	f7ff bfd2 	b.w	800e8ca <_raise_r>
 800e926:	bf00      	nop
 800e928:	200002d8 	.word	0x200002d8

0800e92c <_kill_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	4d07      	ldr	r5, [pc, #28]	@ (800e94c <_kill_r+0x20>)
 800e930:	2300      	movs	r3, #0
 800e932:	4604      	mov	r4, r0
 800e934:	4608      	mov	r0, r1
 800e936:	4611      	mov	r1, r2
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	f7f3 fa77 	bl	8001e2c <_kill>
 800e93e:	1c43      	adds	r3, r0, #1
 800e940:	d102      	bne.n	800e948 <_kill_r+0x1c>
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	b103      	cbz	r3, 800e948 <_kill_r+0x1c>
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	bd38      	pop	{r3, r4, r5, pc}
 800e94a:	bf00      	nop
 800e94c:	20001158 	.word	0x20001158

0800e950 <_getpid_r>:
 800e950:	f7f3 ba64 	b.w	8001e1c <_getpid>

0800e954 <_init>:
 800e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e956:	bf00      	nop
 800e958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e95a:	bc08      	pop	{r3}
 800e95c:	469e      	mov	lr, r3
 800e95e:	4770      	bx	lr

0800e960 <_fini>:
 800e960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e962:	bf00      	nop
 800e964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e966:	bc08      	pop	{r3}
 800e968:	469e      	mov	lr, r3
 800e96a:	4770      	bx	lr
